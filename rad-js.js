/* START MicrosoftAjax.js */
//----------------------------------------------------------
// Copyright (C) Microsoft Corporation. All rights reserved.
//----------------------------------------------------------
// MicrosoftAjax.js
Function.__typeName = "Function";
Function.__class = true;
Function.createCallback = function (b, a) {
  return function () {
    var e = arguments.length;
    if (e > 0) {
      var d = [];
      for (var c = 0; c < e; c++) d[c] = arguments[c];
      d[e] = a;
      return b.apply(this, d);
    }
    return b.call(this, a);
  };
};
Function.createDelegate = function (a, b) {
  return function () {
    return b.apply(a, arguments);
  };
};
Function.emptyFunction = Function.emptyMethod = function () {};
Function.validateParameters = function (c, b, a) {
  return Function._validateParams(c, b, a);
};
Function._validateParams = function (g, e, c) {
  var a,
    d = e.length;
  c = c || typeof c === "undefined";
  a = Function._validateParameterCount(g, e, c);
  if (a) {
    a.popStackFrame();
    return a;
  }
  for (var b = 0, i = g.length; b < i; b++) {
    var f = e[Math.min(b, d - 1)],
      h = f.name;
    if (f.parameterArray) h += "[" + (b - d + 1) + "]";
    else if (!c && b >= d) break;
    a = Function._validateParameter(g[b], f, h);
    if (a) {
      a.popStackFrame();
      return a;
    }
  }
  return null;
};
Function._validateParameterCount = function (j, d, i) {
  var a,
    c,
    b = d.length,
    e = j.length;
  if (e < b) {
    var f = b;
    for (a = 0; a < b; a++) {
      var g = d[a];
      if (g.optional || g.parameterArray) f--;
    }
    if (e < f) c = true;
  } else if (i && e > b) {
    c = true;
    for (a = 0; a < b; a++)
      if (d[a].parameterArray) {
        c = false;
        break;
      }
  }
  if (c) {
    var h = Error.parameterCount();
    h.popStackFrame();
    return h;
  }
  return null;
};
Function._validateParameter = function (c, a, h) {
  var b,
    g = a.type,
    l = !!a.integer,
    k = !!a.domElement,
    m = !!a.mayBeNull;
  b = Function._validateParameterType(c, g, l, k, m, h);
  if (b) {
    b.popStackFrame();
    return b;
  }
  var e = a.elementType,
    f = !!a.elementMayBeNull;
  if (g === Array && typeof c !== "undefined" && c !== null && (e || !f)) {
    var j = !!a.elementInteger,
      i = !!a.elementDomElement;
    for (var d = 0; d < c.length; d++) {
      var n = c[d];
      b = Function._validateParameterType(n, e, j, i, f, h + "[" + d + "]");
      if (b) {
        b.popStackFrame();
        return b;
      }
    }
  }
  return null;
};
Function._validateParameterType = function (b, c, k, j, h, d) {
  var a, g;
  if (typeof b === "undefined")
    if (h) return null;
    else {
      a = Error.argumentUndefined(d);
      a.popStackFrame();
      return a;
    }
  if (b === null)
    if (h) return null;
    else {
      a = Error.argumentNull(d);
      a.popStackFrame();
      return a;
    }
  if (c && c.__enum) {
    if (typeof b !== "number") {
      a = Error.argumentType(d, Object.getType(b), c);
      a.popStackFrame();
      return a;
    }
    if (b % 1 === 0) {
      var e = c.prototype;
      if (!c.__flags || b === 0) {
        for (g in e) if (e[g] === b) return null;
      } else {
        var i = b;
        for (g in e) {
          var f = e[g];
          if (f === 0) continue;
          if ((f & b) === f) i -= f;
          if (i === 0) return null;
        }
      }
    }
    a = Error.argumentOutOfRange(
      d,
      b,
      String.format(Sys.Res.enumInvalidValue, b, c.getName())
    );
    a.popStackFrame();
    return a;
  }
  if (j && (!Sys._isDomElement(b) || b.nodeType === 3)) {
    a = Error.argument(d, Sys.Res.argumentDomElement);
    a.popStackFrame();
    return a;
  }
  if (c && !Sys._isInstanceOfType(c, b)) {
    a = Error.argumentType(d, Object.getType(b), c);
    a.popStackFrame();
    return a;
  }
  if (c === Number && k)
    if (b % 1 !== 0) {
      a = Error.argumentOutOfRange(d, b, Sys.Res.argumentInteger);
      a.popStackFrame();
      return a;
    }
  return null;
};
Error.__typeName = "Error";
Error.__class = true;
Error.create = function (d, b) {
  var a = new Error(d);
  a.message = d;
  if (b) for (var c in b) a[c] = b[c];
  a.popStackFrame();
  return a;
};
Error.argument = function (a, c) {
  var b = "Sys.ArgumentException: " + (c ? c : Sys.Res.argument);
  if (a) b += "\n" + String.format(Sys.Res.paramName, a);
  var d = Error.create(b, { name: "Sys.ArgumentException", paramName: a });
  d.popStackFrame();
  return d;
};
Error.argumentNull = function (a, c) {
  var b = "Sys.ArgumentNullException: " + (c ? c : Sys.Res.argumentNull);
  if (a) b += "\n" + String.format(Sys.Res.paramName, a);
  var d = Error.create(b, { name: "Sys.ArgumentNullException", paramName: a });
  d.popStackFrame();
  return d;
};
Error.argumentOutOfRange = function (c, a, d) {
  var b =
    "Sys.ArgumentOutOfRangeException: " + (d ? d : Sys.Res.argumentOutOfRange);
  if (c) b += "\n" + String.format(Sys.Res.paramName, c);
  if (typeof a !== "undefined" && a !== null)
    b += "\n" + String.format(Sys.Res.actualValue, a);
  var e = Error.create(b, {
    name: "Sys.ArgumentOutOfRangeException",
    paramName: c,
    actualValue: a,
  });
  e.popStackFrame();
  return e;
};
Error.argumentType = function (d, c, b, e) {
  var a = "Sys.ArgumentTypeException: ";
  if (e) a += e;
  else if (c && b)
    a += String.format(Sys.Res.argumentTypeWithTypes, c.getName(), b.getName());
  else a += Sys.Res.argumentType;
  if (d) a += "\n" + String.format(Sys.Res.paramName, d);
  var f = Error.create(a, {
    name: "Sys.ArgumentTypeException",
    paramName: d,
    actualType: c,
    expectedType: b,
  });
  f.popStackFrame();
  return f;
};
Error.argumentUndefined = function (a, c) {
  var b =
    "Sys.ArgumentUndefinedException: " + (c ? c : Sys.Res.argumentUndefined);
  if (a) b += "\n" + String.format(Sys.Res.paramName, a);
  var d = Error.create(b, {
    name: "Sys.ArgumentUndefinedException",
    paramName: a,
  });
  d.popStackFrame();
  return d;
};
Error.format = function (a) {
  var c = "Sys.FormatException: " + (a ? a : Sys.Res.format),
    b = Error.create(c, { name: "Sys.FormatException" });
  b.popStackFrame();
  return b;
};
Error.invalidOperation = function (a) {
  var c =
      "Sys.InvalidOperationException: " + (a ? a : Sys.Res.invalidOperation),
    b = Error.create(c, { name: "Sys.InvalidOperationException" });
  b.popStackFrame();
  return b;
};
Error.notImplemented = function (a) {
  var c = "Sys.NotImplementedException: " + (a ? a : Sys.Res.notImplemented),
    b = Error.create(c, { name: "Sys.NotImplementedException" });
  b.popStackFrame();
  return b;
};
Error.parameterCount = function (a) {
  var c = "Sys.ParameterCountException: " + (a ? a : Sys.Res.parameterCount),
    b = Error.create(c, { name: "Sys.ParameterCountException" });
  b.popStackFrame();
  return b;
};
Error.prototype.popStackFrame = function () {
  if (
    typeof this.stack === "undefined" ||
    this.stack === null ||
    typeof this.fileName === "undefined" ||
    this.fileName === null ||
    typeof this.lineNumber === "undefined" ||
    this.lineNumber === null
  )
    return;
  var a = this.stack.split("\n"),
    c = a[0],
    e = this.fileName + ":" + this.lineNumber;
  while (typeof c !== "undefined" && c !== null && c.indexOf(e) === -1) {
    a.shift();
    c = a[0];
  }
  var d = a[1];
  if (typeof d === "undefined" || d === null) return;
  var b = d.match(/@(.*):(\d+)$/);
  if (typeof b === "undefined" || b === null) return;
  this.fileName = b[1];
  this.lineNumber = parseInt(b[2]);
  a.shift();
  this.stack = a.join("\n");
};
Object.__typeName = "Object";
Object.__class = true;
Object.getType = function (b) {
  var a = b.constructor;
  if (
    !a ||
    typeof a !== "function" ||
    !a.__typeName ||
    a.__typeName === "Object"
  )
    return Object;
  return a;
};
Object.getTypeName = function (a) {
  return Object.getType(a).getName();
};
String.__typeName = "String";
String.__class = true;
String.prototype.endsWith = function (a) {
  return this.substr(this.length - a.length) === a;
};
String.prototype.startsWith = function (a) {
  return this.substr(0, a.length) === a;
};
String.prototype.trim = function () {
  return this.replace(/^\s+|\s+$/g, "");
};
String.prototype.trimEnd = function () {
  return this.replace(/\s+$/, "");
};
String.prototype.trimStart = function () {
  return this.replace(/^\s+/, "");
};
String.format = function () {
  return String._toFormattedString(false, arguments);
};
String._toFormattedString = function (l, j) {
  var c = "",
    e = j[0];
  for (var a = 0; true; ) {
    var f = e.indexOf("{", a),
      d = e.indexOf("}", a);
    if (f < 0 && d < 0) {
      c += e.slice(a);
      break;
    }
    if (d > 0 && (d < f || f < 0)) {
      c += e.slice(a, d + 1);
      a = d + 2;
      continue;
    }
    c += e.slice(a, f);
    a = f + 1;
    if (e.charAt(a) === "{") {
      c += "{";
      a++;
      continue;
    }
    if (d < 0) break;
    var h = e.substring(a, d),
      g = h.indexOf(":"),
      k = parseInt(g < 0 ? h : h.substring(0, g), 10) + 1,
      i = g < 0 ? "" : h.substring(g + 1),
      b = j[k];
    if (typeof b === "undefined" || b === null) b = "";
    if (b.toFormattedString) c += b.toFormattedString(i);
    else if (l && b.localeFormat) c += b.localeFormat(i);
    else if (b.format) c += b.format(i);
    else c += b.toString();
    a = d + 1;
  }
  return c;
};
Boolean.__typeName = "Boolean";
Boolean.__class = true;
Boolean.parse = function (b) {
  var a = b.trim().toLowerCase();
  if (a === "false") return false;
  if (a === "true") return true;
};
Date.__typeName = "Date";
Date.__class = true;
Number.__typeName = "Number";
Number.__class = true;
RegExp.__typeName = "RegExp";
RegExp.__class = true;
if (!window) this.window = this;
window.Type = Function;
Type.prototype.callBaseMethod = function (a, d, b) {
  var c = Sys._getBaseMethod(this, a, d);
  if (!b) return c.apply(a);
  else return c.apply(a, b);
};
Type.prototype.getBaseMethod = function (a, b) {
  return Sys._getBaseMethod(this, a, b);
};
Type.prototype.getBaseType = function () {
  return typeof this.__baseType === "undefined" ? null : this.__baseType;
};
Type.prototype.getInterfaces = function () {
  var a = [],
    b = this;
  while (b) {
    var c = b.__interfaces;
    if (c)
      for (var d = 0, f = c.length; d < f; d++) {
        var e = c[d];
        if (!Array.contains(a, e)) a[a.length] = e;
      }
    b = b.__baseType;
  }
  return a;
};
Type.prototype.getName = function () {
  return typeof this.__typeName === "undefined" ? "" : this.__typeName;
};
Type.prototype.implementsInterface = function (d) {
  this.resolveInheritance();
  var c = d.getName(),
    a = this.__interfaceCache;
  if (a) {
    var e = a[c];
    if (typeof e !== "undefined") return e;
  } else a = this.__interfaceCache = {};
  var b = this;
  while (b) {
    var f = b.__interfaces;
    if (f) if (Array.indexOf(f, d) !== -1) return (a[c] = true);
    b = b.__baseType;
  }
  return (a[c] = false);
};
Type.prototype.inheritsFrom = function (b) {
  this.resolveInheritance();
  var a = this.__baseType;
  while (a) {
    if (a === b) return true;
    a = a.__baseType;
  }
  return false;
};
Type.prototype.initializeBase = function (a, b) {
  this.resolveInheritance();
  if (this.__baseType)
    if (!b) this.__baseType.apply(a);
    else this.__baseType.apply(a, b);
  return a;
};
Type.prototype.isImplementedBy = function (a) {
  if (typeof a === "undefined" || a === null) return false;
  var b = Object.getType(a);
  return !!(b.implementsInterface && b.implementsInterface(this));
};
Type.prototype.isInstanceOfType = function (a) {
  return Sys._isInstanceOfType(this, a);
};
Type.prototype.registerClass = function (c, b, d) {
  this.prototype.constructor = this;
  this.__typeName = c;
  this.__class = true;
  if (b) {
    this.__baseType = b;
    this.__basePrototypePending = true;
  }
  Sys.__upperCaseTypes[c.toUpperCase()] = this;
  if (d) {
    this.__interfaces = [];
    for (var a = 2, f = arguments.length; a < f; a++) {
      var e = arguments[a];
      this.__interfaces.push(e);
    }
  }
  return this;
};
Type.prototype.registerInterface = function (a) {
  Sys.__upperCaseTypes[a.toUpperCase()] = this;
  this.prototype.constructor = this;
  this.__typeName = a;
  this.__interface = true;
  return this;
};
Type.prototype.resolveInheritance = function () {
  if (this.__basePrototypePending) {
    var b = this.__baseType;
    b.resolveInheritance();
    for (var a in b.prototype) {
      var c = b.prototype[a];
      if (!this.prototype[a]) this.prototype[a] = c;
    }
    delete this.__basePrototypePending;
  }
};
Type.getRootNamespaces = function () {
  return Array.clone(Sys.__rootNamespaces);
};
Type.isClass = function (a) {
  if (typeof a === "undefined" || a === null) return false;
  return !!a.__class;
};
Type.isInterface = function (a) {
  if (typeof a === "undefined" || a === null) return false;
  return !!a.__interface;
};
Type.isNamespace = function (a) {
  if (typeof a === "undefined" || a === null) return false;
  return !!a.__namespace;
};
Type.parse = function (typeName, ns) {
  var fn;
  if (ns) {
    fn =
      Sys.__upperCaseTypes[
        ns.getName().toUpperCase() + "." + typeName.toUpperCase()
      ];
    return fn || null;
  }
  if (!typeName) return null;
  if (!Type.__htClasses) Type.__htClasses = {};
  fn = Type.__htClasses[typeName];
  if (!fn) {
    fn = eval(typeName);
    Type.__htClasses[typeName] = fn;
  }
  return fn;
};
Type.registerNamespace = function (e) {
  var d = window,
    c = e.split(".");
  for (var b = 0; b < c.length; b++) {
    var f = c[b],
      a = d[f];
    if (!a) a = d[f] = {};
    if (!a.__namespace) {
      if (b === 0 && e !== "Sys")
        Sys.__rootNamespaces[Sys.__rootNamespaces.length] = a;
      a.__namespace = true;
      a.__typeName = c.slice(0, b + 1).join(".");
      a.getName = function () {
        return this.__typeName;
      };
    }
    d = a;
  }
};
Type._checkDependency = function (c, a) {
  var d = Type._registerScript._scripts,
    b = d ? !!d[c] : false;
  if (typeof a !== "undefined" && !b)
    throw Error.invalidOperation(
      String.format(Sys.Res.requiredScriptReferenceNotIncluded, a, c)
    );
  return b;
};
Type._registerScript = function (a, c) {
  var b = Type._registerScript._scripts;
  if (!b) Type._registerScript._scripts = b = {};
  if (b[a])
    throw Error.invalidOperation(String.format(Sys.Res.scriptAlreadyLoaded, a));
  b[a] = true;
  if (c)
    for (var d = 0, f = c.length; d < f; d++) {
      var e = c[d];
      if (!Type._checkDependency(e))
        throw Error.invalidOperation(
          String.format(Sys.Res.scriptDependencyNotFound, a, e)
        );
    }
};
Type.registerNamespace("Sys");
Sys.__upperCaseTypes = {};
Sys.__rootNamespaces = [Sys];
Sys._isInstanceOfType = function (c, b) {
  if (typeof b === "undefined" || b === null) return false;
  if (b instanceof c) return true;
  var a = Object.getType(b);
  return (
    !!(a === c) ||
    (a.inheritsFrom && a.inheritsFrom(c)) ||
    (a.implementsInterface && a.implementsInterface(c))
  );
};
Sys._getBaseMethod = function (d, e, c) {
  var b = d.getBaseType();
  if (b) {
    var a = b.prototype[c];
    return a instanceof Function ? a : null;
  }
  return null;
};
Sys._isDomElement = function (a) {
  var c = false;
  if (typeof a.nodeType !== "number") {
    var b = a.ownerDocument || a.document || a;
    if (b != a) {
      var d = b.defaultView || b.parentWindow;
      c = d != a;
    } else c = typeof b.body === "undefined";
  }
  return !c;
};
Array.__typeName = "Array";
Array.__class = true;
Array.add = Array.enqueue = function (a, b) {
  a[a.length] = b;
};
Array.addRange = function (a, b) {
  a.push.apply(a, b);
};
Array.clear = function (a) {
  a.length = 0;
};
Array.clone = function (a) {
  if (a.length === 1) return [a[0]];
  else return Array.apply(null, a);
};
Array.contains = function (a, b) {
  return Sys._indexOf(a, b) >= 0;
};
Array.dequeue = function (a) {
  return a.shift();
};
Array.forEach = function (b, e, d) {
  for (var a = 0, f = b.length; a < f; a++) {
    var c = b[a];
    if (typeof c !== "undefined") e.call(d, c, a, b);
  }
};
Array.indexOf = function (a, c, b) {
  return Sys._indexOf(a, c, b);
};
Array.insert = function (a, b, c) {
  a.splice(b, 0, c);
};
Array.parse = function (value) {
  if (!value) return [];
  return eval(value);
};
Array.remove = function (b, c) {
  var a = Sys._indexOf(b, c);
  if (a >= 0) b.splice(a, 1);
  return a >= 0;
};
Array.removeAt = function (a, b) {
  a.splice(b, 1);
};
Sys._indexOf = function (d, e, a) {
  if (typeof e === "undefined") return -1;
  var c = d.length;
  if (c !== 0) {
    a = a - 0;
    if (isNaN(a)) a = 0;
    else {
      if (isFinite(a)) a = a - (a % 1);
      if (a < 0) a = Math.max(0, c + a);
    }
    for (var b = a; b < c; b++)
      if (typeof d[b] !== "undefined" && d[b] === e) return b;
  }
  return -1;
};
Type._registerScript._scripts = {
  "MicrosoftAjaxCore.js": true,
  "MicrosoftAjaxGlobalization.js": true,
  "MicrosoftAjaxSerialization.js": true,
  "MicrosoftAjaxComponentModel.js": true,
  "MicrosoftAjaxHistory.js": true,
  "MicrosoftAjaxNetwork.js": true,
  "MicrosoftAjaxWebServices.js": true,
};
Sys.IDisposable = function () {};
Sys.IDisposable.prototype = {};
Sys.IDisposable.registerInterface("Sys.IDisposable");
Sys.StringBuilder = function (a) {
  this._parts =
    typeof a !== "undefined" && a !== null && a !== "" ? [a.toString()] : [];
  this._value = {};
  this._len = 0;
};
Sys.StringBuilder.prototype = {
  append: function (a) {
    this._parts[this._parts.length] = a;
  },
  appendLine: function (a) {
    this._parts[this._parts.length] =
      typeof a === "undefined" || a === null || a === "" ? "\r\n" : a + "\r\n";
  },
  clear: function () {
    this._parts = [];
    this._value = {};
    this._len = 0;
  },
  isEmpty: function () {
    if (this._parts.length === 0) return true;
    return this.toString() === "";
  },
  toString: function (a) {
    a = a || "";
    var b = this._parts;
    if (this._len !== b.length) {
      this._value = {};
      this._len = b.length;
    }
    var d = this._value;
    if (typeof d[a] === "undefined") {
      if (a !== "")
        for (var c = 0; c < b.length; )
          if (typeof b[c] === "undefined" || b[c] === "" || b[c] === null)
            b.splice(c, 1);
          else c++;
      d[a] = this._parts.join(a);
    }
    return d[a];
  },
};
Sys.StringBuilder.registerClass("Sys.StringBuilder");
Sys.Browser = {};
Sys.Browser.InternetExplorer = {};
Sys.Browser.Firefox = {};
Sys.Browser.Safari = {};
Sys.Browser.Opera = {};
Sys.Browser.agent = null;
Sys.Browser.hasDebuggerStatement = false;
Sys.Browser.name = navigator.appName;
Sys.Browser.version = parseFloat(navigator.appVersion);
Sys.Browser.documentMode = 0;
if (navigator.userAgent.indexOf(" MSIE ") > -1) {
  Sys.Browser.agent = Sys.Browser.InternetExplorer;
  Sys.Browser.version = parseFloat(
    navigator.userAgent.match(/MSIE (\d+\.\d+)/)[1]
  );
  if (Sys.Browser.version >= 8)
    if (document.documentMode >= 7)
      Sys.Browser.documentMode = document.documentMode;
  Sys.Browser.hasDebuggerStatement = true;
} else if (navigator.userAgent.indexOf(" Firefox/") > -1) {
  Sys.Browser.agent = Sys.Browser.Firefox;
  Sys.Browser.version = parseFloat(
    navigator.userAgent.match(/Firefox\/(\d+\.\d+)/)[1]
  );
  Sys.Browser.name = "Firefox";
  Sys.Browser.hasDebuggerStatement = true;
} else if (navigator.userAgent.indexOf(" AppleWebKit/") > -1) {
  Sys.Browser.agent = Sys.Browser.Safari;
  Sys.Browser.version = parseFloat(
    navigator.userAgent.match(/AppleWebKit\/(\d+(\.\d+)?)/)[1]
  );
  Sys.Browser.name = "Safari";
} else if (navigator.userAgent.indexOf("Opera/") > -1)
  Sys.Browser.agent = Sys.Browser.Opera;
Sys.EventArgs = function () {};
Sys.EventArgs.registerClass("Sys.EventArgs");
Sys.EventArgs.Empty = new Sys.EventArgs();
Sys.CancelEventArgs = function () {
  Sys.CancelEventArgs.initializeBase(this);
  this._cancel = false;
};
Sys.CancelEventArgs.prototype = {
  get_cancel: function () {
    return this._cancel;
  },
  set_cancel: function (a) {
    this._cancel = a;
  },
};
Sys.CancelEventArgs.registerClass("Sys.CancelEventArgs", Sys.EventArgs);
Type.registerNamespace("Sys.UI");
Sys._Debug = function () {};
Sys._Debug.prototype = {
  _appendConsole: function (a) {
    if (typeof Debug !== "undefined" && Debug.writeln) Debug.writeln(a);
    if (window.console && window.console.log) window.console.log(a);
    if (window.opera) window.opera.postError(a);
    if (window.debugService) window.debugService.trace(a);
  },
  _appendTrace: function (b) {
    var a = document.getElementById("TraceConsole");
    if (a && a.tagName.toUpperCase() === "TEXTAREA") a.value += b + "\n";
  },
  assert: function (c, a, b) {
    if (!c) {
      a =
        b && this.assert.caller
          ? String.format(Sys.Res.assertFailedCaller, a, this.assert.caller)
          : String.format(Sys.Res.assertFailed, a);
      if (confirm(String.format(Sys.Res.breakIntoDebugger, a))) this.fail(a);
    }
  },
  clearTrace: function () {
    var a = document.getElementById("TraceConsole");
    if (a && a.tagName.toUpperCase() === "TEXTAREA") a.value = "";
  },
  fail: function (message) {
    this._appendConsole(message);
    if (Sys.Browser.hasDebuggerStatement) eval("debugger");
  },
  trace: function (a) {
    this._appendConsole(a);
    this._appendTrace(a);
  },
  traceDump: function (a, b) {
    var c = this._traceDump(a, b, true);
  },
  _traceDump: function (a, c, f, b, d) {
    c = c ? c : "traceDump";
    b = b ? b : "";
    if (a === null) {
      this.trace(b + c + ": null");
      return;
    }
    switch (typeof a) {
      case "undefined":
        this.trace(b + c + ": Undefined");
        break;
      case "number":
      case "string":
      case "boolean":
        this.trace(b + c + ": " + a);
        break;
      default:
        if (Date.isInstanceOfType(a) || RegExp.isInstanceOfType(a)) {
          this.trace(b + c + ": " + a.toString());
          break;
        }
        if (!d) d = [];
        else if (Array.contains(d, a)) {
          this.trace(b + c + ": ...");
          return;
        }
        Array.add(d, a);
        if (
          a == window ||
          a === document ||
          (window.HTMLElement && a instanceof HTMLElement) ||
          typeof a.nodeName === "string"
        ) {
          var k = a.tagName ? a.tagName : "DomElement";
          if (a.id) k += " - " + a.id;
          this.trace(b + c + " {" + k + "}");
        } else {
          var i = Object.getTypeName(a);
          this.trace(b + c + (typeof i === "string" ? " {" + i + "}" : ""));
          if (b === "" || f) {
            b += "    ";
            var e, j, l, g, h;
            if (Array.isInstanceOfType(a)) {
              j = a.length;
              for (e = 0; e < j; e++)
                this._traceDump(a[e], "[" + e + "]", f, b, d);
            } else
              for (g in a) {
                h = a[g];
                if (!Function.isInstanceOfType(h))
                  this._traceDump(h, g, f, b, d);
              }
          }
        }
        Array.remove(d, a);
    }
  },
};
Sys._Debug.registerClass("Sys._Debug");
Sys.Debug = new Sys._Debug();
Sys.Debug.isDebug = false;
function Sys$Enum$parse(c, e) {
  var a, b, i;
  if (e) {
    a = this.__lowerCaseValues;
    if (!a) {
      this.__lowerCaseValues = a = {};
      var g = this.prototype;
      for (var f in g) a[f.toLowerCase()] = g[f];
    }
  } else a = this.prototype;
  if (!this.__flags) {
    i = e ? c.toLowerCase() : c;
    b = a[i.trim()];
    if (typeof b !== "number")
      throw Error.argument(
        "value",
        String.format(Sys.Res.enumInvalidValue, c, this.__typeName)
      );
    return b;
  } else {
    var h = (e ? c.toLowerCase() : c).split(","),
      j = 0;
    for (var d = h.length - 1; d >= 0; d--) {
      var k = h[d].trim();
      b = a[k];
      if (typeof b !== "number")
        throw Error.argument(
          "value",
          String.format(
            Sys.Res.enumInvalidValue,
            c.split(",")[d].trim(),
            this.__typeName
          )
        );
      j |= b;
    }
    return j;
  }
}
function Sys$Enum$toString(c) {
  if (typeof c === "undefined" || c === null) return this.__string;
  var d = this.prototype,
    a;
  if (!this.__flags || c === 0) {
    for (a in d) if (d[a] === c) return a;
  } else {
    var b = this.__sortedValues;
    if (!b) {
      b = [];
      for (a in d) b[b.length] = { key: a, value: d[a] };
      b.sort(function (a, b) {
        return a.value - b.value;
      });
      this.__sortedValues = b;
    }
    var e = [],
      g = c;
    for (a = b.length - 1; a >= 0; a--) {
      var h = b[a],
        f = h.value;
      if (f === 0) continue;
      if ((f & c) === f) {
        e[e.length] = h.key;
        g -= f;
        if (g === 0) break;
      }
    }
    if (e.length && g === 0) return e.reverse().join(", ");
  }
  return "";
}
Type.prototype.registerEnum = function (b, c) {
  Sys.__upperCaseTypes[b.toUpperCase()] = this;
  for (var a in this.prototype) this[a] = this.prototype[a];
  this.__typeName = b;
  this.parse = Sys$Enum$parse;
  this.__string = this.toString();
  this.toString = Sys$Enum$toString;
  this.__flags = c;
  this.__enum = true;
};
Type.isEnum = function (a) {
  if (typeof a === "undefined" || a === null) return false;
  return !!a.__enum;
};
Type.isFlags = function (a) {
  if (typeof a === "undefined" || a === null) return false;
  return !!a.__flags;
};
Sys.CollectionChange = function (e, a, c, b, d) {
  this.action = e;
  if (a) if (!(a instanceof Array)) a = [a];
  this.newItems = a || null;
  if (typeof c !== "number") c = -1;
  this.newStartingIndex = c;
  if (b) if (!(b instanceof Array)) b = [b];
  this.oldItems = b || null;
  if (typeof d !== "number") d = -1;
  this.oldStartingIndex = d;
};
Sys.CollectionChange.registerClass("Sys.CollectionChange");
Sys.NotifyCollectionChangedAction = function () {
  throw Error.notImplemented();
};
Sys.NotifyCollectionChangedAction.prototype = { add: 0, remove: 1, reset: 2 };
Sys.NotifyCollectionChangedAction.registerEnum(
  "Sys.NotifyCollectionChangedAction"
);
Sys.NotifyCollectionChangedEventArgs = function (a) {
  this._changes = a;
  Sys.NotifyCollectionChangedEventArgs.initializeBase(this);
};
Sys.NotifyCollectionChangedEventArgs.prototype = {
  get_changes: function () {
    return this._changes || [];
  },
};
Sys.NotifyCollectionChangedEventArgs.registerClass(
  "Sys.NotifyCollectionChangedEventArgs",
  Sys.EventArgs
);
Sys.Observer = function () {};
Sys.Observer.registerClass("Sys.Observer");
Sys.Observer.makeObservable = function (a) {
  var c = a instanceof Array,
    b = Sys.Observer;
  if (a.setValue === b._observeMethods.setValue) return a;
  b._addMethods(a, b._observeMethods);
  if (c) b._addMethods(a, b._arrayMethods);
  return a;
};
Sys.Observer._addMethods = function (c, b) {
  for (var a in b) c[a] = b[a];
};
Sys.Observer._addEventHandler = function (c, a, b) {
  Sys.Observer._getContext(c, true).events._addHandler(a, b);
};
Sys.Observer.addEventHandler = function (c, a, b) {
  Sys.Observer._addEventHandler(c, a, b);
};
Sys.Observer._removeEventHandler = function (c, a, b) {
  Sys.Observer._getContext(c, true).events._removeHandler(a, b);
};
Sys.Observer.removeEventHandler = function (c, a, b) {
  Sys.Observer._removeEventHandler(c, a, b);
};
Sys.Observer.raiseEvent = function (b, e, d) {
  var c = Sys.Observer._getContext(b);
  if (!c) return;
  var a = c.events.getHandler(e);
  if (a) a(b, d);
};
Sys.Observer.addPropertyChanged = function (b, a) {
  Sys.Observer._addEventHandler(b, "propertyChanged", a);
};
Sys.Observer.removePropertyChanged = function (b, a) {
  Sys.Observer._removeEventHandler(b, "propertyChanged", a);
};
Sys.Observer.beginUpdate = function (a) {
  Sys.Observer._getContext(a, true).updating = true;
};
Sys.Observer.endUpdate = function (b) {
  var a = Sys.Observer._getContext(b);
  if (!a || !a.updating) return;
  a.updating = false;
  var d = a.dirty;
  a.dirty = false;
  if (d) {
    if (b instanceof Array) {
      var c = a.changes;
      a.changes = null;
      Sys.Observer.raiseCollectionChanged(b, c);
    }
    Sys.Observer.raisePropertyChanged(b, "");
  }
};
Sys.Observer.isUpdating = function (b) {
  var a = Sys.Observer._getContext(b);
  return a ? a.updating : false;
};
Sys.Observer._setValue = function (a, j, g) {
  var b,
    f,
    k = a,
    d = j.split(".");
  for (var i = 0, m = d.length - 1; i < m; i++) {
    var l = d[i];
    b = a["get_" + l];
    if (typeof b === "function") a = b.call(a);
    else a = a[l];
    var n = typeof a;
    if (a === null || n === "undefined")
      throw Error.invalidOperation(
        String.format(Sys.Res.nullReferenceInPath, j)
      );
  }
  var e,
    c = d[m];
  b = a["get_" + c];
  f = a["set_" + c];
  if (typeof b === "function") e = b.call(a);
  else e = a[c];
  if (typeof f === "function") f.call(a, g);
  else a[c] = g;
  if (e !== g) {
    var h = Sys.Observer._getContext(k);
    if (h && h.updating) {
      h.dirty = true;
      return;
    }
    Sys.Observer.raisePropertyChanged(k, d[0]);
  }
};
Sys.Observer.setValue = function (b, a, c) {
  Sys.Observer._setValue(b, a, c);
};
Sys.Observer.raisePropertyChanged = function (b, a) {
  Sys.Observer.raiseEvent(
    b,
    "propertyChanged",
    new Sys.PropertyChangedEventArgs(a)
  );
};
Sys.Observer.addCollectionChanged = function (b, a) {
  Sys.Observer._addEventHandler(b, "collectionChanged", a);
};
Sys.Observer.removeCollectionChanged = function (b, a) {
  Sys.Observer._removeEventHandler(b, "collectionChanged", a);
};
Sys.Observer._collectionChange = function (d, c) {
  var a = Sys.Observer._getContext(d);
  if (a && a.updating) {
    a.dirty = true;
    var b = a.changes;
    if (!b) a.changes = b = [c];
    else b.push(c);
  } else {
    Sys.Observer.raiseCollectionChanged(d, [c]);
    Sys.Observer.raisePropertyChanged(d, "length");
  }
};
Sys.Observer.add = function (a, b) {
  var c = new Sys.CollectionChange(
    Sys.NotifyCollectionChangedAction.add,
    [b],
    a.length
  );
  Array.add(a, b);
  Sys.Observer._collectionChange(a, c);
};
Sys.Observer.addRange = function (a, b) {
  var c = new Sys.CollectionChange(
    Sys.NotifyCollectionChangedAction.add,
    b,
    a.length
  );
  Array.addRange(a, b);
  Sys.Observer._collectionChange(a, c);
};
Sys.Observer.clear = function (a) {
  var b = Array.clone(a);
  Array.clear(a);
  Sys.Observer._collectionChange(
    a,
    new Sys.CollectionChange(
      Sys.NotifyCollectionChangedAction.reset,
      null,
      -1,
      b,
      0
    )
  );
};
Sys.Observer.insert = function (a, b, c) {
  Array.insert(a, b, c);
  Sys.Observer._collectionChange(
    a,
    new Sys.CollectionChange(Sys.NotifyCollectionChangedAction.add, [c], b)
  );
};
Sys.Observer.remove = function (a, b) {
  var c = Array.indexOf(a, b);
  if (c !== -1) {
    Array.remove(a, b);
    Sys.Observer._collectionChange(
      a,
      new Sys.CollectionChange(
        Sys.NotifyCollectionChangedAction.remove,
        null,
        -1,
        [b],
        c
      )
    );
    return true;
  }
  return false;
};
Sys.Observer.removeAt = function (b, a) {
  if (a > -1 && a < b.length) {
    var c = b[a];
    Array.removeAt(b, a);
    Sys.Observer._collectionChange(
      b,
      new Sys.CollectionChange(
        Sys.NotifyCollectionChangedAction.remove,
        null,
        -1,
        [c],
        a
      )
    );
  }
};
Sys.Observer.raiseCollectionChanged = function (b, a) {
  Sys.Observer.raiseEvent(
    b,
    "collectionChanged",
    new Sys.NotifyCollectionChangedEventArgs(a)
  );
};
Sys.Observer._observeMethods = {
  add_propertyChanged: function (a) {
    Sys.Observer._addEventHandler(this, "propertyChanged", a);
  },
  remove_propertyChanged: function (a) {
    Sys.Observer._removeEventHandler(this, "propertyChanged", a);
  },
  addEventHandler: function (a, b) {
    Sys.Observer._addEventHandler(this, a, b);
  },
  removeEventHandler: function (a, b) {
    Sys.Observer._removeEventHandler(this, a, b);
  },
  get_isUpdating: function () {
    return Sys.Observer.isUpdating(this);
  },
  beginUpdate: function () {
    Sys.Observer.beginUpdate(this);
  },
  endUpdate: function () {
    Sys.Observer.endUpdate(this);
  },
  setValue: function (b, a) {
    Sys.Observer._setValue(this, b, a);
  },
  raiseEvent: function (b, a) {
    Sys.Observer.raiseEvent(this, b, a);
  },
  raisePropertyChanged: function (a) {
    Sys.Observer.raiseEvent(
      this,
      "propertyChanged",
      new Sys.PropertyChangedEventArgs(a)
    );
  },
};
Sys.Observer._arrayMethods = {
  add_collectionChanged: function (a) {
    Sys.Observer._addEventHandler(this, "collectionChanged", a);
  },
  remove_collectionChanged: function (a) {
    Sys.Observer._removeEventHandler(this, "collectionChanged", a);
  },
  add: function (a) {
    Sys.Observer.add(this, a);
  },
  addRange: function (a) {
    Sys.Observer.addRange(this, a);
  },
  clear: function () {
    Sys.Observer.clear(this);
  },
  insert: function (a, b) {
    Sys.Observer.insert(this, a, b);
  },
  remove: function (a) {
    return Sys.Observer.remove(this, a);
  },
  removeAt: function (a) {
    Sys.Observer.removeAt(this, a);
  },
  raiseCollectionChanged: function (a) {
    Sys.Observer.raiseEvent(
      this,
      "collectionChanged",
      new Sys.NotifyCollectionChangedEventArgs(a)
    );
  },
};
Sys.Observer._getContext = function (b, c) {
  var a = b._observerContext;
  if (a) return a();
  if (c) return (b._observerContext = Sys.Observer._createContext())();
  return null;
};
Sys.Observer._createContext = function () {
  var a = { events: new Sys.EventHandlerList() };
  return function () {
    return a;
  };
};
Date._appendPreOrPostMatch = function (e, b) {
  var d = 0,
    a = false;
  for (var c = 0, g = e.length; c < g; c++) {
    var f = e.charAt(c);
    switch (f) {
      case "'":
        if (a) b.append("'");
        else d++;
        a = false;
        break;
      case "\\":
        if (a) b.append("\\");
        a = !a;
        break;
      default:
        b.append(f);
        a = false;
    }
  }
  return d;
};
Date._expandFormat = function (a, b) {
  if (!b) b = "F";
  var c = b.length;
  if (c === 1)
    switch (b) {
      case "d":
        return a.ShortDatePattern;
      case "D":
        return a.LongDatePattern;
      case "t":
        return a.ShortTimePattern;
      case "T":
        return a.LongTimePattern;
      case "f":
        return a.LongDatePattern + " " + a.ShortTimePattern;
      case "F":
        return a.FullDateTimePattern;
      case "M":
      case "m":
        return a.MonthDayPattern;
      case "s":
        return a.SortableDateTimePattern;
      case "Y":
      case "y":
        return a.YearMonthPattern;
      default:
        throw Error.format(Sys.Res.formatInvalidString);
    }
  else if (c === 2 && b.charAt(0) === "%") b = b.charAt(1);
  return b;
};
Date._expandYear = function (c, a) {
  var d = new Date(),
    e = Date._getEra(d);
  if (a < 100) {
    var b = Date._getEraYear(d, c, e);
    a += b - (b % 100);
    if (a > c.Calendar.TwoDigitYearMax) a -= 100;
  }
  return a;
};
Date._getEra = function (e, c) {
  if (!c) return 0;
  var b,
    d = e.getTime();
  for (var a = 0, f = c.length; a < f; a += 4) {
    b = c[a + 2];
    if (b === null || d >= b) return a;
  }
  return 0;
};
Date._getEraYear = function (d, b, e, c) {
  var a = d.getFullYear();
  if (!c && b.eras) a -= b.eras[e + 3];
  return a;
};
Date._getParseRegExp = function (b, e) {
  if (!b._parseRegExp) b._parseRegExp = {};
  else if (b._parseRegExp[e]) return b._parseRegExp[e];
  var c = Date._expandFormat(b, e);
  c = c.replace(/([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g, "\\\\$1");
  var a = new Sys.StringBuilder("^"),
    j = [],
    f = 0,
    i = 0,
    h = Date._getTokenRegExp(),
    d;
  while ((d = h.exec(c)) !== null) {
    var l = c.slice(f, d.index);
    f = h.lastIndex;
    i += Date._appendPreOrPostMatch(l, a);
    if (i % 2 === 1) {
      a.append(d[0]);
      continue;
    }
    switch (d[0]) {
      case "dddd":
      case "ddd":
      case "MMMM":
      case "MMM":
      case "gg":
      case "g":
        a.append("(\\D+)");
        break;
      case "tt":
      case "t":
        a.append("(\\D*)");
        break;
      case "yyyy":
        a.append("(\\d{4})");
        break;
      case "fff":
        a.append("(\\d{3})");
        break;
      case "ff":
        a.append("(\\d{2})");
        break;
      case "f":
        a.append("(\\d)");
        break;
      case "dd":
      case "d":
      case "MM":
      case "M":
      case "yy":
      case "y":
      case "HH":
      case "H":
      case "hh":
      case "h":
      case "mm":
      case "m":
      case "ss":
      case "s":
        a.append("(\\d\\d?)");
        break;
      case "zzz":
        a.append("([+-]?\\d\\d?:\\d{2})");
        break;
      case "zz":
      case "z":
        a.append("([+-]?\\d\\d?)");
        break;
      case "/":
        a.append("(\\" + b.DateSeparator + ")");
    }
    Array.add(j, d[0]);
  }
  Date._appendPreOrPostMatch(c.slice(f), a);
  a.append("$");
  var k = a.toString().replace(/\s+/g, "\\s+"),
    g = { regExp: k, groups: j };
  b._parseRegExp[e] = g;
  return g;
};
Date._getTokenRegExp = function () {
  return /\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g;
};
Date.parseLocale = function (a) {
  return Date._parse(a, Sys.CultureInfo.CurrentCulture, arguments);
};
Date.parseInvariant = function (a) {
  return Date._parse(a, Sys.CultureInfo.InvariantCulture, arguments);
};
Date._parse = function (h, d, i) {
  var a,
    c,
    b,
    f,
    e,
    g = false;
  for (a = 1, c = i.length; a < c; a++) {
    f = i[a];
    if (f) {
      g = true;
      b = Date._parseExact(h, f, d);
      if (b) return b;
    }
  }
  if (!g) {
    e = d._getDateTimeFormats();
    for (a = 0, c = e.length; a < c; a++) {
      b = Date._parseExact(h, e[a], d);
      if (b) return b;
    }
  }
  return null;
};
Date._parseExact = function (w, D, k) {
  w = w.trim();
  var g = k.dateTimeFormat,
    A = Date._getParseRegExp(g, D),
    C = new RegExp(A.regExp).exec(w);
  if (C === null) return null;
  var B = A.groups,
    x = null,
    e = null,
    c = null,
    j = null,
    i = null,
    d = 0,
    h,
    p = 0,
    q = 0,
    f = 0,
    l = null,
    v = false;
  for (var s = 0, E = B.length; s < E; s++) {
    var a = C[s + 1];
    if (a)
      switch (B[s]) {
        case "dd":
        case "d":
          j = parseInt(a, 10);
          if (j < 1 || j > 31) return null;
          break;
        case "MMMM":
          c = k._getMonthIndex(a);
          if (c < 0 || c > 11) return null;
          break;
        case "MMM":
          c = k._getAbbrMonthIndex(a);
          if (c < 0 || c > 11) return null;
          break;
        case "M":
        case "MM":
          c = parseInt(a, 10) - 1;
          if (c < 0 || c > 11) return null;
          break;
        case "y":
        case "yy":
          e = Date._expandYear(g, parseInt(a, 10));
          if (e < 0 || e > 9999) return null;
          break;
        case "yyyy":
          e = parseInt(a, 10);
          if (e < 0 || e > 9999) return null;
          break;
        case "h":
        case "hh":
          d = parseInt(a, 10);
          if (d === 12) d = 0;
          if (d < 0 || d > 11) return null;
          break;
        case "H":
        case "HH":
          d = parseInt(a, 10);
          if (d < 0 || d > 23) return null;
          break;
        case "m":
        case "mm":
          p = parseInt(a, 10);
          if (p < 0 || p > 59) return null;
          break;
        case "s":
        case "ss":
          q = parseInt(a, 10);
          if (q < 0 || q > 59) return null;
          break;
        case "tt":
        case "t":
          var z = a.toUpperCase();
          v = z === g.PMDesignator.toUpperCase();
          if (!v && z !== g.AMDesignator.toUpperCase()) return null;
          break;
        case "f":
          f = parseInt(a, 10) * 100;
          if (f < 0 || f > 999) return null;
          break;
        case "ff":
          f = parseInt(a, 10) * 10;
          if (f < 0 || f > 999) return null;
          break;
        case "fff":
          f = parseInt(a, 10);
          if (f < 0 || f > 999) return null;
          break;
        case "dddd":
          i = k._getDayIndex(a);
          if (i < 0 || i > 6) return null;
          break;
        case "ddd":
          i = k._getAbbrDayIndex(a);
          if (i < 0 || i > 6) return null;
          break;
        case "zzz":
          var u = a.split(/:/);
          if (u.length !== 2) return null;
          h = parseInt(u[0], 10);
          if (h < -12 || h > 13) return null;
          var m = parseInt(u[1], 10);
          if (m < 0 || m > 59) return null;
          l = h * 60 + (a.startsWith("-") ? -m : m);
          break;
        case "z":
        case "zz":
          h = parseInt(a, 10);
          if (h < -12 || h > 13) return null;
          l = h * 60;
          break;
        case "g":
        case "gg":
          var o = a;
          if (!o || !g.eras) return null;
          o = o.toLowerCase().trim();
          for (var r = 0, F = g.eras.length; r < F; r += 4)
            if (o === g.eras[r + 1].toLowerCase()) {
              x = r;
              break;
            }
          if (x === null) return null;
      }
  }
  var b = new Date(),
    t,
    n = g.Calendar.convert;
  if (n) t = n.fromGregorian(b)[0];
  else t = b.getFullYear();
  if (e === null) e = t;
  else if (g.eras) e += g.eras[(x || 0) + 3];
  if (c === null) c = 0;
  if (j === null) j = 1;
  if (n) {
    b = n.toGregorian(e, c, j);
    if (b === null) return null;
  } else {
    b.setFullYear(e, c, j);
    if (b.getDate() !== j) return null;
    if (i !== null && b.getDay() !== i) return null;
  }
  if (v && d < 12) d += 12;
  b.setHours(d, p, q, f);
  if (l !== null) {
    var y = b.getMinutes() - (l + b.getTimezoneOffset());
    b.setHours(b.getHours() + parseInt(y / 60, 10), y % 60);
  }
  return b;
};
Date.prototype.format = function (a) {
  return this._toFormattedString(a, Sys.CultureInfo.InvariantCulture);
};
Date.prototype.localeFormat = function (a) {
  return this._toFormattedString(a, Sys.CultureInfo.CurrentCulture);
};
Date.prototype._toFormattedString = function (e, j) {
  var b = j.dateTimeFormat,
    n = b.Calendar.convert;
  if (!e || !e.length || e === "i")
    if (j && j.name.length)
      if (n) return this._toFormattedString(b.FullDateTimePattern, j);
      else {
        var r = new Date(this.getTime()),
          x = Date._getEra(this, b.eras);
        r.setFullYear(Date._getEraYear(this, b, x));
        return r.toLocaleString();
      }
    else return this.toString();
  var l = b.eras,
    k = e === "s";
  e = Date._expandFormat(b, e);
  var a = new Sys.StringBuilder(),
    c;
  function d(a) {
    if (a < 10) return "0" + a;
    return a.toString();
  }
  function m(a) {
    if (a < 10) return "00" + a;
    if (a < 100) return "0" + a;
    return a.toString();
  }
  function v(a) {
    if (a < 10) return "000" + a;
    else if (a < 100) return "00" + a;
    else if (a < 1000) return "0" + a;
    return a.toString();
  }
  var h,
    p,
    t = /([^d]|^)(d|dd)([^d]|$)/g;
  function s() {
    if (h || p) return h;
    h = t.test(e);
    p = true;
    return h;
  }
  var q = 0,
    o = Date._getTokenRegExp(),
    f;
  if (!k && n) f = n.fromGregorian(this);
  for (; true; ) {
    var w = o.lastIndex,
      i = o.exec(e),
      u = e.slice(w, i ? i.index : e.length);
    q += Date._appendPreOrPostMatch(u, a);
    if (!i) break;
    if (q % 2 === 1) {
      a.append(i[0]);
      continue;
    }
    function g(a, b) {
      if (f) return f[b];
      switch (b) {
        case 0:
          return a.getFullYear();
        case 1:
          return a.getMonth();
        case 2:
          return a.getDate();
      }
    }
    switch (i[0]) {
      case "dddd":
        a.append(b.DayNames[this.getDay()]);
        break;
      case "ddd":
        a.append(b.AbbreviatedDayNames[this.getDay()]);
        break;
      case "dd":
        h = true;
        a.append(d(g(this, 2)));
        break;
      case "d":
        h = true;
        a.append(g(this, 2));
        break;
      case "MMMM":
        a.append(
          b.MonthGenitiveNames && s()
            ? b.MonthGenitiveNames[g(this, 1)]
            : b.MonthNames[g(this, 1)]
        );
        break;
      case "MMM":
        a.append(
          b.AbbreviatedMonthGenitiveNames && s()
            ? b.AbbreviatedMonthGenitiveNames[g(this, 1)]
            : b.AbbreviatedMonthNames[g(this, 1)]
        );
        break;
      case "MM":
        a.append(d(g(this, 1) + 1));
        break;
      case "M":
        a.append(g(this, 1) + 1);
        break;
      case "yyyy":
        a.append(
          v(f ? f[0] : Date._getEraYear(this, b, Date._getEra(this, l), k))
        );
        break;
      case "yy":
        a.append(
          d(
            (f ? f[0] : Date._getEraYear(this, b, Date._getEra(this, l), k)) %
              100
          )
        );
        break;
      case "y":
        a.append(
          (f ? f[0] : Date._getEraYear(this, b, Date._getEra(this, l), k)) % 100
        );
        break;
      case "hh":
        c = this.getHours() % 12;
        if (c === 0) c = 12;
        a.append(d(c));
        break;
      case "h":
        c = this.getHours() % 12;
        if (c === 0) c = 12;
        a.append(c);
        break;
      case "HH":
        a.append(d(this.getHours()));
        break;
      case "H":
        a.append(this.getHours());
        break;
      case "mm":
        a.append(d(this.getMinutes()));
        break;
      case "m":
        a.append(this.getMinutes());
        break;
      case "ss":
        a.append(d(this.getSeconds()));
        break;
      case "s":
        a.append(this.getSeconds());
        break;
      case "tt":
        a.append(this.getHours() < 12 ? b.AMDesignator : b.PMDesignator);
        break;
      case "t":
        a.append(
          (this.getHours() < 12 ? b.AMDesignator : b.PMDesignator).charAt(0)
        );
        break;
      case "f":
        a.append(m(this.getMilliseconds()).charAt(0));
        break;
      case "ff":
        a.append(m(this.getMilliseconds()).substr(0, 2));
        break;
      case "fff":
        a.append(m(this.getMilliseconds()));
        break;
      case "z":
        c = this.getTimezoneOffset() / 60;
        a.append((c <= 0 ? "+" : "-") + Math.floor(Math.abs(c)));
        break;
      case "zz":
        c = this.getTimezoneOffset() / 60;
        a.append((c <= 0 ? "+" : "-") + d(Math.floor(Math.abs(c))));
        break;
      case "zzz":
        c = this.getTimezoneOffset() / 60;
        a.append(
          (c <= 0 ? "+" : "-") +
            d(Math.floor(Math.abs(c))) +
            ":" +
            d(Math.abs(this.getTimezoneOffset() % 60))
        );
        break;
      case "g":
      case "gg":
        if (b.eras) a.append(b.eras[Date._getEra(this, l) + 1]);
        break;
      case "/":
        a.append(b.DateSeparator);
    }
  }
  return a.toString();
};
String.localeFormat = function () {
  return String._toFormattedString(true, arguments);
};
Number.parseLocale = function (a) {
  return Number._parse(a, Sys.CultureInfo.CurrentCulture);
};
Number.parseInvariant = function (a) {
  return Number._parse(a, Sys.CultureInfo.InvariantCulture);
};
Number._parse = function (b, o) {
  b = b.trim();
  if (b.match(/^[+-]?infinity$/i)) return parseFloat(b);
  if (b.match(/^0x[a-f0-9]+$/i)) return parseInt(b);
  var a = o.numberFormat,
    g = Number._parseNumberNegativePattern(b, a, a.NumberNegativePattern),
    h = g[0],
    e = g[1];
  if (h === "" && a.NumberNegativePattern !== 1) {
    g = Number._parseNumberNegativePattern(b, a, 1);
    h = g[0];
    e = g[1];
  }
  if (h === "") h = "+";
  var j,
    d,
    f = e.indexOf("e");
  if (f < 0) f = e.indexOf("E");
  if (f < 0) {
    d = e;
    j = null;
  } else {
    d = e.substr(0, f);
    j = e.substr(f + 1);
  }
  var c,
    k,
    m = d.indexOf(a.NumberDecimalSeparator);
  if (m < 0) {
    c = d;
    k = null;
  } else {
    c = d.substr(0, m);
    k = d.substr(m + a.NumberDecimalSeparator.length);
  }
  c = c.split(a.NumberGroupSeparator).join("");
  var n = a.NumberGroupSeparator.replace(/\u00A0/g, " ");
  if (a.NumberGroupSeparator !== n) c = c.split(n).join("");
  var l = h + c;
  if (k !== null) l += "." + k;
  if (j !== null) {
    var i = Number._parseNumberNegativePattern(j, a, 1);
    if (i[0] === "") i[0] = "+";
    l += "e" + i[0] + i[1];
  }
  if (l.match(/^[+-]?\d*\.?\d*(e[+-]?\d+)?$/)) return parseFloat(l);
  return Number.NaN;
};
Number._parseNumberNegativePattern = function (a, d, e) {
  var b = d.NegativeSign,
    c = d.PositiveSign;
  switch (e) {
    case 4:
      b = " " + b;
      c = " " + c;
    case 3:
      if (a.endsWith(b)) return ["-", a.substr(0, a.length - b.length)];
      else if (a.endsWith(c)) return ["+", a.substr(0, a.length - c.length)];
      break;
    case 2:
      b += " ";
      c += " ";
    case 1:
      if (a.startsWith(b)) return ["-", a.substr(b.length)];
      else if (a.startsWith(c)) return ["+", a.substr(c.length)];
      break;
    case 0:
      if (a.startsWith("(") && a.endsWith(")"))
        return ["-", a.substr(1, a.length - 2)];
  }
  return ["", a];
};
Number.prototype.format = function (a) {
  return this._toFormattedString(a, Sys.CultureInfo.InvariantCulture);
};
Number.prototype.localeFormat = function (a) {
  return this._toFormattedString(a, Sys.CultureInfo.CurrentCulture);
};
Number.prototype._toFormattedString = function (e, j) {
  if (!e || e.length === 0 || e === "i")
    if (j && j.name.length > 0) return this.toLocaleString();
    else return this.toString();
  var o = ["n %", "n%", "%n"],
    n = ["-n %", "-n%", "-%n"],
    p = ["(n)", "-n", "- n", "n-", "n -"],
    m = ["$n", "n$", "$ n", "n $"],
    l = [
      "($n)",
      "-$n",
      "$-n",
      "$n-",
      "(n$)",
      "-n$",
      "n-$",
      "n$-",
      "-n $",
      "-$ n",
      "n $-",
      "$ n-",
      "$ -n",
      "n- $",
      "($ n)",
      "(n $)",
    ];
  function g(a, c, d) {
    for (var b = a.length; b < c; b++) a = d ? "0" + a : a + "0";
    return a;
  }
  function i(j, i, l, n, p) {
    var h = l[0],
      k = 1,
      o = Math.pow(10, i),
      m = Math.round(j * o) / o;
    if (!isFinite(m)) m = j;
    j = m;
    var b = j.toString(),
      a = "",
      c,
      e = b.split(/e/i);
    b = e[0];
    c = e.length > 1 ? parseInt(e[1]) : 0;
    e = b.split(".");
    b = e[0];
    a = e.length > 1 ? e[1] : "";
    var q;
    if (c > 0) {
      a = g(a, c, false);
      b += a.slice(0, c);
      a = a.substr(c);
    } else if (c < 0) {
      c = -c;
      b = g(b, c + 1, true);
      a = b.slice(-c, b.length) + a;
      b = b.slice(0, -c);
    }
    if (i > 0) {
      if (a.length > i) a = a.slice(0, i);
      else a = g(a, i, false);
      a = p + a;
    } else a = "";
    var d = b.length - 1,
      f = "";
    while (d >= 0) {
      if (h === 0 || h > d)
        if (f.length > 0) return b.slice(0, d + 1) + n + f + a;
        else return b.slice(0, d + 1) + a;
      if (f.length > 0) f = b.slice(d - h + 1, d + 1) + n + f;
      else f = b.slice(d - h + 1, d + 1);
      d -= h;
      if (k < l.length) {
        h = l[k];
        k++;
      }
    }
    return b.slice(0, d + 1) + n + f + a;
  }
  var a = j.numberFormat,
    d = Math.abs(this);
  if (!e) e = "D";
  var b = -1;
  if (e.length > 1) b = parseInt(e.slice(1), 10);
  var c;
  switch (e.charAt(0)) {
    case "d":
    case "D":
      c = "n";
      if (b !== -1) d = g("" + d, b, true);
      if (this < 0) d = -d;
      break;
    case "c":
    case "C":
      if (this < 0) c = l[a.CurrencyNegativePattern];
      else c = m[a.CurrencyPositivePattern];
      if (b === -1) b = a.CurrencyDecimalDigits;
      d = i(
        Math.abs(this),
        b,
        a.CurrencyGroupSizes,
        a.CurrencyGroupSeparator,
        a.CurrencyDecimalSeparator
      );
      break;
    case "n":
    case "N":
      if (this < 0) c = p[a.NumberNegativePattern];
      else c = "n";
      if (b === -1) b = a.NumberDecimalDigits;
      d = i(
        Math.abs(this),
        b,
        a.NumberGroupSizes,
        a.NumberGroupSeparator,
        a.NumberDecimalSeparator
      );
      break;
    case "p":
    case "P":
      if (this < 0) c = n[a.PercentNegativePattern];
      else c = o[a.PercentPositivePattern];
      if (b === -1) b = a.PercentDecimalDigits;
      d = i(
        Math.abs(this) * 100,
        b,
        a.PercentGroupSizes,
        a.PercentGroupSeparator,
        a.PercentDecimalSeparator
      );
      break;
    default:
      throw Error.format(Sys.Res.formatBadFormatSpecifier);
  }
  var k = /n|\$|-|%/g,
    f = "";
  for (; true; ) {
    var q = k.lastIndex,
      h = k.exec(c);
    f += c.slice(q, h ? h.index : c.length);
    if (!h) break;
    switch (h[0]) {
      case "n":
        f += d;
        break;
      case "$":
        f += a.CurrencySymbol;
        break;
      case "-":
        if (/[1-9]/.test(d)) f += a.NegativeSign;
        break;
      case "%":
        f += a.PercentSymbol;
    }
  }
  return f;
};
Sys.CultureInfo = function (c, b, a) {
  this.name = c;
  this.numberFormat = b;
  this.dateTimeFormat = a;
};
Sys.CultureInfo.prototype = {
  _getDateTimeFormats: function () {
    if (!this._dateTimeFormats) {
      var a = this.dateTimeFormat;
      this._dateTimeFormats = [
        a.MonthDayPattern,
        a.YearMonthPattern,
        a.ShortDatePattern,
        a.ShortTimePattern,
        a.LongDatePattern,
        a.LongTimePattern,
        a.FullDateTimePattern,
        a.RFC1123Pattern,
        a.SortableDateTimePattern,
        a.UniversalSortableDateTimePattern,
      ];
    }
    return this._dateTimeFormats;
  },
  _getIndex: function (c, d, e) {
    var b = this._toUpper(c),
      a = Array.indexOf(d, b);
    if (a === -1) a = Array.indexOf(e, b);
    return a;
  },
  _getMonthIndex: function (a) {
    if (!this._upperMonths) {
      this._upperMonths = this._toUpperArray(this.dateTimeFormat.MonthNames);
      this._upperMonthsGenitive = this._toUpperArray(
        this.dateTimeFormat.MonthGenitiveNames
      );
    }
    return this._getIndex(a, this._upperMonths, this._upperMonthsGenitive);
  },
  _getAbbrMonthIndex: function (a) {
    if (!this._upperAbbrMonths) {
      this._upperAbbrMonths = this._toUpperArray(
        this.dateTimeFormat.AbbreviatedMonthNames
      );
      this._upperAbbrMonthsGenitive = this._toUpperArray(
        this.dateTimeFormat.AbbreviatedMonthGenitiveNames
      );
    }
    return this._getIndex(
      a,
      this._upperAbbrMonths,
      this._upperAbbrMonthsGenitive
    );
  },
  _getDayIndex: function (a) {
    if (!this._upperDays)
      this._upperDays = this._toUpperArray(this.dateTimeFormat.DayNames);
    return Array.indexOf(this._upperDays, this._toUpper(a));
  },
  _getAbbrDayIndex: function (a) {
    if (!this._upperAbbrDays)
      this._upperAbbrDays = this._toUpperArray(
        this.dateTimeFormat.AbbreviatedDayNames
      );
    return Array.indexOf(this._upperAbbrDays, this._toUpper(a));
  },
  _toUpperArray: function (c) {
    var b = [];
    for (var a = 0, d = c.length; a < d; a++) b[a] = this._toUpper(c[a]);
    return b;
  },
  _toUpper: function (a) {
    return a.split("\u00a0").join(" ").toUpperCase();
  },
};
Sys.CultureInfo.registerClass("Sys.CultureInfo");
Sys.CultureInfo._parse = function (a) {
  var b = a.dateTimeFormat;
  if (b && !b.eras) b.eras = a.eras;
  return new Sys.CultureInfo(a.name, a.numberFormat, b);
};
Sys.CultureInfo.InvariantCulture = Sys.CultureInfo._parse({
  name: "",
  numberFormat: {
    CurrencyDecimalDigits: 2,
    CurrencyDecimalSeparator: ".",
    IsReadOnly: true,
    CurrencyGroupSizes: [3],
    NumberGroupSizes: [3],
    PercentGroupSizes: [3],
    CurrencyGroupSeparator: ",",
    CurrencySymbol: "\u00a4",
    NaNSymbol: "NaN",
    CurrencyNegativePattern: 0,
    NumberNegativePattern: 1,
    PercentPositivePattern: 0,
    PercentNegativePattern: 0,
    NegativeInfinitySymbol: "-Infinity",
    NegativeSign: "-",
    NumberDecimalDigits: 2,
    NumberDecimalSeparator: ".",
    NumberGroupSeparator: ",",
    CurrencyPositivePattern: 0,
    PositiveInfinitySymbol: "Infinity",
    PositiveSign: "+",
    PercentDecimalDigits: 2,
    PercentDecimalSeparator: ".",
    PercentGroupSeparator: ",",
    PercentSymbol: "%",
    PerMilleSymbol: "\u2030",
    NativeDigits: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"],
    DigitSubstitution: 1,
  },
  dateTimeFormat: {
    AMDesignator: "AM",
    Calendar: {
      MinSupportedDateTime: "@-62135568000000@",
      MaxSupportedDateTime: "@253402300799999@",
      AlgorithmType: 1,
      CalendarType: 1,
      Eras: [1],
      TwoDigitYearMax: 2029,
      IsReadOnly: true,
    },
    DateSeparator: "/",
    FirstDayOfWeek: 0,
    CalendarWeekRule: 0,
    FullDateTimePattern: "dddd, dd MMMM yyyy HH:mm:ss",
    LongDatePattern: "dddd, dd MMMM yyyy",
    LongTimePattern: "HH:mm:ss",
    MonthDayPattern: "MMMM dd",
    PMDesignator: "PM",
    RFC1123Pattern: "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",
    ShortDatePattern: "MM/dd/yyyy",
    ShortTimePattern: "HH:mm",
    SortableDateTimePattern: "yyyy'-'MM'-'dd'T'HH':'mm':'ss",
    TimeSeparator: ":",
    UniversalSortableDateTimePattern: "yyyy'-'MM'-'dd HH':'mm':'ss'Z'",
    YearMonthPattern: "yyyy MMMM",
    AbbreviatedDayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    ShortestDayNames: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
    DayNames: [
      "Sunday",
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday",
    ],
    AbbreviatedMonthNames: [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec",
      "",
    ],
    MonthNames: [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December",
      "",
    ],
    IsReadOnly: true,
    NativeCalendarName: "Gregorian Calendar",
    AbbreviatedMonthGenitiveNames: [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec",
      "",
    ],
    MonthGenitiveNames: [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December",
      "",
    ],
  },
  eras: [1, "A.D.", null, 0],
});
if (typeof __cultureInfo === "object") {
  Sys.CultureInfo.CurrentCulture = Sys.CultureInfo._parse(__cultureInfo);
  delete __cultureInfo;
} else
  Sys.CultureInfo.CurrentCulture = Sys.CultureInfo._parse({
    name: "en-US",
    numberFormat: {
      CurrencyDecimalDigits: 2,
      CurrencyDecimalSeparator: ".",
      IsReadOnly: false,
      CurrencyGroupSizes: [3],
      NumberGroupSizes: [3],
      PercentGroupSizes: [3],
      CurrencyGroupSeparator: ",",
      CurrencySymbol: "$",
      NaNSymbol: "NaN",
      CurrencyNegativePattern: 0,
      NumberNegativePattern: 1,
      PercentPositivePattern: 0,
      PercentNegativePattern: 0,
      NegativeInfinitySymbol: "-Infinity",
      NegativeSign: "-",
      NumberDecimalDigits: 2,
      NumberDecimalSeparator: ".",
      NumberGroupSeparator: ",",
      CurrencyPositivePattern: 0,
      PositiveInfinitySymbol: "Infinity",
      PositiveSign: "+",
      PercentDecimalDigits: 2,
      PercentDecimalSeparator: ".",
      PercentGroupSeparator: ",",
      PercentSymbol: "%",
      PerMilleSymbol: "\u2030",
      NativeDigits: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"],
      DigitSubstitution: 1,
    },
    dateTimeFormat: {
      AMDesignator: "AM",
      Calendar: {
        MinSupportedDateTime: "@-62135568000000@",
        MaxSupportedDateTime: "@253402300799999@",
        AlgorithmType: 1,
        CalendarType: 1,
        Eras: [1],
        TwoDigitYearMax: 2029,
        IsReadOnly: false,
      },
      DateSeparator: "/",
      FirstDayOfWeek: 0,
      CalendarWeekRule: 0,
      FullDateTimePattern: "dddd, MMMM dd, yyyy h:mm:ss tt",
      LongDatePattern: "dddd, MMMM dd, yyyy",
      LongTimePattern: "h:mm:ss tt",
      MonthDayPattern: "MMMM dd",
      PMDesignator: "PM",
      RFC1123Pattern: "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",
      ShortDatePattern: "M/d/yyyy",
      ShortTimePattern: "h:mm tt",
      SortableDateTimePattern: "yyyy'-'MM'-'dd'T'HH':'mm':'ss",
      TimeSeparator: ":",
      UniversalSortableDateTimePattern: "yyyy'-'MM'-'dd HH':'mm':'ss'Z'",
      YearMonthPattern: "MMMM, yyyy",
      AbbreviatedDayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      ShortestDayNames: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
      DayNames: [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday",
      ],
      AbbreviatedMonthNames: [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec",
        "",
      ],
      MonthNames: [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December",
        "",
      ],
      IsReadOnly: false,
      NativeCalendarName: "Gregorian Calendar",
      AbbreviatedMonthGenitiveNames: [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec",
        "",
      ],
      MonthGenitiveNames: [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December",
        "",
      ],
    },
    eras: [1, "A.D.", null, 0],
  });
Type.registerNamespace("Sys.Serialization");
Sys.Serialization.JavaScriptSerializer = function () {};
Sys.Serialization.JavaScriptSerializer.registerClass(
  "Sys.Serialization.JavaScriptSerializer"
);
Sys.Serialization.JavaScriptSerializer._charsToEscapeRegExs = [];
Sys.Serialization.JavaScriptSerializer._charsToEscape = [];
Sys.Serialization.JavaScriptSerializer._dateRegEx = new RegExp(
  '(^|[^\\\\])\\"\\\\/Date\\((-?[0-9]+)(?:[a-zA-Z]|(?:\\+|-)[0-9]{4})?\\)\\\\/\\"',
  "g"
);
Sys.Serialization.JavaScriptSerializer._escapeChars = {};
Sys.Serialization.JavaScriptSerializer._escapeRegEx = new RegExp(
  '["\\\\\\x00-\\x1F]',
  "i"
);
Sys.Serialization.JavaScriptSerializer._escapeRegExGlobal = new RegExp(
  '["\\\\\\x00-\\x1F]',
  "g"
);
Sys.Serialization.JavaScriptSerializer._jsonRegEx = new RegExp(
  "[^,:{}\\[\\]0-9.\\-+Eaeflnr-u \\n\\r\\t]",
  "g"
);
Sys.Serialization.JavaScriptSerializer._jsonStringRegEx = new RegExp(
  '"(\\\\.|[^"\\\\])*"',
  "g"
);
Sys.Serialization.JavaScriptSerializer._serverTypeFieldName = "__type";
Sys.Serialization.JavaScriptSerializer._init = function () {
  var c = [
    "\\u0000",
    "\\u0001",
    "\\u0002",
    "\\u0003",
    "\\u0004",
    "\\u0005",
    "\\u0006",
    "\\u0007",
    "\\b",
    "\\t",
    "\\n",
    "\\u000b",
    "\\f",
    "\\r",
    "\\u000e",
    "\\u000f",
    "\\u0010",
    "\\u0011",
    "\\u0012",
    "\\u0013",
    "\\u0014",
    "\\u0015",
    "\\u0016",
    "\\u0017",
    "\\u0018",
    "\\u0019",
    "\\u001a",
    "\\u001b",
    "\\u001c",
    "\\u001d",
    "\\u001e",
    "\\u001f",
  ];
  Sys.Serialization.JavaScriptSerializer._charsToEscape[0] = "\\";
  Sys.Serialization.JavaScriptSerializer._charsToEscapeRegExs[
    "\\"
  ] = new RegExp("\\\\", "g");
  Sys.Serialization.JavaScriptSerializer._escapeChars["\\"] = "\\\\";
  Sys.Serialization.JavaScriptSerializer._charsToEscape[1] = '"';
  Sys.Serialization.JavaScriptSerializer._charsToEscapeRegExs['"'] = new RegExp(
    '"',
    "g"
  );
  Sys.Serialization.JavaScriptSerializer._escapeChars['"'] = '\\"';
  for (var a = 0; a < 32; a++) {
    var b = String.fromCharCode(a);
    Sys.Serialization.JavaScriptSerializer._charsToEscape[a + 2] = b;
    Sys.Serialization.JavaScriptSerializer._charsToEscapeRegExs[b] = new RegExp(
      b,
      "g"
    );
    Sys.Serialization.JavaScriptSerializer._escapeChars[b] = c[a];
  }
};
Sys.Serialization.JavaScriptSerializer._serializeBooleanWithBuilder = function (
  b,
  a
) {
  a.append(b.toString());
};
Sys.Serialization.JavaScriptSerializer._serializeNumberWithBuilder = function (
  a,
  b
) {
  if (isFinite(a)) b.append(String(a));
  else throw Error.invalidOperation(Sys.Res.cannotSerializeNonFiniteNumbers);
};
Sys.Serialization.JavaScriptSerializer._serializeStringWithBuilder = function (
  a,
  c
) {
  c.append('"');
  if (Sys.Serialization.JavaScriptSerializer._escapeRegEx.test(a)) {
    if (Sys.Serialization.JavaScriptSerializer._charsToEscape.length === 0)
      Sys.Serialization.JavaScriptSerializer._init();
    if (a.length < 128)
      a = a.replace(
        Sys.Serialization.JavaScriptSerializer._escapeRegExGlobal,
        function (a) {
          return Sys.Serialization.JavaScriptSerializer._escapeChars[a];
        }
      );
    else
      for (var d = 0; d < 34; d++) {
        var b = Sys.Serialization.JavaScriptSerializer._charsToEscape[d];
        if (a.indexOf(b) !== -1)
          if (
            Sys.Browser.agent === Sys.Browser.Opera ||
            Sys.Browser.agent === Sys.Browser.FireFox
          )
            a = a
              .split(b)
              .join(Sys.Serialization.JavaScriptSerializer._escapeChars[b]);
          else
            a = a.replace(
              Sys.Serialization.JavaScriptSerializer._charsToEscapeRegExs[b],
              Sys.Serialization.JavaScriptSerializer._escapeChars[b]
            );
      }
  }
  c.append(a);
  c.append('"');
};
Sys.Serialization.JavaScriptSerializer._serializeWithBuilder = function (
  b,
  a,
  i,
  g
) {
  var c;
  switch (typeof b) {
    case "object":
      if (b)
        if (Number.isInstanceOfType(b))
          Sys.Serialization.JavaScriptSerializer._serializeNumberWithBuilder(
            b,
            a
          );
        else if (Boolean.isInstanceOfType(b))
          Sys.Serialization.JavaScriptSerializer._serializeBooleanWithBuilder(
            b,
            a
          );
        else if (String.isInstanceOfType(b))
          Sys.Serialization.JavaScriptSerializer._serializeStringWithBuilder(
            b,
            a
          );
        else if (Array.isInstanceOfType(b)) {
          a.append("[");
          for (c = 0; c < b.length; ++c) {
            if (c > 0) a.append(",");
            Sys.Serialization.JavaScriptSerializer._serializeWithBuilder(
              b[c],
              a,
              false,
              g
            );
          }
          a.append("]");
        } else {
          if (Date.isInstanceOfType(b)) {
            a.append('"\\/Date(');
            a.append(b.getTime());
            a.append(')\\/"');
            break;
          }
          var d = [],
            f = 0;
          for (var e in b) {
            if (e.startsWith("$")) continue;
            if (
              e ===
                Sys.Serialization.JavaScriptSerializer._serverTypeFieldName &&
              f !== 0
            ) {
              d[f++] = d[0];
              d[0] = e;
            } else d[f++] = e;
          }
          if (i) d.sort();
          a.append("{");
          var j = false;
          for (c = 0; c < f; c++) {
            var h = b[d[c]];
            if (typeof h !== "undefined" && typeof h !== "function") {
              if (j) a.append(",");
              else j = true;
              Sys.Serialization.JavaScriptSerializer._serializeWithBuilder(
                d[c],
                a,
                i,
                g
              );
              a.append(":");
              Sys.Serialization.JavaScriptSerializer._serializeWithBuilder(
                h,
                a,
                i,
                g
              );
            }
          }
          a.append("}");
        }
      else a.append("null");
      break;
    case "number":
      Sys.Serialization.JavaScriptSerializer._serializeNumberWithBuilder(b, a);
      break;
    case "string":
      Sys.Serialization.JavaScriptSerializer._serializeStringWithBuilder(b, a);
      break;
    case "boolean":
      Sys.Serialization.JavaScriptSerializer._serializeBooleanWithBuilder(b, a);
      break;
    default:
      a.append("null");
  }
};
Sys.Serialization.JavaScriptSerializer.serialize = function (b) {
  var a = new Sys.StringBuilder();
  Sys.Serialization.JavaScriptSerializer._serializeWithBuilder(b, a, false);
  return a.toString();
};
Sys.Serialization.JavaScriptSerializer.deserialize = function (data, secure) {
  if (data.length === 0)
    throw Error.argument("data", Sys.Res.cannotDeserializeEmptyString);
  try {
    var exp = data.replace(
      Sys.Serialization.JavaScriptSerializer._dateRegEx,
      "$1new Date($2)"
    );
    if (
      secure &&
      Sys.Serialization.JavaScriptSerializer._jsonRegEx.test(
        exp.replace(Sys.Serialization.JavaScriptSerializer._jsonStringRegEx, "")
      )
    )
      throw null;
    return eval("(" + exp + ")");
  } catch (a) {
    throw Error.argument("data", Sys.Res.cannotDeserializeInvalidJson);
  }
};
Type.registerNamespace("Sys.UI");
Sys.EventHandlerList = function () {
  this._list = {};
};
Sys.EventHandlerList.prototype = {
  _addHandler: function (b, a) {
    Array.add(this._getEvent(b, true), a);
  },
  addHandler: function (b, a) {
    this._addHandler(b, a);
  },
  _removeHandler: function (c, b) {
    var a = this._getEvent(c);
    if (!a) return;
    Array.remove(a, b);
  },
  removeHandler: function (b, a) {
    this._removeHandler(b, a);
  },
  getHandler: function (b) {
    var a = this._getEvent(b);
    if (!a || a.length === 0) return null;
    a = Array.clone(a);
    return function (c, d) {
      for (var b = 0, e = a.length; b < e; b++) a[b](c, d);
    };
  },
  _getEvent: function (a, b) {
    if (!this._list[a]) {
      if (!b) return null;
      this._list[a] = [];
    }
    return this._list[a];
  },
};
Sys.EventHandlerList.registerClass("Sys.EventHandlerList");
Sys.CommandEventArgs = function (c, a, b) {
  Sys.CommandEventArgs.initializeBase(this);
  this._commandName = c;
  this._commandArgument = a;
  this._commandSource = b;
};
Sys.CommandEventArgs.prototype = {
  _commandName: null,
  _commandArgument: null,
  _commandSource: null,
  get_commandName: function () {
    return this._commandName;
  },
  get_commandArgument: function () {
    return this._commandArgument;
  },
  get_commandSource: function () {
    return this._commandSource;
  },
};
Sys.CommandEventArgs.registerClass("Sys.CommandEventArgs", Sys.CancelEventArgs);
Sys.INotifyPropertyChange = function () {};
Sys.INotifyPropertyChange.prototype = {};
Sys.INotifyPropertyChange.registerInterface("Sys.INotifyPropertyChange");
Sys.PropertyChangedEventArgs = function (a) {
  Sys.PropertyChangedEventArgs.initializeBase(this);
  this._propertyName = a;
};
Sys.PropertyChangedEventArgs.prototype = {
  get_propertyName: function () {
    return this._propertyName;
  },
};
Sys.PropertyChangedEventArgs.registerClass(
  "Sys.PropertyChangedEventArgs",
  Sys.EventArgs
);
Sys.INotifyDisposing = function () {};
Sys.INotifyDisposing.prototype = {};
Sys.INotifyDisposing.registerInterface("Sys.INotifyDisposing");
Sys.Component = function () {
  if (Sys.Application) Sys.Application.registerDisposableObject(this);
};
Sys.Component.prototype = {
  _id: null,
  _initialized: false,
  _updating: false,
  get_events: function () {
    if (!this._events) this._events = new Sys.EventHandlerList();
    return this._events;
  },
  get_id: function () {
    return this._id;
  },
  set_id: function (a) {
    this._id = a;
  },
  get_isInitialized: function () {
    return this._initialized;
  },
  get_isUpdating: function () {
    return this._updating;
  },
  add_disposing: function (a) {
    this.get_events().addHandler("disposing", a);
  },
  remove_disposing: function (a) {
    this.get_events().removeHandler("disposing", a);
  },
  add_propertyChanged: function (a) {
    this.get_events().addHandler("propertyChanged", a);
  },
  remove_propertyChanged: function (a) {
    this.get_events().removeHandler("propertyChanged", a);
  },
  beginUpdate: function () {
    this._updating = true;
  },
  dispose: function () {
    if (this._events) {
      var a = this._events.getHandler("disposing");
      if (a) a(this, Sys.EventArgs.Empty);
    }
    delete this._events;
    Sys.Application.unregisterDisposableObject(this);
    Sys.Application.removeComponent(this);
  },
  endUpdate: function () {
    this._updating = false;
    if (!this._initialized) this.initialize();
    this.updated();
  },
  initialize: function () {
    this._initialized = true;
  },
  raisePropertyChanged: function (b) {
    if (!this._events) return;
    var a = this._events.getHandler("propertyChanged");
    if (a) a(this, new Sys.PropertyChangedEventArgs(b));
  },
  updated: function () {},
};
Sys.Component.registerClass(
  "Sys.Component",
  null,
  Sys.IDisposable,
  Sys.INotifyPropertyChange,
  Sys.INotifyDisposing
);
function Sys$Component$_setProperties(a, i) {
  var d,
    j = Object.getType(a),
    e = j === Object || j === Sys.UI.DomElement,
    h = Sys.Component.isInstanceOfType(a) && !a.get_isUpdating();
  if (h) a.beginUpdate();
  for (var c in i) {
    var b = i[c],
      f = e ? null : a["get_" + c];
    if (e || typeof f !== "function") {
      var k = a[c];
      if (!b || typeof b !== "object" || (e && !k)) a[c] = b;
      else Sys$Component$_setProperties(k, b);
    } else {
      var l = a["set_" + c];
      if (typeof l === "function") l.apply(a, [b]);
      else if (b instanceof Array) {
        d = f.apply(a);
        for (var g = 0, m = d.length, n = b.length; g < n; g++, m++)
          d[m] = b[g];
      } else if (typeof b === "object" && Object.getType(b) === Object) {
        d = f.apply(a);
        Sys$Component$_setProperties(d, b);
      }
    }
  }
  if (h) a.endUpdate();
}
function Sys$Component$_setReferences(c, b) {
  for (var a in b) {
    var e = c["set_" + a],
      d = $find(b[a]);
    e.apply(c, [d]);
  }
}
var $create = (Sys.Component.create = function (h, f, d, c, g) {
  var a = g ? new h(g) : new h(),
    b = Sys.Application,
    i = b.get_isCreatingComponents();
  a.beginUpdate();
  if (f) Sys$Component$_setProperties(a, f);
  if (d) for (var e in d) a["add_" + e](d[e]);
  if (a.get_id()) b.addComponent(a);
  if (i) {
    b._createdComponents[b._createdComponents.length] = a;
    if (c) b._addComponentToSecondPass(a, c);
    else a.endUpdate();
  } else {
    if (c) Sys$Component$_setReferences(a, c);
    a.endUpdate();
  }
  return a;
});
Sys.UI.MouseButton = function () {
  throw Error.notImplemented();
};
Sys.UI.MouseButton.prototype = {
  leftButton: 0,
  middleButton: 1,
  rightButton: 2,
};
Sys.UI.MouseButton.registerEnum("Sys.UI.MouseButton");
Sys.UI.Key = function () {
  throw Error.notImplemented();
};
Sys.UI.Key.prototype = {
  backspace: 8,
  tab: 9,
  enter: 13,
  esc: 27,
  space: 32,
  pageUp: 33,
  pageDown: 34,
  end: 35,
  home: 36,
  left: 37,
  up: 38,
  right: 39,
  down: 40,
  del: 127,
};
Sys.UI.Key.registerEnum("Sys.UI.Key");
Sys.UI.Point = function (a, b) {
  this.rawX = a;
  this.rawY = b;
  this.x = Math.round(a);
  this.y = Math.round(b);
};
Sys.UI.Point.registerClass("Sys.UI.Point");
Sys.UI.Bounds = function (c, d, b, a) {
  this.x = c;
  this.y = d;
  this.height = a;
  this.width = b;
};
Sys.UI.Bounds.registerClass("Sys.UI.Bounds");
Sys.UI.DomEvent = function (e) {
  var a = e,
    b = (this.type = a.type.toLowerCase());
  this.rawEvent = a;
  this.altKey = a.altKey;
  if (typeof a.button !== "undefined")
    this.button =
      typeof a.which !== "undefined"
        ? a.button
        : a.button === 4
        ? Sys.UI.MouseButton.middleButton
        : a.button === 2
        ? Sys.UI.MouseButton.rightButton
        : Sys.UI.MouseButton.leftButton;
  if (b === "keypress") this.charCode = a.charCode || a.keyCode;
  else if (a.keyCode && a.keyCode === 46) this.keyCode = 127;
  else this.keyCode = a.keyCode;
  this.clientX = a.clientX;
  this.clientY = a.clientY;
  this.ctrlKey = a.ctrlKey;
  this.target = a.target ? a.target : a.srcElement;
  if (!b.startsWith("key"))
    if (typeof a.offsetX !== "undefined" && typeof a.offsetY !== "undefined") {
      this.offsetX = a.offsetX;
      this.offsetY = a.offsetY;
    } else if (
      this.target &&
      this.target.nodeType !== 3 &&
      typeof a.clientX === "number"
    ) {
      var c = Sys.UI.DomElement.getLocation(this.target),
        d = Sys.UI.DomElement._getWindow(this.target);
      this.offsetX = (d.pageXOffset || 0) + a.clientX - c.x;
      this.offsetY = (d.pageYOffset || 0) + a.clientY - c.y;
    }
  this.screenX = a.screenX;
  this.screenY = a.screenY;
  this.shiftKey = a.shiftKey;
};
Sys.UI.DomEvent.prototype = {
  preventDefault: function () {
    if (this.rawEvent.preventDefault) this.rawEvent.preventDefault();
    else if (window.event) this.rawEvent.returnValue = false;
  },
  stopPropagation: function () {
    if (this.rawEvent.stopPropagation) this.rawEvent.stopPropagation();
    else if (window.event) this.rawEvent.cancelBubble = true;
  },
};
Sys.UI.DomEvent.registerClass("Sys.UI.DomEvent");
var $addHandler = (Sys.UI.DomEvent.addHandler = function (a, d, e, g) {
    if (!a._events) a._events = {};
    var c = a._events[d];
    if (!c) a._events[d] = c = [];
    var b;
    if (a.addEventListener) {
      b = function (b) {
        return e.call(a, new Sys.UI.DomEvent(b));
      };
      a.addEventListener(d, b, false);
    } else if (a.attachEvent) {
      b = function () {
        var b = {};
        try {
          b = Sys.UI.DomElement._getWindow(a).event;
        } catch (c) {}
        return e.call(a, new Sys.UI.DomEvent(b));
      };
      a.attachEvent("on" + d, b);
    }
    c[c.length] = { handler: e, browserHandler: b, autoRemove: g };
    if (g) {
      var f = a.dispose;
      if (f !== Sys.UI.DomEvent._disposeHandlers) {
        a.dispose = Sys.UI.DomEvent._disposeHandlers;
        if (typeof f !== "undefined") a._chainDispose = f;
      }
    }
  }),
  $addHandlers = (Sys.UI.DomEvent.addHandlers = function (f, d, c, e) {
    for (var b in d) {
      var a = d[b];
      if (c) a = Function.createDelegate(c, a);
      $addHandler(f, b, a, e || false);
    }
  }),
  $clearHandlers = (Sys.UI.DomEvent.clearHandlers = function (a) {
    Sys.UI.DomEvent._clearHandlers(a, false);
  });
Sys.UI.DomEvent._clearHandlers = function (a, g) {
  if (a._events) {
    var e = a._events;
    for (var b in e) {
      var d = e[b];
      for (var c = d.length - 1; c >= 0; c--) {
        var f = d[c];
        if (!g || f.autoRemove) $removeHandler(a, b, f.handler);
      }
    }
    a._events = null;
  }
};
Sys.UI.DomEvent._disposeHandlers = function () {
  Sys.UI.DomEvent._clearHandlers(this, true);
  var b = this._chainDispose,
    a = typeof b;
  if (a !== "undefined") {
    this.dispose = b;
    this._chainDispose = null;
    if (a === "function") this.dispose();
  }
};
var $removeHandler = (Sys.UI.DomEvent.removeHandler = function (b, a, c) {
  Sys.UI.DomEvent._removeHandler(b, a, c);
});
Sys.UI.DomEvent._removeHandler = function (a, e, f) {
  var d = null,
    c = a._events[e];
  for (var b = 0, g = c.length; b < g; b++)
    if (c[b].handler === f) {
      d = c[b].browserHandler;
      break;
    }
  if (a.removeEventListener) a.removeEventListener(e, d, false);
  else if (a.detachEvent) a.detachEvent("on" + e, d);
  c.splice(b, 1);
};
Sys.UI.DomElement = function () {};
Sys.UI.DomElement.registerClass("Sys.UI.DomElement");
Sys.UI.DomElement.addCssClass = function (a, b) {
  if (!Sys.UI.DomElement.containsCssClass(a, b))
    if (a.className === "") a.className = b;
    else a.className += " " + b;
};
Sys.UI.DomElement.containsCssClass = function (b, a) {
  return Array.contains(b.className.split(" "), a);
};
Sys.UI.DomElement.getBounds = function (a) {
  var b = Sys.UI.DomElement.getLocation(a);
  return new Sys.UI.Bounds(b.x, b.y, a.offsetWidth || 0, a.offsetHeight || 0);
};
var $get = (Sys.UI.DomElement.getElementById = function (f, e) {
  if (!e) return document.getElementById(f);
  if (e.getElementById) return e.getElementById(f);
  var c = [],
    d = e.childNodes;
  for (var b = 0; b < d.length; b++) {
    var a = d[b];
    if (a.nodeType == 1) c[c.length] = a;
  }
  while (c.length) {
    a = c.shift();
    if (a.id == f) return a;
    d = a.childNodes;
    for (b = 0; b < d.length; b++) {
      a = d[b];
      if (a.nodeType == 1) c[c.length] = a;
    }
  }
  return null;
});
if (document.documentElement.getBoundingClientRect)
  Sys.UI.DomElement.getLocation = function (a) {
    if (
      a.self ||
      a.nodeType === 9 ||
      a === document.documentElement ||
      a.parentNode === a.ownerDocument.documentElement
    )
      return new Sys.UI.Point(0, 0);
    var f = a.getBoundingClientRect();
    if (!f) return new Sys.UI.Point(0, 0);
    var e = a.ownerDocument.documentElement,
      h = a.ownerDocument.body,
      l,
      c = Math.round(f.left) + (e.scrollLeft || h.scrollLeft),
      d = Math.round(f.top) + (e.scrollTop || h.scrollTop);
    if (Sys.Browser.agent === Sys.Browser.InternetExplorer) {
      try {
        var g = a.ownerDocument.parentWindow.frameElement || null;
        if (g) {
          var i = g.frameBorder === "0" || g.frameBorder === "no" ? 2 : 0;
          c += i;
          d += i;
        }
      } catch (m) {}
      if (Sys.Browser.version === 7 && !document.documentMode) {
        var j = document.body,
          k = j.getBoundingClientRect(),
          b = (k.right - k.left) / j.clientWidth;
        b = Math.round(b * 100);
        b = (b - (b % 5)) / 100;
        if (!isNaN(b) && b !== 1) {
          c = Math.round(c / b);
          d = Math.round(d / b);
        }
      }
      if ((document.documentMode || 0) < 8) {
        c -= e.clientLeft;
        d -= e.clientTop;
      }
    }
    return new Sys.UI.Point(c, d);
  };
else if (Sys.Browser.agent === Sys.Browser.Safari)
  Sys.UI.DomElement.getLocation = function (c) {
    if ((c.window && c.window === c) || c.nodeType === 9)
      return new Sys.UI.Point(0, 0);
    var d = 0,
      e = 0,
      a,
      j = null,
      g = null,
      b;
    for (a = c; a; j = a, ((g = b), (a = a.offsetParent))) {
      b = Sys.UI.DomElement._getCurrentStyle(a);
      var f = a.tagName ? a.tagName.toUpperCase() : null;
      if (
        (a.offsetLeft || a.offsetTop) &&
        (f !== "BODY" || !g || g.position !== "absolute")
      ) {
        d += a.offsetLeft;
        e += a.offsetTop;
      }
      if (j && Sys.Browser.version >= 3) {
        d += parseInt(b.borderLeftWidth);
        e += parseInt(b.borderTopWidth);
      }
    }
    b = Sys.UI.DomElement._getCurrentStyle(c);
    var h = b ? b.position : null;
    if (!h || h !== "absolute")
      for (a = c.parentNode; a; a = a.parentNode) {
        f = a.tagName ? a.tagName.toUpperCase() : null;
        if (f !== "BODY" && f !== "HTML" && (a.scrollLeft || a.scrollTop)) {
          d -= a.scrollLeft || 0;
          e -= a.scrollTop || 0;
        }
        b = Sys.UI.DomElement._getCurrentStyle(a);
        var i = b ? b.position : null;
        if (i && i === "absolute") break;
      }
    return new Sys.UI.Point(d, e);
  };
else
  Sys.UI.DomElement.getLocation = function (d) {
    if ((d.window && d.window === d) || d.nodeType === 9)
      return new Sys.UI.Point(0, 0);
    var e = 0,
      f = 0,
      a,
      i = null,
      g = null,
      b = null;
    for (a = d; a; i = a, ((g = b), (a = a.offsetParent))) {
      var c = a.tagName ? a.tagName.toUpperCase() : null;
      b = Sys.UI.DomElement._getCurrentStyle(a);
      if (
        (a.offsetLeft || a.offsetTop) &&
        !(c === "BODY" && (!g || g.position !== "absolute"))
      ) {
        e += a.offsetLeft;
        f += a.offsetTop;
      }
      if (i !== null && b) {
        if (c !== "TABLE" && c !== "TD" && c !== "HTML") {
          e += parseInt(b.borderLeftWidth) || 0;
          f += parseInt(b.borderTopWidth) || 0;
        }
        if (
          c === "TABLE" &&
          (b.position === "relative" || b.position === "absolute")
        ) {
          e += parseInt(b.marginLeft) || 0;
          f += parseInt(b.marginTop) || 0;
        }
      }
    }
    b = Sys.UI.DomElement._getCurrentStyle(d);
    var h = b ? b.position : null;
    if (!h || h !== "absolute")
      for (a = d.parentNode; a; a = a.parentNode) {
        c = a.tagName ? a.tagName.toUpperCase() : null;
        if (c !== "BODY" && c !== "HTML" && (a.scrollLeft || a.scrollTop)) {
          e -= a.scrollLeft || 0;
          f -= a.scrollTop || 0;
          b = Sys.UI.DomElement._getCurrentStyle(a);
          if (b) {
            e += parseInt(b.borderLeftWidth) || 0;
            f += parseInt(b.borderTopWidth) || 0;
          }
        }
      }
    return new Sys.UI.Point(e, f);
  };
Sys.UI.DomElement.isDomElement = function (a) {
  return Sys._isDomElement(a);
};
Sys.UI.DomElement.removeCssClass = function (d, c) {
  var a = " " + d.className + " ",
    b = a.indexOf(" " + c + " ");
  if (b >= 0)
    d.className = (
      a.substr(0, b) +
      " " +
      a.substring(b + c.length + 1, a.length)
    ).trim();
};
Sys.UI.DomElement.resolveElement = function (b, c) {
  var a = b;
  if (!a) return null;
  if (typeof a === "string") a = Sys.UI.DomElement.getElementById(a, c);
  return a;
};
Sys.UI.DomElement.raiseBubbleEvent = function (c, d) {
  var b = c;
  while (b) {
    var a = b.control;
    if (a && a.onBubbleEvent && a.raiseBubbleEvent) {
      Sys.UI.DomElement._raiseBubbleEventFromControl(a, c, d);
      return;
    }
    b = b.parentNode;
  }
};
Sys.UI.DomElement._raiseBubbleEventFromControl = function (a, b, c) {
  if (!a.onBubbleEvent(b, c)) a._raiseBubbleEvent(b, c);
};
Sys.UI.DomElement.setLocation = function (b, c, d) {
  var a = b.style;
  a.position = "absolute";
  a.left = c + "px";
  a.top = d + "px";
};
Sys.UI.DomElement.toggleCssClass = function (b, a) {
  if (Sys.UI.DomElement.containsCssClass(b, a))
    Sys.UI.DomElement.removeCssClass(b, a);
  else Sys.UI.DomElement.addCssClass(b, a);
};
Sys.UI.DomElement.getVisibilityMode = function (a) {
  return a._visibilityMode === Sys.UI.VisibilityMode.hide
    ? Sys.UI.VisibilityMode.hide
    : Sys.UI.VisibilityMode.collapse;
};
Sys.UI.DomElement.setVisibilityMode = function (a, b) {
  Sys.UI.DomElement._ensureOldDisplayMode(a);
  if (a._visibilityMode !== b) {
    a._visibilityMode = b;
    if (Sys.UI.DomElement.getVisible(a) === false)
      if (a._visibilityMode === Sys.UI.VisibilityMode.hide)
        a.style.display = a._oldDisplayMode;
      else a.style.display = "none";
    a._visibilityMode = b;
  }
};
Sys.UI.DomElement.getVisible = function (b) {
  var a = b.currentStyle || Sys.UI.DomElement._getCurrentStyle(b);
  if (!a) return true;
  return a.visibility !== "hidden" && a.display !== "none";
};
Sys.UI.DomElement.setVisible = function (a, b) {
  if (b !== Sys.UI.DomElement.getVisible(a)) {
    Sys.UI.DomElement._ensureOldDisplayMode(a);
    a.style.visibility = b ? "visible" : "hidden";
    if (b || a._visibilityMode === Sys.UI.VisibilityMode.hide)
      a.style.display = a._oldDisplayMode;
    else a.style.display = "none";
  }
};
Sys.UI.DomElement._ensureOldDisplayMode = function (a) {
  if (!a._oldDisplayMode) {
    var b = a.currentStyle || Sys.UI.DomElement._getCurrentStyle(a);
    a._oldDisplayMode = b ? b.display : null;
    if (!a._oldDisplayMode || a._oldDisplayMode === "none")
      switch (a.tagName.toUpperCase()) {
        case "DIV":
        case "P":
        case "ADDRESS":
        case "BLOCKQUOTE":
        case "BODY":
        case "COL":
        case "COLGROUP":
        case "DD":
        case "DL":
        case "DT":
        case "FIELDSET":
        case "FORM":
        case "H1":
        case "H2":
        case "H3":
        case "H4":
        case "H5":
        case "H6":
        case "HR":
        case "IFRAME":
        case "LEGEND":
        case "OL":
        case "PRE":
        case "TABLE":
        case "TD":
        case "TH":
        case "TR":
        case "UL":
          a._oldDisplayMode = "block";
          break;
        case "LI":
          a._oldDisplayMode = "list-item";
          break;
        default:
          a._oldDisplayMode = "inline";
      }
  }
};
Sys.UI.DomElement._getWindow = function (a) {
  var b = a.ownerDocument || a.document || a;
  return b.defaultView || b.parentWindow;
};
Sys.UI.DomElement._getCurrentStyle = function (a) {
  if (a.nodeType === 3) return null;
  var c = Sys.UI.DomElement._getWindow(a);
  if (a.documentElement) a = a.documentElement;
  var b =
    c && a !== c && c.getComputedStyle
      ? c.getComputedStyle(a, null)
      : a.currentStyle || a.style;
  if (!b && Sys.Browser.agent === Sys.Browser.Safari && a.style) {
    var g = a.style.display,
      f = a.style.position;
    a.style.position = "absolute";
    a.style.display = "block";
    var e = c.getComputedStyle(a, null);
    a.style.display = g;
    a.style.position = f;
    b = {};
    for (var d in e) b[d] = e[d];
    b.display = "none";
  }
  return b;
};
Sys.IContainer = function () {};
Sys.IContainer.prototype = {};
Sys.IContainer.registerInterface("Sys.IContainer");
Sys.ApplicationLoadEventArgs = function (b, a) {
  Sys.ApplicationLoadEventArgs.initializeBase(this);
  this._components = b;
  this._isPartialLoad = a;
};
Sys.ApplicationLoadEventArgs.prototype = {
  get_components: function () {
    return this._components;
  },
  get_isPartialLoad: function () {
    return this._isPartialLoad;
  },
};
Sys.ApplicationLoadEventArgs.registerClass(
  "Sys.ApplicationLoadEventArgs",
  Sys.EventArgs
);
Sys._Application = function () {
  Sys._Application.initializeBase(this);
  this._disposableObjects = [];
  this._components = {};
  this._createdComponents = [];
  this._secondPassComponents = [];
  this._unloadHandlerDelegate = Function.createDelegate(
    this,
    this._unloadHandler
  );
  Sys.UI.DomEvent.addHandler(window, "unload", this._unloadHandlerDelegate);
  this._domReady();
};
Sys._Application.prototype = {
  _creatingComponents: false,
  _disposing: false,
  _deleteCount: 0,
  get_isCreatingComponents: function () {
    return this._creatingComponents;
  },
  get_isDisposing: function () {
    return this._disposing;
  },
  add_init: function (a) {
    if (this._initialized) a(this, Sys.EventArgs.Empty);
    else this.get_events().addHandler("init", a);
  },
  remove_init: function (a) {
    this.get_events().removeHandler("init", a);
  },
  add_load: function (a) {
    this.get_events().addHandler("load", a);
  },
  remove_load: function (a) {
    this.get_events().removeHandler("load", a);
  },
  add_unload: function (a) {
    this.get_events().addHandler("unload", a);
  },
  remove_unload: function (a) {
    this.get_events().removeHandler("unload", a);
  },
  addComponent: function (a) {
    this._components[a.get_id()] = a;
  },
  beginCreateComponents: function () {
    this._creatingComponents = true;
  },
  dispose: function () {
    if (!this._disposing) {
      this._disposing = true;
      if (this._timerCookie) {
        window.clearTimeout(this._timerCookie);
        delete this._timerCookie;
      }
      if (this._endRequestHandler) {
        Sys.WebForms.PageRequestManager.getInstance().remove_endRequest(
          this._endRequestHandler
        );
        delete this._endRequestHandler;
      }
      if (this._beginRequestHandler) {
        Sys.WebForms.PageRequestManager.getInstance().remove_beginRequest(
          this._beginRequestHandler
        );
        delete this._beginRequestHandler;
      }
      if (window.pageUnload) window.pageUnload(this, Sys.EventArgs.Empty);
      var c = this.get_events().getHandler("unload");
      if (c) c(this, Sys.EventArgs.Empty);
      var b = Array.clone(this._disposableObjects);
      for (var a = 0, f = b.length; a < f; a++) {
        var d = b[a];
        if (typeof d !== "undefined") d.dispose();
      }
      Array.clear(this._disposableObjects);
      Sys.UI.DomEvent.removeHandler(
        window,
        "unload",
        this._unloadHandlerDelegate
      );
      if (Sys._ScriptLoader) {
        var e = Sys._ScriptLoader.getInstance();
        if (e) e.dispose();
      }
      Sys._Application.callBaseMethod(this, "dispose");
    }
  },
  disposeElement: function (c, j) {
    if (c.nodeType === 1) {
      var b,
        h = c.getElementsByTagName("*"),
        g = h.length,
        i = new Array(g);
      for (b = 0; b < g; b++) i[b] = h[b];
      for (b = g - 1; b >= 0; b--) {
        var d = i[b],
          f = d.dispose;
        if (f && typeof f === "function") d.dispose();
        else {
          var e = d.control;
          if (e && typeof e.dispose === "function") e.dispose();
        }
        var a = d._behaviors;
        if (a) this._disposeComponents(a);
        a = d._components;
        if (a) {
          this._disposeComponents(a);
          d._components = null;
        }
      }
      if (!j) {
        var f = c.dispose;
        if (f && typeof f === "function") c.dispose();
        else {
          var e = c.control;
          if (e && typeof e.dispose === "function") e.dispose();
        }
        var a = c._behaviors;
        if (a) this._disposeComponents(a);
        a = c._components;
        if (a) {
          this._disposeComponents(a);
          c._components = null;
        }
      }
    }
  },
  endCreateComponents: function () {
    var b = this._secondPassComponents;
    for (var a = 0, d = b.length; a < d; a++) {
      var c = b[a].component;
      Sys$Component$_setReferences(c, b[a].references);
      c.endUpdate();
    }
    this._secondPassComponents = [];
    this._creatingComponents = false;
  },
  findComponent: function (b, a) {
    return a
      ? Sys.IContainer.isInstanceOfType(a)
        ? a.findComponent(b)
        : a[b] || null
      : Sys.Application._components[b] || null;
  },
  getComponents: function () {
    var a = [],
      b = this._components;
    for (var c in b) a[a.length] = b[c];
    return a;
  },
  initialize: function () {
    if (!this.get_isInitialized() && !this._disposing) {
      Sys._Application.callBaseMethod(this, "initialize");
      this._raiseInit();
      if (this.get_stateString) {
        if (Sys.WebForms && Sys.WebForms.PageRequestManager) {
          this._beginRequestHandler = Function.createDelegate(
            this,
            this._onPageRequestManagerBeginRequest
          );
          Sys.WebForms.PageRequestManager.getInstance().add_beginRequest(
            this._beginRequestHandler
          );
          this._endRequestHandler = Function.createDelegate(
            this,
            this._onPageRequestManagerEndRequest
          );
          Sys.WebForms.PageRequestManager.getInstance().add_endRequest(
            this._endRequestHandler
          );
        }
        var a = this.get_stateString();
        if (a !== this._currentEntry) this._navigate(a);
        else this._ensureHistory();
      }
      this.raiseLoad();
    }
  },
  notifyScriptLoaded: function () {},
  registerDisposableObject: function (b) {
    if (!this._disposing) {
      var a = this._disposableObjects,
        c = a.length;
      a[c] = b;
      b.__msdisposeindex = c;
    }
  },
  raiseLoad: function () {
    var b = this.get_events().getHandler("load"),
      a = new Sys.ApplicationLoadEventArgs(
        Array.clone(this._createdComponents),
        !!this._loaded
      );
    this._loaded = true;
    if (b) b(this, a);
    if (window.pageLoad) window.pageLoad(this, a);
    this._createdComponents = [];
  },
  removeComponent: function (b) {
    var a = b.get_id();
    if (a) delete this._components[a];
  },
  unregisterDisposableObject: function (a) {
    if (!this._disposing) {
      var e = a.__msdisposeindex;
      if (typeof e === "number") {
        var b = this._disposableObjects;
        delete b[e];
        delete a.__msdisposeindex;
        if (++this._deleteCount > 1000) {
          var c = [];
          for (var d = 0, f = b.length; d < f; d++) {
            a = b[d];
            if (typeof a !== "undefined") {
              a.__msdisposeindex = c.length;
              c.push(a);
            }
          }
          this._disposableObjects = c;
          this._deleteCount = 0;
        }
      }
    }
  },
  _addComponentToSecondPass: function (b, a) {
    this._secondPassComponents[this._secondPassComponents.length] = {
      component: b,
      references: a,
    };
  },
  _disposeComponents: function (a) {
    if (a)
      for (var b = a.length - 1; b >= 0; b--) {
        var c = a[b];
        if (typeof c.dispose === "function") c.dispose();
      }
  },
  _domReady: function () {
    var a,
      g,
      f = this;
    function b() {
      f.initialize();
    }
    var c = function () {
      Sys.UI.DomEvent.removeHandler(window, "load", c);
      b();
    };
    Sys.UI.DomEvent.addHandler(window, "load", c);
    if (document.addEventListener)
      try {
        document.addEventListener(
          "DOMContentLoaded",
          (a = function () {
            document.removeEventListener("DOMContentLoaded", a, false);
            b();
          }),
          false
        );
      } catch (h) {}
    else if (document.attachEvent)
      if (window == window.top && document.documentElement.doScroll) {
        var e,
          d = document.createElement("div");
        a = function () {
          try {
            d.doScroll("left");
          } catch (c) {
            e = window.setTimeout(a, 0);
            return;
          }
          d = null;
          b();
        };
        a();
      } else
        document.attachEvent(
          "onreadystatechange",
          (a = function () {
            if (document.readyState === "complete") {
              document.detachEvent("onreadystatechange", a);
              b();
            }
          })
        );
  },
  _raiseInit: function () {
    var a = this.get_events().getHandler("init");
    if (a) {
      this.beginCreateComponents();
      a(this, Sys.EventArgs.Empty);
      this.endCreateComponents();
    }
  },
  _unloadHandler: function () {
    this.dispose();
  },
};
Sys._Application.registerClass(
  "Sys._Application",
  Sys.Component,
  Sys.IContainer
);
Sys.Application = new Sys._Application();
var $find = Sys.Application.findComponent;
Sys.UI.Behavior = function (b) {
  Sys.UI.Behavior.initializeBase(this);
  this._element = b;
  var a = b._behaviors;
  if (!a) b._behaviors = [this];
  else a[a.length] = this;
};
Sys.UI.Behavior.prototype = {
  _name: null,
  get_element: function () {
    return this._element;
  },
  get_id: function () {
    var a = Sys.UI.Behavior.callBaseMethod(this, "get_id");
    if (a) return a;
    if (!this._element || !this._element.id) return "";
    return this._element.id + "$" + this.get_name();
  },
  get_name: function () {
    if (this._name) return this._name;
    var a = Object.getTypeName(this),
      b = a.lastIndexOf(".");
    if (b !== -1) a = a.substr(b + 1);
    if (!this.get_isInitialized()) this._name = a;
    return a;
  },
  set_name: function (a) {
    this._name = a;
  },
  initialize: function () {
    Sys.UI.Behavior.callBaseMethod(this, "initialize");
    var a = this.get_name();
    if (a) this._element[a] = this;
  },
  dispose: function () {
    Sys.UI.Behavior.callBaseMethod(this, "dispose");
    var a = this._element;
    if (a) {
      var c = this.get_name();
      if (c) a[c] = null;
      var b = a._behaviors;
      Array.remove(b, this);
      if (b.length === 0) a._behaviors = null;
      delete this._element;
    }
  },
};
Sys.UI.Behavior.registerClass("Sys.UI.Behavior", Sys.Component);
Sys.UI.Behavior.getBehaviorByName = function (b, c) {
  var a = b[c];
  return a && Sys.UI.Behavior.isInstanceOfType(a) ? a : null;
};
Sys.UI.Behavior.getBehaviors = function (a) {
  if (!a._behaviors) return [];
  return Array.clone(a._behaviors);
};
Sys.UI.Behavior.getBehaviorsByType = function (d, e) {
  var a = d._behaviors,
    c = [];
  if (a)
    for (var b = 0, f = a.length; b < f; b++)
      if (e.isInstanceOfType(a[b])) c[c.length] = a[b];
  return c;
};
Sys.UI.VisibilityMode = function () {
  throw Error.notImplemented();
};
Sys.UI.VisibilityMode.prototype = { hide: 0, collapse: 1 };
Sys.UI.VisibilityMode.registerEnum("Sys.UI.VisibilityMode");
Sys.UI.Control = function (a) {
  Sys.UI.Control.initializeBase(this);
  this._element = a;
  a.control = this;
  var b = this.get_role();
  if (b) a.setAttribute("role", b);
};
Sys.UI.Control.prototype = {
  _parent: null,
  _visibilityMode: Sys.UI.VisibilityMode.hide,
  get_element: function () {
    return this._element;
  },
  get_id: function () {
    if (!this._element) return "";
    return this._element.id;
  },
  set_id: function () {
    throw Error.invalidOperation(Sys.Res.cantSetId);
  },
  get_parent: function () {
    if (this._parent) return this._parent;
    if (!this._element) return null;
    var a = this._element.parentNode;
    while (a) {
      if (a.control) return a.control;
      a = a.parentNode;
    }
    return null;
  },
  set_parent: function (a) {
    this._parent = a;
  },
  get_role: function () {
    return null;
  },
  get_visibilityMode: function () {
    return Sys.UI.DomElement.getVisibilityMode(this._element);
  },
  set_visibilityMode: function (a) {
    Sys.UI.DomElement.setVisibilityMode(this._element, a);
  },
  get_visible: function () {
    return Sys.UI.DomElement.getVisible(this._element);
  },
  set_visible: function (a) {
    Sys.UI.DomElement.setVisible(this._element, a);
  },
  addCssClass: function (a) {
    Sys.UI.DomElement.addCssClass(this._element, a);
  },
  dispose: function () {
    Sys.UI.Control.callBaseMethod(this, "dispose");
    if (this._element) {
      this._element.control = null;
      delete this._element;
    }
    if (this._parent) delete this._parent;
  },
  onBubbleEvent: function () {
    return false;
  },
  raiseBubbleEvent: function (a, b) {
    this._raiseBubbleEvent(a, b);
  },
  _raiseBubbleEvent: function (b, c) {
    var a = this.get_parent();
    while (a) {
      if (a.onBubbleEvent(b, c)) return;
      a = a.get_parent();
    }
  },
  removeCssClass: function (a) {
    Sys.UI.DomElement.removeCssClass(this._element, a);
  },
  toggleCssClass: function (a) {
    Sys.UI.DomElement.toggleCssClass(this._element, a);
  },
};
Sys.UI.Control.registerClass("Sys.UI.Control", Sys.Component);
Sys.HistoryEventArgs = function (a) {
  Sys.HistoryEventArgs.initializeBase(this);
  this._state = a;
};
Sys.HistoryEventArgs.prototype = {
  get_state: function () {
    return this._state;
  },
};
Sys.HistoryEventArgs.registerClass("Sys.HistoryEventArgs", Sys.EventArgs);
Sys.Application._appLoadHandler = null;
Sys.Application._beginRequestHandler = null;
Sys.Application._clientId = null;
Sys.Application._currentEntry = "";
Sys.Application._endRequestHandler = null;
Sys.Application._history = null;
Sys.Application._enableHistory = false;
Sys.Application._historyFrame = null;
Sys.Application._historyInitialized = false;
Sys.Application._historyPointIsNew = false;
Sys.Application._ignoreTimer = false;
Sys.Application._initialState = null;
Sys.Application._state = {};
Sys.Application._timerCookie = 0;
Sys.Application._timerHandler = null;
Sys.Application._uniqueId = null;
Sys._Application.prototype.get_stateString = function () {
  var a = null;
  if (Sys.Browser.agent === Sys.Browser.Firefox) {
    var c = window.location.href,
      b = c.indexOf("#");
    if (b !== -1) a = c.substring(b + 1);
    else a = "";
    return a;
  } else a = window.location.hash;
  if (a.length > 0 && a.charAt(0) === "#") a = a.substring(1);
  return a;
};
Sys._Application.prototype.get_enableHistory = function () {
  return this._enableHistory;
};
Sys._Application.prototype.set_enableHistory = function (a) {
  this._enableHistory = a;
};
Sys._Application.prototype.add_navigate = function (a) {
  this.get_events().addHandler("navigate", a);
};
Sys._Application.prototype.remove_navigate = function (a) {
  this.get_events().removeHandler("navigate", a);
};
Sys._Application.prototype.addHistoryPoint = function (c, f) {
  this._ensureHistory();
  var b = this._state;
  for (var a in c) {
    var d = c[a];
    if (d === null) {
      if (typeof b[a] !== "undefined") delete b[a];
    } else b[a] = d;
  }
  var e = this._serializeState(b);
  this._historyPointIsNew = true;
  this._setState(e, f);
  this._raiseNavigate();
};
Sys._Application.prototype.setServerId = function (a, b) {
  this._clientId = a;
  this._uniqueId = b;
};
Sys._Application.prototype.setServerState = function (a) {
  this._ensureHistory();
  this._state.__s = a;
  this._updateHiddenField(a);
};
Sys._Application.prototype._deserializeState = function (a) {
  var e = {};
  a = a || "";
  var b = a.indexOf("&&");
  if (b !== -1 && b + 2 < a.length) {
    e.__s = a.substr(b + 2);
    a = a.substr(0, b);
  }
  var g = a.split("&");
  for (var f = 0, j = g.length; f < j; f++) {
    var d = g[f],
      c = d.indexOf("=");
    if (c !== -1 && c + 1 < d.length) {
      var i = d.substr(0, c),
        h = d.substr(c + 1);
      e[i] = decodeURIComponent(h);
    }
  }
  return e;
};
Sys._Application.prototype._enableHistoryInScriptManager = function () {
  this._enableHistory = true;
};
Sys._Application.prototype._ensureHistory = function () {
  if (!this._historyInitialized && this._enableHistory) {
    if (
      Sys.Browser.agent === Sys.Browser.InternetExplorer &&
      (!document.documentMode || document.documentMode < 8)
    ) {
      this._historyFrame = document.getElementById("__historyFrame");
      this._ignoreIFrame = true;
    }
    this._timerHandler = Function.createDelegate(this, this._onIdle);
    this._timerCookie = window.setTimeout(this._timerHandler, 100);
    try {
      this._initialState = this._deserializeState(this.get_stateString());
    } catch (a) {}
    this._historyInitialized = true;
  }
};
Sys._Application.prototype._navigate = function (c) {
  this._ensureHistory();
  var b = this._deserializeState(c);
  if (this._uniqueId) {
    var d = this._state.__s || "",
      a = b.__s || "";
    if (a !== d) {
      this._updateHiddenField(a);
      __doPostBack(this._uniqueId, a);
      this._state = b;
      return;
    }
  }
  this._setState(c);
  this._state = b;
  this._raiseNavigate();
};
Sys._Application.prototype._onIdle = function () {
  delete this._timerCookie;
  var a = this.get_stateString();
  if (a !== this._currentEntry) {
    if (!this._ignoreTimer) {
      this._historyPointIsNew = false;
      this._navigate(a);
    }
  } else this._ignoreTimer = false;
  this._timerCookie = window.setTimeout(this._timerHandler, 100);
};
Sys._Application.prototype._onIFrameLoad = function (a) {
  if (!document.documentMode || document.documentMode < 8) {
    this._ensureHistory();
    if (!this._ignoreIFrame) {
      this._historyPointIsNew = false;
      this._navigate(a);
    }
    this._ignoreIFrame = false;
  }
};
Sys._Application.prototype._onPageRequestManagerBeginRequest = function () {
  this._ignoreTimer = true;
  this._originalTitle = document.title;
};
Sys._Application.prototype._onPageRequestManagerEndRequest = function (g, f) {
  var d = f.get_dataItems()[this._clientId],
    c = this._originalTitle;
  this._originalTitle = null;
  var b = document.getElementById("__EVENTTARGET");
  if (b && b.value === this._uniqueId) b.value = "";
  if (typeof d !== "undefined") {
    this.setServerState(d);
    this._historyPointIsNew = true;
  } else this._ignoreTimer = false;
  var a = this._serializeState(this._state);
  if (a !== this._currentEntry) {
    this._ignoreTimer = true;
    if (typeof c === "string") {
      if (
        Sys.Browser.agent !== Sys.Browser.InternetExplorer ||
        Sys.Browser.version > 7
      ) {
        var e = document.title;
        document.title = c;
        this._setState(a);
        document.title = e;
      } else this._setState(a);
      this._raiseNavigate();
    } else {
      this._setState(a);
      this._raiseNavigate();
    }
  }
};
Sys._Application.prototype._raiseNavigate = function () {
  var d = this._historyPointIsNew,
    c = this.get_events().getHandler("navigate"),
    b = {};
  for (var a in this._state) if (a !== "__s") b[a] = this._state[a];
  var e = new Sys.HistoryEventArgs(b);
  if (c) c(this, e);
  if (!d) {
    var f;
    try {
      if (
        Sys.Browser.agent === Sys.Browser.Firefox &&
        window.location.hash &&
        (!window.frameElement || window.top.location.hash)
      )
        Sys.Browser.version < 3.5
          ? window.history.go(0)
          : (location.hash = this.get_stateString());
    } catch (g) {}
  }
};
Sys._Application.prototype._serializeState = function (d) {
  var b = [];
  for (var a in d) {
    var e = d[a];
    if (a === "__s") var c = e;
    else b[b.length] = a + "=" + encodeURIComponent(e);
  }
  return b.join("&") + (c ? "&&" + c : "");
};
Sys._Application.prototype._setState = function (a, b) {
  if (this._enableHistory) {
    a = a || "";
    if (a !== this._currentEntry) {
      if (window.theForm) {
        var d = window.theForm.action,
          e = d.indexOf("#");
        window.theForm.action = (e !== -1 ? d.substring(0, e) : d) + "#" + a;
      }
      if (this._historyFrame && this._historyPointIsNew) {
        var f = document.createElement("div");
        f.appendChild(document.createTextNode(b || document.title));
        var g = f.innerHTML;
        this._ignoreIFrame = true;
        var c = this._historyFrame.contentWindow.document;
        c.open("javascript:'<html></html>'");
        c.write(
          "<html><head><title>" +
            g +
            "</title><scri" +
            'pt type="text/javascript">parent.Sys.Application._onIFrameLoad(' +
            Sys.Serialization.JavaScriptSerializer.serialize(a) +
            ");</scri" +
            "pt></head><body></body></html>"
        );
        c.close();
      }
      this._ignoreTimer = false;
      this._currentEntry = a;
      if (this._historyFrame || this._historyPointIsNew) {
        var h = this.get_stateString();
        if (a !== h) {
          window.location.hash = a;
          this._currentEntry = this.get_stateString();
          if (typeof b !== "undefined" && b !== null) document.title = b;
        }
      }
      this._historyPointIsNew = false;
    }
  }
};
Sys._Application.prototype._updateHiddenField = function (b) {
  if (this._clientId) {
    var a = document.getElementById(this._clientId);
    if (a) a.value = b;
  }
};
if (!window.XMLHttpRequest)
  window.XMLHttpRequest = function () {
    var b = ["Msxml2.XMLHTTP.3.0", "Msxml2.XMLHTTP"];
    for (var a = 0, c = b.length; a < c; a++)
      try {
        return new ActiveXObject(b[a]);
      } catch (d) {}
    return null;
  };
Type.registerNamespace("Sys.Net");
Sys.Net.WebRequestExecutor = function () {
  this._webRequest = null;
  this._resultObject = null;
};
Sys.Net.WebRequestExecutor.prototype = {
  get_webRequest: function () {
    return this._webRequest;
  },
  _set_webRequest: function (a) {
    this._webRequest = a;
  },
  get_started: function () {
    throw Error.notImplemented();
  },
  get_responseAvailable: function () {
    throw Error.notImplemented();
  },
  get_timedOut: function () {
    throw Error.notImplemented();
  },
  get_aborted: function () {
    throw Error.notImplemented();
  },
  get_responseData: function () {
    throw Error.notImplemented();
  },
  get_statusCode: function () {
    throw Error.notImplemented();
  },
  get_statusText: function () {
    throw Error.notImplemented();
  },
  get_xml: function () {
    throw Error.notImplemented();
  },
  get_object: function () {
    if (!this._resultObject)
      this._resultObject = Sys.Serialization.JavaScriptSerializer.deserialize(
        this.get_responseData()
      );
    return this._resultObject;
  },
  executeRequest: function () {
    throw Error.notImplemented();
  },
  abort: function () {
    throw Error.notImplemented();
  },
  getResponseHeader: function () {
    throw Error.notImplemented();
  },
  getAllResponseHeaders: function () {
    throw Error.notImplemented();
  },
};
Sys.Net.WebRequestExecutor.registerClass("Sys.Net.WebRequestExecutor");
Sys.Net.XMLDOM = function (d) {
  if (!window.DOMParser) {
    var c = ["Msxml2.DOMDocument.3.0", "Msxml2.DOMDocument"];
    for (var b = 0, f = c.length; b < f; b++)
      try {
        var a = new ActiveXObject(c[b]);
        a.async = false;
        a.loadXML(d);
        a.setProperty("SelectionLanguage", "XPath");
        return a;
      } catch (g) {}
  } else
    try {
      var e = new window.DOMParser();
      return e.parseFromString(d, "text/xml");
    } catch (g) {}
  return null;
};
Sys.Net.XMLHttpExecutor = function () {
  Sys.Net.XMLHttpExecutor.initializeBase(this);
  var a = this;
  this._xmlHttpRequest = null;
  this._webRequest = null;
  this._responseAvailable = false;
  this._timedOut = false;
  this._timer = null;
  this._aborted = false;
  this._started = false;
  this._onReadyStateChange = function () {
    if (a._xmlHttpRequest.readyState === 4) {
      try {
        if (
          typeof a._xmlHttpRequest.status === "undefined" ||
          a._xmlHttpRequest.status === 0
        )
          return;
      } catch (b) {
        return;
      }
      a._clearTimer();
      a._responseAvailable = true;
      try {
        a._webRequest.completed(Sys.EventArgs.Empty);
      } finally {
        if (a._xmlHttpRequest != null) {
          a._xmlHttpRequest.onreadystatechange = Function.emptyMethod;
          a._xmlHttpRequest = null;
        }
      }
    }
  };
  this._clearTimer = function () {
    if (a._timer != null) {
      window.clearTimeout(a._timer);
      a._timer = null;
    }
  };
  this._onTimeout = function () {
    if (!a._responseAvailable) {
      a._clearTimer();
      a._timedOut = true;
      a._xmlHttpRequest.onreadystatechange = Function.emptyMethod;
      a._xmlHttpRequest.abort();
      a._webRequest.completed(Sys.EventArgs.Empty);
      a._xmlHttpRequest = null;
    }
  };
};
Sys.Net.XMLHttpExecutor.prototype = {
  get_timedOut: function () {
    return this._timedOut;
  },
  get_started: function () {
    return this._started;
  },
  get_responseAvailable: function () {
    return this._responseAvailable;
  },
  get_aborted: function () {
    return this._aborted;
  },
  executeRequest: function () {
    this._webRequest = this.get_webRequest();
    var c = this._webRequest.get_body(),
      a = this._webRequest.get_headers();
    this._xmlHttpRequest = new XMLHttpRequest();
    this._xmlHttpRequest.onreadystatechange = this._onReadyStateChange;
    var e = this._webRequest.get_httpVerb();
    this._xmlHttpRequest.open(e, this._webRequest.getResolvedUrl(), true);
    this._xmlHttpRequest.setRequestHeader("X-Requested-With", "XMLHttpRequest");
    if (a)
      for (var b in a) {
        var f = a[b];
        if (typeof f !== "function")
          this._xmlHttpRequest.setRequestHeader(b, f);
      }
    if (e.toLowerCase() === "post") {
      if (a === null || !a["Content-Type"])
        this._xmlHttpRequest.setRequestHeader(
          "Content-Type",
          "application/x-www-form-urlencoded; charset=utf-8"
        );
      if (!c) c = "";
    }
    var d = this._webRequest.get_timeout();
    if (d > 0)
      this._timer = window.setTimeout(
        Function.createDelegate(this, this._onTimeout),
        d
      );
    this._xmlHttpRequest.send(c);
    this._started = true;
  },
  getResponseHeader: function (b) {
    var a;
    try {
      a = this._xmlHttpRequest.getResponseHeader(b);
    } catch (c) {}
    if (!a) a = "";
    return a;
  },
  getAllResponseHeaders: function () {
    return this._xmlHttpRequest.getAllResponseHeaders();
  },
  get_responseData: function () {
    return this._xmlHttpRequest.responseText;
  },
  get_statusCode: function () {
    var a = 0;
    try {
      a = this._xmlHttpRequest.status;
    } catch (b) {}
    return a;
  },
  get_statusText: function () {
    return this._xmlHttpRequest.statusText;
  },
  get_xml: function () {
    var a = this._xmlHttpRequest.responseXML;
    if (!a || !a.documentElement) {
      a = Sys.Net.XMLDOM(this._xmlHttpRequest.responseText);
      if (!a || !a.documentElement) return null;
    } else if (
      navigator.userAgent.indexOf("MSIE") !== -1 &&
      typeof a.setProperty != "undefined"
    )
      a.setProperty("SelectionLanguage", "XPath");
    if (
      a.documentElement.namespaceURI ===
        "http://www.mozilla.org/newlayout/xml/parsererror.xml" &&
      a.documentElement.tagName === "parsererror"
    )
      return null;
    if (
      a.documentElement.firstChild &&
      a.documentElement.firstChild.tagName === "parsererror"
    )
      return null;
    return a;
  },
  abort: function () {
    if (this._aborted || this._responseAvailable || this._timedOut) return;
    this._aborted = true;
    this._clearTimer();
    if (this._xmlHttpRequest && !this._responseAvailable) {
      this._xmlHttpRequest.onreadystatechange = Function.emptyMethod;
      this._xmlHttpRequest.abort();
      this._xmlHttpRequest = null;
      this._webRequest.completed(Sys.EventArgs.Empty);
    }
  },
};
Sys.Net.XMLHttpExecutor.registerClass(
  "Sys.Net.XMLHttpExecutor",
  Sys.Net.WebRequestExecutor
);
Sys.Net._WebRequestManager = function () {
  this._defaultTimeout = 0;
  this._defaultExecutorType = "Sys.Net.XMLHttpExecutor";
};
Sys.Net._WebRequestManager.prototype = {
  add_invokingRequest: function (a) {
    this._get_eventHandlerList().addHandler("invokingRequest", a);
  },
  remove_invokingRequest: function (a) {
    this._get_eventHandlerList().removeHandler("invokingRequest", a);
  },
  add_completedRequest: function (a) {
    this._get_eventHandlerList().addHandler("completedRequest", a);
  },
  remove_completedRequest: function (a) {
    this._get_eventHandlerList().removeHandler("completedRequest", a);
  },
  _get_eventHandlerList: function () {
    if (!this._events) this._events = new Sys.EventHandlerList();
    return this._events;
  },
  get_defaultTimeout: function () {
    return this._defaultTimeout;
  },
  set_defaultTimeout: function (a) {
    this._defaultTimeout = a;
  },
  get_defaultExecutorType: function () {
    return this._defaultExecutorType;
  },
  set_defaultExecutorType: function (a) {
    this._defaultExecutorType = a;
  },
  executeRequest: function (webRequest) {
    var executor = webRequest.get_executor();
    if (!executor) {
      var failed = false;
      try {
        var executorType = eval(this._defaultExecutorType);
        executor = new executorType();
      } catch (a) {
        failed = true;
      }
      webRequest.set_executor(executor);
    }
    if (executor.get_aborted()) return;
    var evArgs = new Sys.Net.NetworkRequestEventArgs(webRequest),
      handler = this._get_eventHandlerList().getHandler("invokingRequest");
    if (handler) handler(this, evArgs);
    if (!evArgs.get_cancel()) executor.executeRequest();
  },
};
Sys.Net._WebRequestManager.registerClass("Sys.Net._WebRequestManager");
Sys.Net.WebRequestManager = new Sys.Net._WebRequestManager();
Sys.Net.NetworkRequestEventArgs = function (a) {
  Sys.Net.NetworkRequestEventArgs.initializeBase(this);
  this._webRequest = a;
};
Sys.Net.NetworkRequestEventArgs.prototype = {
  get_webRequest: function () {
    return this._webRequest;
  },
};
Sys.Net.NetworkRequestEventArgs.registerClass(
  "Sys.Net.NetworkRequestEventArgs",
  Sys.CancelEventArgs
);
Sys.Net.WebRequest = function () {
  this._url = "";
  this._headers = {};
  this._body = null;
  this._userContext = null;
  this._httpVerb = null;
  this._executor = null;
  this._invokeCalled = false;
  this._timeout = 0;
};
Sys.Net.WebRequest.prototype = {
  add_completed: function (a) {
    this._get_eventHandlerList().addHandler("completed", a);
  },
  remove_completed: function (a) {
    this._get_eventHandlerList().removeHandler("completed", a);
  },
  completed: function (b) {
    var a = Sys.Net.WebRequestManager._get_eventHandlerList().getHandler(
      "completedRequest"
    );
    if (a) a(this._executor, b);
    a = this._get_eventHandlerList().getHandler("completed");
    if (a) a(this._executor, b);
  },
  _get_eventHandlerList: function () {
    if (!this._events) this._events = new Sys.EventHandlerList();
    return this._events;
  },
  get_url: function () {
    return this._url;
  },
  set_url: function (a) {
    this._url = a;
  },
  get_headers: function () {
    return this._headers;
  },
  get_httpVerb: function () {
    if (this._httpVerb === null) {
      if (this._body === null) return "GET";
      return "POST";
    }
    return this._httpVerb;
  },
  set_httpVerb: function (a) {
    this._httpVerb = a;
  },
  get_body: function () {
    return this._body;
  },
  set_body: function (a) {
    this._body = a;
  },
  get_userContext: function () {
    return this._userContext;
  },
  set_userContext: function (a) {
    this._userContext = a;
  },
  get_executor: function () {
    return this._executor;
  },
  set_executor: function (a) {
    this._executor = a;
    this._executor._set_webRequest(this);
  },
  get_timeout: function () {
    if (this._timeout === 0)
      return Sys.Net.WebRequestManager.get_defaultTimeout();
    return this._timeout;
  },
  set_timeout: function (a) {
    this._timeout = a;
  },
  getResolvedUrl: function () {
    return Sys.Net.WebRequest._resolveUrl(this._url);
  },
  invoke: function () {
    Sys.Net.WebRequestManager.executeRequest(this);
    this._invokeCalled = true;
  },
};
Sys.Net.WebRequest._resolveUrl = function (b, a) {
  if (b && b.indexOf("://") !== -1) return b;
  if (!a || a.length === 0) {
    var d = document.getElementsByTagName("base")[0];
    if (d && d.href && d.href.length > 0) a = d.href;
    else a = document.URL;
  }
  var c = a.indexOf("?");
  if (c !== -1) a = a.substr(0, c);
  c = a.indexOf("#");
  if (c !== -1) a = a.substr(0, c);
  a = a.substr(0, a.lastIndexOf("/") + 1);
  if (!b || b.length === 0) return a;
  if (b.charAt(0) === "/") {
    var e = a.indexOf("://"),
      g = a.indexOf("/", e + 3);
    return a.substr(0, g) + b;
  } else {
    var f = a.lastIndexOf("/");
    return a.substr(0, f + 1) + b;
  }
};
Sys.Net.WebRequest._createQueryString = function (c, b, f) {
  b = b || encodeURIComponent;
  var h = 0,
    e,
    g,
    d,
    a = new Sys.StringBuilder();
  if (c)
    for (d in c) {
      e = c[d];
      if (typeof e === "function") continue;
      g = Sys.Serialization.JavaScriptSerializer.serialize(e);
      if (h++) a.append("&");
      a.append(d);
      a.append("=");
      a.append(b(g));
    }
  if (f) {
    if (h) a.append("&");
    a.append(f);
  }
  return a.toString();
};
Sys.Net.WebRequest._createUrl = function (a, b, c) {
  if (!b && !c) return a;
  var d = Sys.Net.WebRequest._createQueryString(b, null, c);
  return d.length ? a + (a && a.indexOf("?") >= 0 ? "&" : "?") + d : a;
};
Sys.Net.WebRequest.registerClass("Sys.Net.WebRequest");
Sys._ScriptLoaderTask = function (b, a) {
  this._scriptElement = b;
  this._completedCallback = a;
};
Sys._ScriptLoaderTask.prototype = {
  get_scriptElement: function () {
    return this._scriptElement;
  },
  dispose: function () {
    if (this._disposed) return;
    this._disposed = true;
    this._removeScriptElementHandlers();
    Sys._ScriptLoaderTask._clearScript(this._scriptElement);
    this._scriptElement = null;
  },
  execute: function () {
    if (this._ensureReadyStateLoaded()) this._executeInternal();
  },
  _executeInternal: function () {
    this._addScriptElementHandlers();
    document.getElementsByTagName("head")[0].appendChild(this._scriptElement);
  },
  _ensureReadyStateLoaded: function () {
    if (
      this._useReadyState() &&
      this._scriptElement.readyState !== "loaded" &&
      this._scriptElement.readyState !== "complete"
    ) {
      this._scriptDownloadDelegate = Function.createDelegate(
        this,
        this._executeInternal
      );
      $addHandler(
        this._scriptElement,
        "readystatechange",
        this._scriptDownloadDelegate
      );
      return false;
    }
    return true;
  },
  _addScriptElementHandlers: function () {
    if (this._scriptDownloadDelegate) {
      $removeHandler(
        this._scriptElement,
        "readystatechange",
        this._scriptDownloadDelegate
      );
      this._scriptDownloadDelegate = null;
    }
    this._scriptLoadDelegate = Function.createDelegate(
      this,
      this._scriptLoadHandler
    );
    if (this._useReadyState())
      $addHandler(
        this._scriptElement,
        "readystatechange",
        this._scriptLoadDelegate
      );
    else $addHandler(this._scriptElement, "load", this._scriptLoadDelegate);
    if (this._scriptElement.addEventListener) {
      this._scriptErrorDelegate = Function.createDelegate(
        this,
        this._scriptErrorHandler
      );
      this._scriptElement.addEventListener(
        "error",
        this._scriptErrorDelegate,
        false
      );
    }
  },
  _removeScriptElementHandlers: function () {
    if (this._scriptLoadDelegate) {
      var a = this.get_scriptElement();
      if (this._scriptDownloadDelegate) {
        $removeHandler(
          this._scriptElement,
          "readystatechange",
          this._scriptDownloadDelegate
        );
        this._scriptDownloadDelegate = null;
      }
      if (this._useReadyState() && this._scriptLoadDelegate)
        $removeHandler(a, "readystatechange", this._scriptLoadDelegate);
      else $removeHandler(a, "load", this._scriptLoadDelegate);
      if (this._scriptErrorDelegate) {
        this._scriptElement.removeEventListener(
          "error",
          this._scriptErrorDelegate,
          false
        );
        this._scriptErrorDelegate = null;
      }
      this._scriptLoadDelegate = null;
    }
  },
  _scriptErrorHandler: function () {
    if (this._disposed) return;
    this._completedCallback(this.get_scriptElement(), false);
  },
  _scriptLoadHandler: function () {
    if (this._disposed) return;
    var a = this.get_scriptElement();
    if (this._useReadyState() && a.readyState !== "complete") return;
    this._completedCallback(a, true);
  },
  _useReadyState: function () {
    return (
      Sys.Browser.agent === Sys.Browser.InternetExplorer &&
      (Sys.Browser.version < 9 || (document.documentMode || 0) < 9)
    );
  },
};
Sys._ScriptLoaderTask.registerClass(
  "Sys._ScriptLoaderTask",
  null,
  Sys.IDisposable
);
Sys._ScriptLoaderTask._clearScript = function (a) {
  if (!Sys.Debug.isDebug && a.parentNode) a.parentNode.removeChild(a);
};
Type.registerNamespace("Sys.Net");
Sys.Net.WebServiceProxy = function () {};
Sys.Net.WebServiceProxy.prototype = {
  get_timeout: function () {
    return this._timeout || 0;
  },
  set_timeout: function (a) {
    if (a < 0)
      throw Error.argumentOutOfRange("value", a, Sys.Res.invalidTimeout);
    this._timeout = a;
  },
  get_defaultUserContext: function () {
    return typeof this._userContext === "undefined" ? null : this._userContext;
  },
  set_defaultUserContext: function (a) {
    this._userContext = a;
  },
  get_defaultSucceededCallback: function () {
    return this._succeeded || null;
  },
  set_defaultSucceededCallback: function (a) {
    this._succeeded = a;
  },
  get_defaultFailedCallback: function () {
    return this._failed || null;
  },
  set_defaultFailedCallback: function (a) {
    this._failed = a;
  },
  get_enableJsonp: function () {
    return !!this._jsonp;
  },
  set_enableJsonp: function (a) {
    this._jsonp = a;
  },
  get_path: function () {
    return this._path || null;
  },
  set_path: function (a) {
    this._path = a;
  },
  get_jsonpCallbackParameter: function () {
    return this._callbackParameter || "callback";
  },
  set_jsonpCallbackParameter: function (a) {
    this._callbackParameter = a;
  },
  _invoke: function (d, e, g, f, c, b, a) {
    c = c || this.get_defaultSucceededCallback();
    b = b || this.get_defaultFailedCallback();
    if (a === null || typeof a === "undefined")
      a = this.get_defaultUserContext();
    return Sys.Net.WebServiceProxy.invoke(
      d,
      e,
      g,
      f,
      c,
      b,
      a,
      this.get_timeout(),
      this.get_enableJsonp(),
      this.get_jsonpCallbackParameter()
    );
  },
};
Sys.Net.WebServiceProxy.registerClass("Sys.Net.WebServiceProxy");
Sys.Net.WebServiceProxy.invoke = function (q, a, m, l, j, b, g, e, w, p) {
  var i = w !== false ? Sys.Net.WebServiceProxy._xdomain.exec(q) : null,
    c,
    n =
      i &&
      i.length === 3 &&
      (i[1] !== location.protocol || i[2] !== location.host);
  m = n || m;
  if (n) {
    p = p || "callback";
    c = "_jsonp" + Sys._jsonp++;
  }
  if (!l) l = {};
  var r = l;
  if (!m || !r) r = {};
  var s,
    h,
    f = null,
    k,
    o = null,
    u = Sys.Net.WebRequest._createUrl(
      a ? q + "/" + encodeURIComponent(a) : q,
      r,
      n ? p + "=Sys." + c : null
    );
  if (n) {
    s = document.createElement("script");
    s.src = u;
    k = new Sys._ScriptLoaderTask(s, function (d, b) {
      if (!b || c)
        t({ Message: String.format(Sys.Res.webServiceFailedNoMsg, a) }, -1);
    });
    function v() {
      if (f === null) return;
      f = null;
      h = new Sys.Net.WebServiceError(
        true,
        String.format(Sys.Res.webServiceTimedOut, a)
      );
      k.dispose();
      delete Sys[c];
      if (b) b(h, g, a);
    }
    function t(d, e) {
      if (f !== null) {
        window.clearTimeout(f);
        f = null;
      }
      k.dispose();
      delete Sys[c];
      c = null;
      if (typeof e !== "undefined" && e !== 200) {
        if (b) {
          h = new Sys.Net.WebServiceError(
            false,
            d.Message || String.format(Sys.Res.webServiceFailedNoMsg, a),
            d.StackTrace || null,
            d.ExceptionType || null,
            d
          );
          h._statusCode = e;
          b(h, g, a);
        }
      } else if (j) j(d, g, a);
    }
    Sys[c] = t;
    e = e || Sys.Net.WebRequestManager.get_defaultTimeout();
    if (e > 0) f = window.setTimeout(v, e);
    k.execute();
    return null;
  }
  var d = new Sys.Net.WebRequest();
  d.set_url(u);
  d.get_headers()["Content-Type"] = "application/json; charset=utf-8";
  if (!m) {
    o = Sys.Serialization.JavaScriptSerializer.serialize(l);
    if (o === "{}") o = "";
  }
  d.set_body(o);
  d.add_completed(x);
  if (e && e > 0) d.set_timeout(e);
  d.invoke();
  function x(d) {
    if (d.get_responseAvailable()) {
      var f = d.get_statusCode(),
        c = null;
      try {
        var e = d.getResponseHeader("Content-Type");
        if (e.startsWith("application/json")) c = d.get_object();
        else if (e.startsWith("text/xml")) c = d.get_xml();
        else c = d.get_responseData();
      } catch (m) {}
      var k = d.getResponseHeader("jsonerror"),
        h = k === "true";
      if (h) {
        if (c)
          c = new Sys.Net.WebServiceError(
            false,
            c.Message,
            c.StackTrace,
            c.ExceptionType,
            c
          );
      } else if (e.startsWith("application/json"))
        c = !c || typeof c.d === "undefined" ? c : c.d;
      if (f < 200 || f >= 300 || h) {
        if (b) {
          if (!c || !h)
            c = new Sys.Net.WebServiceError(
              false,
              String.format(Sys.Res.webServiceFailedNoMsg, a)
            );
          c._statusCode = f;
          b(c, g, a);
        }
      } else if (j) j(c, g, a);
    } else {
      var i;
      if (d.get_timedOut()) i = String.format(Sys.Res.webServiceTimedOut, a);
      else i = String.format(Sys.Res.webServiceFailedNoMsg, a);
      if (b) b(new Sys.Net.WebServiceError(d.get_timedOut(), i, "", ""), g, a);
    }
  }
  return d;
};
Sys.Net.WebServiceProxy._generateTypedConstructor = function (a) {
  return function (b) {
    if (b) for (var c in b) this[c] = b[c];
    this.__type = a;
  };
};
Sys._jsonp = 0;
Sys.Net.WebServiceProxy._xdomain = /^\s*([a-zA-Z0-9\+\-\.]+\:)\/\/([^?#\/]+)/;
Sys.Net.WebServiceError = function (d, e, c, a, b) {
  this._timedOut = d;
  this._message = e;
  this._stackTrace = c;
  this._exceptionType = a;
  this._errorObject = b;
  this._statusCode = -1;
};
Sys.Net.WebServiceError.prototype = {
  get_timedOut: function () {
    return this._timedOut;
  },
  get_statusCode: function () {
    return this._statusCode;
  },
  get_message: function () {
    return this._message;
  },
  get_stackTrace: function () {
    return this._stackTrace || "";
  },
  get_exceptionType: function () {
    return this._exceptionType || "";
  },
  get_errorObject: function () {
    return this._errorObject || null;
  },
};
Sys.Net.WebServiceError.registerClass("Sys.Net.WebServiceError");
Type.registerNamespace("Sys");
Sys.Res = {
  argumentInteger: "Value must be an integer.",
  invokeCalledTwice: "Cannot call invoke more than once.",
  webServiceFailed:
    "The server method \u0027{0}\u0027 failed with the following error: {1}",
  argumentType: "Object cannot be converted to the required type.",
  argumentNull: "Value cannot be null.",
  scriptAlreadyLoaded:
    "The script \u0027{0}\u0027 has been referenced multiple times. If referencing Microsoft AJAX scripts explicitly, set the MicrosoftAjaxMode property of the ScriptManager to Explicit.",
  scriptDependencyNotFound:
    "The script \u0027{0}\u0027 failed to load because it is dependent on script \u0027{1}\u0027.",
  formatBadFormatSpecifier: "Format specifier was invalid.",
  requiredScriptReferenceNotIncluded:
    "\u0027{0}\u0027 requires that you have included a script reference to \u0027{1}\u0027.",
  webServiceFailedNoMsg: "The server method \u0027{0}\u0027 failed.",
  argumentDomElement: "Value must be a DOM element.",
  invalidExecutorType:
    "Could not create a valid Sys.Net.WebRequestExecutor from: {0}.",
  cannotCallBeforeResponse: "Cannot call {0} when responseAvailable is false.",
  actualValue: "Actual value was {0}.",
  enumInvalidValue: "\u0027{0}\u0027 is not a valid value for enum {1}.",
  scriptLoadFailed: "The script \u0027{0}\u0027 could not be loaded.",
  parameterCount: "Parameter count mismatch.",
  cannotDeserializeEmptyString: "Cannot deserialize empty string.",
  formatInvalidString: "Input string was not in a correct format.",
  invalidTimeout: "Value must be greater than or equal to zero.",
  cannotAbortBeforeStart: "Cannot abort when executor has not started.",
  argument: "Value does not fall within the expected range.",
  cannotDeserializeInvalidJson:
    "Cannot deserialize. The data does not correspond to valid JSON.",
  invalidHttpVerb: "httpVerb cannot be set to an empty or null string.",
  nullWebRequest: "Cannot call executeRequest with a null webRequest.",
  eventHandlerInvalid:
    "Handler was not added through the Sys.UI.DomEvent.addHandler method.",
  cannotSerializeNonFiniteNumbers: "Cannot serialize non finite numbers.",
  argumentUndefined: "Value cannot be undefined.",
  webServiceInvalidReturnType:
    "The server method \u0027{0}\u0027 returned an invalid type. Expected type: {1}",
  servicePathNotSet: "The path to the web service has not been set.",
  argumentTypeWithTypes:
    "Object of type \u0027{0}\u0027 cannot be converted to type \u0027{1}\u0027.",
  cannotCallOnceStarted: "Cannot call {0} once started.",
  badBaseUrl1: "Base URL does not contain ://.",
  badBaseUrl2: "Base URL does not contain another /.",
  badBaseUrl3: "Cannot find last / in base URL.",
  setExecutorAfterActive: "Cannot set executor after it has become active.",
  paramName: "Parameter name: {0}",
  nullReferenceInPath:
    "Null reference while evaluating data path: \u0027{0}\u0027.",
  cannotCallOutsideHandler:
    "Cannot call {0} outside of a completed event handler.",
  cannotSerializeObjectWithCycle:
    "Cannot serialize object with cyclic reference within child properties.",
  format: "One of the identified items was in an invalid format.",
  assertFailedCaller: "Assertion Failed: {0}\r\nat {1}",
  argumentOutOfRange:
    "Specified argument was out of the range of valid values.",
  webServiceTimedOut: "The server method \u0027{0}\u0027 timed out.",
  notImplemented: "The method or operation is not implemented.",
  assertFailed: "Assertion Failed: {0}",
  invalidOperation:
    "Operation is not valid due to the current state of the object.",
  breakIntoDebugger: "{0}\r\n\r\nBreak into debugger?",
};
/* END MicrosoftAjax.js */
/* START MicrosoftAjaxWebForms.js */
//----------------------------------------------------------
// Copyright (C) Microsoft Corporation. All rights reserved.
//----------------------------------------------------------
// MicrosoftAjaxWebForms.js
Type._registerScript("MicrosoftAjaxWebForms.js", [
  "MicrosoftAjaxCore.js",
  "MicrosoftAjaxSerialization.js",
  "MicrosoftAjaxNetwork.js",
  "MicrosoftAjaxComponentModel.js",
]);
Type.registerNamespace("Sys.WebForms");
Sys.WebForms.BeginRequestEventArgs = function (c, b, a) {
  Sys.WebForms.BeginRequestEventArgs.initializeBase(this);
  this._request = c;
  this._postBackElement = b;
  this._updatePanelsToUpdate = a;
};
Sys.WebForms.BeginRequestEventArgs.prototype = {
  get_postBackElement: function () {
    return this._postBackElement;
  },
  get_request: function () {
    return this._request;
  },
  get_updatePanelsToUpdate: function () {
    return this._updatePanelsToUpdate
      ? Array.clone(this._updatePanelsToUpdate)
      : [];
  },
};
Sys.WebForms.BeginRequestEventArgs.registerClass(
  "Sys.WebForms.BeginRequestEventArgs",
  Sys.EventArgs
);
Sys.WebForms.EndRequestEventArgs = function (c, a, b) {
  Sys.WebForms.EndRequestEventArgs.initializeBase(this);
  this._errorHandled = false;
  this._error = c;
  this._dataItems = a || {};
  this._response = b;
};
Sys.WebForms.EndRequestEventArgs.prototype = {
  get_dataItems: function () {
    return this._dataItems;
  },
  get_error: function () {
    return this._error;
  },
  get_errorHandled: function () {
    return this._errorHandled;
  },
  set_errorHandled: function (a) {
    this._errorHandled = a;
  },
  get_response: function () {
    return this._response;
  },
};
Sys.WebForms.EndRequestEventArgs.registerClass(
  "Sys.WebForms.EndRequestEventArgs",
  Sys.EventArgs
);
Sys.WebForms.InitializeRequestEventArgs = function (c, b, a) {
  Sys.WebForms.InitializeRequestEventArgs.initializeBase(this);
  this._request = c;
  this._postBackElement = b;
  this._updatePanelsToUpdate = a;
};
Sys.WebForms.InitializeRequestEventArgs.prototype = {
  get_postBackElement: function () {
    return this._postBackElement;
  },
  get_request: function () {
    return this._request;
  },
  get_updatePanelsToUpdate: function () {
    return this._updatePanelsToUpdate
      ? Array.clone(this._updatePanelsToUpdate)
      : [];
  },
  set_updatePanelsToUpdate: function (a) {
    this._updated = true;
    this._updatePanelsToUpdate = a;
  },
};
Sys.WebForms.InitializeRequestEventArgs.registerClass(
  "Sys.WebForms.InitializeRequestEventArgs",
  Sys.CancelEventArgs
);
Sys.WebForms.PageLoadedEventArgs = function (b, a, c) {
  Sys.WebForms.PageLoadedEventArgs.initializeBase(this);
  this._panelsUpdated = b;
  this._panelsCreated = a;
  this._dataItems = c || {};
};
Sys.WebForms.PageLoadedEventArgs.prototype = {
  get_dataItems: function () {
    return this._dataItems;
  },
  get_panelsCreated: function () {
    return this._panelsCreated;
  },
  get_panelsUpdated: function () {
    return this._panelsUpdated;
  },
};
Sys.WebForms.PageLoadedEventArgs.registerClass(
  "Sys.WebForms.PageLoadedEventArgs",
  Sys.EventArgs
);
Sys.WebForms.PageLoadingEventArgs = function (b, a, c) {
  Sys.WebForms.PageLoadingEventArgs.initializeBase(this);
  this._panelsUpdating = b;
  this._panelsDeleting = a;
  this._dataItems = c || {};
};
Sys.WebForms.PageLoadingEventArgs.prototype = {
  get_dataItems: function () {
    return this._dataItems;
  },
  get_panelsDeleting: function () {
    return this._panelsDeleting;
  },
  get_panelsUpdating: function () {
    return this._panelsUpdating;
  },
};
Sys.WebForms.PageLoadingEventArgs.registerClass(
  "Sys.WebForms.PageLoadingEventArgs",
  Sys.EventArgs
);
Sys._ScriptLoader = function () {
  this._scriptsToLoad = null;
  this._sessions = [];
  this._scriptLoadedDelegate = Function.createDelegate(
    this,
    this._scriptLoadedHandler
  );
};
Sys._ScriptLoader.prototype = {
  dispose: function () {
    this._stopSession();
    this._loading = false;
    if (this._events) delete this._events;
    this._sessions = null;
    this._currentSession = null;
    this._scriptLoadedDelegate = null;
  },
  loadScripts: function (d, b, c, a) {
    var e = {
      allScriptsLoadedCallback: b,
      scriptLoadFailedCallback: c,
      scriptLoadTimeoutCallback: a,
      scriptsToLoad: this._scriptsToLoad,
      scriptTimeout: d,
    };
    this._scriptsToLoad = null;
    this._sessions[this._sessions.length] = e;
    if (!this._loading) this._nextSession();
  },
  queueCustomScriptTag: function (a) {
    if (!this._scriptsToLoad) this._scriptsToLoad = [];
    Array.add(this._scriptsToLoad, a);
  },
  queueScriptBlock: function (a) {
    if (!this._scriptsToLoad) this._scriptsToLoad = [];
    Array.add(this._scriptsToLoad, { text: a });
  },
  queueScriptReference: function (a, b) {
    if (!this._scriptsToLoad) this._scriptsToLoad = [];
    Array.add(this._scriptsToLoad, { src: a, fallback: b });
  },
  _createScriptElement: function (c) {
    var a = document.createElement("script");
    a.type = "text/javascript";
    for (var b in c) a[b] = c[b];
    return a;
  },
  _loadScriptsInternal: function () {
    var c = this._currentSession;
    if (c.scriptsToLoad && c.scriptsToLoad.length > 0) {
      var b = Array.dequeue(c.scriptsToLoad),
        f = this._scriptLoadedDelegate;
      if (b.fallback) {
        var g = b.fallback;
        delete b.fallback;
        var d = this;
        f = function (b, a) {
          a ||
            (function () {
              var a = d._createScriptElement({ src: g });
              d._currentTask = new Sys._ScriptLoaderTask(
                a,
                d._scriptLoadedDelegate
              );
              d._currentTask.execute();
            })();
        };
      }
      var a = this._createScriptElement(b);
      if (a.text && Sys.Browser.agent === Sys.Browser.Safari) {
        a.innerHTML = a.text;
        delete a.text;
      }
      if (typeof b.src === "string") {
        this._currentTask = new Sys._ScriptLoaderTask(a, f);
        this._currentTask.execute();
      } else {
        document.getElementsByTagName("head")[0].appendChild(a);
        Sys._ScriptLoaderTask._clearScript(a);
        this._loadScriptsInternal();
      }
    } else {
      this._stopSession();
      var e = c.allScriptsLoadedCallback;
      if (e) e(this);
      this._nextSession();
    }
  },
  _nextSession: function () {
    if (this._sessions.length === 0) {
      this._loading = false;
      this._currentSession = null;
      return;
    }
    this._loading = true;
    var a = Array.dequeue(this._sessions);
    this._currentSession = a;
    if (a.scriptTimeout > 0)
      this._timeoutCookie = window.setTimeout(
        Function.createDelegate(this, this._scriptLoadTimeoutHandler),
        a.scriptTimeout * 1000
      );
    this._loadScriptsInternal();
  },
  _raiseError: function () {
    var b = this._currentSession.scriptLoadFailedCallback,
      a = this._currentTask.get_scriptElement();
    this._stopSession();
    if (b) {
      b(this, a);
      this._nextSession();
    } else {
      this._loading = false;
      throw Sys._ScriptLoader._errorScriptLoadFailed(a.src);
    }
  },
  _scriptLoadedHandler: function (a, b) {
    if (b) {
      Array.add(Sys._ScriptLoader._getLoadedScripts(), a.src);
      this._currentTask.dispose();
      this._currentTask = null;
      this._loadScriptsInternal();
    } else this._raiseError();
  },
  _scriptLoadTimeoutHandler: function () {
    var a = this._currentSession.scriptLoadTimeoutCallback;
    this._stopSession();
    if (a) a(this);
    this._nextSession();
  },
  _stopSession: function () {
    if (this._timeoutCookie) {
      window.clearTimeout(this._timeoutCookie);
      this._timeoutCookie = null;
    }
    if (this._currentTask) {
      this._currentTask.dispose();
      this._currentTask = null;
    }
  },
};
Sys._ScriptLoader.registerClass("Sys._ScriptLoader", null, Sys.IDisposable);
Sys._ScriptLoader.getInstance = function () {
  var a = Sys._ScriptLoader._activeInstance;
  if (!a) a = Sys._ScriptLoader._activeInstance = new Sys._ScriptLoader();
  return a;
};
Sys._ScriptLoader.isScriptLoaded = function (b) {
  var a = document.createElement("script");
  a.src = b;
  return Array.contains(Sys._ScriptLoader._getLoadedScripts(), a.src);
};
Sys._ScriptLoader.readLoadedScripts = function () {
  if (!Sys._ScriptLoader._referencedScripts) {
    var c = (Sys._ScriptLoader._referencedScripts = []),
      d = document.getElementsByTagName("script");
    for (var b = d.length - 1; b >= 0; b--) {
      var e = d[b],
        a = e.src;
      if (a.length) if (!Array.contains(c, a)) Array.add(c, a);
    }
  }
};
Sys._ScriptLoader._errorScriptLoadFailed = function (b) {
  var a;
  a = Sys.Res.scriptLoadFailed;
  var d = "Sys.ScriptLoadFailedException: " + String.format(a, b),
    c = Error.create(d, {
      name: "Sys.ScriptLoadFailedException",
      scriptUrl: b,
    });
  c.popStackFrame();
  return c;
};
Sys._ScriptLoader._getLoadedScripts = function () {
  if (!Sys._ScriptLoader._referencedScripts) {
    Sys._ScriptLoader._referencedScripts = [];
    Sys._ScriptLoader.readLoadedScripts();
  }
  return Sys._ScriptLoader._referencedScripts;
};
Sys.WebForms.PageRequestManager = function () {
  this._form = null;
  this._activeDefaultButton = null;
  this._activeDefaultButtonClicked = false;
  this._updatePanelIDs = null;
  this._updatePanelClientIDs = null;
  this._updatePanelHasChildrenAsTriggers = null;
  this._asyncPostBackControlIDs = null;
  this._asyncPostBackControlClientIDs = null;
  this._postBackControlIDs = null;
  this._postBackControlClientIDs = null;
  this._scriptManagerID = null;
  this._pageLoadedHandler = null;
  this._additionalInput = null;
  this._onsubmit = null;
  this._onSubmitStatements = [];
  this._originalDoPostBack = null;
  this._originalDoPostBackWithOptions = null;
  this._originalFireDefaultButton = null;
  this._originalDoCallback = null;
  this._isCrossPost = false;
  this._postBackSettings = null;
  this._request = null;
  this._onFormSubmitHandler = null;
  this._onFormElementClickHandler = null;
  this._onWindowUnloadHandler = null;
  this._asyncPostBackTimeout = null;
  this._controlIDToFocus = null;
  this._scrollPosition = null;
  this._processingRequest = false;
  this._scriptDisposes = {};
  this._transientFields = ["__VIEWSTATEENCRYPTED", "__VIEWSTATEFIELDCOUNT"];
  this._textTypes = /^(text|password|hidden|search|tel|url|email|number|range|color|datetime|date|month|week|time|datetime-local)$/i;
};
Sys.WebForms.PageRequestManager.prototype = {
  _get_eventHandlerList: function () {
    if (!this._events) this._events = new Sys.EventHandlerList();
    return this._events;
  },
  get_isInAsyncPostBack: function () {
    return this._request !== null;
  },
  add_beginRequest: function (a) {
    this._get_eventHandlerList().addHandler("beginRequest", a);
  },
  remove_beginRequest: function (a) {
    this._get_eventHandlerList().removeHandler("beginRequest", a);
  },
  add_endRequest: function (a) {
    this._get_eventHandlerList().addHandler("endRequest", a);
  },
  remove_endRequest: function (a) {
    this._get_eventHandlerList().removeHandler("endRequest", a);
  },
  add_initializeRequest: function (a) {
    this._get_eventHandlerList().addHandler("initializeRequest", a);
  },
  remove_initializeRequest: function (a) {
    this._get_eventHandlerList().removeHandler("initializeRequest", a);
  },
  add_pageLoaded: function (a) {
    this._get_eventHandlerList().addHandler("pageLoaded", a);
  },
  remove_pageLoaded: function (a) {
    this._get_eventHandlerList().removeHandler("pageLoaded", a);
  },
  add_pageLoading: function (a) {
    this._get_eventHandlerList().addHandler("pageLoading", a);
  },
  remove_pageLoading: function (a) {
    this._get_eventHandlerList().removeHandler("pageLoading", a);
  },
  abortPostBack: function () {
    if (!this._processingRequest && this._request) {
      this._request.get_executor().abort();
      this._request = null;
    }
  },
  beginAsyncPostBack: function (c, a, f, d, e) {
    if (
      d &&
      typeof Page_ClientValidate === "function" &&
      !Page_ClientValidate(e || null)
    )
      return;
    this._postBackSettings = this._createPostBackSettings(true, c, a);
    var b = this._form;
    b.__EVENTTARGET.value = a || "";
    b.__EVENTARGUMENT.value = f || "";
    this._isCrossPost = false;
    this._additionalInput = null;
    this._onFormSubmit();
  },
  _cancelPendingCallbacks: function () {
    for (var a = 0, e = window.__pendingCallbacks.length; a < e; a++) {
      var c = window.__pendingCallbacks[a];
      if (c) {
        if (!c.async) window.__synchronousCallBackIndex = -1;
        window.__pendingCallbacks[a] = null;
        var d = "__CALLBACKFRAME" + a,
          b = document.getElementById(d);
        if (b) b.parentNode.removeChild(b);
      }
    }
  },
  _commitControls: function (a, b) {
    if (a) {
      this._updatePanelIDs = a.updatePanelIDs;
      this._updatePanelClientIDs = a.updatePanelClientIDs;
      this._updatePanelHasChildrenAsTriggers =
        a.updatePanelHasChildrenAsTriggers;
      this._asyncPostBackControlIDs = a.asyncPostBackControlIDs;
      this._asyncPostBackControlClientIDs = a.asyncPostBackControlClientIDs;
      this._postBackControlIDs = a.postBackControlIDs;
      this._postBackControlClientIDs = a.postBackControlClientIDs;
    }
    if (typeof b !== "undefined" && b !== null)
      this._asyncPostBackTimeout = b * 1000;
  },
  _createHiddenField: function (c, d) {
    var b,
      a = document.getElementById(c);
    if (a)
      if (!a._isContained) a.parentNode.removeChild(a);
      else b = a.parentNode;
    if (!b) {
      b = document.createElement("span");
      b.style.cssText = "display:none !important";
      this._form.appendChild(b);
    }
    b.innerHTML = "<input type='hidden' />";
    a = b.childNodes[0];
    a._isContained = true;
    a.id = a.name = c;
    a.value = d;
  },
  _createPageRequestManagerTimeoutError: function () {
    var b =
        "Sys.WebForms.PageRequestManagerTimeoutException: " +
        Sys.WebForms.Res.PRM_TimeoutError,
      a = Error.create(b, {
        name: "Sys.WebForms.PageRequestManagerTimeoutException",
      });
    a.popStackFrame();
    return a;
  },
  _createPageRequestManagerServerError: function (a, d) {
    var c =
        "Sys.WebForms.PageRequestManagerServerErrorException: " +
        (d || String.format(Sys.WebForms.Res.PRM_ServerError, a)),
      b = Error.create(c, {
        name: "Sys.WebForms.PageRequestManagerServerErrorException",
        httpStatusCode: a,
      });
    b.popStackFrame();
    return b;
  },
  _createPageRequestManagerParserError: function (b) {
    var c =
        "Sys.WebForms.PageRequestManagerParserErrorException: " +
        String.format(Sys.WebForms.Res.PRM_ParserError, b),
      a = Error.create(c, {
        name: "Sys.WebForms.PageRequestManagerParserErrorException",
      });
    a.popStackFrame();
    return a;
  },
  _createPanelID: function (e, b) {
    var c = b.asyncTarget,
      a = this._ensureUniqueIds(e || b.panelsToUpdate),
      d = a instanceof Array ? a.join(",") : a || this._scriptManagerID;
    if (c) d += "|" + c;
    return (
      encodeURIComponent(this._scriptManagerID) +
      "=" +
      encodeURIComponent(d) +
      "&"
    );
  },
  _createPostBackSettings: function (d, a, c, b) {
    return { async: d, asyncTarget: c, panelsToUpdate: a, sourceElement: b };
  },
  _convertToClientIDs: function (a, f, e, d) {
    if (a)
      for (var b = 0, h = a.length; b < h; b += d ? 2 : 1) {
        var c = a[b],
          g = (d ? a[b + 1] : "") || this._uniqueIDToClientID(c);
        Array.add(f, c);
        Array.add(e, g);
      }
  },
  dispose: function () {
    if (this._form) {
      Sys.UI.DomEvent.removeHandler(
        this._form,
        "submit",
        this._onFormSubmitHandler
      );
      Sys.UI.DomEvent.removeHandler(
        this._form,
        "click",
        this._onFormElementClickHandler
      );
      Sys.UI.DomEvent.removeHandler(
        window,
        "unload",
        this._onWindowUnloadHandler
      );
      Sys.UI.DomEvent.removeHandler(window, "load", this._pageLoadedHandler);
    }
    if (this._originalDoPostBack) {
      window.__doPostBack = this._originalDoPostBack;
      this._originalDoPostBack = null;
    }
    if (this._originalDoPostBackWithOptions) {
      window.WebForm_DoPostBackWithOptions = this._originalDoPostBackWithOptions;
      this._originalDoPostBackWithOptions = null;
    }
    if (this._originalFireDefaultButton) {
      window.WebForm_FireDefaultButton = this._originalFireDefaultButton;
      this._originalFireDefaultButton = null;
    }
    if (this._originalDoCallback) {
      window.WebForm_DoCallback = this._originalDoCallback;
      this._originalDoCallback = null;
    }
    this._form = null;
    this._updatePanelIDs = null;
    this._updatePanelClientIDs = null;
    this._asyncPostBackControlIDs = null;
    this._asyncPostBackControlClientIDs = null;
    this._postBackControlIDs = null;
    this._postBackControlClientIDs = null;
    this._asyncPostBackTimeout = null;
    this._scrollPosition = null;
    this._activeElement = null;
  },
  _doCallback: function (d, b, c, f, a, e) {
    if (!this.get_isInAsyncPostBack())
      this._originalDoCallback(d, b, c, f, a, e);
  },
  _doPostBack: function (a, k) {
    var f = window.event;
    if (!f) {
      var d = arguments.callee ? arguments.callee.caller : null;
      if (d) {
        var j = 30;
        while (d.arguments.callee.caller && --j) d = d.arguments.callee.caller;
        f = j && d.arguments.length ? d.arguments[0] : null;
      }
    }
    this._additionalInput = null;
    var h = this._form;
    if (a === null || typeof a === "undefined" || this._isCrossPost) {
      this._postBackSettings = this._createPostBackSettings(false);
      this._isCrossPost = false;
    } else {
      var c = this._masterPageUniqueID,
        l = this._uniqueIDToClientID(a),
        g = document.getElementById(l);
      if (!g && c)
        if (a.indexOf(c + "$") === 0)
          g = document.getElementById(l.substr(c.length + 1));
      if (!g)
        if (Array.contains(this._asyncPostBackControlIDs, a))
          this._postBackSettings = this._createPostBackSettings(true, null, a);
        else if (Array.contains(this._postBackControlIDs, a))
          this._postBackSettings = this._createPostBackSettings(false);
        else {
          var e = this._findNearestElement(a);
          if (e) this._postBackSettings = this._getPostBackSettings(e, a);
          else {
            if (c) {
              c += "$";
              if (a.indexOf(c) === 0)
                e = this._findNearestElement(a.substr(c.length));
            }
            if (e) this._postBackSettings = this._getPostBackSettings(e, a);
            else {
              var b;
              try {
                b = f ? f.target || f.srcElement : null;
              } catch (n) {}
              b = b || this._activeElement;
              var m = /__doPostBack\(|WebForm_DoPostBackWithOptions\(/;
              function i(b) {
                b = b ? b.toString() : "";
                return (
                  (m.test(b) && b.indexOf("'" + a + "'") !== -1) ||
                  b.indexOf('"' + a + '"') !== -1
                );
              }
              if (
                b &&
                (b.name === a || i(b.href) || i(b.onclick) || i(b.onchange))
              )
                this._postBackSettings = this._getPostBackSettings(b, a);
              else this._postBackSettings = this._createPostBackSettings(false);
            }
          }
        }
      else this._postBackSettings = this._getPostBackSettings(g, a);
    }
    if (!this._postBackSettings.async) {
      h.onsubmit = this._onsubmit;
      this._originalDoPostBack(a, k);
      h.onsubmit = null;
      return;
    }
    h.__EVENTTARGET.value = a;
    h.__EVENTARGUMENT.value = k;
    this._onFormSubmit();
  },
  _doPostBackWithOptions: function (a) {
    this._isCrossPost = a && a.actionUrl;
    var d = true;
    if (a.validation)
      if (typeof Page_ClientValidate == "function")
        d = Page_ClientValidate(a.validationGroup);
    if (d) {
      if (
        typeof a.actionUrl != "undefined" &&
        a.actionUrl != null &&
        a.actionUrl.length > 0
      )
        theForm.action = a.actionUrl;
      if (a.trackFocus) {
        var c = theForm.elements["__LASTFOCUS"];
        if (typeof c != "undefined" && c != null)
          if (typeof document.activeElement == "undefined")
            c.value = a.eventTarget;
          else {
            var b = document.activeElement;
            if (typeof b != "undefined" && b != null)
              if (typeof b.id != "undefined" && b.id != null && b.id.length > 0)
                c.value = b.id;
              else if (typeof b.name != "undefined") c.value = b.name;
          }
      }
    }
    if (a.clientSubmit) this._doPostBack(a.eventTarget, a.eventArgument);
  },
  _elementContains: function (b, a) {
    while (a) {
      if (a === b) return true;
      a = a.parentNode;
    }
    return false;
  },
  _endPostBack: function (a, d, f) {
    if (this._request === d.get_webRequest()) {
      this._processingRequest = false;
      this._additionalInput = null;
      this._request = null;
    }
    var e = this._get_eventHandlerList().getHandler("endRequest"),
      b = false;
    if (e) {
      var c = new Sys.WebForms.EndRequestEventArgs(a, f ? f.dataItems : {}, d);
      e(this, c);
      b = c.get_errorHandled();
    }
    if (a && !b) throw a;
  },
  _ensureUniqueIds: function (a) {
    if (!a) return a;
    a = a instanceof Array ? a : [a];
    var c = [];
    for (var b = 0, f = a.length; b < f; b++) {
      var e = a[b],
        d = Array.indexOf(this._updatePanelClientIDs, e);
      c.push(d > -1 ? this._updatePanelIDs[d] : e);
    }
    return c;
  },
  _findNearestElement: function (a) {
    while (a.length > 0) {
      var d = this._uniqueIDToClientID(a),
        c = document.getElementById(d);
      if (c) return c;
      var b = a.lastIndexOf("$");
      if (b === -1) return null;
      a = a.substring(0, b);
    }
    return null;
  },
  _findText: function (b, a) {
    var c = Math.max(0, a - 20),
      d = Math.min(b.length, a + 20);
    return b.substring(c, d);
  },
  _fireDefaultButton: function (a, d) {
    if (a.keyCode === 13) {
      var c = a.srcElement || a.target;
      if (!c || c.tagName.toLowerCase() !== "textarea") {
        var b = document.getElementById(d);
        if (b && typeof b.click !== "undefined") {
          this._activeDefaultButton = b;
          this._activeDefaultButtonClicked = false;
          try {
            b.click();
          } finally {
            this._activeDefaultButton = null;
          }
          a.cancelBubble = true;
          if (typeof a.stopPropagation === "function") a.stopPropagation();
          return false;
        }
      }
    }
    return true;
  },
  _getPageLoadedEventArgs: function (n, c) {
    var m = [],
      l = [],
      k = c ? c.version4 : false,
      d = c ? c.updatePanelData : null,
      e,
      g,
      h,
      b;
    if (!d) {
      e = this._updatePanelIDs;
      g = this._updatePanelClientIDs;
      h = null;
      b = null;
    } else {
      e = d.updatePanelIDs;
      g = d.updatePanelClientIDs;
      h = d.childUpdatePanelIDs;
      b = d.panelsToRefreshIDs;
    }
    var a, f, j, i;
    if (b)
      for (a = 0, f = b.length; a < f; a += k ? 2 : 1) {
        j = b[a];
        i = (k ? b[a + 1] : "") || this._uniqueIDToClientID(j);
        Array.add(m, document.getElementById(i));
      }
    for (a = 0, f = e.length; a < f; a++)
      if (n || Array.indexOf(h, e[a]) !== -1)
        Array.add(l, document.getElementById(g[a]));
    return new Sys.WebForms.PageLoadedEventArgs(m, l, c ? c.dataItems : {});
  },
  _getPageLoadingEventArgs: function (f) {
    var j = [],
      i = [],
      c = f.updatePanelData,
      k = c.oldUpdatePanelIDs,
      l = c.oldUpdatePanelClientIDs,
      n = c.updatePanelIDs,
      m = c.childUpdatePanelIDs,
      d = c.panelsToRefreshIDs,
      a,
      e,
      b,
      g,
      h = f.version4;
    for (a = 0, e = d.length; a < e; a += h ? 2 : 1) {
      b = d[a];
      g = (h ? d[a + 1] : "") || this._uniqueIDToClientID(b);
      Array.add(j, document.getElementById(g));
    }
    for (a = 0, e = k.length; a < e; a++) {
      b = k[a];
      if (
        Array.indexOf(d, b) === -1 &&
        (Array.indexOf(n, b) === -1 || Array.indexOf(m, b) > -1)
      )
        Array.add(i, document.getElementById(l[a]));
    }
    return new Sys.WebForms.PageLoadingEventArgs(j, i, f.dataItems);
  },
  _getPostBackSettings: function (a, c) {
    var d = a,
      b = null;
    while (a) {
      if (a.id) {
        if (!b && Array.contains(this._asyncPostBackControlClientIDs, a.id))
          b = this._createPostBackSettings(true, null, c, d);
        else if (!b && Array.contains(this._postBackControlClientIDs, a.id))
          return this._createPostBackSettings(false);
        else {
          var e = Array.indexOf(this._updatePanelClientIDs, a.id);
          if (e !== -1)
            if (this._updatePanelHasChildrenAsTriggers[e])
              return this._createPostBackSettings(
                true,
                [this._updatePanelIDs[e]],
                c,
                d
              );
            else return this._createPostBackSettings(true, null, c, d);
        }
        if (
          !b &&
          this._matchesParentIDInList(a.id, this._asyncPostBackControlClientIDs)
        )
          b = this._createPostBackSettings(true, null, c, d);
        else if (
          !b &&
          this._matchesParentIDInList(a.id, this._postBackControlClientIDs)
        )
          return this._createPostBackSettings(false);
      }
      a = a.parentNode;
    }
    if (!b) return this._createPostBackSettings(false);
    else return b;
  },
  _getScrollPosition: function () {
    var a = document.documentElement;
    if (
      a &&
      (this._validPosition(a.scrollLeft) || this._validPosition(a.scrollTop))
    )
      return { x: a.scrollLeft, y: a.scrollTop };
    else {
      a = document.body;
      if (
        a &&
        (this._validPosition(a.scrollLeft) || this._validPosition(a.scrollTop))
      )
        return { x: a.scrollLeft, y: a.scrollTop };
      else if (
        this._validPosition(window.pageXOffset) ||
        this._validPosition(window.pageYOffset)
      )
        return { x: window.pageXOffset, y: window.pageYOffset };
      else return { x: 0, y: 0 };
    }
  },
  _initializeInternal: function (f, g, a, b, e, c, d) {
    if (this._prmInitialized)
      throw Error.invalidOperation(Sys.WebForms.Res.PRM_CannotRegisterTwice);
    this._prmInitialized = true;
    this._masterPageUniqueID = d;
    this._scriptManagerID = f;
    this._form = Sys.UI.DomElement.resolveElement(g);
    this._onsubmit = this._form.onsubmit;
    this._form.onsubmit = null;
    this._onFormSubmitHandler = Function.createDelegate(
      this,
      this._onFormSubmit
    );
    this._onFormElementClickHandler = Function.createDelegate(
      this,
      this._onFormElementClick
    );
    this._onWindowUnloadHandler = Function.createDelegate(
      this,
      this._onWindowUnload
    );
    Sys.UI.DomEvent.addHandler(this._form, "submit", this._onFormSubmitHandler);
    Sys.UI.DomEvent.addHandler(
      this._form,
      "click",
      this._onFormElementClickHandler
    );
    Sys.UI.DomEvent.addHandler(window, "unload", this._onWindowUnloadHandler);
    this._originalDoPostBack = window.__doPostBack;
    if (this._originalDoPostBack)
      window.__doPostBack = Function.createDelegate(this, this._doPostBack);
    this._originalDoPostBackWithOptions = window.WebForm_DoPostBackWithOptions;
    if (this._originalDoPostBackWithOptions)
      window.WebForm_DoPostBackWithOptions = Function.createDelegate(
        this,
        this._doPostBackWithOptions
      );
    this._originalFireDefaultButton = window.WebForm_FireDefaultButton;
    if (this._originalFireDefaultButton)
      window.WebForm_FireDefaultButton = Function.createDelegate(
        this,
        this._fireDefaultButton
      );
    this._originalDoCallback = window.WebForm_DoCallback;
    if (this._originalDoCallback)
      window.WebForm_DoCallback = Function.createDelegate(
        this,
        this._doCallback
      );
    this._pageLoadedHandler = Function.createDelegate(
      this,
      this._pageLoadedInitialLoad
    );
    Sys.UI.DomEvent.addHandler(window, "load", this._pageLoadedHandler);
    if (a) this._updateControls(a, b, e, c, true);
  },
  _matchesParentIDInList: function (c, b) {
    for (var a = 0, d = b.length; a < d; a++)
      if (c.startsWith(b[a] + "_")) return true;
    return false;
  },
  _onFormElementActive: function (a, d, e) {
    if (a.disabled) return;
    this._activeElement = a;
    this._postBackSettings = this._getPostBackSettings(a, a.name);
    if (a.name) {
      var b = a.tagName.toUpperCase();
      if (b === "INPUT") {
        var c = a.type;
        if (c === "submit")
          this._additionalInput =
            encodeURIComponent(a.name) + "=" + encodeURIComponent(a.value);
        else if (c === "image")
          this._additionalInput =
            encodeURIComponent(a.name) +
            ".x=" +
            d +
            "&" +
            encodeURIComponent(a.name) +
            ".y=" +
            e;
      } else if (b === "BUTTON" && a.name.length !== 0 && a.type === "submit")
        this._additionalInput =
          encodeURIComponent(a.name) + "=" + encodeURIComponent(a.value);
    }
  },
  _onFormElementClick: function (a) {
    this._activeDefaultButtonClicked = a.target === this._activeDefaultButton;
    this._onFormElementActive(a.target, a.offsetX, a.offsetY);
  },
  _onFormSubmit: function (i) {
    var f,
      x,
      h = true,
      z = this._isCrossPost;
    this._isCrossPost = false;
    if (this._onsubmit) h = this._onsubmit();
    if (h)
      for (f = 0, x = this._onSubmitStatements.length; f < x; f++)
        if (!this._onSubmitStatements[f]()) {
          h = false;
          break;
        }
    if (!h) {
      if (i) i.preventDefault();
      return;
    }
    var w = this._form;
    if (z) return;
    if (this._activeDefaultButton && !this._activeDefaultButtonClicked)
      this._onFormElementActive(this._activeDefaultButton, 0, 0);
    if (!this._postBackSettings || !this._postBackSettings.async) return;
    var b = new Sys.StringBuilder(),
      s = w.elements,
      B = s.length,
      t = this._createPanelID(null, this._postBackSettings);
    b.append(t);
    for (f = 0; f < B; f++) {
      var e = s[f],
        g = e.name;
      if (
        typeof g === "undefined" ||
        g === null ||
        g.length === 0 ||
        g === this._scriptManagerID
      )
        continue;
      var n = e.tagName.toUpperCase();
      if (n === "INPUT") {
        var p = e.type;
        if (
          this._textTypes.test(p) ||
          ((p === "checkbox" || p === "radio") && e.checked)
        ) {
          b.append(encodeURIComponent(g));
          b.append("=");
          b.append(encodeURIComponent(e.value));
          b.append("&");
        }
      } else if (n === "SELECT") {
        var A = e.options.length;
        for (var q = 0; q < A; q++) {
          var u = e.options[q];
          if (u.selected) {
            b.append(encodeURIComponent(g));
            b.append("=");
            b.append(encodeURIComponent(u.value));
            b.append("&");
          }
        }
      } else if (n === "TEXTAREA") {
        b.append(encodeURIComponent(g));
        b.append("=");
        b.append(encodeURIComponent(e.value));
        b.append("&");
      }
    }
    b.append("__ASYNCPOST=true&");
    if (this._additionalInput) {
      b.append(this._additionalInput);
      this._additionalInput = null;
    }
    var c = new Sys.Net.WebRequest(),
      a = w.action;
    if (Sys.Browser.agent === Sys.Browser.InternetExplorer) {
      var r = a.indexOf("#");
      if (r !== -1) a = a.substr(0, r);
      var o = "",
        v = "",
        m = a.indexOf("?");
      if (m !== -1) {
        v = a.substr(m);
        a = a.substr(0, m);
      }
      if (/^https?\:\/\/.*$/gi.test(a)) {
        var y = a.indexOf("//") + 2,
          l = a.indexOf("/", y);
        if (l === -1) {
          o = a;
          a = "";
        } else {
          o = a.substr(0, l);
          a = a.substr(l);
        }
      }
      a = o + encodeURI(decodeURI(a)) + v;
    }
    c.set_url(a);
    c.get_headers()["X-MicrosoftAjax"] = "Delta=true";
    c.get_headers()["Cache-Control"] = "no-cache";
    c.set_timeout(this._asyncPostBackTimeout);
    c.add_completed(Function.createDelegate(this, this._onFormSubmitCompleted));
    c.set_body(b.toString());
    var j,
      d,
      k = this._get_eventHandlerList().getHandler("initializeRequest");
    if (k) {
      j = this._postBackSettings.panelsToUpdate;
      d = new Sys.WebForms.InitializeRequestEventArgs(
        c,
        this._postBackSettings.sourceElement,
        j
      );
      k(this, d);
      h = !d.get_cancel();
    }
    if (!h) {
      if (i) i.preventDefault();
      return;
    }
    if (d && d._updated) {
      j = d.get_updatePanelsToUpdate();
      c.set_body(
        c.get_body().replace(t, this._createPanelID(j, this._postBackSettings))
      );
    }
    this._scrollPosition = this._getScrollPosition();
    this.abortPostBack();
    k = this._get_eventHandlerList().getHandler("beginRequest");
    if (k) {
      d = new Sys.WebForms.BeginRequestEventArgs(
        c,
        this._postBackSettings.sourceElement,
        j || this._postBackSettings.panelsToUpdate
      );
      k(this, d);
    }
    if (this._originalDoCallback) this._cancelPendingCallbacks();
    this._request = c;
    this._processingRequest = false;
    c.invoke();
    if (i) i.preventDefault();
  },
  _onFormSubmitCompleted: function (c) {
    this._processingRequest = true;
    if (c.get_timedOut()) {
      this._endPostBack(this._createPageRequestManagerTimeoutError(), c, null);
      return;
    }
    if (c.get_aborted()) {
      this._endPostBack(null, c, null);
      return;
    }
    if (!this._request || c.get_webRequest() !== this._request) return;
    if (c.get_statusCode() !== 200) {
      this._endPostBack(
        this._createPageRequestManagerServerError(c.get_statusCode()),
        c,
        null
      );
      return;
    }
    var a = this._parseDelta(c);
    if (!a) return;
    var b, e;
    if (
      a.asyncPostBackControlIDsNode &&
      a.postBackControlIDsNode &&
      a.updatePanelIDsNode &&
      a.panelsToRefreshNode &&
      a.childUpdatePanelIDsNode
    ) {
      var r = this._updatePanelIDs,
        n = this._updatePanelClientIDs,
        i = a.childUpdatePanelIDsNode.content,
        p = i.length ? i.split(",") : [],
        m = this._splitNodeIntoArray(a.asyncPostBackControlIDsNode),
        o = this._splitNodeIntoArray(a.postBackControlIDsNode),
        q = this._splitNodeIntoArray(a.updatePanelIDsNode),
        g = this._splitNodeIntoArray(a.panelsToRefreshNode),
        h = a.version4;
      for (b = 0, e = g.length; b < e; b += h ? 2 : 1) {
        var j = (h ? g[b + 1] : "") || this._uniqueIDToClientID(g[b]);
        if (!document.getElementById(j)) {
          this._endPostBack(
            Error.invalidOperation(
              String.format(Sys.WebForms.Res.PRM_MissingPanel, j)
            ),
            c,
            a
          );
          return;
        }
      }
      var f = this._processUpdatePanelArrays(q, m, o, h);
      f.oldUpdatePanelIDs = r;
      f.oldUpdatePanelClientIDs = n;
      f.childUpdatePanelIDs = p;
      f.panelsToRefreshIDs = g;
      a.updatePanelData = f;
    }
    a.dataItems = {};
    var d;
    for (b = 0, e = a.dataItemNodes.length; b < e; b++) {
      d = a.dataItemNodes[b];
      a.dataItems[d.id] = d.content;
    }
    for (b = 0, e = a.dataItemJsonNodes.length; b < e; b++) {
      d = a.dataItemJsonNodes[b];
      a.dataItems[d.id] = Sys.Serialization.JavaScriptSerializer.deserialize(
        d.content
      );
    }
    var l = this._get_eventHandlerList().getHandler("pageLoading");
    if (l) l(this, this._getPageLoadingEventArgs(a));
    Sys._ScriptLoader.readLoadedScripts();
    Sys.Application.beginCreateComponents();
    var k = Sys._ScriptLoader.getInstance();
    this._queueScripts(k, a.scriptBlockNodes, true, false);
    this._processingRequest = true;
    k.loadScripts(
      0,
      Function.createDelegate(
        this,
        Function.createCallback(this._scriptIncludesLoadComplete, a)
      ),
      Function.createDelegate(
        this,
        Function.createCallback(this._scriptIncludesLoadFailed, a)
      ),
      null
    );
  },
  _onWindowUnload: function () {
    this.dispose();
  },
  _pageLoaded: function (a, c) {
    var b = this._get_eventHandlerList().getHandler("pageLoaded");
    if (b) b(this, this._getPageLoadedEventArgs(a, c));
    if (!a) Sys.Application.raiseLoad();
  },
  _pageLoadedInitialLoad: function () {
    this._pageLoaded(true, null);
  },
  _parseDelta: function (h) {
    var c = h.get_responseData(),
      d,
      i,
      E,
      F,
      D,
      b = 0,
      e = null,
      k = [];
    while (b < c.length) {
      d = c.indexOf("|", b);
      if (d === -1) {
        e = this._findText(c, b);
        break;
      }
      i = parseInt(c.substring(b, d), 10);
      if (i % 1 !== 0) {
        e = this._findText(c, b);
        break;
      }
      b = d + 1;
      d = c.indexOf("|", b);
      if (d === -1) {
        e = this._findText(c, b);
        break;
      }
      E = c.substring(b, d);
      b = d + 1;
      d = c.indexOf("|", b);
      if (d === -1) {
        e = this._findText(c, b);
        break;
      }
      F = c.substring(b, d);
      b = d + 1;
      if (b + i >= c.length) {
        e = this._findText(c, c.length);
        break;
      }
      D = c.substr(b, i);
      b += i;
      if (c.charAt(b) !== "|") {
        e = this._findText(c, b);
        break;
      }
      b++;
      Array.add(k, { type: E, id: F, content: D });
    }
    if (e) {
      this._endPostBack(
        this._createPageRequestManagerParserError(
          String.format(Sys.WebForms.Res.PRM_ParserErrorDetails, e)
        ),
        h,
        null
      );
      return null;
    }
    var x = [],
      w = [],
      q = [],
      j = [],
      t = [],
      C = [],
      A = [],
      z = [],
      v = [],
      s = [],
      m,
      p,
      u,
      n,
      o,
      r,
      y,
      g;
    for (var l = 0, G = k.length; l < G; l++) {
      var a = k[l];
      switch (a.type) {
        case "#":
          g = a;
          break;
        case "updatePanel":
          Array.add(x, a);
          break;
        case "hiddenField":
          Array.add(w, a);
          break;
        case "arrayDeclaration":
          Array.add(q, a);
          break;
        case "scriptBlock":
          Array.add(j, a);
          break;
        case "fallbackScript":
          j[j.length - 1].fallback = a.id;
        case "scriptStartupBlock":
          Array.add(t, a);
          break;
        case "expando":
          Array.add(C, a);
          break;
        case "onSubmit":
          Array.add(A, a);
          break;
        case "asyncPostBackControlIDs":
          m = a;
          break;
        case "postBackControlIDs":
          p = a;
          break;
        case "updatePanelIDs":
          u = a;
          break;
        case "asyncPostBackTimeout":
          n = a;
          break;
        case "childUpdatePanelIDs":
          o = a;
          break;
        case "panelsToRefreshIDs":
          r = a;
          break;
        case "formAction":
          y = a;
          break;
        case "dataItem":
          Array.add(z, a);
          break;
        case "dataItemJson":
          Array.add(v, a);
          break;
        case "scriptDispose":
          Array.add(s, a);
          break;
        case "pageRedirect":
          if (g && parseFloat(g.content) >= 4) a.content = unescape(a.content);
          if (Sys.Browser.agent === Sys.Browser.InternetExplorer) {
            var f = document.createElement("a");
            f.style.display = "none";
            f.attachEvent("onclick", B);
            f.href = a.content;
            this._form.parentNode.insertBefore(f, this._form);
            f.click();
            f.detachEvent("onclick", B);
            this._form.parentNode.removeChild(f);
            function B(a) {
              a.cancelBubble = true;
            }
          } else window.location.href = a.content;
          return null;
        case "error":
          this._endPostBack(
            this._createPageRequestManagerServerError(
              Number.parseInvariant(a.id),
              a.content
            ),
            h,
            null
          );
          return null;
        case "pageTitle":
          document.title = a.content;
          break;
        case "focus":
          this._controlIDToFocus = a.content;
          break;
        default:
          this._endPostBack(
            this._createPageRequestManagerParserError(
              String.format(Sys.WebForms.Res.PRM_UnknownToken, a.type)
            ),
            h,
            null
          );
          return null;
      }
    }
    return {
      version4: g ? parseFloat(g.content) >= 4 : false,
      executor: h,
      updatePanelNodes: x,
      hiddenFieldNodes: w,
      arrayDeclarationNodes: q,
      scriptBlockNodes: j,
      scriptStartupNodes: t,
      expandoNodes: C,
      onSubmitNodes: A,
      dataItemNodes: z,
      dataItemJsonNodes: v,
      scriptDisposeNodes: s,
      asyncPostBackControlIDsNode: m,
      postBackControlIDsNode: p,
      updatePanelIDsNode: u,
      asyncPostBackTimeoutNode: n,
      childUpdatePanelIDsNode: o,
      panelsToRefreshNode: r,
      formActionNode: y,
    };
  },
  _processUpdatePanelArrays: function (e, q, r, f) {
    var d, c, b;
    if (e) {
      var i = e.length,
        j = f ? 2 : 1;
      d = new Array(i / j);
      c = new Array(i / j);
      b = new Array(i / j);
      for (var g = 0, h = 0; g < i; g += j, h++) {
        var p,
          a = e[g],
          k = f ? e[g + 1] : "";
        p = a.charAt(0) === "t";
        a = a.substr(1);
        if (!k) k = this._uniqueIDToClientID(a);
        b[h] = p;
        d[h] = a;
        c[h] = k;
      }
    } else {
      d = [];
      c = [];
      b = [];
    }
    var n = [],
      l = [];
    this._convertToClientIDs(q, n, l, f);
    var o = [],
      m = [];
    this._convertToClientIDs(r, o, m, f);
    return {
      updatePanelIDs: d,
      updatePanelClientIDs: c,
      updatePanelHasChildrenAsTriggers: b,
      asyncPostBackControlIDs: n,
      asyncPostBackControlClientIDs: l,
      postBackControlIDs: o,
      postBackControlClientIDs: m,
    };
  },
  _queueScripts: function (
    scriptLoader,
    scriptBlockNodes,
    queueIncludes,
    queueBlocks
  ) {
    for (var i = 0, l = scriptBlockNodes.length; i < l; i++) {
      var scriptBlockType = scriptBlockNodes[i].id;
      switch (scriptBlockType) {
        case "ScriptContentNoTags":
          if (!queueBlocks) continue;
          scriptLoader.queueScriptBlock(scriptBlockNodes[i].content);
          break;
        case "ScriptContentWithTags":
          var scriptTagAttributes;
          eval("scriptTagAttributes = " + scriptBlockNodes[i].content);
          if (scriptTagAttributes.src) {
            if (
              !queueIncludes ||
              Sys._ScriptLoader.isScriptLoaded(scriptTagAttributes.src)
            )
              continue;
          } else if (!queueBlocks) continue;
          scriptLoader.queueCustomScriptTag(scriptTagAttributes);
          break;
        case "ScriptPath":
          var script = scriptBlockNodes[i];
          if (
            !queueIncludes ||
            Sys._ScriptLoader.isScriptLoaded(script.content)
          )
            continue;
          scriptLoader.queueScriptReference(script.content, script.fallback);
      }
    }
  },
  _registerDisposeScript: function (a, b) {
    if (!this._scriptDisposes[a]) this._scriptDisposes[a] = [b];
    else Array.add(this._scriptDisposes[a], b);
  },
  _scriptIncludesLoadComplete: function (e, b) {
    if (b.executor.get_webRequest() !== this._request) return;
    this._commitControls(
      b.updatePanelData,
      b.asyncPostBackTimeoutNode ? b.asyncPostBackTimeoutNode.content : null
    );
    if (b.formActionNode) this._form.action = b.formActionNode.content;
    var a, d, c;
    for (a = 0, d = b.updatePanelNodes.length; a < d; a++) {
      c = b.updatePanelNodes[a];
      var j = document.getElementById(c.id);
      if (!j) {
        this._endPostBack(
          Error.invalidOperation(
            String.format(Sys.WebForms.Res.PRM_MissingPanel, c.id)
          ),
          b.executor,
          b
        );
        return;
      }
      this._updatePanel(j, c.content);
    }
    for (a = 0, d = b.scriptDisposeNodes.length; a < d; a++) {
      c = b.scriptDisposeNodes[a];
      this._registerDisposeScript(c.id, c.content);
    }
    for (a = 0, d = this._transientFields.length; a < d; a++) {
      var g = document.getElementById(this._transientFields[a]);
      if (g) {
        var k = g._isContained ? g.parentNode : g;
        k.parentNode.removeChild(k);
      }
    }
    for (a = 0, d = b.hiddenFieldNodes.length; a < d; a++) {
      c = b.hiddenFieldNodes[a];
      this._createHiddenField(c.id, c.content);
    }
    if (b.scriptsFailed)
      throw Sys._ScriptLoader._errorScriptLoadFailed(
        b.scriptsFailed.src,
        b.scriptsFailed.multipleCallbacks
      );
    this._queueScripts(e, b.scriptBlockNodes, false, true);
    var i = "";
    for (a = 0, d = b.arrayDeclarationNodes.length; a < d; a++) {
      c = b.arrayDeclarationNodes[a];
      i +=
        "Sys.WebForms.PageRequestManager._addArrayElement('" +
        c.id +
        "', " +
        c.content +
        ");\r\n";
    }
    var h = "";
    for (a = 0, d = b.expandoNodes.length; a < d; a++) {
      c = b.expandoNodes[a];
      h += c.id + " = " + c.content + "\r\n";
    }
    if (i.length) e.queueScriptBlock(i);
    if (h.length) e.queueScriptBlock(h);
    this._queueScripts(e, b.scriptStartupNodes, true, true);
    var f = "";
    for (a = 0, d = b.onSubmitNodes.length; a < d; a++) {
      if (a === 0)
        f =
          "Array.add(Sys.WebForms.PageRequestManager.getInstance()._onSubmitStatements, function() {\r\n";
      f += b.onSubmitNodes[a].content + "\r\n";
    }
    if (f.length) {
      f += "\r\nreturn true;\r\n});\r\n";
      e.queueScriptBlock(f);
    }
    e.loadScripts(
      0,
      Function.createDelegate(
        this,
        Function.createCallback(this._scriptsLoadComplete, b)
      ),
      null,
      null
    );
  },
  _scriptIncludesLoadFailed: function (d, c, b, a) {
    a.scriptsFailed = { src: c.src, multipleCallbacks: b };
    this._scriptIncludesLoadComplete(d, a);
  },
  _scriptsLoadComplete: function (f, c) {
    var e = c.executor;
    if (window.__theFormPostData) window.__theFormPostData = "";
    if (window.__theFormPostCollection) window.__theFormPostCollection = [];
    if (window.WebForm_InitCallback) window.WebForm_InitCallback();
    if (this._scrollPosition) {
      if (window.scrollTo)
        window.scrollTo(this._scrollPosition.x, this._scrollPosition.y);
      this._scrollPosition = null;
    }
    Sys.Application.endCreateComponents();
    this._pageLoaded(false, c);
    this._endPostBack(null, e, c);
    if (this._controlIDToFocus) {
      var a, d;
      if (Sys.Browser.agent === Sys.Browser.InternetExplorer) {
        var b = $get(this._controlIDToFocus);
        a = b;
        if (b && !WebForm_CanFocus(b)) a = WebForm_FindFirstFocusableChild(b);
        if (a && typeof a.contentEditable !== "undefined") {
          d = a.contentEditable;
          a.contentEditable = false;
        } else a = null;
      }
      WebForm_AutoFocus(this._controlIDToFocus);
      if (a) a.contentEditable = d;
      this._controlIDToFocus = null;
    }
  },
  _splitNodeIntoArray: function (b) {
    var a = b.content,
      c = a.length ? a.split(",") : [];
    return c;
  },
  _uniqueIDToClientID: function (a) {
    return a.replace(/\$/g, "_");
  },
  _updateControls: function (d, a, c, b, e) {
    this._commitControls(this._processUpdatePanelArrays(d, a, c, e), b);
  },
  _updatePanel: function (updatePanelElement, rendering) {
    for (var updatePanelID in this._scriptDisposes)
      if (
        this._elementContains(
          updatePanelElement,
          document.getElementById(updatePanelID)
        )
      ) {
        var disposeScripts = this._scriptDisposes[updatePanelID];
        for (var i = 0, l = disposeScripts.length; i < l; i++)
          eval(disposeScripts[i]);
        delete this._scriptDisposes[updatePanelID];
      }
    Sys.Application.disposeElement(updatePanelElement, true);
    updatePanelElement.innerHTML = rendering;
  },
  _validPosition: function (a) {
    return typeof a !== "undefined" && a !== null && a !== 0;
  },
};
Sys.WebForms.PageRequestManager.getInstance = function () {
  var a = Sys.WebForms.PageRequestManager._instance;
  if (!a)
    a = Sys.WebForms.PageRequestManager._instance = new Sys.WebForms.PageRequestManager();
  return a;
};
Sys.WebForms.PageRequestManager._addArrayElement = function (a) {
  if (!window[a]) window[a] = [];
  for (var b = 1, c = arguments.length; b < c; b++)
    Array.add(window[a], arguments[b]);
};
Sys.WebForms.PageRequestManager._initialize = function () {
  var a = Sys.WebForms.PageRequestManager.getInstance();
  a._initializeInternal.apply(a, arguments);
};
Sys.WebForms.PageRequestManager.registerClass(
  "Sys.WebForms.PageRequestManager"
);
Sys.UI._UpdateProgress = function (a) {
  Sys.UI._UpdateProgress.initializeBase(this, [a]);
  this._displayAfter = 500;
  this._dynamicLayout = true;
  this._associatedUpdatePanelId = null;
  this._beginRequestHandlerDelegate = null;
  this._startDelegate = null;
  this._endRequestHandlerDelegate = null;
  this._pageRequestManager = null;
  this._timerCookie = null;
};
Sys.UI._UpdateProgress.prototype = {
  get_displayAfter: function () {
    return this._displayAfter;
  },
  set_displayAfter: function (a) {
    this._displayAfter = a;
  },
  get_dynamicLayout: function () {
    return this._dynamicLayout;
  },
  set_dynamicLayout: function (a) {
    this._dynamicLayout = a;
  },
  get_associatedUpdatePanelId: function () {
    return this._associatedUpdatePanelId;
  },
  set_associatedUpdatePanelId: function (a) {
    this._associatedUpdatePanelId = a;
  },
  get_role: function () {
    return "status";
  },
  _clearTimeout: function () {
    if (this._timerCookie) {
      window.clearTimeout(this._timerCookie);
      this._timerCookie = null;
    }
  },
  _getUniqueID: function (b) {
    var a = Array.indexOf(this._pageRequestManager._updatePanelClientIDs, b);
    return a === -1 ? null : this._pageRequestManager._updatePanelIDs[a];
  },
  _handleBeginRequest: function (f, e) {
    var b = e.get_postBackElement(),
      a = true,
      d = this._associatedUpdatePanelId;
    if (this._associatedUpdatePanelId) {
      var c = e.get_updatePanelsToUpdate();
      if (c && c.length)
        a = Array.contains(c, d) || Array.contains(c, this._getUniqueID(d));
      else a = false;
    }
    while (!a && b) {
      if (b.id && this._associatedUpdatePanelId === b.id) a = true;
      b = b.parentNode;
    }
    if (a)
      this._timerCookie = window.setTimeout(
        this._startDelegate,
        this._displayAfter
      );
  },
  _startRequest: function () {
    if (this._pageRequestManager.get_isInAsyncPostBack()) {
      var a = this.get_element();
      if (this._dynamicLayout) a.style.display = "block";
      else a.style.visibility = "visible";
      if (this.get_role() === "status") a.setAttribute("aria-hidden", "false");
    }
    this._timerCookie = null;
  },
  _handleEndRequest: function () {
    var a = this.get_element();
    if (this._dynamicLayout) a.style.display = "none";
    else a.style.visibility = "hidden";
    if (this.get_role() === "status") a.setAttribute("aria-hidden", "true");
    this._clearTimeout();
  },
  dispose: function () {
    if (this._beginRequestHandlerDelegate !== null) {
      this._pageRequestManager.remove_beginRequest(
        this._beginRequestHandlerDelegate
      );
      this._pageRequestManager.remove_endRequest(
        this._endRequestHandlerDelegate
      );
      this._beginRequestHandlerDelegate = null;
      this._endRequestHandlerDelegate = null;
    }
    this._clearTimeout();
    Sys.UI._UpdateProgress.callBaseMethod(this, "dispose");
  },
  initialize: function () {
    Sys.UI._UpdateProgress.callBaseMethod(this, "initialize");
    if (this.get_role() === "status")
      this.get_element().setAttribute("aria-hidden", "true");
    this._beginRequestHandlerDelegate = Function.createDelegate(
      this,
      this._handleBeginRequest
    );
    this._endRequestHandlerDelegate = Function.createDelegate(
      this,
      this._handleEndRequest
    );
    this._startDelegate = Function.createDelegate(this, this._startRequest);
    if (Sys.WebForms && Sys.WebForms.PageRequestManager)
      this._pageRequestManager = Sys.WebForms.PageRequestManager.getInstance();
    if (this._pageRequestManager !== null) {
      this._pageRequestManager.add_beginRequest(
        this._beginRequestHandlerDelegate
      );
      this._pageRequestManager.add_endRequest(this._endRequestHandlerDelegate);
    }
  },
};
Sys.UI._UpdateProgress.registerClass("Sys.UI._UpdateProgress", Sys.UI.Control);
Type.registerNamespace("Sys.WebForms");
Sys.WebForms.Res = {
  PRM_UnknownToken: "Unknown token: \u0027{0}\u0027.",
  PRM_MissingPanel:
    "Could not find UpdatePanel with ID \u0027{0}\u0027. If it is being updated dynamically then it must be inside another UpdatePanel.",
  PRM_ServerError:
    "An unknown error occurred while processing the request on the server. The status code returned from the server was: {0}",
  PRM_ParserError:
    "The message received from the server could not be parsed. Common causes for this error are when the response is modified by calls to Response.Write(), response filters, HttpModules, or server trace is enabled.\r\nDetails: {0}",
  PRM_TimeoutError: "The server request timed out.",
  PRM_ParserErrorDetails: "Error parsing near \u0027{0}\u0027.",
  PRM_CannotRegisterTwice:
    "The PageRequestManager cannot be initialized more than once.",
};
/* END MicrosoftAjaxWebForms.js */
/* START Telerik.Web.UI.Common.Scrolling.ScrollingScripts.js */
Type.registerNamespace("Telerik.Web.UI");
Telerik.Web.UI.ScrollerOrientation = function () {};
Telerik.Web.UI.ScrollerOrientation.prototype = { Vertical: 0, Horizontal: 1 };
Telerik.Web.UI.ScrollerOrientation.registerEnum(
  "Telerik.Web.UI.ScrollerOrientation"
);
Telerik.Web.UI.ScrollerSpeed = function () {};
Telerik.Web.UI.ScrollerSpeed.prototype = {
  Invalid: 0,
  Slow: 1,
  Medium: 2,
  Fast: 3,
  MousewheelDefault: 12,
};
Telerik.Web.UI.ScrollerSpeed.registerEnum("Telerik.Web.UI.ScrollerSpeed");
Telerik.Web.UI.ArrowPosition = function () {};
Telerik.Web.UI.ArrowPosition.prototype = {
  Top: 0,
  Bottom: 1,
  Left: 2,
  Right: 3,
};
Telerik.Web.UI.ArrowPosition.registerEnum("Telerik.Web.UI.ArrowPosition");
Telerik.Web.UI.Scroller = function (c, a, b) {
  this._timerInterval = 10;
  this._scrolledElement = c;
  this._element = a;
  this._orientation = b;
  this._minPosition = 0;
  this._maxPosition = null;
  this._currentPosition = 0;
  this._speed = Telerik.Web.UI.ScrollerSpeed.Invalid;
  this._direction = 0;
  this._events = null;
  this._timer = null;
  this._onTickDelegate = null;
};
Telerik.Web.UI.Scroller.prototype = {
  initialize: function () {
    this._onTickDelegate = Function.createDelegate(this, this._onTick);
    this._timer = new Telerik.Web.Timer();
    this._timer.set_interval(this._timerInterval);
    this._timer.add_tick(this._onTickDelegate);
  },
  dispose: function () {
    if (this._timer) {
      this._timer.dispose();
    }
    this._onTickDelegate = null;
    this._events = null;
  },
  get_element: function () {
    return this._element;
  },
  get_events: function () {
    if (!this._events) {
      this._events = new Sys.EventHandlerList();
    }
    return this._events;
  },
  add_positionChanged: function (a) {
    this.get_events().addHandler("positionChanged", a);
  },
  remove_positionChanged: function (a) {
    this.get_events().removeHandler("positionChanged", a);
  },
  setScrollingLimits: function (b, a) {
    this._minPosition = b;
    this._maxPosition = Math.min(this._getElementSize(), a);
  },
  isAtMinPosition: function () {
    return this._currentPosition <= this._minPosition;
  },
  isAtMaxPosition: function () {
    return this._currentPosition >= this._maxPosition;
  },
  resetState: function () {
    this._resetOverflowStyle();
    this._scrollTo(0);
  },
  startScroll: function (b, a) {
    this._speed = b;
    this._direction = a;
    this._timer.set_enabled(true);
  },
  changeScrollSpeed: function (a) {
    this._speed = a;
  },
  stopScroll: function () {
    this._speed = Telerik.Web.UI.ScrollerSpeed.Invalid;
    this._direction = 0;
    this._timer.set_enabled(false);
  },
  scrollToMaxPosition: function () {
    this._scrollTo(this._maxPosition);
  },
  _onTick: function () {
    var a = this._currentPosition + this._direction * this._speed;
    a = Math.max(a, this._minPosition);
    a = Math.min(a, this._maxPosition);
    this._scrollTo(a);
    if (a == this._minPosition || a == this._maxPosition) {
      this.stopScroll();
    }
  },
  _scrollTo: function (a) {
    var b = "left";
    if (this._orientation == Telerik.Web.UI.ScrollerOrientation.Vertical) {
      b = "top";
    }
    this._currentPosition = a;
    this._scrolledElement.style[b] = -a + "px";
    this._raiseEvent("positionChanged", Sys.EventArgs.Empty);
  },
  _resetOverflowStyle: function () {
    if ($telerik.isIE) {
      this._element.style.overflow = "visible";
      if (this._orientation == Telerik.Web.UI.ItemFlow.Vertical) {
        this._element.style.overflowX = "visible";
        this._element.style.overflowY = "hidden";
      } else {
        this._element.style.overflowX = "hidden";
        this._element.style.overflowY = "hidden";
      }
    } else {
      this._element.style.overflow = "hidden";
    }
  },
  _getElementSize: function () {
    if (this._orientation == Telerik.Web.UI.ScrollerOrientation.Vertical) {
      return this._scrolledElement.offsetHeight;
    } else {
      return this._scrolledElement.offsetWidth;
    }
  },
  _raiseEvent: function (b, a) {
    var c = this.get_events().getHandler(b);
    if (c) {
      if (!a) {
        a = Sys.EventArgs.Empty;
      }
      c(this, a);
    }
  },
};
Telerik.Web.UI.Scroller.registerClass(
  "Telerik.Web.UI.Scroller",
  null,
  Sys.IDisposable
);

/* END Telerik.Web.UI.Common.Scrolling.ScrollingScripts.js */
/* START Telerik.Web.UI.Common.Core.js */
(function (z, k, x) {
  var s,
    u = Object.prototype,
    b = u.toString,
    n = "[object Function]",
    j = "div",
    p = "input",
    t = z.navigator,
    y = t.userAgent;
  function q(A) {
    return b.call(A) === n;
  }
  function a(A, B) {
    B();
  }
  function h(A) {
    return k.createElement(A);
  }
  function o(B, A) {
    return B.indexOf(A);
  }
  function r(A, B) {
    return A.match(B);
  }
  function w(C) {
    var A = k.createElement("div"),
      D = "ms Moz webkit".split(" "),
      B = D.length;
    if (C in A.style) {
      return true;
    }
    C = C.replace(/^[a-z]/, function (E) {
      return E.toUpperCase();
    });
    while (B--) {
      if (D[B] + C in A.style) {
        return true;
      }
    }
    return false;
  }
  var m = function () {};
  m.prototype = {
    addTest: function d(A, D, C) {
      var B = this;
      C = C || B;
      if (C[A] !== x) {
        return;
      }
      D = q(D) ? D() : D;
      C[A] = D;
    },
    addSuite: function c(C, D) {
      var B = this;
      C = B[C] = {};
      for (var A in D) {
        if (D.hasOwnProperty(A)) {
          B.addTest(A, D[A], C);
        }
      }
    },
  };
  var v = new m();
  var l = new m();
  var e = new m();
  var f = new m();
  var g = new m();
  var i = new m();
  a("Platform", function () {
    v.addTest("windows", function () {
      return o(y, "Windows") > -1 && o(y, "Windows Phone") == -1;
    });
    v.addTest("mac", function () {
      return o(y, "Macintosh") > -1;
    });
    v.addTest("linux", function () {
      return o(y, "Linux") > -1 && o(y, "Android") == -1;
    });
    v.addTest("windowsphone", function () {
      return o(y, "Windows Phone") > -1;
    });
    v.addTest("android", function () {
      return o(y, "Android") > -1 && o(y, "Windows Phone") == -1;
    });
    v.addTest("ios", function () {
      return (
        (o(y, "iPad") > -1 || o(y, "iPhone") > -1 || o(y, "iPod") > -1) &&
        o(y, "Windows Phone") == -1
      );
    });
    v.addTest("ipad", function () {
      return o(y, "iPad") > -1 && o(y, "Windows Phone") == -1;
    });
    v.addTest("iphone", function () {
      return (
        (o(y, "iPhone") > -1 || o(y, "iPod") > -1) &&
        o(y, "Windows Phone") == -1
      );
    });
  });
  a("Engine", function () {
    l.addTest("trident", function () {
      return o(y, " Trident/") > -1;
    });
    l.addTest("spartan", function () {
      return o(y, " Edge/") > -1;
    });
    l.addTest("presto", function () {
      return o(y, " Opera/") > -1;
    });
    l.addTest("gecko", function () {
      return !l.trident && o(y, " Firefox/") > -1;
    });
    l.addTest("webkit", function () {
      return !l.spartan && !l.trident && o(y, " AppleWebKit/") > -1;
    });
  });
  a("Browser", function () {
    e.addTest("ie", function () {
      return v.windows && (l.trident || o(y, " MSIE ") > -1);
    });
    e.addTest("edge", function () {
      return v.windows && o(y, " Edge/") > -1;
    });
    e.addTest("iemobile", function () {
      return v.windowsphone && o(y, " IEMobile/") > -1;
    });
    e.addTest("edgemobile", function () {
      return v.windowsphone && o(y, " Edge/") > -1;
    });
    e.addTest("ff", function () {
      return !e.ie && o(y, " Firefox/") > -1;
    });
    e.addTest("opera", function () {
      return o(y, " OPR/") > -1 || o(y, " OPiOS/") > -1;
    });
    e.addTest("operaPresto", function () {
      return o(y, " Opera/") > -1;
    });
    e.addTest("operaMini", function () {
      return o(y, " Opera Mini/") > -1;
    });
    e.addTest("webkit", function () {
      return l.webkit;
    });
    e.addTest("safari", function () {
      return l.webkit && o(y, " Version/") > -1;
    });
    e.addTest("chrome", function () {
      return (
        l.webkit && !e.opera && (o(y, " Chrome/") > -1 || o(y, " CriOS/") > -1)
      );
    });
    e.addTest("fullVersion", function () {
      var A = null;
      if (e.ie) {
        A = o(y, " rv:") > -1 ? /rv:([\d\.]+)/ : /MSIE ([\d\.]+)/;
      }
      if (e.edge) {
        A = /Edge\/([\d\.]+)/;
      }
      if (e.iemobile) {
        A = /IEMobile\/([\d\.]+)/;
      }
      if (e.edgemobile) {
        A = /Edge\/([\d\.]+)/;
      }
      if (e.ff) {
        A = /Firefox\/([\d\.]+)/;
      }
      if (e.opera) {
        A = /OP(?:R|iOS)\/([\d\.]+)/;
      }
      if (e.operaPresto) {
        A = /Version\/([\d\.]+)/;
      }
      if (e.safari) {
        A = /Version\/([\d\.]+)/;
      }
      if (e.chrome) {
        A = /(?:Chrome|CriOS)\/([\d\.]+)/;
      }
      if (A === null) {
        return null;
      }
      return r(y, A)[1];
    });
    e.addTest("version", function () {
      var A = e.fullVersion;
      if (A === null) {
        return null;
      }
      return parseFloat(A);
    });
    e.addTest("documentMode", k.documentMode || null);
    e.addTest("quirksMode", e.ie && k.compatMode !== "CSS1Compat");
    e.addTest("standardsMode", !e.quirksMode);
  });
  a("Canvas", function () {
    var A = h("canvas");
    f.addTest("canvas", !!(A.getContext && A.getContext("2d")));
  });
  a("Input", function () {
    var A = h(p);
    f.addSuite("input", {
      autocomplete: !!("autocomplete" in A),
      autofocus: !!("autofocus" in A),
      list: !!("list" in A),
      max: !!("max" in A),
      min: !!("min" in A),
      multiple: !!("multiple" in A),
      pattern: !!("pattern" in A),
      placeholder: !!("placeholder" in A),
      required: !!("required" in A),
      step: !!("step" in A),
    });
  });
  a("Input types", function () {
    var A = h(p);
    function B(C) {
      A.setAttribute("type", C);
      return A.type !== "text";
    }
    f.addSuite("inputTypes", {
      color: B("color"),
      date: B("date"),
      datetime: B("datetime"),
      "datetime-local": B("datetime-local"),
      email: B("email"),
      month: B("month"),
      number: B("number"),
      range: B("range"),
      search: B("search"),
      tel: B("tel"),
      time: B("time"),
      url: B("url"),
      week: B("week"),
    });
  });
  a("Observers", function () {
    f.addTest("propertychange", "onpropertychange" in k);
  });
  a("CSS Features", function () {
    var C = z.document.documentElement;
    var A = Sys.UI.DomElement.addCssClass;
    function B() {
      var G = k.documentElement,
        F = k.createElement(j),
        D = k.body,
        E = D || k.createElement("body"),
        H;
      F.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both";
      F.innerHTML = "&nbsp;";
      E.appendChild(F);
      if (!D) {
        G.appendChild(E);
      }
      H = F.offsetWidth - F.scrollWidth;
      F.parentNode.removeChild(F);
      if (!D) {
        E.parentNode.removeChild(E);
      }
      return H;
    }
    e.addTest("scrollBarWidth", B);
    i.addTest("boxShadow", function () {
      var D = w("boxShadow");
      if (D === false) {
        A(C, "t-no-boxshadow");
      }
      return D;
    });
    i.addTest("flexbox", function () {
      var D = w("flex");
      if (D === false) {
        A(C, "t-no-flexbox");
      }
      return D;
    });
  });
  a("Events", function () {
    f.addTest("touchEvents", function () {
      return "ontouchstart" in z;
    });
    f.addTest("pointerEvents", function () {
      return "PointerEvent" in z;
    });
    f.addTest("msPointerEvents", function () {
      return "MSPointerEvent" in z;
    });
    f.addTest("touchAndMouseEvents", function () {
      return f.touchEvents && !v.android && !v.ios;
    });
  });
  Type.registerNamespace("Telerik.Web");
  s = Telerik.Web;
  s.Platform = v;
  s.Engine = l;
  s.Browser = e;
  s.BrowserFeatures = f;
  s.BrowserPlugins = g;
  s.CssFeatures = i;
})(window, document);
(function (f, c, e) {
  var d = f.document.documentElement;
  var a = Sys.UI.DomElement.addCssClass;
  var b = Telerik.Web.Browser;
  Array.forEach(["chrome", "ff", "ie", "opera", "safari"], function (h, g) {
    if (b[h]) {
      a(d, String.format("t-{0} t-{0}{1}", h, b.version));
    }
  });
})(window, document);
try {
  if (Sys.Browser.agent == Sys.Browser.InternetExplorer) {
    document.execCommand("BackgroundImageCache", false, true);
  }
} catch (err) {}
Type.registerNamespace("Telerik.Web.UI");
(function (a) {
  a.Point = function (b, c) {
    this.x = b;
    this.y = c;
  };
  a.Point.registerClass("Telerik.Web.UI.Point");
  a.Bounds = function (d, e, c, b) {
    this.x = d;
    this.y = e;
    this.height = b;
    this.width = c;
  };
  a.Bounds.registerClass("Telerik.Web.UI.Bounds");
})(Telerik.Web.UI);
var commonScripts = {
  cloneJsObject: function (c, d) {
    if (!d) {
      d = {};
    }
    for (var a in c) {
      var b = c[a];
      d[a] = b instanceof Array ? Array.clone(b) : b;
    }
    return d;
  },
  isCloned: function () {
    return this._isCloned;
  },
  cloneControl: function (f, d, a) {
    if (!f) {
      return null;
    }
    if (!d) {
      d = Object.getType(f);
    }
    var e = f.__clonedProperties__;
    if (null == e) {
      e = f.__clonedProperties__ = $telerik._getPropertiesParameter(f, d);
    }
    if (!a) {
      a = f.get_element().cloneNode(true);
      a.removeAttribute("control");
      a.removeAttribute("id");
    }
    var c = $create(d, e, null, null, a);
    if (f._observerContext) {
      c._observerContext = f._observerContext;
    }
    var b = $telerik.cloneJsObject(f.get_events());
    c._events = b;
    c._events._list = $telerik.cloneJsObject(c._events._list);
    c._isCloned = true;
    c.isCloned = $telerik.isCloned;
    return c;
  },
  _getPropertiesParameter: function (h, d) {
    var c = {};
    var f = d.prototype;
    for (var b in f) {
      var a = h[b];
      if (typeof a == "function" && b.indexOf("get_") == 0) {
        var e = b.substring(4);
        if (null == h["set_" + e]) {
          continue;
        }
        var g = a.call(h);
        if (null == g) {
          continue;
        }
        c[e] = g;
      }
    }
    delete c.clientStateFieldID;
    delete c.id;
    return c;
  },
  getOuterSize: function (a) {
    var c = $telerik.getSize(a);
    var b = $telerik.getMarginBox(a);
    return {
      width: c.width + b.left + b.right,
      height: c.height + b.top + b.bottom,
    };
  },
  getOuterBounds: function (a) {
    var c = $telerik.getBounds(a);
    var b = $telerik.getMarginBox(a);
    return {
      x: c.x - b.left,
      y: c.y - b.top,
      width: c.width + b.left + b.right,
      height: c.height + b.top + b.bottom,
    };
  },
  getInvisibleParent: function (a) {
    var b = function (c) {
      return $telerik.getCurrentStyle(c, "display", "") === "none";
    };
    return this.getParentBy(a, b);
  },
  getHiddenParent: function (b) {
    var a = function (c) {
      return $telerik.getCurrentStyle(c, "visibility", "") === "hidden";
    };
    return this.getParentBy(b, a);
  },
  getParentBy: function (c, a) {
    var b = c.nodeType == c.DOCUMENT_NODE ? c : c.ownerDocument;
    while (c && c != b) {
      if (a(c)) {
        return c;
      }
      c = c.parentNode;
    }
    return null;
  },
  isScrolledIntoView: function (d) {
    var a = d.ownerDocument;
    var g = a.defaultView ? a.defaultView : a.parentWindow;
    var c = $telerik.$(g).scrollTop(),
      b = c + $telerik.$(g).height(),
      f = $telerik.$(d).offset().top,
      e = f + $telerik.$(d).height();
    return f + (e - f) / 4 >= c && f + (e - f) / 4 <= b;
  },
  scrollIntoView: function (b) {
    if (!b || !b.parentNode) {
      return;
    }
    var g = null,
      c = b.offsetParent,
      h = b.offsetTop,
      f = 0;
    var e = b.parentNode;
    while (e != null) {
      var d = $telerik.getCurrentStyle(e, "overflowY");
      if (d == "scroll" || d == "auto") {
        g = e;
        break;
      }
      if (e == c) {
        h += e.offsetTop;
        c = e.offsetParent;
      }
      if (e.tagName == "BODY") {
        var a = e.ownerDocument;
        if (!$telerik.isIE && a.defaultView && a.defaultView.frameElement) {
          f = a.defaultView.frameElement.offsetHeight;
        }
        g = e;
        break;
      }
      e = e.parentNode;
    }
    if (!g) {
      return;
    }
    if (!f) {
      f = g.offsetHeight;
    }
    if (g.scrollTop + f < h + b.offsetHeight) {
      g.scrollTop = h + b.offsetHeight - f;
    } else {
      if (h < g.scrollTop) {
        g.scrollTop = h;
      }
    }
  },
  getScrollableParent: function (a) {
    var c = a.parentNode,
      d = null,
      b;
    while (c != null) {
      b = $telerik.getCurrentStyle(c, "overflowY");
      if (b == "scroll" || b == "auto") {
        d = c;
        break;
      }
      c = c.parentNode;
    }
    return d;
  },
  getScrollableParents: function (a) {
    var c = a.parentNode,
      d = [],
      b;
    while (c != null && c.nodeType === 1) {
      b = $telerik.getCurrentStyle(c, "overflowY");
      if (b == "scroll" || b == "auto") {
        d.push(c);
      }
      c = c.parentNode;
    }
    return d;
  },
  withFrozenParentsScroll: function (b, a) {
    var e = $telerik.getScrollableParents(b);
    var f = [];
    var g = $telerik.$(window).scrollTop();
    for (var c = 0; c < e.length; c++) {
      f.push(e[c].scrollTop);
    }
    a.apply();
    for (var d = 0; d < e.length; d++) {
      e[d].scrollTop = f[d];
    }
    $telerik.$(window).scrollTop(g);
  },
  fixScrollableParentBehavior_OldIE: function (a) {
    if (!($telerik.isIE6 || $telerik.isIE7) || !a || a.nodeType !== 1) {
      return;
    }
    var c = $telerik.getScrollableParent(a),
      b = $telerik.getComputedStyle(c, "position");
    if (b == "static") {
      c.style.position = "relative";
    }
  },
  isRightToLeft: function (b) {
    while (b && b.nodeType !== 9) {
      var a = $telerik.getCurrentStyle(b, "direction");
      if (b.dir == "rtl" || a == "rtl") {
        return true;
      }
      if (b.dir == "ltr" || a == "ltr") {
        return false;
      }
      b = b.parentNode;
    }
    return false;
  },
  getCorrectScrollLeft: function (a) {
    if ($telerik.isRightToLeft(a)) {
      return -(a.scrollWidth - a.offsetWidth - Math.abs(a.scrollLeft));
    } else {
      return a.scrollLeft;
    }
  },
  scrollLeft: function (b, e) {
    var c = $telerik.isRightToLeft(b);
    var a = Telerik.Web.Browser;
    var f = a.webkit;
    var d = a.ff;
    if (e !== undefined) {
      if (c && f) {
        b.scrollLeft = b.scrollWidth - b.clientWidth - e;
      } else {
        if (c && d) {
          b.scrollLeft = -e;
        } else {
          b.scrollLeft = e;
        }
      }
    } else {
      if (c && f) {
        return b.scrollWidth - b.clientWidth - b.scrollLeft;
      } else {
        return Math.abs(b.scrollLeft);
      }
    }
  },
  _borderStyleNames: [
    "borderTopStyle",
    "borderRightStyle",
    "borderBottomStyle",
    "borderLeftStyle",
  ],
  _borderWidthNames: [
    "borderTopWidth",
    "borderRightWidth",
    "borderBottomWidth",
    "borderLeftWidth",
  ],
  _paddingWidthNames: [
    "paddingTop",
    "paddingRight",
    "paddingBottom",
    "paddingLeft",
  ],
  _marginWidthNames: ["marginTop", "marginRight", "marginBottom", "marginLeft"],
  radControls: [],
  registerControl: function (a) {
    if (!Array.contains(this.radControls, a)) {
      Array.add(this.radControls, a);
    }
  },
  unregisterControl: function (a) {
    Array.remove(this.radControls, a);
  },
  repaintChildren: function (d) {
    var e = d.get_element ? d.get_element() : d;
    for (var b = 0, c = this.radControls.length; b < c; b++) {
      var a = this.radControls[b];
      if (a.repaint && this.isDescendant(e, a.get_element())) {
        a.repaint();
      }
    }
  },
  _borderThickness: function () {
    $telerik._borderThicknesses = {};
    var b = document.createElement("div");
    var d = document.createElement("div");
    b.style.visibility = "hidden";
    b.style.position = "absolute";
    b.style.top = "-9999px";
    b.style.fontSize = "1px";
    d.style.height = "0px";
    d.style.overflow = "hidden";
    document.body.appendChild(b).appendChild(d);
    var a = b.offsetHeight;
    d.style.borderTop = "solid black";
    b.style.borderLeft = "1px solid red";
    d.style.borderTopWidth = "thin";
    $telerik._borderThicknesses.thin = b.offsetHeight - a;
    d.style.borderTopWidth = "medium";
    $telerik._borderThicknesses.medium = b.offsetHeight - a;
    d.style.borderTopWidth = "thick";
    $telerik._borderThicknesses.thick = b.offsetHeight - a;
    var c = $telerik.getComputedStyle(b, "border-left-color", null);
    var e = $telerik.getComputedStyle(d, "border-top-color", null);
    if (c && e && c == e) {
      document.documentElement.className += " _Telerik_a11y";
    }
    if (typeof b.removeChild !== "undefined") {
      b.removeChild(d);
    }
    document.body.removeChild(b);
    if (!$telerik.isSafari && !$telerik.isIE10Mode) {
      d.outerHTML = null;
    }
    if (!$telerik.isSafari && !$telerik.isIE10Mode) {
      b.outerHTML = null;
    }
    b = null;
    d = null;
  },
  getLocation: function (g) {
    var d = g && g.ownerDocument ? g.ownerDocument : document;
    if (g === d.documentElement) {
      return new Telerik.Web.UI.Point(0, 0);
    }
    var C;
    if (Sys.Browser.agent == Sys.Browser.InternetExplorer) {
      if (
        g.window === g ||
        g.nodeType === 9 ||
        !g.getClientRects ||
        !g.getBoundingClientRect ||
        g.parentElement == null
      ) {
        return new Telerik.Web.UI.Point(0, 0);
      }
      var H = g.getClientRects();
      if (!H || !H.length) {
        return new Telerik.Web.UI.Point(0, 0);
      }
      var k = H[0];
      var c = 0;
      var f = 0;
      var p = false;
      try {
        p = d.parentWindow.frameElement;
      } catch (j) {
        p = true;
      }
      if (p) {
        var b = g.getBoundingClientRect();
        if (!b) {
          return new Telerik.Web.UI.Point(0, 0);
        }
        var t = k.left;
        var u = k.top;
        for (var o = 1; o < H.length; o++) {
          var F = H[o];
          if (F.left < t) {
            t = F.left;
          }
          if (F.top < u) {
            u = F.top;
          }
        }
        c = t - b.left;
        f = u - b.top;
      }
      var I = 0;
      if ($telerik.isIE6 || $telerik.isIE7 || $telerik.quirksMode) {
        var n = 1;
        if (p && p.getAttribute) {
          var a = p.getAttribute("frameborder");
          if (a != null) {
            n = parseInt(a, 10);
            if (isNaN(n)) {
              n = a.toLowerCase() == "no" ? 0 : 1;
            }
          }
        }
        I = 2 * n;
      }
      var e = d.documentElement;
      var D = k.left - I - c + $telerik.getCorrectScrollLeft(e);
      var E = k.top - I - f + e.scrollTop;
      C = new Telerik.Web.UI.Point(Math.round(D), Math.round(E));
      if ($telerik.quirksMode) {
        C.x += $telerik.getCorrectScrollLeft(d.body);
        C.y += d.body.scrollTop;
      }
      return C;
    }
    C = $telerik.originalGetLocation(g);
    if ($telerik.isOpera) {
      var z = null;
      var h = $telerik.getCurrentStyle(g, "display");
      if (h != "inline") {
        z = g.parentNode;
      } else {
        z = g.offsetParent;
      }
      while (z) {
        var B = z.tagName.toUpperCase();
        if (B == "BODY" || B == "HTML") {
          break;
        }
        if (
          B == "TABLE" &&
          z.parentNode &&
          z.parentNode.style.display == "inline-block"
        ) {
          var w = z.offsetLeft;
          var v = z.style.display;
          z.style.display = "inline-block";
          if (z.offsetLeft > w) {
            C.x += z.offsetLeft - w;
          }
          z.style.display = v;
        }
        C.x -= $telerik.getCorrectScrollLeft(z);
        C.y -= z.scrollTop;
        if (h != "inline") {
          z = z.parentNode;
        } else {
          z = z.offsetParent;
        }
      }
    }
    var y = Math.max(d.documentElement.scrollTop, d.body.scrollTop);
    var x = Math.max(d.documentElement.scrollLeft, d.body.scrollLeft);
    if ($telerik.isSafari || $telerik.isSpartan) {
      if (y > 0 || x > 0) {
        var m = d.documentElement.getElementsByTagName("form");
        if (m && m.length > 0) {
          var l = $telerik.originalGetLocation(m[0]);
          if (l.y && l.y < 0) {
            C.y += y;
          }
          if (l.x && l.x < 0) {
            C.x += x;
          }
        } else {
          var G = g.parentNode,
            s = false,
            q = false;
          while (G && G.tagName) {
            var A = $telerik.originalGetLocation(G);
            if (A.y < 0) {
              s = true;
            }
            if (A.x < 0) {
              q = true;
            }
            G = G.parentNode;
          }
          if (s) {
            C.y += y;
          }
          if (q) {
            C.x += x;
          }
        }
      }
    }
    return C;
  },
  setLocation: function (a, b) {
    var c = a.style;
    c.position = "absolute";
    c.left = b.x + "px";
    c.top = b.y + "px";
  },
  getElementQuery: function (d) {
    var f = [];
    while (d.parentNode) {
      if (d.id) {
        f.unshift("#" + d.id);
        break;
      } else {
        if (d == d.ownerDocument.documentElement) {
          f.unshift(d.tagName);
        } else {
          for (
            var a = 1, b = d;
            b.previousElementSibling;
            b = b.previousElementSibling, a++
          ) {}
          f.unshift(String.format("{0}:nth-child({1})", d.tagName, a));
        }
        d = d.parentNode;
      }
    }
    return f.join(" > ");
  },
  findControl: function (f, d) {
    var b = f.getElementsByTagName("*");
    for (var c = 0, e = b.length; c < e; c++) {
      var a = b[c].id;
      if (a && a.endsWith(d)) {
        return $find(a);
      }
    }
    return null;
  },
  findElement: function (f, d) {
    var b = f.getElementsByTagName("*");
    for (var c = 0, e = b.length; c < e; c++) {
      var a = b[c].id;
      if (a && a.endsWith(d)) {
        return $get(a);
      }
    }
    return null;
  },
  getContentSize: function (b) {
    if (!b) {
      throw Error.argumentNull("element");
    }
    var d = $telerik.getSize(b);
    var a = $telerik.getBorderBox(b);
    var c = $telerik.getPaddingBox(b);
    return {
      width: d.width - a.horizontal - c.horizontal,
      height: d.height - a.vertical - c.vertical,
    };
  },
  getSize: function (a) {
    if (!a) {
      throw Error.argumentNull("element");
    }
    return { width: a.offsetWidth, height: a.offsetHeight };
  },
  setContentSize: function (b, d) {
    if (!b) {
      throw Error.argumentNull("element");
    }
    if (!d) {
      throw Error.argumentNull("size");
    }
    if (
      $telerik.getCurrentStyle(b, "MozBoxSizing") == "border-box" ||
      $telerik.getCurrentStyle(b, "BoxSizing") == "border-box"
    ) {
      var a = $telerik.getBorderBox(b);
      var c = $telerik.getPaddingBox(b);
      d = {
        width: d.width + a.horizontal + c.horizontal,
        height: d.height + a.vertical + c.vertical,
      };
    }
    b.style.width = d.width.toString() + "px";
    b.style.height = d.height.toString() + "px";
  },
  setSize: function (c, e) {
    if (!c) {
      throw Error.argumentNull("element");
    }
    if (!e) {
      throw Error.argumentNull("size");
    }
    var a = $telerik.getBorderBox(c);
    var d = $telerik.getPaddingBox(c);
    var b = {
      width: e.width - a.horizontal - d.horizontal,
      height: e.height - a.vertical - d.vertical,
    };
    $telerik.setContentSize(c, b);
  },
  getBounds: function (a) {
    var b = $telerik.getLocation(a);
    return new Telerik.Web.UI.Bounds(
      b.x,
      b.y,
      a.offsetWidth || 0,
      a.offsetHeight || 0
    );
  },
  setBounds: function (b, a) {
    if (!b) {
      throw Error.argumentNull("element");
    }
    if (!a) {
      throw Error.argumentNull("bounds");
    }
    $telerik.setSize(b, a);
    $telerik.setLocation(b, a);
  },
  getClientBounds: function () {
    var a = Telerik.Web.Browser;
    var c;
    var b;
    if (a.ie || a.edge) {
      c = document.documentElement.clientWidth;
      b = document.documentElement.clientHeight;
      if (c == 0 && b == 0) {
        c = document.body.clientWidth;
        b = document.body.clientHeight;
      }
    } else {
      if (a.safari) {
        c = window.innerWidth;
        b = window.innerHeight;
      } else {
        if (a.opera && a.version < 9.5) {
          c = Math.min(window.innerWidth, document.body.clientWidth);
          b = Math.min(window.innerHeight, document.body.clientHeight);
        } else {
          c = Math.min(window.innerWidth, document.documentElement.clientWidth);
          b = Math.min(
            window.innerHeight,
            document.documentElement.clientHeight
          );
        }
      }
    }
    return new Telerik.Web.UI.Bounds(0, 0, c, b);
  },
  getMarginBox: function (b) {
    if (!b) {
      throw Error.argumentNull("element");
    }
    var a = {
      top: $telerik.getMargin(b, Telerik.Web.BoxSide.Top),
      right: $telerik.getMargin(b, Telerik.Web.BoxSide.Right),
      bottom: $telerik.getMargin(b, Telerik.Web.BoxSide.Bottom),
      left: $telerik.getMargin(b, Telerik.Web.BoxSide.Left),
    };
    a.horizontal = a.left + a.right;
    a.vertical = a.top + a.bottom;
    return a;
  },
  getPaddingBox: function (b) {
    if (!b) {
      throw Error.argumentNull("element");
    }
    var a = {
      top: $telerik.getPadding(b, Telerik.Web.BoxSide.Top),
      right: $telerik.getPadding(b, Telerik.Web.BoxSide.Right),
      bottom: $telerik.getPadding(b, Telerik.Web.BoxSide.Bottom),
      left: $telerik.getPadding(b, Telerik.Web.BoxSide.Left),
    };
    a.horizontal = a.left + a.right;
    a.vertical = a.top + a.bottom;
    return a;
  },
  getBorderBox: function (b) {
    if (!b) {
      throw Error.argumentNull("element");
    }
    var a = {
      top: $telerik.getBorderWidth(b, Telerik.Web.BoxSide.Top),
      right: $telerik.getBorderWidth(b, Telerik.Web.BoxSide.Right),
      bottom: $telerik.getBorderWidth(b, Telerik.Web.BoxSide.Bottom),
      left: $telerik.getBorderWidth(b, Telerik.Web.BoxSide.Left),
    };
    a.horizontal = a.left + a.right;
    a.vertical = a.top + a.bottom;
    return a;
  },
  isBorderVisible: function (b, a) {
    if (!b) {
      throw Error.argumentNull("element");
    }
    if (a < Telerik.Web.BoxSide.Top || a > Telerik.Web.BoxSide.Left) {
      throw Error.argumentOutOfRange(
        String.format(Sys.Res.enumInvalidValue, a, "Telerik.Web.BoxSide")
      );
    }
    var c = $telerik._borderStyleNames[a];
    var d = $telerik.getCurrentStyle(b, c);
    return d != "none";
  },
  getMargin: function (b, a) {
    if (!b) {
      throw Error.argumentNull("element");
    }
    if (a < Telerik.Web.BoxSide.Top || a > Telerik.Web.BoxSide.Left) {
      throw Error.argumentOutOfRange(
        String.format(Sys.Res.enumInvalidValue, a, "Telerik.Web.BoxSide")
      );
    }
    var d = $telerik._marginWidthNames[a];
    var e = $telerik.getCurrentStyle(b, d);
    try {
      return $telerik.parsePadding(e);
    } catch (c) {
      return 0;
    }
  },
  getBorderWidth: function (b, a) {
    if (!b) {
      throw Error.argumentNull("element");
    }
    if (a < Telerik.Web.BoxSide.Top || a > Telerik.Web.BoxSide.Left) {
      throw Error.argumentOutOfRange(
        String.format(Sys.Res.enumInvalidValue, a, "Telerik.Web.BoxSide")
      );
    }
    if (!$telerik.isBorderVisible(b, a)) {
      return 0;
    }
    var c = $telerik._borderWidthNames[a];
    var d = $telerik.getCurrentStyle(b, c);
    return $telerik.parseBorderWidth(d);
  },
  getPadding: function (b, a) {
    if (!b) {
      throw Error.argumentNull("element");
    }
    if (a < Telerik.Web.BoxSide.Top || a > Telerik.Web.BoxSide.Left) {
      throw Error.argumentOutOfRange(
        String.format(Sys.Res.enumInvalidValue, a, "Telerik.Web.BoxSide")
      );
    }
    var c = $telerik._paddingWidthNames[a];
    var d = $telerik.getCurrentStyle(b, c);
    return $telerik.parsePadding(d);
  },
  parseBorderWidth: function (a) {
    if (a) {
      switch (a) {
        case "thin":
        case "medium":
        case "thick":
          return $telerik._borderThicknesses[a];
        case "inherit":
          return 0;
      }
      var b = $telerik.parseUnit(a);
      return b.size;
    }
    return 0;
  },
  parsePadding: function (a) {
    if (a) {
      if (a == "auto" || a == "inherit") {
        return 0;
      }
      var b = $telerik.parseUnit(a);
      return b.size;
    }
    return 0;
  },
  parseUnit: function (g) {
    if (!g) {
      throw Error.argumentNull("value");
    }
    g = g.trim().toLowerCase();
    var c = g.length;
    var d = -1;
    for (var b = 0; b < c; b++) {
      var a = g.substr(b, 1);
      if ((a < "0" || a > "9") && a != "-" && a != "." && a != ",") {
        break;
      }
      d = b;
    }
    if (d == -1) {
      throw Error.create("No digits");
    }
    var f;
    var e;
    if (d < c - 1) {
      f = g.substring(d + 1).trim();
    } else {
      f = "px";
    }
    e = parseFloat(g.substr(0, d + 1));
    if (f == "px") {
      e = Math.floor(e);
    }
    return { size: e, type: f };
  },
  containsPoint: function (a, b, c) {
    return b >= a.x && b <= a.x + a.width && c >= a.y && c <= a.y + a.height;
  },
  isDescendant: function (a, b) {
    try {
      for (var d = b.parentNode; d != null; d = d.parentNode) {
        if (d == a) {
          return true;
        }
      }
    } catch (c) {}
    return false;
  },
  isDescendantOrSelf: function (a, b) {
    if (a === b) {
      return true;
    }
    return $telerik.isDescendant(a, b);
  },
  addCssClasses: function (b, a) {
    for (var c = 0; c < a.length; c++) {
      Sys.UI.DomElement.addCssClass(b, a[c]);
    }
  },
  removeCssClasses: function (b, a) {
    for (var c = 0; c < a.length; c++) {
      Sys.UI.DomElement.removeCssClass(b, a[c]);
    }
  },
  getScrollOffset: function (b, e) {
    var c = 0;
    var f = 0;
    var d = b;
    var a = b && b.ownerDocument ? b.ownerDocument : document;
    while (d != null && d.scrollLeft != null) {
      c += $telerik.getCorrectScrollLeft(d);
      f += d.scrollTop;
      if (!e || (d == a.body && (d.scrollLeft != 0 || d.scrollTop != 0))) {
        break;
      }
      d = d.parentNode;
    }
    return { x: c, y: f };
  },
  getElementByClassName: function (d, c, g) {
    if (d.getElementsByClassName) {
      return d.getElementsByClassName(c)[0];
    }
    var b = null;
    if (g) {
      b = d.getElementsByTagName(g);
    } else {
      b = d.getElementsByTagName("*");
    }
    for (var e = 0, f = b.length; e < f; e++) {
      var a = b[e];
      if (Sys.UI.DomElement.containsCssClass(a, c)) {
        return a;
      }
    }
    return null;
  },
  getElementsByClassName: function (b, a, d) {
    var c;
    b = b || document;
    if (b.getElementsByClassName) {
      c = function (e, n, h) {
        var g = h.getElementsByClassName(e),
          l = n ? new RegExp("\\b" + n + "\\b", "i") : null,
          m = [],
          f;
        for (var j = 0, k = g.length; j < k; j += 1) {
          f = g[j];
          if (!l || l.test(f.nodeName)) {
            m.push(f);
          }
        }
        return m;
      };
    } else {
      if (document.evaluate) {
        c = function (h, r, l) {
          r = r || "*";
          var f = h.split(" "),
            g = "",
            s = "http://www.w3.org/1999/xhtml",
            o = document.documentElement.namespaceURI === s ? s : null,
            q = [],
            k,
            p;
          for (var m = 0, n = f.length; m < n; m += 1) {
            g += "[contains(concat(' ', @class, ' '), ' " + f[m] + " ')]";
          }
          try {
            k = document.evaluate(".//" + r + g, l, o, 0, null);
          } catch (i) {
            k = document.evaluate(".//" + r + g, l, null, 0, null);
          }
          while ((p = k.iterateNext())) {
            q.push(p);
          }
          return q;
        };
      } else {
        c = function (g, v, j) {
          v = v || "*";
          var e = g.split(" "),
            f = [],
            i = v === "*" && j.all ? j.all : j.getElementsByTagName(v),
            h,
            u = [],
            s;
          for (var n = 0, o = e.length; n < o; n += 1) {
            f.push(new RegExp("(^|\\s)" + e[n] + "(\\s|$)"));
          }
          for (var p = 0, q = i.length; p < q; p += 1) {
            h = i[p];
            s = false;
            for (var r = 0, t = f.length; r < t; r += 1) {
              s = f[r].test(h.className);
              if (!s) {
                break;
              }
            }
            if (s) {
              u.push(h);
            }
          }
          return u;
        };
      }
    }
    return c(a, d, b);
  },
  nextElement: function (b) {
    if (!b) {
      return b;
    }
    var a = b.nextSibling;
    while (a && a.nodeType != 1) {
      a = a.nextSibling;
    }
    return a;
  },
  previousElement: function (b) {
    if (!b) {
      return b;
    }
    var a = b.previousSibling;
    while (a && a.nodeType != 1) {
      a = a.previousSibling;
    }
    return a;
  },
  _getWindow: function (b) {
    var a = b.ownerDocument || b.document || b;
    return a.defaultView || a.parentWindow;
  },
  useAttachEvent: function (a) {
    return a.attachEvent && !$telerik.isOpera;
  },
  useDetachEvent: function (a) {
    return a.detachEvent && !$telerik.isOpera;
  },
  addHandler: function (e, g, h, a) {
    if (!e._events) {
      e._events = {};
    }
    var f = e._events[g];
    if (!f) {
      e._events[g] = f = [];
    }
    var b;
    if ($telerik.useAttachEvent(e)) {
      b = function () {
        var d = {};
        try {
          d = $telerik._getWindow(e).event;
        } catch (i) {}
        return h.call(e, new Sys.UI.DomEvent(d));
      };
      e.attachEvent("on" + g, b);
    } else {
      if (e.addEventListener) {
        b = function (d) {
          return h.call(e, new Sys.UI.DomEvent(d));
        };
        e.addEventListener(g, b, false);
      }
    }
    f[f.length] = { handler: h, browserHandler: b, autoRemove: a };
    if (a) {
      var c = e.dispose;
      if (c !== $telerik._disposeHandlers) {
        e.dispose = $telerik._disposeHandlers;
        if (typeof c !== "undefined") {
          e._chainDispose = c;
        }
      }
    }
  },
  addHandlers: function (b, c, e, a) {
    for (var f in c) {
      var d = c[f];
      if (e) {
        d = Function.createDelegate(e, d);
      }
      $telerik.addHandler(b, f, d, a || false);
    }
  },
  clearHandlers: function (a) {
    $telerik._clearHandlers(a, false);
  },
  _clearHandlers: function (c, a) {
    if (c._events) {
      var b = c._events;
      for (var g in b) {
        var e = b[g];
        for (var f = e.length - 1; f >= 0; f--) {
          var d = e[f];
          if (!a || d.autoRemove) {
            $telerik.removeHandler(c, g, d.handler);
          }
        }
      }
      c._events = null;
    }
  },
  _disposeHandlers: function () {
    $telerik._clearHandlers(this, true);
    var a = this._chainDispose,
      b = typeof a;
    if (b !== "undefined") {
      this.dispose = a;
      this._chainDispose = null;
      if (b === "function") {
        this.dispose();
      }
    }
  },
  removeHandler: function (a, b, c) {
    $telerik._removeHandler(a, b, c);
  },
  _removeHandler: function (d, f, g) {
    var a = null;
    var b = d._events[f] || [];
    for (var h = 0, j = b.length; h < j; h++) {
      if (b[h].handler === g) {
        a = b[h].browserHandler;
        break;
      }
    }
    if ($telerik.useDetachEvent(d)) {
      d.detachEvent("on" + f, a);
    } else {
      if (d.removeEventListener) {
        try {
          d.removeEventListener(f, a, false);
        } catch (c) {}
      }
    }
    b.splice(h, 1);
  },
  _emptySrc: function () {
    return "about:blank";
  },
  addExternalHandler: function (a, b, c) {
    if (!a) {
      return;
    }
    if ($telerik.useAttachEvent(a)) {
      a.attachEvent("on" + b, c);
    } else {
      if (a.addEventListener) {
        a.addEventListener(b, c, false);
      }
    }
  },
  removeExternalHandler: function (a, b, c) {
    if (!a) {
      return;
    }
    if ($telerik.useDetachEvent(a)) {
      a.detachEvent("on" + b, c);
    } else {
      if (a.addEventListener) {
        a.removeEventListener(b, c, false);
      }
    }
  },
  addMobileHandler: function (g, b, c, d, f, e) {
    if (!b || !g) {
      return;
    }
    var a = Function.createDelegate(g, $telerik.isTouchDevice ? f || d : d);
    if ($telerik.isTouchDevice) {
      if ($telerik.$) {
        $telerik.$(b).bind($telerik.getMobileEventCounterpart(c), a);
      } else {
        $telerik.addExternalHandler(
          b,
          $telerik.getMobileEventCounterpart(c),
          a
        );
      }
    } else {
      if (e) {
        $telerik.addExternalHandler(b, c, a);
      } else {
        $addHandler(b, c, a);
      }
    }
    return a;
  },
  removeMobileHandler: function (a, b, c, e, d) {
    if (!a) {
      return;
    }
    if ($telerik.isTouchDevice) {
      if ($telerik.$) {
        $telerik.$(a).unbind($telerik.getMobileEventCounterpart(b), e || c);
      } else {
        $telerik.removeExternalHandler(
          a,
          $telerik.getMobileEventCounterpart(b),
          e || c
        );
      }
    } else {
      if (d) {
        $telerik.removeExternalHandler(a, b, c);
      } else {
        $removeHandler(a, b, c);
      }
    }
  },
  getMobileEventCounterpart: function (a) {
    switch (a) {
      case "mousedown":
        return $telerik.isMobileIE10 ? "MSPointerDown" : "touchstart";
      case "mouseup":
        return $telerik.isMobileIE10 ? "MSPointerUp" : "touchend";
      case "mousemove":
        return $telerik.isMobileIE10 ? "MSPointerMove" : "touchmove";
    }
    return a;
  },
  getTouchEventLocation: function (b) {
    var d = arguments[1],
      f = d ? [d + "X"] : "pageX",
      g = d ? [d + "Y"] : "pageY",
      c = { x: b[f], y: b[g] },
      a =
        b.changedTouches ||
        (b.originalEvent
          ? b.originalEvent.changedTouches
          : b.rawEvent
          ? b.rawEvent.changedTouches
          : false);
    if ($telerik.isTouchDevice && a && a.length < 2) {
      c.x = a[0][f];
      c.y = a[0][g];
    }
    if ($telerik.isMobileIE10 && b.originalEvent) {
      c.x = b.originalEvent[f];
      c.y = b.originalEvent[g];
    }
    return c;
  },
  getTouchTarget: function (a) {
    if ($telerik.isTouchDevice) {
      var b =
        "originalEvent" in a
          ? a.originalEvent.changedTouches
          : "rawEvent" in a
          ? a.rawEvent.changedTouches
          : a.changedTouches;
      return b
        ? document.elementFromPoint(b[0].clientX, b[0].clientY)
        : a.target;
    } else {
      return a.target;
    }
  },
  cancelRawEvent: function (a) {
    if (!a) {
      return false;
    }
    $telerik.stopPropagation(a);
    $telerik.preventDefault(a);
    return false;
  },
  preventDefault: function (a) {
    if (a.preventDefault) {
      a.preventDefault();
    }
    a.returnValue = false;
  },
  stopPropagation: function (a) {
    if (a.stopPropagation) {
      a.stopPropagation();
    }
    a.cancelBubble = true;
  },
  getOuterHtml: function (a) {
    if (a.outerHTML) {
      return a.outerHTML;
    } else {
      var b = a.cloneNode(true);
      var c = a.ownerDocument.createElement("div");
      c.appendChild(b);
      return c.innerHTML;
    }
  },
  setVisible: function (a, b) {
    if (!a) {
      return;
    }
    if (b != $telerik.getVisible(a)) {
      if (b) {
        if (a.style.removeAttribute) {
          a.style.removeAttribute("display");
        } else {
          a.style.removeProperty("display");
        }
      } else {
        a.style.display = "none";
      }
      a.style.visibility = b ? "visible" : "hidden";
    }
  },
  getVisible: function (a) {
    if (!a || !a.parentNode) {
      return false;
    }
    return (
      "none" != $telerik.getCurrentStyle(a, "display") &&
      "hidden" != $telerik.getCurrentStyle(a, "visibility")
    );
  },
  getViewPortSize: function () {
    var c = 0;
    var b = 0;
    var a = document.body;
    if (
      (!$telerik.quirksMode && !$telerik.isSafari) ||
      (Telerik.Web.Browser.chrome && Telerik.Web.Browser.version >= 61) ||
      (Telerik.Web.Browser.opera && Telerik.Web.Browser.version >= 48)
    ) {
      a = document.documentElement;
      if (Telerik.Web.Browser.edge) {
        a = document.body;
      }
    }
    if (window.innerWidth) {
      c = Math.max(
        document.documentElement.clientWidth,
        document.body.clientWidth
      );
      b = Math.max(
        document.documentElement.clientHeight,
        document.body.clientHeight
      );
      if (c > window.innerWidth) {
        c = document.documentElement.clientWidth;
      }
      if (b > window.innerHeight) {
        b = document.documentElement.clientHeight;
      }
    } else {
      c = a.clientWidth;
      b = a.clientHeight;
    }
    c += a.scrollLeft;
    b += a.scrollTop;
    if ($telerik.isMobileSafari) {
      c += window.pageXOffset;
      b += window.pageYOffset;
    }
    return { width: c - 6, height: b - 6 };
  },
  elementOverflowsTop: function (b, a) {
    var c = a || $telerik.getLocation(b);
    return c.y < 0;
  },
  elementOverflowsLeft: function (b, a) {
    var c = a || $telerik.getLocation(b);
    return c.x < 0;
  },
  elementOverflowsBottom: function (e, c, b) {
    var d = b || $telerik.getLocation(c);
    var a = d.y + c.offsetHeight;
    return a > e.height;
  },
  elementOverflowsRight: function (e, b, a) {
    var c = a || $telerik.getLocation(b);
    var d = c.x + b.offsetWidth;
    return d > e.width;
  },
  getDocumentRelativeCursorPosition: function (c) {
    var b = document.documentElement,
      a = document.body,
      f =
        $telerik.quirksMode || a.scrollLeft > b.scrollLeft
          ? $telerik.getCorrectScrollLeft(a)
          : $telerik.getCorrectScrollLeft(b),
      d = c.clientX + f,
      g = c.clientY + $telerik.getDocumentElementScrollTop();
    if ($telerik.isIE6 || $telerik.isIE7) {
      d -= 2;
      g -= 2;
    }
    return { left: d, top: g };
  },
  getDocumentElementScrollTop: function () {
    var b = document.documentElement,
      a = document.body;
    return $telerik.quirksMode || a.scrollTop > b.scrollTop
      ? a.scrollTop
      : b.scrollTop;
  },
  getDocumentElementScrollLeft: function () {
    var b = document.documentElement,
      a = document.body;
    return $telerik.quirksMode || a.scrollLeft > b.scrollLeft
      ? a.scrollLeft
      : b.scrollLeft;
  },
  evalScriptCode: function (b) {
    if ($telerik.isSafari) {
      b = b.replace(/^\s*<!--((.|\n)*)-->\s*$/im, "$1");
    }
    var a = document.createElement("script");
    a.setAttribute("type", "text/javascript");
    a.text = b;
    var c = document.getElementsByTagName("head")[0];
    c.appendChild(a);
    a.parentNode.removeChild(a);
  },
  isScriptRegistered: function (k, a) {
    if (!k) {
      return 0;
    }
    if (!a) {
      a = document;
    }
    if ($telerik._uniqueScripts == null) {
      $telerik._uniqueScripts = {};
    }
    var h = document.getElementsByTagName("script");
    var f = 0;
    var c = k.indexOf("?d=");
    var d = k.indexOf("&");
    var j = c > 0 && d > c ? k.substring(c + 3, d) : k;
    if ($telerik._uniqueScripts[j] != null) {
      return 2;
    }
    for (var b = 0, e = h.length; b < e; b++) {
      var g = h[b];
      if (g.src) {
        if (g.getAttribute("src", 2).indexOf(j) != -1) {
          $telerik._uniqueScripts[j] = true;
          if (!$telerik.isDescendant(a, g)) {
            f++;
          }
        }
      }
    }
    return f;
  },
  evalScripts: function (b, a) {
    $telerik.registerSkins(b);
    var g = b.getElementsByTagName("script");
    var j = 0,
      h = 0;
    var e = function (n, o) {
      if (n - h > 0 && ($telerik.isIE || $telerik.isSafari)) {
        window.setTimeout(function () {
          e(n, o);
        }, 5);
      } else {
        var i = document.createElement("script");
        i.setAttribute("type", "text/javascript");
        document.getElementsByTagName("head")[0].appendChild(i);
        i.loadFinished = false;
        i.onload = function () {
          if (!this.loadFinished) {
            this.loadFinished = true;
            h++;
          }
        };
        i.onreadystatechange = function () {
          if ("loaded" === this.readyState && !this.loadFinished) {
            this.loadFinished = true;
            h++;
          }
        };
        i.setAttribute("src", o);
      }
    };
    var k = [];
    for (var c = 0, d = g.length; c < d; c++) {
      var f = g[c];
      if (f.src) {
        var m = f.getAttribute("src", 2);
        if (!$telerik.isScriptRegistered(m, b)) {
          e(j++, m);
        }
      } else {
        Array.add(k, f.innerHTML);
      }
    }
    var l = function () {
      if (j - h > 0) {
        window.setTimeout(l, 20);
      } else {
        for (var i = 0; i < k.length; i++) {
          $telerik.evalScriptCode(k[i]);
        }
        if (a) {
          a();
        }
      }
    };
    l();
  },
  registerSkins: function (c) {
    if (!c) {
      c = document.body;
    }
    var h = c.getElementsByTagName("link");
    if (h && h.length > 0) {
      var a = document.getElementsByTagName("head")[0];
      if (a) {
        for (var d = 0, g = h.length; d < g; d++) {
          var k = h[d];
          if (k.className == "Telerik_stylesheet") {
            var l = a.getElementsByTagName("link");
            if (k.href.indexOf("ie7CacheFix") >= 0) {
              try {
                k.href = k.href.replace("&ie7CacheFix", "");
                k.href = k.href.replace("?ie7CacheFix", "");
              } catch (b) {}
            }
            if (l && l.length > 0) {
              var f = l.length - 1;
              while (f >= 0 && l[f--].href != k.href) {
                continue;
              }
              if (f >= 0) {
                continue;
              }
            }
            if ($telerik.isIE && !$telerik.isIE9Mode) {
              k.parentNode.removeChild(k);
              k = k.cloneNode(true);
            }
            a.appendChild(k);
            if (g > h.length) {
              g = h.length;
              d--;
            }
          }
        }
      }
    }
  },
  getFirstChildByTagName: function (b, d, c) {
    if (!b || !b.childNodes) {
      return null;
    }
    var a = b.childNodes[c] || b.firstChild;
    while (a) {
      if (a.nodeType == 1 && a.tagName.toLowerCase() == d) {
        return a;
      }
      a = a.nextSibling;
    }
    return null;
  },
  getChildByClassName: function (c, a, d) {
    var b = c.childNodes[d] || c.firstChild;
    while (b) {
      if (b.nodeType == 1 && b.className.indexOf(a) > -1) {
        return b;
      }
      b = b.nextSibling;
    }
    return null;
  },
  getChildrenByTagName: function (d, g) {
    var c = [];
    var b = d.childNodes;
    if ($telerik.isIE) {
      b = d.children;
    }
    for (var e = 0, f = b.length; e < f; e++) {
      var a = b[e];
      if (a.nodeType == 1 && a.tagName.toLowerCase() == g) {
        Array.add(c, a);
      }
    }
    return c;
  },
  getChildrenByClassName: function (e, d) {
    var c = [];
    var b = e.childNodes;
    if ($telerik.isIE) {
      b = e.children;
    }
    for (var f = 0, g = b.length; f < g; f++) {
      var a = b[f];
      if (a.nodeType == 1 && a.className.indexOf(d) > -1) {
        Array.add(c, a);
      }
    }
    return c;
  },
  mergeElementAttributes: function (d, e, b) {
    if (!d || !e) {
      return;
    }
    if (d.mergeAttributes) {
      e.mergeAttributes(d, b);
    } else {
      for (var a = 0; a < d.attributes.length; a++) {
        var c = d.attributes[a].nodeValue;
        e.setAttribute(d.attributes[a].nodeName, c);
      }
      if ("" == e.getAttribute("style")) {
        e.removeAttribute("style");
      }
    }
  },
  isMouseOverElement: function (c, b) {
    var d = $telerik.getBounds(c);
    var a = $telerik.getDocumentRelativeCursorPosition(b);
    return $telerik.containsPoint(d, a.left, a.top);
  },
  isMouseOverElementEx: function (c, b) {
    var g = null;
    try {
      g = $telerik.getOuterBounds(c);
    } catch (d) {
      return false;
    }
    if (b && b.target) {
      var h = b.target.tagName;
      if (h == "SELECT" || h == "OPTION") {
        return true;
      }
      if (b.clientX < 0 || b.clientY < 0) {
        return true;
      }
    }
    var f = $telerik.getDocumentRelativeCursorPosition(b);
    var a = $telerik.getBorderBox(c);
    g.x += a.left;
    g.y += a.top;
    g.width -= a.horizontal;
    g.height -= a.vertical;
    return $telerik.containsPoint(g, f.left, f.top);
  },
  getPreviousHtmlNode: function (a) {
    if (!a || !a.previousSibling) {
      return null;
    }
    while (a.previousSibling) {
      if (a.previousSibling.nodeType == 1) {
        return a.previousSibling;
      }
      a = a.previousSibling;
    }
  },
  getNextHtmlNode: function (a) {
    if (!a || !a.nextSibling) {
      return null;
    }
    while (a.nextSibling) {
      if (a.nextSibling.nodeType == 1) {
        return a.nextSibling;
      }
      a = a.nextSibling;
    }
  },
  disposeElement: function (a) {
    if (typeof Sys.WebForms == "undefined") {
      return;
    }
    var b = Sys.WebForms.PageRequestManager.getInstance();
    if (b && b._destroyTree) {
      b._destroyTree(a);
    } else {
      if (Sys.Application.disposeElement) {
        Sys.Application.disposeElement(a, true);
      }
    }
  },
  htmlEncode: function (d) {
    var a = /&/g,
      c = /</g,
      b = />/g;
    return ("" + d).replace(a, "&amp;").replace(c, "&lt;").replace(b, "&gt;");
  },
  htmlDecode: function (d) {
    var a = /&amp;/g,
      c = /&lt;/g,
      b = /&gt;/g;
    return ("" + d).replace(b, ">").replace(c, "<").replace(a, "&");
  },
};
if (window.$telerik == undefined) {
  window.$telerik = commonScripts;
} else {
  if ($telerik.$ != undefined && $telerik.$.extend) {
    $telerik.$.extend(window.$telerik, commonScripts);
  }
}
window.TelerikCommonScripts = Telerik.Web.CommonScripts = window.$telerik;
(function (i, g) {
  function b(k, j) {
    return k.indexOf(j);
  }
  function c(j, k) {
    return j.match(k);
  }
  var e = i.navigator,
    h = e.userAgent,
    f,
    d,
    a;
  $telerik.isTrident = b(h, " Trident/") > -1;
  $telerik.isSpartan = b(h, " Edge/") > -1;
  $telerik.isIE = b(h, " MSIE ") > -1 || $telerik.isTrident;
  $telerik.isFirefox = b(h, " Firefox/") > -1 && !$telerik.isIE;
  if ($telerik.isIE) {
    f = /MSIE ([\d\.]+)/;
    d = c(h, f);
    if (d) {
      a = d[1];
    } else {
      f = /rv:([\d\.]+)/;
      d = c(h, f);
      if (d) {
        a = d[1];
      }
    }
    $telerik.isIE6 = a < 7;
    $telerik.isIE7 =
      a == 7 || (document.documentMode && document.documentMode == 7);
    $telerik.isIE8 = document.documentMode && document.documentMode == 8;
    $telerik.isIE9 = document.documentMode && document.documentMode == 9;
    $telerik.isIE9Mode = document.documentMode && document.documentMode >= 9;
    $telerik.isIE10 = document.documentMode && document.documentMode == 10;
    $telerik.isIE10Mode = document.documentMode && document.documentMode >= 10;
  }
})(window);
if (typeof Sys.Browser.WebKit == "undefined") {
  Sys.Browser.WebKit = {};
}
if (typeof Sys.Browser.Chrome == "undefined") {
  Sys.Browser.Chrome = {};
}
if (
  navigator.userAgent.indexOf("Chrome") > -1 &&
  !($telerik.isTrident || $telerik.isSpartan)
) {
  Sys.Browser.version = parseFloat(
    navigator.userAgent.match(/WebKit\/(\d+(\.\d+)?)/i)[1]
  );
  Sys.Browser.agent = Sys.Browser.Chrome;
  Sys.Browser.name = "Chrome";
} else {
  if (
    navigator.userAgent.indexOf("WebKit/") > -1 &&
    !($telerik.isTrident || $telerik.isSpartan)
  ) {
    Sys.Browser.version = parseFloat(
      navigator.userAgent.match(/WebKit\/(\d+(\.\d+)?)/i)[1]
    );
    if (Sys.Browser.version < 500) {
      Sys.Browser.agent = Sys.Browser.Safari;
      Sys.Browser.name = "Safari";
    } else {
      Sys.Browser.agent = Sys.Browser.WebKit;
      Sys.Browser.name = "WebKit";
    }
  }
}
$telerik.isMobileSafari =
  navigator.userAgent.search(/like\sMac\sOS\sX.*Mobile\/\S+/) != -1;
$telerik.isChrome = Sys.Browser.agent == Sys.Browser.Chrome;
$telerik.isSafari6 =
  Sys.Browser.agent == Sys.Browser.WebKit && Sys.Browser.version >= 536;
$telerik.isSafari5 =
  Sys.Browser.agent == Sys.Browser.WebKit &&
  Sys.Browser.version >= 534 &&
  Sys.Browser.version < 536;
$telerik.isSafari4 =
  Sys.Browser.agent == Sys.Browser.WebKit &&
  Sys.Browser.version >= 526 &&
  Sys.Browser.version < 534;
$telerik.isSafari3 =
  Sys.Browser.agent == Sys.Browser.WebKit &&
  Sys.Browser.version < 526 &&
  Sys.Browser.version > 500;
$telerik.isSafari2 = false;
$telerik.isSafari =
  $telerik.isSafari2 ||
  $telerik.isSafari3 ||
  $telerik.isSafari4 ||
  $telerik.isSafari5 ||
  $telerik.isSafari6 ||
  $telerik.isChrome;
$telerik.isAndroid =
  navigator.userAgent.search(/Android/i) != -1 &&
  !($telerik.isTrident || $telerik.isSpartan);
$telerik.isBlackBerry4 =
  navigator.userAgent.search(/BlackBerry\d+\/4[\d\.]+/i) != -1;
$telerik.isBlackBerry5 =
  navigator.userAgent.search(/BlackBerry\d+\/5[\d\.]+/i) != -1;
$telerik.isBlackBerry6 =
  navigator.userAgent.search(/BlackBerry.*Safari\/\S+/i) != -1;
$telerik.isBlackBerry =
  $telerik.isBlackBerry4 || $telerik.isBlackBerry5 || $telerik.isBlackBerry6;
$telerik.isOpera = Sys.Browser.agent == Sys.Browser.Opera;
$telerik.isFirefox2 = $telerik.isFirefox && Sys.Browser.version < 3;
$telerik.isFirefox3 = $telerik.isFirefox && Sys.Browser.version >= 3;
$telerik.quirksMode = $telerik.isIE && document.compatMode != "CSS1Compat";
$telerik.standardsMode = !$telerik.quirksMode;
$telerik.OperaEngine = 0;
$telerik.OperaVersionString = window.opera ? window.opera.version() : 0;
$telerik.OperaVersion = $telerik.OperaVersionString
  ? parseInt($telerik.OperaVersionString * 10, 10) / 10
  : 0;
if ($telerik.isOpera) {
  $telerik._prestoVersion = navigator.userAgent.match(/Presto\/(\d+\.(\d+)?)/);
  if ($telerik._prestoVersion) {
    $telerik.OperaEngine =
      parseInt($telerik._prestoVersion[1], 10) +
      parseInt($telerik._prestoVersion[2], 10) / 100;
  }
}
$telerik.isOpera9 = $telerik.isOpera && $telerik.OperaVerNumber < 10;
$telerik.isOpera10 =
  $telerik.isOpera &&
  $telerik.OperaVersion >= 10 &&
  $telerik.OperaVersion < 10.5;
$telerik.isOpera105 = $telerik.isOpera && $telerik.OperaVersion >= 10.5;
$telerik.isOpera11 = $telerik.isOpera && $telerik.OperaVersion > 11;
$telerik.isMobileOpera =
  $telerik.isOpera &&
  navigator.userAgent.search(/opera (?:mobi|tablet)/i) != -1;
$telerik.isMobileIE10 =
  $telerik.isIE10Mode &&
  navigator.userAgent.search(/\bARM\b;|\bTouch\b/i) != -1;
$telerik.isTouchDevice =
  $telerik.isMobileSafari ||
  $telerik.isAndroid ||
  $telerik.isBlackBerry6 ||
  $telerik.isMobileOpera;
if ($telerik.isIE9Mode) {
  document.documentElement.className += " _Telerik_IE9";
}
if ($telerik.isOpera11) {
  document.documentElement.className += " _Telerik_Opera11";
} else {
  if ($telerik.isOpera105) {
    document.documentElement.className += " _Telerik_Opera105";
  }
}
$telerik.cssVendorPrefix = (function () {
  var c = /^(Moz|Webkit|Khtml|O|ms|Icab)(?=[A-Z])/,
    d = "",
    a = document.createElement("div");
  for (var b in a.style) {
    if (c.test(b)) {
      d = b.match(c)[0];
    }
  }
  if (!d && "WebkitOpacity" in a.style) {
    d = "Webkit";
  }
  if (!d && "KhtmlOpacity" in a.style) {
    d = "Khtml";
  }
  a = null;
  return d;
})();
(function (k, i) {
  var b, a;
  var c = /-([\da-z])/gi,
    d = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/,
    e = new RegExp("^(" + d.source + ")(?!px)[a-z%]+$", "i"),
    g = /^(top|right|bottom|left)$/;
  function h(l) {
    return l.replace(c, f);
  }
  function f(m, l) {
    return l.toUpperCase();
  }
  function j(o, n) {
    if (n in o) {
      return n;
    }
    var l = n.charAt(0).toUpperCase() + n.slice(1),
      m = n;
    n = $telerik.cssVendorPrefix + l;
    if (n in o) {
      return n;
    }
    return m;
  }
  if (k.getComputedStyle) {
    b = function (l) {
      return l.ownerDocument.defaultView.getComputedStyle(l, null);
    };
    a = function (m, n) {
      var l = b(m);
      return l ? l.getPropertyValue(n) || l[n] : i;
    };
  } else {
    if (document.documentElement.currentStyle) {
      b = function (l) {
        return l.currentStyle;
      };
      a = function (m, p) {
        var l = b(m),
          n = m.style,
          s,
          r,
          o,
          q;
        q = l ? l[p] : i;
        if (q === null && n && n[p]) {
          q = n[p];
        }
        if (e.test(q) && !g.test(p)) {
          o = n.left;
          s = m.runtimeStyle;
          r = s && s.left;
          if (r) {
            s.left = m.currentStyle.left;
          }
          n.left = p === "fontSize" ? "1em" : q;
          q = n.pixelLeft + "px";
          n.left = o;
          if (r) {
            s.left = r;
          }
        }
        return q;
      };
    }
  }
  $telerik.getComputedStyle = function (m, o, l) {
    var n = h(o),
      p = null;
    if (m) {
      o = j(m.style, n);
      p = a(m, o);
      if (!p && p !== 0) {
        p = typeof l != "undefined" ? l : null;
      }
    }
    return p;
  };
  $telerik.getCurrentStyle = function (m, n, l) {
    return $telerik.getComputedStyle(m, n, l);
  };
})(window);
if (document.documentElement.getBoundingClientRect) {
  $telerik.originalGetLocation = function (g) {
    var d = Function._validateParams(arguments, [
      { name: "element", domElement: true },
    ]);
    if (d) {
      throw d;
    }
    if (
      g.self ||
      g.nodeType === 9 ||
      g === document.documentElement ||
      g.parentNode === g.ownerDocument.documentElement
    ) {
      return new Telerik.Web.UI.Point(0, 0);
    }
    var b = g.getBoundingClientRect();
    if (!b) {
      return new Telerik.Web.UI.Point(0, 0);
    }
    var c = g.ownerDocument.documentElement,
      k = Math.round(b.left) + c.scrollLeft,
      l = Math.round(b.top) + c.scrollTop;
    if (Sys.Browser.agent === Sys.Browser.InternetExplorer) {
      try {
        var i = g.ownerDocument.parentWindow.frameElement || null;
        if (i) {
          var j = i.frameBorder === "0" || i.frameBorder === "no" ? 2 : 0;
          k += j;
          l += j;
        }
      } catch (h) {}
      if (Sys.Browser.version === 7 && !document.documentMode) {
        var a = document.body,
          m = a.getBoundingClientRect(),
          n = (m.right - m.left) / a.clientWidth;
        n = Math.round(n * 100);
        n = (n - (n % 5)) / 100;
        if (!isNaN(n) && n !== 1) {
          k = Math.round(k / n);
          l = Math.round(l / n);
        }
      }
      if ((document.documentMode || 0) < 8) {
        k -= c.clientLeft;
        l -= c.clientTop;
      }
    }
    return new Telerik.Web.UI.Point(k, l);
  };
} else {
  if ($telerik.isSafari) {
    $telerik.originalGetLocation = function (c) {
      var b = Function._validateParams(arguments, [
        { name: "element", domElement: true },
      ]);
      if (b) {
        throw b;
      }
      if ((c.window && c.window === c) || c.nodeType === 9) {
        return new Telerik.Web.UI.Point(0, 0);
      }
      var f = 0,
        g = 0,
        h,
        j = null,
        k = null,
        a,
        l;
      for (h = c; h; j = h, k = a, h = h.offsetParent) {
        a = Sys.UI.DomElement._getCurrentStyle(h);
        l = h.tagName ? h.tagName.toUpperCase() : null;
        if (
          (h.offsetLeft || h.offsetTop) &&
          (l !== "BODY" || !k || k.position !== "absolute")
        ) {
          f += h.offsetLeft;
          g += h.offsetTop;
        }
        if (j && Sys.Browser.version >= 3) {
          f += parseInt(a.borderLeftWidth, 10);
          g += parseInt(a.borderTopWidth, 10);
        }
      }
      a = Sys.UI.DomElement._getCurrentStyle(c);
      var d = a ? a.position : null;
      if (!d || d !== "absolute") {
        for (h = c.parentNode; h; h = h.parentNode) {
          l = h.tagName ? h.tagName.toUpperCase() : null;
          if (l !== "BODY" && l !== "HTML" && (h.scrollLeft || h.scrollTop)) {
            f -= h.scrollLeft || 0;
            g -= h.scrollTop || 0;
          }
          a = Sys.UI.DomElement._getCurrentStyle(h);
          var i = a ? a.position : null;
          if (i && i === "absolute") {
            break;
          }
        }
      }
      return new Telerik.Web.UI.Point(f, g);
    };
  } else {
    $telerik.originalGetLocation = function (c) {
      var b = Function._validateParams(arguments, [
        { name: "element", domElement: true },
      ]);
      if (b) {
        throw b;
      }
      if ((c.window && c.window === c) || c.nodeType === 9) {
        return new Telerik.Web.UI.Point(0, 0);
      }
      var f = 0,
        g = 0,
        h,
        i = null,
        j = null,
        a = null,
        k;
      for (h = c; h; i = h, j = a, h = h.offsetParent) {
        k = h.tagName ? h.tagName.toUpperCase() : null;
        a = Sys.UI.DomElement._getCurrentStyle(h);
        if (
          (h.offsetLeft || h.offsetTop) &&
          !(k === "BODY" && (!j || j.position !== "absolute"))
        ) {
          f += h.offsetLeft;
          g += h.offsetTop;
        }
        if (i !== null && a) {
          if (k !== "TABLE" && k !== "TD" && k !== "HTML") {
            f += parseInt(a.borderLeftWidth, 10) || 0;
            g += parseInt(a.borderTopWidth, 10) || 0;
          }
          if (
            k === "TABLE" &&
            (a.position === "relative" || a.position === "absolute")
          ) {
            f += parseInt(a.marginLeft, 10) || 0;
            g += parseInt(a.marginTop, 10) || 0;
          }
        }
      }
      a = Sys.UI.DomElement._getCurrentStyle(c);
      var d = a ? a.position : null;
      if (!d || d !== "absolute") {
        for (h = c.parentNode; h; h = h.parentNode) {
          k = h.tagName ? h.tagName.toUpperCase() : null;
          if (k !== "BODY" && k !== "HTML" && (h.scrollLeft || h.scrollTop)) {
            f -= h.scrollLeft || 0;
            g -= h.scrollTop || 0;
            a = Sys.UI.DomElement._getCurrentStyle(h);
            if (a) {
              f += parseInt(a.borderLeftWidth, 10) || 0;
              g += parseInt(a.borderTopWidth, 10) || 0;
            }
          }
        }
      }
      return new Telerik.Web.UI.Point(f, g);
    };
  }
}
Sys.Application.add_init(function () {
  try {
    $telerik._borderThickness();
  } catch (a) {}
});
Telerik.Web.UI.Orientation = function () {
  throw Error.invalidOperation();
};
Telerik.Web.UI.Orientation.prototype = { Horizontal: 0, Vertical: 1 };
Telerik.Web.UI.Orientation.registerEnum("Telerik.Web.UI.Orientation", false);
Telerik.Web.UI.RenderMode = function () {
  throw Error.invalidOperation();
};
Telerik.Web.UI.RenderMode.prototype = {
  Auto: 0,
  Classic: 1,
  Lite: 2,
  Native: 3,
  Mobile: 4,
};
Telerik.Web.UI.RenderMode.registerEnum("Telerik.Web.UI.RenderMode", false);
Telerik.Web.UI.DayOfWeek = function () {
  throw Error.invalidOperation();
};
Telerik.Web.UI.DayOfWeek.prototype = {
  Sunday: 0,
  Monday: 1,
  Tuesday: 2,
  Wednesday: 3,
  Thursday: 4,
  Friday: 5,
  Saturday: 6,
};
Telerik.Web.UI.DayOfWeek.registerEnum("Telerik.Web.UI.DayOfWeek", false);
Telerik.Web.UI.RadWebControl = function (a) {
  Telerik.Web.UI.RadWebControl.initializeBase(this, [a]);
  this._clientStateFieldID = null;
  this._renderMode = Telerik.Web.UI.RenderMode.Classic;
  this._shouldUpdateClientState = true;
  this._invisibleParents = [];
  this._enableRippleEffect = false;
};
Telerik.Web.UI.RadWebControl.prototype = {
  initialize: function () {
    Telerik.Web.UI.RadWebControl.callBaseMethod(this, "initialize");
    $telerik.registerControl(this);
    this._registerToMaterialRippleManager();
    if (!this.get_clientStateFieldID()) {
      return;
    }
    var a = $get(this.get_clientStateFieldID());
    if (!a) {
      return;
    }
    a.setAttribute("autocomplete", "off");
  },
  dispose: function () {
    $telerik.unregisterControl(this);
    this._disposeMaterialRipples();
    var c = this.get_element();
    this._clearParentShowHandlers();
    Telerik.Web.UI.RadWebControl.callBaseMethod(this, "dispose");
    if (c) {
      c.control = null;
      var a = true;
      if (c._events) {
        for (var b in c._events) {
          if (c._events[b].length > 0) {
            a = false;
            break;
          }
        }
        if (a) {
          c._events = null;
        }
      }
    }
  },
  raiseEvent: function (b, a) {
    var c = this.get_events().getHandler(b);
    if (c) {
      if (!a) {
        a = Sys.EventArgs.Empty;
      }
      c(this, a);
    }
  },
  updateClientState: function () {
    if (this._shouldUpdateClientState) {
      this.set_clientState(this.saveClientState());
    }
  },
  saveClientState: function () {
    return null;
  },
  get_clientStateFieldID: function () {
    return this._clientStateFieldID;
  },
  set_clientStateFieldID: function (a) {
    if (this._clientStateFieldID != a) {
      this._clientStateFieldID = a;
      this.raisePropertyChanged("ClientStateFieldID");
    }
  },
  get_renderMode: function () {
    return this._renderMode;
  },
  set_renderMode: function (a) {
    if (this._renderMode != a) {
      this._renderMode = a;
      this.raisePropertyChanged("RenderMode");
    }
  },
  get_clientState: function () {
    if (this._clientStateFieldID) {
      var a = document.getElementById(this._clientStateFieldID);
      if (a) {
        return a.value;
      }
    }
    return null;
  },
  set_clientState: function (b) {
    if (this._clientStateFieldID) {
      var a = document.getElementById(this._clientStateFieldID);
      if (a) {
        a.value = b;
      }
    }
  },
  get_enabled: function () {
    return this._enabled;
  },
  set_enabled: function (a) {
    this._enabled = a;
  },
  repaint: function () {},
  canRepaint: function () {
    return this.get_element() && this.get_element().offsetWidth > 0;
  },
  add_parentShown: function (a) {
    var b = $telerik.getInvisibleParent(a);
    if (!b) {
      return;
    }
    if (!Array.contains(this._invisibleParents, b)) {
      Array.add(this._invisibleParents, b);
      this._handleHiddenParent(true, b);
    }
  },
  remove_parentShown: function (a) {
    Array.remove(this._invisibleParents, a);
    this._handleHiddenParent(false, a);
  },
  _registerToMaterialRippleManager: function () {
    if (this._enableRippleEffect && Telerik.Web.UI.MaterialRippleManager) {
      var a = Telerik.Web.UI.MaterialRippleManager.getInstance();
      if (a) {
        this._materialRippleManager = a;
        a.get_controls().push(this);
      }
    }
  },
  _disposeMaterialRipples: function () {
    if (
      this._enableRippleEffect &&
      Telerik.Web.UI.MaterialRippleManager &&
      Telerik.Web.UI.MaterialRippleManager.getInstance()
    ) {
      Telerik.Web.UI.MaterialRippleManager.getInstance().disposeControl(this);
    }
  },
  _handleHiddenParent: function (e, d) {
    if (!d) {
      return;
    }
    if (!this._parentShowDelegate) {
      this._parentShowDelegate = Function.createDelegate(
        this,
        this._parentShowHandler
      );
    }
    var a = this._parentShowDelegate;
    if (typeof MutationObserver !== "undefined") {
      if (e) {
        if (!this.parentShownObserver) {
          this.parentShownObserver = new Telerik.Web.UI.NodeMutationObserver(a);
        }
        this.parentShownObserver.observe(d, {
          attributes: true,
          attributeOldValue: true,
          attributeFilter: ["style", "class"],
          subtree: false,
        });
      } else {
        if (this.parentShownObserver) {
          this.parentShownObserver.disconnect(d);
          if (this.parentShownObserver.isEmpty()) {
            this.parentShownObserver.dispose();
            this.parentShownObserver = null;
          }
        }
      }
      return;
    }
    var b = "DOMAttrModified";
    if ($telerik.isIE) {
      b = "propertychange";
    }
    var c = e ? $telerik.addExternalHandler : $telerik.removeExternalHandler;
    c(d, b, a);
  },
  _parentShowHandler: function (c) {
    if (c.length !== null && !isNaN(c.length)) {
      var a = this;
      Array.forEach(c, function (g) {
        if (g.attributeName == "style" || g.attributeName == "class") {
          var e = g.target;
          if ("none" != $telerik.getCurrentStyle(e, "display")) {
            a._runWhenParentShows(g);
          }
        }
      });
    } else {
      if ($telerik.isIE) {
        if (c.rawEvent) {
          c = c.rawEvent;
        }
        if (!c || !c.srcElement || !c.propertyName) {
          return;
        }
        var f = c.srcElement;
        if (
          c.propertyName == "style.display" ||
          c.propertyName == "className"
        ) {
          var b = $telerik.getCurrentStyle(f, "display");
          if (b != "none") {
            c.target = f;
            this._runWhenParentShows(c);
          }
        }
      } else {
        if (c.attrName == "style" || c.attrName == "class") {
          var d = c.target;
          if (
            c.currentTarget == c.target &&
            "none" != $telerik.getCurrentStyle(d, "display")
          ) {
            window.setTimeout(
              Function.createDelegate(this, function () {
                this._runWhenParentShows(c);
              }),
              0
            );
          }
        }
      }
    }
  },
  _runWhenParentShows: function (a) {
    var b = a.target;
    this.remove_parentShown(b);
    this.repaint();
  },
  _clearParentShowHandlers: function () {
    var a = this._invisibleParents;
    for (var b = 0; b < a.length; b++) {
      this.remove_parentShown(a[b]);
    }
    this._invisibleParents = [];
    this._parentShowDelegate = null;
  },
  _getChildElement: function (a) {
    return $get(this.get_id() + "_" + a);
  },
  _findChildControl: function (a) {
    return $find(this.get_id() + "_" + a);
  },
};
Telerik.Web.UI.RadWebControl.registerClass(
  "Telerik.Web.UI.RadWebControl",
  Sys.UI.Control
);
Telerik.Web.Timer = function () {
  Telerik.Web.Timer.initializeBase(this);
  this._interval = 1000;
  this._enabled = false;
  this._timer = null;
  this._timerCallbackDelegate = Function.createDelegate(
    this,
    this._timerCallback
  );
};
Telerik.Web.Timer.prototype = {
  get_interval: function () {
    return this._interval;
  },
  set_interval: function (a) {
    if (this._interval !== a) {
      this._interval = a;
      this.raisePropertyChanged("interval");
      if (!this.get_isUpdating() && this._timer !== null) {
        this._stopTimer();
        this._startTimer();
      }
    }
  },
  get_enabled: function () {
    return this._enabled;
  },
  set_enabled: function (a) {
    if (a !== this.get_enabled()) {
      this._enabled = a;
      this.raisePropertyChanged("enabled");
      if (!this.get_isUpdating()) {
        if (a) {
          this._startTimer();
        } else {
          this._stopTimer();
        }
      }
    }
  },
  add_tick: function (a) {
    this.get_events().addHandler("tick", a);
  },
  remove_tick: function (a) {
    this.get_events().removeHandler("tick", a);
  },
  dispose: function () {
    this.set_enabled(false);
    this._stopTimer();
    Telerik.Web.Timer.callBaseMethod(this, "dispose");
  },
  updated: function () {
    Telerik.Web.Timer.callBaseMethod(this, "updated");
    if (this._enabled) {
      this._stopTimer();
      this._startTimer();
    }
  },
  _timerCallback: function () {
    var a = this.get_events().getHandler("tick");
    if (a) {
      a(this, Sys.EventArgs.Empty);
    }
  },
  _startTimer: function () {
    this._timer = window.setInterval(
      this._timerCallbackDelegate,
      this._interval
    );
  },
  _stopTimer: function () {
    window.clearInterval(this._timer);
    this._timer = null;
  },
};
Telerik.Web.Timer.registerClass("Telerik.Web.Timer", Sys.Component);
Telerik.Web.BoxSide = function () {};
Telerik.Web.BoxSide.prototype = { Top: 0, Right: 1, Bottom: 2, Left: 3 };
Telerik.Web.BoxSide.registerEnum("Telerik.Web.BoxSide", false);
Telerik.Web.UI.WebServiceLoaderEventArgs = function (a) {
  Telerik.Web.UI.WebServiceLoaderEventArgs.initializeBase(this);
  this._context = a;
};
Telerik.Web.UI.WebServiceLoaderEventArgs.prototype = {
  get_context: function () {
    return this._context;
  },
};
Telerik.Web.UI.WebServiceLoaderEventArgs.registerClass(
  "Telerik.Web.UI.WebServiceLoaderEventArgs",
  Sys.EventArgs
);
Telerik.Web.UI.WebServiceLoaderSuccessEventArgs = function (b, a) {
  Telerik.Web.UI.WebServiceLoaderSuccessEventArgs.initializeBase(this, [a]);
  this._data = b;
};
Telerik.Web.UI.WebServiceLoaderSuccessEventArgs.prototype = {
  get_data: function () {
    return this._data;
  },
};
Telerik.Web.UI.WebServiceLoaderSuccessEventArgs.registerClass(
  "Telerik.Web.UI.WebServiceLoaderSuccessEventArgs",
  Telerik.Web.UI.WebServiceLoaderEventArgs
);
Telerik.Web.UI.WebServiceLoaderErrorEventArgs = function (b, a) {
  Telerik.Web.UI.WebServiceLoaderErrorEventArgs.initializeBase(this, [a]);
  this._message = b;
};
Telerik.Web.UI.WebServiceLoaderErrorEventArgs.prototype = {
  get_message: function () {
    return this._message;
  },
};
Telerik.Web.UI.WebServiceLoaderErrorEventArgs.registerClass(
  "Telerik.Web.UI.WebServiceLoaderErrorEventArgs",
  Telerik.Web.UI.WebServiceLoaderEventArgs
);
Telerik.Web.UI.WebServiceLoader = function (a) {
  this._webServiceSettings = a;
  this._events = null;
  this._onWebServiceSuccessDelegate = Function.createDelegate(
    this,
    this._onWebServiceSuccess
  );
  this._onWebServiceErrorDelegate = Function.createDelegate(
    this,
    this._onWebServiceError
  );
  this._currentRequest = null;
};
Telerik.Web.UI.WebServiceLoader.prototype = {
  get_webServiceSettings: function () {
    return this._webServiceSettings;
  },
  get_events: function () {
    if (!this._events) {
      this._events = new Sys.EventHandlerList();
    }
    return this._events;
  },
  loadData: function (b, a) {
    var c = this.get_webServiceSettings();
    this.invokeMethod(c.get_method(), b, a);
  },
  invokeMethod: function (d, b, a) {
    var f = this.get_webServiceSettings();
    if (f.get_isEmpty()) {
      alert("Please, specify valid web service and method.");
      return;
    }
    this._raiseEvent(
      "loadingStarted",
      new Telerik.Web.UI.WebServiceLoaderEventArgs(a)
    );
    var e = f.get_path();
    var c = f.get_useHttpGet();
    this._currentRequest = Sys.Net.WebServiceProxy.invoke(
      e,
      d,
      c,
      b,
      this._onWebServiceSuccessDelegate,
      this._onWebServiceErrorDelegate,
      a
    );
  },
  add_loadingStarted: function (a) {
    this.get_events().addHandler("loadingStarted", a);
  },
  add_loadingError: function (a) {
    this.get_events().addHandler("loadingError", a);
  },
  add_loadingSuccess: function (a) {
    this.get_events().addHandler("loadingSuccess", a);
  },
  _serializeDictionaryAsKeyValuePairs: function (a) {
    var c = [];
    for (var b in a) {
      c[c.length] = { Key: b, Value: a[b] };
    }
    return c;
  },
  _onWebServiceSuccess: function (b, a) {
    var c = new Telerik.Web.UI.WebServiceLoaderSuccessEventArgs(b, a);
    this._raiseEvent("loadingSuccess", c);
  },
  _onWebServiceError: function (b, a) {
    var c = new Telerik.Web.UI.WebServiceLoaderErrorEventArgs(
      b.get_message(),
      a
    );
    this._raiseEvent("loadingError", c);
  },
  _raiseEvent: function (b, a) {
    var c = this.get_events().getHandler(b);
    if (c) {
      if (!a) {
        a = Sys.EventArgs.Empty;
      }
      c(this, a);
    }
  },
};
Telerik.Web.UI.WebServiceLoader.registerClass(
  "Telerik.Web.UI.WebServiceLoader"
);
Telerik.Web.UI.WebServiceSettings = function (a) {
  this._path = null;
  this._method = null;
  this._useHttpGet = false;
  this._odata = false;
  if (!a) {
    a = {};
  }
  if (typeof a.path != "undefined") {
    this._path = a.path;
  }
  if (typeof a.method != "undefined") {
    this._method = a.method;
  }
  if (typeof a.useHttpGet != "undefined") {
    this._useHttpGet = a.useHttpGet;
  }
};
Telerik.Web.UI.WebServiceSettings.prototype = {
  get_isWcf: function () {
    return /\.svc($|\/)/.test(this._path) && !this.get_isOData();
  },
  get_isOData: function () {
    return this._odata;
  },
  get_path: function () {
    return this._path;
  },
  set_path: function (a) {
    this._path = a;
  },
  get_method: function () {
    return this._method;
  },
  set_method: function (a) {
    this._method = a;
  },
  get_useHttpGet: function () {
    return this._useHttpGet;
  },
  set_useHttpGet: function (a) {
    this._useHttpGet = a;
  },
  get_isEmpty: function () {
    var b = this.get_path();
    var a = this.get_method();
    return !(b && a);
  },
};
Telerik.Web.UI.WebServiceSettings.registerClass(
  "Telerik.Web.UI.WebServiceSettings"
);
Telerik.Web.UI.CallbackLoader = function (a) {
  this._callbackSettings = a;
};
Telerik.Web.UI.CallbackLoader.prototype = {
  invokeCallbackMethod: function () {
    WebForm_DoCallback(
      this._callbackSettings._id,
      this._callbackSettings._arguments,
      this._callbackSettings._onCallbackSuccess,
      this._callbackSettings._context,
      this._callbackSettings._onCallbackError,
      this._callbackSettings._isAsync
    );
  },
};
Telerik.Web.UI.CallbackLoader.registerClass("Telerik.Web.UI.CallbackLoader");
Telerik.Web.UI.CallbackSettings = function (a) {
  this._id = a.id;
  this._arguments = a["arguments"];
  this._onCallbackSuccess = a.onCallbackSuccess;
  this._context = a.context;
  this._onCallbackError = a.onCallbackError;
  this._isAsync = a.isAsync;
};
Telerik.Web.UI.CallbackSettings.registerClass(
  "Telerik.Web.UI.CallbackSettings"
);
Telerik.Web.UI.WaiAriaDecorator = function (b, a) {
  this._element = b;
  this._ariaSettings = a;
};
Telerik.Web.UI.WaiAriaDecorator.prototype = {
  setAttributes: function () {
    var b = this.get_ariaSettings();
    for (var a in b) {
      var c = b[a];
      if (c) {
        this.get_element().setAttribute(a, c);
      }
    }
  },
  get_element: function () {
    return this._element;
  },
  set_element: function (a) {
    this._element = a;
  },
  get_ariaSettings: function () {
    return this._ariaSettings;
  },
  set_ariaSettings: function (a) {
    this._ariaSettings = a;
  },
};
Telerik.Web.UI.WaiAriaDecorator.registerClass(
  "Telerik.Web.UI.WaiAriaDecorator"
);
Telerik.Web.UI.KeyboardNavigationSettings = function (a, b) {
  this._element = a;
  this._navigationSettings = b;
};
Telerik.Web.UI.KeyboardNavigationSettings.prototype = {
  initialize: function () {
    var c = this;
    var b = Sys.Serialization.JavaScriptSerializer.deserialize(
      this._navigationSettings
    );
    var a = (this._keyboardNavigationHandler = function (f) {
      if (c.isModifierSatisfied(b.commandKey, f) && f.keyCode === b.focusKey) {
        var d = $telerik.$(c.get_element());
        if (!d.is("a,input,select,button,iframe") && !d.attr("tabindex")) {
          d.attr("tabindex", "0");
        }
        d.focus();
      }
    });
    $telerik.$(document.body).on("keydown", a);
  },
  dispose: function () {
    $telerik.$(document.body).off("keydown", this._keyboardNavigationHandler);
  },
  get_element: function () {
    return this._element;
  },
  set_element: function (a) {
    this._element = a;
  },
  get_navigationSettings: function () {
    return this._navigationSettings;
  },
  set_navigationSettings: function (a) {
    this._navigationSettings = a;
  },
  isModifierSatisfied: function (d, c) {
    var f = Telerik.Web.UI.KeyboardModifier;
    var a = c.altKey === (4 & d) > 0;
    var b = c.ctrlKey === (2 & d) > 0;
    var h = c.shiftKey === (8 & d) > 0;
    var g = a && b && h;
    if (d & f.None) {
      g = false;
    }
    if (d & f.Cmd) {
      g = c.metaKey;
    }
    return g;
  },
};
Telerik.Web.UI.KeyboardNavigationSettings.registerClass(
  "Telerik.Web.UI.KeyboardNavigationSettings"
);
Telerik.Web.UI.KeyboardModifier = function () {
  throw Error.invalidOperation();
};
Telerik.Web.UI.KeyboardModifier.prototype = {
  None: 1,
  Ctrl: 2,
  Alt: 4,
  AltCtrl: 6,
  Shift: 8,
  CtrlShift: 10,
  AltShift: 12,
  Cmd: 16,
};
Telerik.Web.UI.KeyboardModifier.registerEnum(
  "Telerik.Web.UI.KeyboardModifier",
  false
);
Telerik.Web.UI.ActionsManager = function (a) {
  Telerik.Web.UI.ActionsManager.initializeBase(this);
  this._actions = [];
  this._currentActionIndex = -1;
};
Telerik.Web.UI.ActionsManager.prototype = {
  get_actions: function () {
    return this._actions;
  },
  shiftPointerLeft: function () {
    this._currentActionIndex--;
  },
  shiftPointerRight: function () {
    this._currentActionIndex++;
  },
  get_currentAction: function () {
    return this.get_actions()[this._currentActionIndex];
  },
  get_nextAction: function () {
    return this.get_actions()[this._currentActionIndex + 1];
  },
  addAction: function (a) {
    if (a) {
      var b = new Telerik.Web.UI.ActionsManagerEventArgs(a);
      this.raiseEvent("executeAction", b);
      this._clearActionsToRedo();
      Array.add(this._actions, a);
      this._currentActionIndex = this._actions.length - 1;
      return true;
    }
    return false;
  },
  undo: function (d) {
    if (d == null) {
      d = 1;
    }
    if (d > this._actions.length) {
      d = this._actions.length;
    }
    var c = 0;
    var a = null;
    while (
      0 < d-- &&
      0 <= this._currentActionIndex &&
      this._currentActionIndex < this._actions.length
    ) {
      a = this._actions[this._currentActionIndex--];
      if (a) {
        var b = new Telerik.Web.UI.ActionsManagerEventArgs(a);
        this.raiseEvent("undoAction", b);
        c++;
      }
    }
  },
  redo: function (e) {
    if (e == null) {
      e = 1;
    }
    if (e > this._actions.length) {
      e = this._actions.length;
    }
    var d = 0;
    var a = null;
    var b = this._currentActionIndex + 1;
    while (0 < e-- && 0 <= b && b < this._actions.length) {
      a = this._actions[b];
      if (a) {
        var c = new Telerik.Web.UI.ActionsManagerEventArgs(a);
        this.raiseEvent("redoAction", c);
        this._currentActionIndex = b;
        d++;
      }
      b++;
    }
  },
  removeActionAt: function (a) {
    this._actions.splice(a, 1);
    if (this._currentActionIndex >= a) {
      this._currentActionIndex--;
    }
  },
  canUndo: function () {
    return -1 < this._currentActionIndex;
  },
  canRedo: function () {
    return this._currentActionIndex < this._actions.length - 1;
  },
  getActionsToUndo: function () {
    if (this.canUndo()) {
      return this._actions.slice(0, this._currentActionIndex + 1).reverse();
    }
    return [];
  },
  getActionsToRedo: function () {
    if (this.canRedo()) {
      return this._actions.slice(this._currentActionIndex + 1);
    }
    return [];
  },
  _clearActionsToRedo: function () {
    if (this.canRedo()) {
      var a = this._currentActionIndex + 2;
      if (a < this._actions.length) {
        this._actions.splice(a, this._actions.length - a);
      }
    }
  },
  add_undoAction: function (a) {
    this.get_events().addHandler("undoAction", a);
  },
  remove_undoAction: function (a) {
    this.get_events().removeHandler("undoAction", a);
  },
  add_redoAction: function (a) {
    this.get_events().addHandler("redoAction", a);
  },
  remove_redoAction: function (a) {
    this.get_events().removeHandler("redoAction", a);
  },
  add_executeAction: function (a) {
    this.get_events().addHandler("executeAction", a);
  },
  remove_executeAction: function (a) {
    this.get_events().removeHandler("executeAction", a);
  },
  raiseEvent: function (b, a) {
    var c = this.get_events().getHandler(b);
    if (c) {
      c(this, a);
    }
  },
};
Telerik.Web.UI.ActionsManager.registerClass(
  "Telerik.Web.UI.ActionsManager",
  Sys.Component
);
Telerik.Web.UI.ActionsManagerEventArgs = function (a) {
  Telerik.Web.UI.ActionsManagerEventArgs.initializeBase(this);
  this._action = a;
};
Telerik.Web.UI.ActionsManagerEventArgs.prototype = {
  get_action: function () {
    return this._action;
  },
};
Telerik.Web.UI.ActionsManagerEventArgs.registerClass(
  "Telerik.Web.UI.ActionsManagerEventArgs",
  Sys.CancelEventArgs
);
Telerik.Web.StringBuilder = function (a) {
  this._buffer = a || [];
};
Telerik.Web.StringBuilder.prototype = {
  append: function (b) {
    for (var a = 0; a < arguments.length; a++) {
      this._buffer[this._buffer.length] = arguments[a];
    }
    return this;
  },
  toString: function () {
    return this._buffer.join("");
  },
  get_buffer: function () {
    return this._buffer;
  },
};
Telerik.Web.UI.RadTemplateBoundEventArgs = function (a, c, b) {
  Telerik.Web.UI.RadTemplateBoundEventArgs.initializeBase(this);
  this._dataItem = a;
  this._template = c;
  this._html = b;
};
Telerik.Web.UI.RadTemplateBoundEventArgs.prototype = {
  get_dataItem: function () {
    return this._dataItem;
  },
  set_html: function (a) {
    this._html = a;
  },
  get_html: function (a) {
    return this._html;
  },
  get_template: function (a) {
    return this._template;
  },
};
Telerik.Web.UI.RadTemplateBoundEventArgs.registerClass(
  "Telerik.Web.UI.RadTemplateBoundEventArgs",
  Sys.EventArgs
);
(function () {
  function g() {
    if ($telerik.$) {
      return $telerik.$.extend.apply($telerik.$, arguments);
    }
    var n =
      arguments[0] && typeof arguments[0] === "object" ? arguments[0] : {};
    for (var k = 1; k < arguments.length; k++) {
      var m = arguments[k];
      if (m != null) {
        for (var l in m) {
          var j = m[l];
          if (typeof j !== "undefined") {
            n[l] = j;
          }
        }
      }
    }
    return n;
  }
  function b(j, l) {
    if (l) {
      return (
        "'" +
        j
          .split("'")
          .join("\\'")
          .replace(/\n/g, "\\n")
          .replace(/\r/g, "\\r")
          .replace(/\t/g, "\\t") +
        "'"
      );
    } else {
      var i = j.charAt(0),
        k = j.substring(1);
      if (i === "=") {
        return "+(" + k + ")+";
      } else {
        if (i === ":") {
          return "+e(" + k + ")+";
        } else {
          return ";" + j + ";o+=";
        }
      }
    }
  }
  var a = /^\w+/,
    d = /\${([^}]*)}/g,
    e = /\\}/g,
    c = /__CURLY__/g,
    f = /\\#/g,
    h = /__SHARP__/g;
  Telerik.Web.UI.Template = {
    paramName: "data",
    useWithBlock: true,
    render: function (m, i) {
      var k,
        l,
        j = "";
      for (k = 0, l = i.length; k < l; k++) {
        j += m(i[k]);
      }
      return j;
    },
    compile: function (q, m) {
      var p = g({}, this, m),
        n = p.paramName,
        i = n.match(a)[0],
        r = p.useWithBlock,
        k = "var o,e=$telerik.htmlEncode;",
        o,
        l;
      if (typeof q === "function") {
        if (q.length === 2) {
          return function (s) {
            return q($telerik.$ || jQuery, { data: s }).join("");
          };
        }
        return q;
      }
      k += r ? "with(" + n + "){" : "";
      k += "o=";
      o = q
        .replace(e, "__CURLY__")
        .replace(d, "#=e($1)#")
        .replace(c, "}")
        .replace(f, "__SHARP__")
        .split("#");
      for (l = 0; l < o.length; l++) {
        k += b(o[l], l % 2 === 0);
      }
      k += r ? ";}" : ";";
      k += "return o;";
      k = k.replace(h, "#");
      try {
        return new Function(i, k);
      } catch (j) {
        throw new Error(
          String.format("Invalid template:'{0}' Generated code:'{1}'", q, k)
        );
      }
    },
  };
})();
(function () {
  var a = $telerik;
  var n = "touch";
  var j = "pointer";
  var f = "mouse";
  var o = /touch/gi;
  var k = /pointer/gi;
  var g = /mouse/gi;
  var d = 1;
  var h = "pageX";
  var i = "pageY";
  var b = "clientX";
  var c = "clientY";
  var l = "screenX";
  var m = "screenY";
  var e = [h, i, b, c, l, m];
  a.getEventLocation = function (q) {
    var w = q.originalEvent || null;
    var p = w && w.changedTouches ? w.changedTouches : [];
    var s = w || q;
    var r = {};
    var u = e.length;
    var t = null;
    var v = null;
    if (p && p.length === 1) {
      s = p[0];
    }
    for (t = 0; t < u; t++) {
      v = e[t];
      r[v] = s[v] || q[v];
    }
    return r;
  };
  a.getTouchLocation = function (t) {
    var q = {};
    var s = null;
    var r = e.length;
    var p = null;
    for (p = 0; p < r; p++) {
      s = e[p];
      q[s] = t[s];
    }
    return q;
  };
  a.getTouches = function (t) {
    var w = t.type;
    var v = null;
    var u = t.currentTarget;
    var y = t.originalEvent || null;
    var z = [];
    var p = null;
    var s = null;
    var q = y && y.changedTouches ? y.changedTouches : [];
    var r = q.length;
    var x = null;
    v = a.getEventLocation(t);
    if (w.match(o)) {
      for (x = 0; x < r; x++) {
        p = q[x];
        s = a.getTouchLocation(p);
        z.push({
          type: n,
          target: p.target,
          currentTarget: u,
          id: p.identifier,
          location: s,
          event: t,
        });
      }
    } else {
      if (w.match(k)) {
        z.push({
          type: j,
          target: t.target,
          currentTarget: u,
          id: y.pointerId,
          location: v,
          event: t,
        });
      } else {
        if (w.match(g)) {
          z.push({
            type: f,
            target: t.target,
            currentTarget: u,
            id: d,
            location: v,
            event: t,
          });
        } else {
          z.push({
            type: w,
            target: t.target,
            currentTarget: u,
            id: d,
            location: v,
            event: t,
          });
        }
      }
    }
    return z;
  };
})();
(function () {
  if (Sys && Sys.WebForms && Sys.WebForms.PageRequestManager) {
    Sys.WebForms.PageRequestManager.prototype._onFormElementClick = function (
      a
    ) {
      if (window.navigator.msPointerEnabled) {
        this._activeDefaultButtonClicked =
          a.target === this._activeDefaultButton;
        this._onFormElementActive(
          a.target,
          parseInt(a.offsetX, 10),
          parseInt(a.offsetY, 10)
        );
      } else {
        this._activeDefaultButtonClicked =
          a.target === this._activeDefaultButton;
        this._onFormElementActive(a.target, a.offsetX, a.offsetY);
      }
    };
  }
})();
(function (e) {
  Type.registerNamespace("Telerik.Web.UI.Events");
  var a = Telerik.Web.UI;
  var c = a.Events;
  a.NodeMutationObserver = function (f) {
    this.callback = f;
    this.mutations = [];
  };
  a.NodeMutationObserver.prototype = {
    observe: function (g, h) {
      if (typeof MutationObserver === "undefined") {
        return;
      }
      var f = new MutationObserver(this.callback);
      f.observe(g, h);
      this.mutations.push({ node: g, mutation: f });
    },
    disconnect: function (g) {
      var f = this.findMutationIndex(g);
      if (f == -1) {
        return;
      }
      var h = this.mutations[f];
      h.mutation.disconnect();
      Array.removeAt(this.mutations, f);
    },
    findMutationIndex: function (h) {
      var g = this.mutations;
      for (var f = 0; f < g.length; f++) {
        var j = g[f];
        if (j.node === h) {
          return f;
        }
      }
      return -1;
    },
    isEmpty: function () {
      return this.mutations.length === 0;
    },
    dispose: function () {
      while (this.mutations.length) {
        this.mutations.pop().mutation.disconnect();
      }
      this.callback = null;
    },
  };
  function d(g, h, f) {
    var i = $telerik.$.extend({}, f || {});
    var j;
    if (document.createEvent) {
      j = document.createEvent("MouseEvents");
      j.initMouseEvent(
        h,
        i.bubbles,
        i.cancelable,
        document.defaultView,
        i.button,
        i.screenX,
        i.screenY,
        i.clientX,
        i.clientY,
        i.ctrlKey,
        i.altKey,
        i.shiftKey,
        i.metaKey,
        i.button,
        g
      );
    } else {
      if ("MouseEvent" in window) {
        j = new MouseEvent("click", i);
      }
    }
    j && g.dispatchEvent(j);
    if (!j) {
      j = b(document.createEventObject(), i);
      g.fireEvent("on" + h, j);
    }
    return g;
  }
  function b(f, h) {
    for (var g in h) {
      f[g] = h[g];
    }
    return f;
  }
  c.simulateMouseEvent = d;
})();
(function (e) {
  Type.registerNamespace("Telerik.Web.UI");
  var a = Telerik.Web.UI;
  a.NodeDataStorage = function (f) {
    this.options = $telerik.$.extend(
      {
        getNodes: function () {
          return [];
        },
        getNodeValue: function (g) {},
        setNodeValue: function (g) {},
        onStore: function () {},
      },
      f || {}
    );
    this.storage = [];
  };
  a.NodeDataStorage.prototype = {
    store: function () {
      var k = this.options;
      var j = k.getNodes();
      this.cleanUp();
      for (var f = 0, g = j.length; f < g; f++) {
        var h = j[f];
        this.storage.push({ node: h, value: k.getNodeValue(h) });
        k.onStore(h);
      }
    },
    restore: function () {
      var g = this.options;
      var h = this.storage;
      while (h.length) {
        var f = h.pop();
        g.setNodeValue(f.node, f.value);
      }
    },
    cleanUp: function () {
      this.storage = [];
    },
  };
  a.NodeDataStorage.registerClass("Telerik.Web.UI.NodeDataStorage");
  function b(f) {
    if (typeof f === "function") {
      return f;
    } else {
      if (typeof f === "string") {
        return function () {
          return $telerik.$(f);
        };
      }
    }
  }
  function d(f, g) {
    if (g && typeof g.onStore === "function") {
      f.getNodes = b(g.getNodes);
      f.onStore = g.onStore;
    } else {
      f.getNodes = b(g);
    }
    return f;
  }
  a.NodeAttributeDataStorage = function (f, h) {
    var g = d(c(f), h);
    return new a.NodeDataStorage(g);
  };
  function c(f) {
    return {
      getNodeValue: function (g) {
        return g.getAttribute(f);
      },
      setNodeValue: function (g, h) {
        if (h === null || h === e) {
          g.removeAttribute(f);
        } else {
          g.setAttribute(f, h);
        }
      },
    };
  }
})();

/* END Telerik.Web.UI.Common.Core.js */
/* START Telerik.Web.UI.Common.jQuery.js */
/*! jQuery v1.12.4 | (c) jQuery Foundation | jquery.org/license */
!(function (a, b) {
  "object" == typeof module && "object" == typeof module.exports
    ? (module.exports = a.document
        ? b(a, !0)
        : function (a) {
            if (!a.document)
              throw new Error("jQuery requires a window with a document");
            return b(a);
          })
    : b(a);
})("undefined" != typeof window ? window : this, function (a, b) {
  var c = [],
    d = a.document,
    e = c.slice,
    f = c.concat,
    g = c.push,
    h = c.indexOf,
    i = {},
    j = i.toString,
    k = i.hasOwnProperty,
    l = {},
    m = "1.12.4",
    n = function (a, b) {
      return new n.fn.init(a, b);
    },
    o = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
    p = /^-ms-/,
    q = /-([\da-z])/gi,
    r = function (a, b) {
      return b.toUpperCase();
    };
  (n.fn = n.prototype = {
    jquery: m,
    constructor: n,
    selector: "",
    length: 0,
    toArray: function () {
      return e.call(this);
    },
    get: function (a) {
      return null != a
        ? 0 > a
          ? this[a + this.length]
          : this[a]
        : e.call(this);
    },
    pushStack: function (a) {
      var b = n.merge(this.constructor(), a);
      return (b.prevObject = this), (b.context = this.context), b;
    },
    each: function (a) {
      return n.each(this, a);
    },
    map: function (a) {
      return this.pushStack(
        n.map(this, function (b, c) {
          return a.call(b, c, b);
        })
      );
    },
    slice: function () {
      return this.pushStack(e.apply(this, arguments));
    },
    first: function () {
      return this.eq(0);
    },
    last: function () {
      return this.eq(-1);
    },
    eq: function (a) {
      var b = this.length,
        c = +a + (0 > a ? b : 0);
      return this.pushStack(c >= 0 && b > c ? [this[c]] : []);
    },
    end: function () {
      return this.prevObject || this.constructor();
    },
    push: g,
    sort: c.sort,
    splice: c.splice,
  }),
    (n.extend = n.fn.extend = function () {
      var a,
        b,
        c,
        d,
        e,
        f,
        g = arguments[0] || {},
        h = 1,
        i = arguments.length,
        j = !1;
      for (
        "boolean" == typeof g && ((j = g), (g = arguments[h] || {}), h++),
          "object" == typeof g || n.isFunction(g) || (g = {}),
          h === i && ((g = this), h--);
        i > h;
        h++
      )
        if (null != (e = arguments[h]))
          for (d in e)
            (a = g[d]),
              (c = e[d]),
              d !== "__proto__" &&
                g !== c &&
                (j && c && (n.isPlainObject(c) || (b = n.isArray(c)))
                  ? (b
                      ? ((b = !1), (f = a && n.isArray(a) ? a : []))
                      : (f = a && n.isPlainObject(a) ? a : {}),
                    (g[d] = n.extend(j, f, c)))
                  : void 0 !== c && (g[d] = c));
      return g;
    }),
    n.extend({
      expando: "jQuery" + (m + Math.random()).replace(/\D/g, ""),
      isReady: !0,
      error: function (a) {
        throw new Error(a);
      },
      noop: function () {},
      isFunction: function (a) {
        return "function" === n.type(a);
      },
      isArray:
        Array.isArray ||
        function (a) {
          return "array" === n.type(a);
        },
      isWindow: function (a) {
        return null != a && a == a.window;
      },
      isNumeric: function (a) {
        var b = a && a.toString();
        return !n.isArray(a) && b - parseFloat(b) + 1 >= 0;
      },
      isEmptyObject: function (a) {
        var b;
        for (b in a) return !1;
        return !0;
      },
      isPlainObject: function (a) {
        var b;
        if (!a || "object" !== n.type(a) || a.nodeType || n.isWindow(a))
          return !1;
        try {
          if (
            a.constructor &&
            !k.call(a, "constructor") &&
            !k.call(a.constructor.prototype, "isPrototypeOf")
          )
            return !1;
        } catch (c) {
          return !1;
        }
        if (!l.ownFirst) for (b in a) return k.call(a, b);
        for (b in a);
        return void 0 === b || k.call(a, b);
      },
      type: function (a) {
        return null == a
          ? a + ""
          : "object" == typeof a || "function" == typeof a
          ? i[j.call(a)] || "object"
          : typeof a;
      },
      globalEval: function (b) {
        b &&
          n.trim(b) &&
          (
            a.execScript ||
            function (b) {
              a.eval.call(a, b);
            }
          )(b);
      },
      camelCase: function (a) {
        return a.replace(p, "ms-").replace(q, r);
      },
      nodeName: function (a, b) {
        return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();
      },
      each: function (a, b) {
        var c,
          d = 0;
        if (s(a)) {
          for (c = a.length; c > d; d++)
            if (b.call(a[d], d, a[d]) === !1) break;
        } else for (d in a) if (b.call(a[d], d, a[d]) === !1) break;
        return a;
      },
      trim: function (a) {
        return null == a ? "" : (a + "").replace(o, "");
      },
      makeArray: function (a, b) {
        var c = b || [];
        return (
          null != a &&
            (s(Object(a))
              ? n.merge(c, "string" == typeof a ? [a] : a)
              : g.call(c, a)),
          c
        );
      },
      inArray: function (a, b, c) {
        var d;
        if (b) {
          if (h) return h.call(b, a, c);
          for (
            d = b.length, c = c ? (0 > c ? Math.max(0, d + c) : c) : 0;
            d > c;
            c++
          )
            if (c in b && b[c] === a) return c;
        }
        return -1;
      },
      merge: function (a, b) {
        var c = +b.length,
          d = 0,
          e = a.length;
        while (c > d) a[e++] = b[d++];
        if (c !== c) while (void 0 !== b[d]) a[e++] = b[d++];
        return (a.length = e), a;
      },
      grep: function (a, b, c) {
        for (var d, e = [], f = 0, g = a.length, h = !c; g > f; f++)
          (d = !b(a[f], f)), d !== h && e.push(a[f]);
        return e;
      },
      map: function (a, b, c) {
        var d,
          e,
          g = 0,
          h = [];
        if (s(a))
          for (d = a.length; d > g; g++)
            (e = b(a[g], g, c)), null != e && h.push(e);
        else for (g in a) (e = b(a[g], g, c)), null != e && h.push(e);
        return f.apply([], h);
      },
      guid: 1,
      proxy: function (a, b) {
        var c, d, f;
        return (
          "string" == typeof b && ((f = a[b]), (b = a), (a = f)),
          n.isFunction(a)
            ? ((c = e.call(arguments, 2)),
              (d = function () {
                return a.apply(b || this, c.concat(e.call(arguments)));
              }),
              (d.guid = a.guid = a.guid || n.guid++),
              d)
            : void 0
        );
      },
      now: function () {
        return +new Date();
      },
      support: l,
    }),
    "function" == typeof Symbol && (n.fn[Symbol.iterator] = c[Symbol.iterator]),
    n.each(
      "Boolean Number String Function Array Date RegExp Object Error Symbol".split(
        " "
      ),
      function (a, b) {
        i["[object " + b + "]"] = b.toLowerCase();
      }
    );
  function s(a) {
    var b = !!a && "length" in a && a.length,
      c = n.type(a);
    return "function" === c || n.isWindow(a)
      ? !1
      : "array" === c ||
          0 === b ||
          ("number" == typeof b && b > 0 && b - 1 in a);
  }
  var t = (function (a) {
    var b,
      c,
      d,
      e,
      f,
      g,
      h,
      i,
      j,
      k,
      l,
      m,
      n,
      o,
      p,
      q,
      r,
      s,
      t,
      u = "sizzle" + 1 * new Date(),
      v = a.document,
      w = 0,
      x = 0,
      y = ga(),
      z = ga(),
      A = ga(),
      B = function (a, b) {
        return a === b && (l = !0), 0;
      },
      C = 1 << 31,
      D = {}.hasOwnProperty,
      E = [],
      F = E.pop,
      G = E.push,
      H = E.push,
      I = E.slice,
      J = function (a, b) {
        for (var c = 0, d = a.length; d > c; c++) if (a[c] === b) return c;
        return -1;
      },
      K =
        "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
      L = "[\\x20\\t\\r\\n\\f]",
      M = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
      N =
        "\\[" +
        L +
        "*(" +
        M +
        ")(?:" +
        L +
        "*([*^$|!~]?=)" +
        L +
        "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" +
        M +
        "))|)" +
        L +
        "*\\]",
      O =
        ":(" +
        M +
        ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" +
        N +
        ")*)|.*)\\)|)",
      P = new RegExp(L + "+", "g"),
      Q = new RegExp("^" + L + "+|((?:^|[^\\\\])(?:\\\\.)*)" + L + "+$", "g"),
      R = new RegExp("^" + L + "*," + L + "*"),
      S = new RegExp("^" + L + "*([>+~]|" + L + ")" + L + "*"),
      T = new RegExp("=" + L + "*([^\\]'\"]*?)" + L + "*\\]", "g"),
      U = new RegExp(O),
      V = new RegExp("^" + M + "$"),
      W = {
        ID: new RegExp("^#(" + M + ")"),
        CLASS: new RegExp("^\\.(" + M + ")"),
        TAG: new RegExp("^(" + M + "|[*])"),
        ATTR: new RegExp("^" + N),
        PSEUDO: new RegExp("^" + O),
        CHILD: new RegExp(
          "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
            L +
            "*(even|odd|(([+-]|)(\\d*)n|)" +
            L +
            "*(?:([+-]|)" +
            L +
            "*(\\d+)|))" +
            L +
            "*\\)|)",
          "i"
        ),
        bool: new RegExp("^(?:" + K + ")$", "i"),
        needsContext: new RegExp(
          "^" +
            L +
            "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
            L +
            "*((?:-\\d)?\\d*)" +
            L +
            "*\\)|)(?=[^-]|$)",
          "i"
        ),
      },
      X = /^(?:input|select|textarea|button)$/i,
      Y = /^h\d$/i,
      Z = /^[^{]+\{\s*\[native \w/,
      $ = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
      _ = /[+~]/,
      aa = /'|\\/g,
      ba = new RegExp("\\\\([\\da-f]{1,6}" + L + "?|(" + L + ")|.)", "ig"),
      ca = function (a, b, c) {
        var d = "0x" + b - 65536;
        return d !== d || c
          ? b
          : 0 > d
          ? String.fromCharCode(d + 65536)
          : String.fromCharCode((d >> 10) | 55296, (1023 & d) | 56320);
      },
      da = function () {
        m();
      };
    try {
      H.apply((E = I.call(v.childNodes)), v.childNodes),
        E[v.childNodes.length].nodeType;
    } catch (ea) {
      H = {
        apply: E.length
          ? function (a, b) {
              G.apply(a, I.call(b));
            }
          : function (a, b) {
              var c = a.length,
                d = 0;
              while ((a[c++] = b[d++]));
              a.length = c - 1;
            },
      };
    }
    function fa(a, b, d, e) {
      var f,
        h,
        j,
        k,
        l,
        o,
        r,
        s,
        w = b && b.ownerDocument,
        x = b ? b.nodeType : 9;
      if (
        ((d = d || []),
        "string" != typeof a || !a || (1 !== x && 9 !== x && 11 !== x))
      )
        return d;
      if (
        !e &&
        ((b ? b.ownerDocument || b : v) !== n && m(b), (b = b || n), p)
      ) {
        if (11 !== x && (o = $.exec(a)))
          if ((f = o[1])) {
            if (9 === x) {
              if (!(j = b.getElementById(f))) return d;
              if (j.id === f) return d.push(j), d;
            } else if (w && (j = w.getElementById(f)) && t(b, j) && j.id === f)
              return d.push(j), d;
          } else {
            if (o[2]) return H.apply(d, b.getElementsByTagName(a)), d;
            if (
              (f = o[3]) &&
              c.getElementsByClassName &&
              b.getElementsByClassName
            )
              return H.apply(d, b.getElementsByClassName(f)), d;
          }
        if (c.qsa && !A[a + " "] && (!q || !q.test(a))) {
          if (1 !== x) (w = b), (s = a);
          else if ("object" !== b.nodeName.toLowerCase()) {
            (k = b.getAttribute("id"))
              ? (k = k.replace(aa, "\\$&"))
              : b.setAttribute("id", (k = u)),
              (r = g(a)),
              (h = r.length),
              (l = V.test(k) ? "#" + k : "[id='" + k + "']");
            while (h--) r[h] = l + " " + qa(r[h]);
            (s = r.join(",")), (w = (_.test(a) && oa(b.parentNode)) || b);
          }
          if (s)
            try {
              return H.apply(d, w.querySelectorAll(s)), d;
            } catch (y) {
            } finally {
              k === u && b.removeAttribute("id");
            }
        }
      }
      return i(a.replace(Q, "$1"), b, d, e);
    }
    function ga() {
      var a = [];
      function b(c, e) {
        return (
          a.push(c + " ") > d.cacheLength && delete b[a.shift()],
          (b[c + " "] = e)
        );
      }
      return b;
    }
    function ha(a) {
      return (a[u] = !0), a;
    }
    function ia(a) {
      var b = n.createElement("div");
      try {
        return !!a(b);
      } catch (c) {
        return !1;
      } finally {
        b.parentNode && b.parentNode.removeChild(b), (b = null);
      }
    }
    function ja(a, b) {
      var c = a.split("|"),
        e = c.length;
      while (e--) d.attrHandle[c[e]] = b;
    }
    function ka(a, b) {
      var c = b && a,
        d =
          c &&
          1 === a.nodeType &&
          1 === b.nodeType &&
          (~b.sourceIndex || C) - (~a.sourceIndex || C);
      if (d) return d;
      if (c) while ((c = c.nextSibling)) if (c === b) return -1;
      return a ? 1 : -1;
    }
    function la(a) {
      return function (b) {
        var c = b.nodeName.toLowerCase();
        return "input" === c && b.type === a;
      };
    }
    function ma(a) {
      return function (b) {
        var c = b.nodeName.toLowerCase();
        return ("input" === c || "button" === c) && b.type === a;
      };
    }
    function na(a) {
      return ha(function (b) {
        return (
          (b = +b),
          ha(function (c, d) {
            var e,
              f = a([], c.length, b),
              g = f.length;
            while (g--) c[(e = f[g])] && (c[e] = !(d[e] = c[e]));
          })
        );
      });
    }
    function oa(a) {
      return a && "undefined" != typeof a.getElementsByTagName && a;
    }
    (c = fa.support = {}),
      (f = fa.isXML = function (a) {
        var b = a && (a.ownerDocument || a).documentElement;
        return b ? "HTML" !== b.nodeName : !1;
      }),
      (m = fa.setDocument = function (a) {
        var b,
          e,
          g = a ? a.ownerDocument || a : v;
        return g !== n && 9 === g.nodeType && g.documentElement
          ? ((n = g),
            (o = n.documentElement),
            (p = !f(n)),
            (e = n.defaultView) &&
              e.top !== e &&
              (e.addEventListener
                ? e.addEventListener("unload", da, !1)
                : e.attachEvent && e.attachEvent("onunload", da)),
            (c.attributes = ia(function (a) {
              return (a.className = "i"), !a.getAttribute("className");
            })),
            (c.getElementsByTagName = ia(function (a) {
              return (
                a.appendChild(n.createComment("")),
                !a.getElementsByTagName("*").length
              );
            })),
            (c.getElementsByClassName = Z.test(n.getElementsByClassName)),
            (c.getById = ia(function (a) {
              return (
                (o.appendChild(a).id = u),
                !n.getElementsByName || !n.getElementsByName(u).length
              );
            })),
            c.getById
              ? ((d.find.ID = function (a, b) {
                  if ("undefined" != typeof b.getElementById && p) {
                    var c = b.getElementById(a);
                    return c ? [c] : [];
                  }
                }),
                (d.filter.ID = function (a) {
                  var b = a.replace(ba, ca);
                  return function (a) {
                    return a.getAttribute("id") === b;
                  };
                }))
              : (delete d.find.ID,
                (d.filter.ID = function (a) {
                  var b = a.replace(ba, ca);
                  return function (a) {
                    var c =
                      "undefined" != typeof a.getAttributeNode &&
                      a.getAttributeNode("id");
                    return c && c.value === b;
                  };
                })),
            (d.find.TAG = c.getElementsByTagName
              ? function (a, b) {
                  return "undefined" != typeof b.getElementsByTagName
                    ? b.getElementsByTagName(a)
                    : c.qsa
                    ? b.querySelectorAll(a)
                    : void 0;
                }
              : function (a, b) {
                  var c,
                    d = [],
                    e = 0,
                    f = b.getElementsByTagName(a);
                  if ("*" === a) {
                    while ((c = f[e++])) 1 === c.nodeType && d.push(c);
                    return d;
                  }
                  return f;
                }),
            (d.find.CLASS =
              c.getElementsByClassName &&
              function (a, b) {
                return "undefined" != typeof b.getElementsByClassName && p
                  ? b.getElementsByClassName(a)
                  : void 0;
              }),
            (r = []),
            (q = []),
            (c.qsa = Z.test(n.querySelectorAll)) &&
              (ia(function (a) {
                (o.appendChild(a).innerHTML =
                  "<a id='" +
                  u +
                  "'></a><select id='" +
                  u +
                  "-\r\\' msallowcapture=''><option selected=''></option></select>"),
                  a.querySelectorAll("[msallowcapture^='']").length &&
                    q.push("[*^$]=" + L + "*(?:''|\"\")"),
                  a.querySelectorAll("[selected]").length ||
                    q.push("\\[" + L + "*(?:value|" + K + ")"),
                  a.querySelectorAll("[id~=" + u + "-]").length || q.push("~="),
                  a.querySelectorAll(":checked").length || q.push(":checked"),
                  a.querySelectorAll("a#" + u + "+*").length ||
                    q.push(".#.+[+~]");
              }),
              ia(function (a) {
                var b = n.createElement("input");
                b.setAttribute("type", "hidden"),
                  a.appendChild(b).setAttribute("name", "D"),
                  a.querySelectorAll("[name=d]").length &&
                    q.push("name" + L + "*[*^$|!~]?="),
                  a.querySelectorAll(":enabled").length ||
                    q.push(":enabled", ":disabled"),
                  a.querySelectorAll("*,:x"),
                  q.push(",.*:");
              })),
            (c.matchesSelector = Z.test(
              (s =
                o.matches ||
                o.webkitMatchesSelector ||
                o.mozMatchesSelector ||
                o.oMatchesSelector ||
                o.msMatchesSelector)
            )) &&
              ia(function (a) {
                (c.disconnectedMatch = s.call(a, "div")),
                  s.call(a, "[s!='']:x"),
                  r.push("!=", O);
              }),
            (q = q.length && new RegExp(q.join("|"))),
            (r = r.length && new RegExp(r.join("|"))),
            (b = Z.test(o.compareDocumentPosition)),
            (t =
              b || Z.test(o.contains)
                ? function (a, b) {
                    var c = 9 === a.nodeType ? a.documentElement : a,
                      d = b && b.parentNode;
                    return (
                      a === d ||
                      !(
                        !d ||
                        1 !== d.nodeType ||
                        !(c.contains
                          ? c.contains(d)
                          : a.compareDocumentPosition &&
                            16 & a.compareDocumentPosition(d))
                      )
                    );
                  }
                : function (a, b) {
                    if (b) while ((b = b.parentNode)) if (b === a) return !0;
                    return !1;
                  }),
            (B = b
              ? function (a, b) {
                  if (a === b) return (l = !0), 0;
                  var d =
                    !a.compareDocumentPosition - !b.compareDocumentPosition;
                  return d
                    ? d
                    : ((d =
                        (a.ownerDocument || a) === (b.ownerDocument || b)
                          ? a.compareDocumentPosition(b)
                          : 1),
                      1 & d ||
                      (!c.sortDetached && b.compareDocumentPosition(a) === d)
                        ? a === n || (a.ownerDocument === v && t(v, a))
                          ? -1
                          : b === n || (b.ownerDocument === v && t(v, b))
                          ? 1
                          : k
                          ? J(k, a) - J(k, b)
                          : 0
                        : 4 & d
                        ? -1
                        : 1);
                }
              : function (a, b) {
                  if (a === b) return (l = !0), 0;
                  var c,
                    d = 0,
                    e = a.parentNode,
                    f = b.parentNode,
                    g = [a],
                    h = [b];
                  if (!e || !f)
                    return a === n
                      ? -1
                      : b === n
                      ? 1
                      : e
                      ? -1
                      : f
                      ? 1
                      : k
                      ? J(k, a) - J(k, b)
                      : 0;
                  if (e === f) return ka(a, b);
                  c = a;
                  while ((c = c.parentNode)) g.unshift(c);
                  c = b;
                  while ((c = c.parentNode)) h.unshift(c);
                  while (g[d] === h[d]) d++;
                  return d
                    ? ka(g[d], h[d])
                    : g[d] === v
                    ? -1
                    : h[d] === v
                    ? 1
                    : 0;
                }),
            n)
          : n;
      }),
      (fa.matches = function (a, b) {
        return fa(a, null, null, b);
      }),
      (fa.matchesSelector = function (a, b) {
        if (
          ((a.ownerDocument || a) !== n && m(a),
          (b = b.replace(T, "='$1']")),
          c.matchesSelector &&
            p &&
            !A[b + " "] &&
            (!r || !r.test(b)) &&
            (!q || !q.test(b)))
        )
          try {
            var d = s.call(a, b);
            if (
              d ||
              c.disconnectedMatch ||
              (a.document && 11 !== a.document.nodeType)
            )
              return d;
          } catch (e) {}
        return fa(b, n, null, [a]).length > 0;
      }),
      (fa.contains = function (a, b) {
        return (a.ownerDocument || a) !== n && m(a), t(a, b);
      }),
      (fa.attr = function (a, b) {
        (a.ownerDocument || a) !== n && m(a);
        var e = d.attrHandle[b.toLowerCase()],
          f = e && D.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;
        return void 0 !== f
          ? f
          : c.attributes || !p
          ? a.getAttribute(b)
          : (f = a.getAttributeNode(b)) && f.specified
          ? f.value
          : null;
      }),
      (fa.error = function (a) {
        throw new Error("Syntax error, unrecognized expression: " + a);
      }),
      (fa.uniqueSort = function (a) {
        var b,
          d = [],
          e = 0,
          f = 0;
        if (
          ((l = !c.detectDuplicates),
          (k = !c.sortStable && a.slice(0)),
          a.sort(B),
          l)
        ) {
          while ((b = a[f++])) b === a[f] && (e = d.push(f));
          while (e--) a.splice(d[e], 1);
        }
        return (k = null), a;
      }),
      (e = fa.getText = function (a) {
        var b,
          c = "",
          d = 0,
          f = a.nodeType;
        if (f) {
          if (1 === f || 9 === f || 11 === f) {
            if ("string" == typeof a.textContent) return a.textContent;
            for (a = a.firstChild; a; a = a.nextSibling) c += e(a);
          } else if (3 === f || 4 === f) return a.nodeValue;
        } else while ((b = a[d++])) c += e(b);
        return c;
      }),
      (d = fa.selectors = {
        cacheLength: 50,
        createPseudo: ha,
        match: W,
        attrHandle: {},
        find: {},
        relative: {
          ">": { dir: "parentNode", first: !0 },
          " ": { dir: "parentNode" },
          "+": { dir: "previousSibling", first: !0 },
          "~": { dir: "previousSibling" },
        },
        preFilter: {
          ATTR: function (a) {
            return (
              (a[1] = a[1].replace(ba, ca)),
              (a[3] = (a[3] || a[4] || a[5] || "").replace(ba, ca)),
              "~=" === a[2] && (a[3] = " " + a[3] + " "),
              a.slice(0, 4)
            );
          },
          CHILD: function (a) {
            return (
              (a[1] = a[1].toLowerCase()),
              "nth" === a[1].slice(0, 3)
                ? (a[3] || fa.error(a[0]),
                  (a[4] = +(a[4]
                    ? a[5] + (a[6] || 1)
                    : 2 * ("even" === a[3] || "odd" === a[3]))),
                  (a[5] = +(a[7] + a[8] || "odd" === a[3])))
                : a[3] && fa.error(a[0]),
              a
            );
          },
          PSEUDO: function (a) {
            var b,
              c = !a[6] && a[2];
            return W.CHILD.test(a[0])
              ? null
              : (a[3]
                  ? (a[2] = a[4] || a[5] || "")
                  : c &&
                    U.test(c) &&
                    (b = g(c, !0)) &&
                    (b = c.indexOf(")", c.length - b) - c.length) &&
                    ((a[0] = a[0].slice(0, b)), (a[2] = c.slice(0, b))),
                a.slice(0, 3));
          },
        },
        filter: {
          TAG: function (a) {
            var b = a.replace(ba, ca).toLowerCase();
            return "*" === a
              ? function () {
                  return !0;
                }
              : function (a) {
                  return a.nodeName && a.nodeName.toLowerCase() === b;
                };
          },
          CLASS: function (a) {
            var b = y[a + " "];
            return (
              b ||
              ((b = new RegExp("(^|" + L + ")" + a + "(" + L + "|$)")) &&
                y(a, function (a) {
                  return b.test(
                    ("string" == typeof a.className && a.className) ||
                      ("undefined" != typeof a.getAttribute &&
                        a.getAttribute("class")) ||
                      ""
                  );
                }))
            );
          },
          ATTR: function (a, b, c) {
            return function (d) {
              var e = fa.attr(d, a);
              return null == e
                ? "!=" === b
                : b
                ? ((e += ""),
                  "=" === b
                    ? e === c
                    : "!=" === b
                    ? e !== c
                    : "^=" === b
                    ? c && 0 === e.indexOf(c)
                    : "*=" === b
                    ? c && e.indexOf(c) > -1
                    : "$=" === b
                    ? c && e.slice(-c.length) === c
                    : "~=" === b
                    ? (" " + e.replace(P, " ") + " ").indexOf(c) > -1
                    : "|=" === b
                    ? e === c || e.slice(0, c.length + 1) === c + "-"
                    : !1)
                : !0;
            };
          },
          CHILD: function (a, b, c, d, e) {
            var f = "nth" !== a.slice(0, 3),
              g = "last" !== a.slice(-4),
              h = "of-type" === b;
            return 1 === d && 0 === e
              ? function (a) {
                  return !!a.parentNode;
                }
              : function (b, c, i) {
                  var j,
                    k,
                    l,
                    m,
                    n,
                    o,
                    p = f !== g ? "nextSibling" : "previousSibling",
                    q = b.parentNode,
                    r = h && b.nodeName.toLowerCase(),
                    s = !i && !h,
                    t = !1;
                  if (q) {
                    if (f) {
                      while (p) {
                        m = b;
                        while ((m = m[p]))
                          if (
                            h
                              ? m.nodeName.toLowerCase() === r
                              : 1 === m.nodeType
                          )
                            return !1;
                        o = p = "only" === a && !o && "nextSibling";
                      }
                      return !0;
                    }
                    if (((o = [g ? q.firstChild : q.lastChild]), g && s)) {
                      (m = q),
                        (l = m[u] || (m[u] = {})),
                        (k = l[m.uniqueID] || (l[m.uniqueID] = {})),
                        (j = k[a] || []),
                        (n = j[0] === w && j[1]),
                        (t = n && j[2]),
                        (m = n && q.childNodes[n]);
                      while ((m = (++n && m && m[p]) || (t = n = 0) || o.pop()))
                        if (1 === m.nodeType && ++t && m === b) {
                          k[a] = [w, n, t];
                          break;
                        }
                    } else if (
                      (s &&
                        ((m = b),
                        (l = m[u] || (m[u] = {})),
                        (k = l[m.uniqueID] || (l[m.uniqueID] = {})),
                        (j = k[a] || []),
                        (n = j[0] === w && j[1]),
                        (t = n)),
                      t === !1)
                    )
                      while ((m = (++n && m && m[p]) || (t = n = 0) || o.pop()))
                        if (
                          (h
                            ? m.nodeName.toLowerCase() === r
                            : 1 === m.nodeType) &&
                          ++t &&
                          (s &&
                            ((l = m[u] || (m[u] = {})),
                            (k = l[m.uniqueID] || (l[m.uniqueID] = {})),
                            (k[a] = [w, t])),
                          m === b)
                        )
                          break;
                    return (t -= e), t === d || (t % d === 0 && t / d >= 0);
                  }
                };
          },
          PSEUDO: function (a, b) {
            var c,
              e =
                d.pseudos[a] ||
                d.setFilters[a.toLowerCase()] ||
                fa.error("unsupported pseudo: " + a);
            return e[u]
              ? e(b)
              : e.length > 1
              ? ((c = [a, a, "", b]),
                d.setFilters.hasOwnProperty(a.toLowerCase())
                  ? ha(function (a, c) {
                      var d,
                        f = e(a, b),
                        g = f.length;
                      while (g--) (d = J(a, f[g])), (a[d] = !(c[d] = f[g]));
                    })
                  : function (a) {
                      return e(a, 0, c);
                    })
              : e;
          },
        },
        pseudos: {
          not: ha(function (a) {
            var b = [],
              c = [],
              d = h(a.replace(Q, "$1"));
            return d[u]
              ? ha(function (a, b, c, e) {
                  var f,
                    g = d(a, null, e, []),
                    h = a.length;
                  while (h--) (f = g[h]) && (a[h] = !(b[h] = f));
                })
              : function (a, e, f) {
                  return (b[0] = a), d(b, null, f, c), (b[0] = null), !c.pop();
                };
          }),
          has: ha(function (a) {
            return function (b) {
              return fa(a, b).length > 0;
            };
          }),
          contains: ha(function (a) {
            return (
              (a = a.replace(ba, ca)),
              function (b) {
                return (b.textContent || b.innerText || e(b)).indexOf(a) > -1;
              }
            );
          }),
          lang: ha(function (a) {
            return (
              V.test(a || "") || fa.error("unsupported lang: " + a),
              (a = a.replace(ba, ca).toLowerCase()),
              function (b) {
                var c;
                do
                  if (
                    (c = p
                      ? b.lang
                      : b.getAttribute("xml:lang") || b.getAttribute("lang"))
                  )
                    return (
                      (c = c.toLowerCase()), c === a || 0 === c.indexOf(a + "-")
                    );
                while ((b = b.parentNode) && 1 === b.nodeType);
                return !1;
              }
            );
          }),
          target: function (b) {
            var c = a.location && a.location.hash;
            return c && c.slice(1) === b.id;
          },
          root: function (a) {
            return a === o;
          },
          focus: function (a) {
            return (
              a === n.activeElement &&
              (!n.hasFocus || n.hasFocus()) &&
              !!(a.type || a.href || ~a.tabIndex)
            );
          },
          enabled: function (a) {
            return a.disabled === !1;
          },
          disabled: function (a) {
            return a.disabled === !0;
          },
          checked: function (a) {
            var b = a.nodeName.toLowerCase();
            return (
              ("input" === b && !!a.checked) || ("option" === b && !!a.selected)
            );
          },
          selected: function (a) {
            return (
              a.parentNode && a.parentNode.selectedIndex, a.selected === !0
            );
          },
          empty: function (a) {
            for (a = a.firstChild; a; a = a.nextSibling)
              if (a.nodeType < 6) return !1;
            return !0;
          },
          parent: function (a) {
            return !d.pseudos.empty(a);
          },
          header: function (a) {
            return Y.test(a.nodeName);
          },
          input: function (a) {
            return X.test(a.nodeName);
          },
          button: function (a) {
            var b = a.nodeName.toLowerCase();
            return ("input" === b && "button" === a.type) || "button" === b;
          },
          text: function (a) {
            var b;
            return (
              "input" === a.nodeName.toLowerCase() &&
              "text" === a.type &&
              (null == (b = a.getAttribute("type")) ||
                "text" === b.toLowerCase())
            );
          },
          first: na(function () {
            return [0];
          }),
          last: na(function (a, b) {
            return [b - 1];
          }),
          eq: na(function (a, b, c) {
            return [0 > c ? c + b : c];
          }),
          even: na(function (a, b) {
            for (var c = 0; b > c; c += 2) a.push(c);
            return a;
          }),
          odd: na(function (a, b) {
            for (var c = 1; b > c; c += 2) a.push(c);
            return a;
          }),
          lt: na(function (a, b, c) {
            for (var d = 0 > c ? c + b : c; --d >= 0; ) a.push(d);
            return a;
          }),
          gt: na(function (a, b, c) {
            for (var d = 0 > c ? c + b : c; ++d < b; ) a.push(d);
            return a;
          }),
        },
      }),
      (d.pseudos.nth = d.pseudos.eq);
    for (b in { radio: !0, checkbox: !0, file: !0, password: !0, image: !0 })
      d.pseudos[b] = la(b);
    for (b in { submit: !0, reset: !0 }) d.pseudos[b] = ma(b);
    function pa() {}
    (pa.prototype = d.filters = d.pseudos),
      (d.setFilters = new pa()),
      (g = fa.tokenize = function (a, b) {
        var c,
          e,
          f,
          g,
          h,
          i,
          j,
          k = z[a + " "];
        if (k) return b ? 0 : k.slice(0);
        (h = a), (i = []), (j = d.preFilter);
        while (h) {
          (c && !(e = R.exec(h))) ||
            (e && (h = h.slice(e[0].length) || h), i.push((f = []))),
            (c = !1),
            (e = S.exec(h)) &&
              ((c = e.shift()),
              f.push({ value: c, type: e[0].replace(Q, " ") }),
              (h = h.slice(c.length)));
          for (g in d.filter)
            !(e = W[g].exec(h)) ||
              (j[g] && !(e = j[g](e))) ||
              ((c = e.shift()),
              f.push({ value: c, type: g, matches: e }),
              (h = h.slice(c.length)));
          if (!c) break;
        }
        return b ? h.length : h ? fa.error(a) : z(a, i).slice(0);
      });
    function qa(a) {
      for (var b = 0, c = a.length, d = ""; c > b; b++) d += a[b].value;
      return d;
    }
    function ra(a, b, c) {
      var d = b.dir,
        e = c && "parentNode" === d,
        f = x++;
      return b.first
        ? function (b, c, f) {
            while ((b = b[d])) if (1 === b.nodeType || e) return a(b, c, f);
          }
        : function (b, c, g) {
            var h,
              i,
              j,
              k = [w, f];
            if (g) {
              while ((b = b[d]))
                if ((1 === b.nodeType || e) && a(b, c, g)) return !0;
            } else
              while ((b = b[d]))
                if (1 === b.nodeType || e) {
                  if (
                    ((j = b[u] || (b[u] = {})),
                    (i = j[b.uniqueID] || (j[b.uniqueID] = {})),
                    (h = i[d]) && h[0] === w && h[1] === f)
                  )
                    return (k[2] = h[2]);
                  if (((i[d] = k), (k[2] = a(b, c, g)))) return !0;
                }
          };
    }
    function sa(a) {
      return a.length > 1
        ? function (b, c, d) {
            var e = a.length;
            while (e--) if (!a[e](b, c, d)) return !1;
            return !0;
          }
        : a[0];
    }
    function ta(a, b, c) {
      for (var d = 0, e = b.length; e > d; d++) fa(a, b[d], c);
      return c;
    }
    function ua(a, b, c, d, e) {
      for (var f, g = [], h = 0, i = a.length, j = null != b; i > h; h++)
        (f = a[h]) && ((c && !c(f, d, e)) || (g.push(f), j && b.push(h)));
      return g;
    }
    function va(a, b, c, d, e, f) {
      return (
        d && !d[u] && (d = va(d)),
        e && !e[u] && (e = va(e, f)),
        ha(function (f, g, h, i) {
          var j,
            k,
            l,
            m = [],
            n = [],
            o = g.length,
            p = f || ta(b || "*", h.nodeType ? [h] : h, []),
            q = !a || (!f && b) ? p : ua(p, m, a, h, i),
            r = c ? (e || (f ? a : o || d) ? [] : g) : q;
          if ((c && c(q, r, h, i), d)) {
            (j = ua(r, n)), d(j, [], h, i), (k = j.length);
            while (k--) (l = j[k]) && (r[n[k]] = !(q[n[k]] = l));
          }
          if (f) {
            if (e || a) {
              if (e) {
                (j = []), (k = r.length);
                while (k--) (l = r[k]) && j.push((q[k] = l));
                e(null, (r = []), j, i);
              }
              k = r.length;
              while (k--)
                (l = r[k]) &&
                  (j = e ? J(f, l) : m[k]) > -1 &&
                  (f[j] = !(g[j] = l));
            }
          } else (r = ua(r === g ? r.splice(o, r.length) : r)), e ? e(null, g, r, i) : H.apply(g, r);
        })
      );
    }
    function wa(a) {
      for (
        var b,
          c,
          e,
          f = a.length,
          g = d.relative[a[0].type],
          h = g || d.relative[" "],
          i = g ? 1 : 0,
          k = ra(
            function (a) {
              return a === b;
            },
            h,
            !0
          ),
          l = ra(
            function (a) {
              return J(b, a) > -1;
            },
            h,
            !0
          ),
          m = [
            function (a, c, d) {
              var e =
                (!g && (d || c !== j)) ||
                ((b = c).nodeType ? k(a, c, d) : l(a, c, d));
              return (b = null), e;
            },
          ];
        f > i;
        i++
      )
        if ((c = d.relative[a[i].type])) m = [ra(sa(m), c)];
        else {
          if (((c = d.filter[a[i].type].apply(null, a[i].matches)), c[u])) {
            for (e = ++i; f > e; e++) if (d.relative[a[e].type]) break;
            return va(
              i > 1 && sa(m),
              i > 1 &&
                qa(
                  a
                    .slice(0, i - 1)
                    .concat({ value: " " === a[i - 2].type ? "*" : "" })
                ).replace(Q, "$1"),
              c,
              e > i && wa(a.slice(i, e)),
              f > e && wa((a = a.slice(e))),
              f > e && qa(a)
            );
          }
          m.push(c);
        }
      return sa(m);
    }
    function xa(a, b) {
      var c = b.length > 0,
        e = a.length > 0,
        f = function (f, g, h, i, k) {
          var l,
            o,
            q,
            r = 0,
            s = "0",
            t = f && [],
            u = [],
            v = j,
            x = f || (e && d.find.TAG("*", k)),
            y = (w += null == v ? 1 : Math.random() || 0.1),
            z = x.length;
          for (
            k && (j = g === n || g || k);
            s !== z && null != (l = x[s]);
            s++
          ) {
            if (e && l) {
              (o = 0), g || l.ownerDocument === n || (m(l), (h = !p));
              while ((q = a[o++]))
                if (q(l, g || n, h)) {
                  i.push(l);
                  break;
                }
              k && (w = y);
            }
            c && ((l = !q && l) && r--, f && t.push(l));
          }
          if (((r += s), c && s !== r)) {
            o = 0;
            while ((q = b[o++])) q(t, u, g, h);
            if (f) {
              if (r > 0) while (s--) t[s] || u[s] || (u[s] = F.call(i));
              u = ua(u);
            }
            H.apply(i, u),
              k && !f && u.length > 0 && r + b.length > 1 && fa.uniqueSort(i);
          }
          return k && ((w = y), (j = v)), t;
        };
      return c ? ha(f) : f;
    }
    return (
      (h = fa.compile = function (a, b) {
        var c,
          d = [],
          e = [],
          f = A[a + " "];
        if (!f) {
          b || (b = g(a)), (c = b.length);
          while (c--) (f = wa(b[c])), f[u] ? d.push(f) : e.push(f);
          (f = A(a, xa(e, d))), (f.selector = a);
        }
        return f;
      }),
      (i = fa.select = function (a, b, e, f) {
        var i,
          j,
          k,
          l,
          m,
          n = "function" == typeof a && a,
          o = !f && g((a = n.selector || a));
        if (((e = e || []), 1 === o.length)) {
          if (
            ((j = o[0] = o[0].slice(0)),
            j.length > 2 &&
              "ID" === (k = j[0]).type &&
              c.getById &&
              9 === b.nodeType &&
              p &&
              d.relative[j[1].type])
          ) {
            if (
              ((b = (d.find.ID(k.matches[0].replace(ba, ca), b) || [])[0]), !b)
            )
              return e;
            n && (b = b.parentNode), (a = a.slice(j.shift().value.length));
          }
          i = W.needsContext.test(a) ? 0 : j.length;
          while (i--) {
            if (((k = j[i]), d.relative[(l = k.type)])) break;
            if (
              (m = d.find[l]) &&
              (f = m(
                k.matches[0].replace(ba, ca),
                (_.test(j[0].type) && oa(b.parentNode)) || b
              ))
            ) {
              if ((j.splice(i, 1), (a = f.length && qa(j)), !a))
                return H.apply(e, f), e;
              break;
            }
          }
        }
        return (
          (n || h(a, o))(
            f,
            b,
            !p,
            e,
            !b || (_.test(a) && oa(b.parentNode)) || b
          ),
          e
        );
      }),
      (c.sortStable = u.split("").sort(B).join("") === u),
      (c.detectDuplicates = !!l),
      m(),
      (c.sortDetached = ia(function (a) {
        return 1 & a.compareDocumentPosition(n.createElement("div"));
      })),
      ia(function (a) {
        return (
          (a.innerHTML = "<a href='#'></a>"),
          "#" === a.firstChild.getAttribute("href")
        );
      }) ||
        ja("type|href|height|width", function (a, b, c) {
          return c
            ? void 0
            : a.getAttribute(b, "type" === b.toLowerCase() ? 1 : 2);
        }),
      (c.attributes &&
        ia(function (a) {
          return (
            (a.innerHTML = "<input/>"),
            a.firstChild.setAttribute("value", ""),
            "" === a.firstChild.getAttribute("value")
          );
        })) ||
        ja("value", function (a, b, c) {
          return c || "input" !== a.nodeName.toLowerCase()
            ? void 0
            : a.defaultValue;
        }),
      ia(function (a) {
        return null == a.getAttribute("disabled");
      }) ||
        ja(K, function (a, b, c) {
          var d;
          return c
            ? void 0
            : a[b] === !0
            ? b.toLowerCase()
            : (d = a.getAttributeNode(b)) && d.specified
            ? d.value
            : null;
        }),
      fa
    );
  })(a);
  (n.find = t),
    (n.expr = t.selectors),
    (n.expr[":"] = n.expr.pseudos),
    (n.uniqueSort = n.unique = t.uniqueSort),
    (n.text = t.getText),
    (n.isXMLDoc = t.isXML),
    (n.contains = t.contains);
  var u = function (a, b, c) {
      var d = [],
        e = void 0 !== c;
      while ((a = a[b]) && 9 !== a.nodeType)
        if (1 === a.nodeType) {
          if (e && n(a).is(c)) break;
          d.push(a);
        }
      return d;
    },
    v = function (a, b) {
      for (var c = []; a; a = a.nextSibling)
        1 === a.nodeType && a !== b && c.push(a);
      return c;
    },
    w = n.expr.match.needsContext,
    x = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,
    y = /^.[^:#\[\.,]*$/;
  function z(a, b, c) {
    if (n.isFunction(b))
      return n.grep(a, function (a, d) {
        return !!b.call(a, d, a) !== c;
      });
    if (b.nodeType)
      return n.grep(a, function (a) {
        return (a === b) !== c;
      });
    if ("string" == typeof b) {
      if (y.test(b)) return n.filter(b, a, c);
      b = n.filter(b, a);
    }
    return n.grep(a, function (a) {
      return n.inArray(a, b) > -1 !== c;
    });
  }
  (n.filter = function (a, b, c) {
    var d = b[0];
    return (
      c && (a = ":not(" + a + ")"),
      1 === b.length && 1 === d.nodeType
        ? n.find.matchesSelector(d, a)
          ? [d]
          : []
        : n.find.matches(
            a,
            n.grep(b, function (a) {
              return 1 === a.nodeType;
            })
          )
    );
  }),
    n.fn.extend({
      find: function (a) {
        var b,
          c = [],
          d = this,
          e = d.length;
        if ("string" != typeof a)
          return this.pushStack(
            n(a).filter(function () {
              for (b = 0; e > b; b++) if (n.contains(d[b], this)) return !0;
            })
          );
        for (b = 0; e > b; b++) n.find(a, d[b], c);
        return (
          (c = this.pushStack(e > 1 ? n.unique(c) : c)),
          (c.selector = this.selector ? this.selector + " " + a : a),
          c
        );
      },
      filter: function (a) {
        return this.pushStack(z(this, a || [], !1));
      },
      not: function (a) {
        return this.pushStack(z(this, a || [], !0));
      },
      is: function (a) {
        return !!z(this, "string" == typeof a && w.test(a) ? n(a) : a || [], !1)
          .length;
      },
    });
  var A,
    B = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
    C = (n.fn.init = function (a, b, c) {
      var e, f;
      if (!a) return this;
      if (((c = c || A), "string" == typeof a)) {
        if (
          ((e =
            "<" === a.charAt(0) &&
            ">" === a.charAt(a.length - 1) &&
            a.length >= 3
              ? [null, a, null]
              : B.exec(a)),
          !e || (!e[1] && b))
        )
          return !b || b.jquery
            ? (b || c).find(a)
            : this.constructor(b).find(a);
        if (e[1]) {
          if (
            ((b = b instanceof n ? b[0] : b),
            n.merge(
              this,
              n.parseHTML(e[1], b && b.nodeType ? b.ownerDocument || b : d, !0)
            ),
            x.test(e[1]) && n.isPlainObject(b))
          )
            for (e in b)
              n.isFunction(this[e]) ? this[e](b[e]) : this.attr(e, b[e]);
          return this;
        }
        if (((f = d.getElementById(e[2])), f && f.parentNode)) {
          if (f.id !== e[2]) return A.find(a);
          (this.length = 1), (this[0] = f);
        }
        return (this.context = d), (this.selector = a), this;
      }
      return a.nodeType
        ? ((this.context = this[0] = a), (this.length = 1), this)
        : n.isFunction(a)
        ? "undefined" != typeof c.ready
          ? c.ready(a)
          : a(n)
        : (void 0 !== a.selector &&
            ((this.selector = a.selector), (this.context = a.context)),
          n.makeArray(a, this));
    });
  (C.prototype = n.fn), (A = n(d));
  var D = /^(?:parents|prev(?:Until|All))/,
    E = { children: !0, contents: !0, next: !0, prev: !0 };
  n.fn.extend({
    has: function (a) {
      var b,
        c = n(a, this),
        d = c.length;
      return this.filter(function () {
        for (b = 0; d > b; b++) if (n.contains(this, c[b])) return !0;
      });
    },
    closest: function (a, b) {
      for (
        var c,
          d = 0,
          e = this.length,
          f = [],
          g = w.test(a) || "string" != typeof a ? n(a, b || this.context) : 0;
        e > d;
        d++
      )
        for (c = this[d]; c && c !== b; c = c.parentNode)
          if (
            c.nodeType < 11 &&
            (g
              ? g.index(c) > -1
              : 1 === c.nodeType && n.find.matchesSelector(c, a))
          ) {
            f.push(c);
            break;
          }
      return this.pushStack(f.length > 1 ? n.uniqueSort(f) : f);
    },
    index: function (a) {
      return a
        ? "string" == typeof a
          ? n.inArray(this[0], n(a))
          : n.inArray(a.jquery ? a[0] : a, this)
        : this[0] && this[0].parentNode
        ? this.first().prevAll().length
        : -1;
    },
    add: function (a, b) {
      return this.pushStack(n.uniqueSort(n.merge(this.get(), n(a, b))));
    },
    addBack: function (a) {
      return this.add(null == a ? this.prevObject : this.prevObject.filter(a));
    },
  });
  function F(a, b) {
    do a = a[b];
    while (a && 1 !== a.nodeType);
    return a;
  }
  n.each(
    {
      parent: function (a) {
        var b = a.parentNode;
        return b && 11 !== b.nodeType ? b : null;
      },
      parents: function (a) {
        return u(a, "parentNode");
      },
      parentsUntil: function (a, b, c) {
        return u(a, "parentNode", c);
      },
      next: function (a) {
        return F(a, "nextSibling");
      },
      prev: function (a) {
        return F(a, "previousSibling");
      },
      nextAll: function (a) {
        return u(a, "nextSibling");
      },
      prevAll: function (a) {
        return u(a, "previousSibling");
      },
      nextUntil: function (a, b, c) {
        return u(a, "nextSibling", c);
      },
      prevUntil: function (a, b, c) {
        return u(a, "previousSibling", c);
      },
      siblings: function (a) {
        return v((a.parentNode || {}).firstChild, a);
      },
      children: function (a) {
        return v(a.firstChild);
      },
      contents: function (a) {
        return n.nodeName(a, "iframe")
          ? a.contentDocument || a.contentWindow.document
          : n.merge([], a.childNodes);
      },
    },
    function (a, b) {
      n.fn[a] = function (c, d) {
        var e = n.map(this, b, c);
        return (
          "Until" !== a.slice(-5) && (d = c),
          d && "string" == typeof d && (e = n.filter(d, e)),
          this.length > 1 &&
            (E[a] || (e = n.uniqueSort(e)), D.test(a) && (e = e.reverse())),
          this.pushStack(e)
        );
      };
    }
  );
  var G = /\S+/g;
  function H(a) {
    var b = {};
    return (
      n.each(a.match(G) || [], function (a, c) {
        b[c] = !0;
      }),
      b
    );
  }
  (n.Callbacks = function (a) {
    a = "string" == typeof a ? H(a) : n.extend({}, a);
    var b,
      c,
      d,
      e,
      f = [],
      g = [],
      h = -1,
      i = function () {
        for (e = a.once, d = b = !0; g.length; h = -1) {
          c = g.shift();
          while (++h < f.length)
            f[h].apply(c[0], c[1]) === !1 &&
              a.stopOnFalse &&
              ((h = f.length), (c = !1));
        }
        a.memory || (c = !1), (b = !1), e && (f = c ? [] : "");
      },
      j = {
        add: function () {
          return (
            f &&
              (c && !b && ((h = f.length - 1), g.push(c)),
              (function d(b) {
                n.each(b, function (b, c) {
                  n.isFunction(c)
                    ? (a.unique && j.has(c)) || f.push(c)
                    : c && c.length && "string" !== n.type(c) && d(c);
                });
              })(arguments),
              c && !b && i()),
            this
          );
        },
        remove: function () {
          return (
            n.each(arguments, function (a, b) {
              var c;
              while ((c = n.inArray(b, f, c)) > -1)
                f.splice(c, 1), h >= c && h--;
            }),
            this
          );
        },
        has: function (a) {
          return a ? n.inArray(a, f) > -1 : f.length > 0;
        },
        empty: function () {
          return f && (f = []), this;
        },
        disable: function () {
          return (e = g = []), (f = c = ""), this;
        },
        disabled: function () {
          return !f;
        },
        lock: function () {
          return (e = !0), c || j.disable(), this;
        },
        locked: function () {
          return !!e;
        },
        fireWith: function (a, c) {
          return (
            e ||
              ((c = c || []),
              (c = [a, c.slice ? c.slice() : c]),
              g.push(c),
              b || i()),
            this
          );
        },
        fire: function () {
          return j.fireWith(this, arguments), this;
        },
        fired: function () {
          return !!d;
        },
      };
    return j;
  }),
    n.extend({
      Deferred: function (a) {
        var b = [
            ["resolve", "done", n.Callbacks("once memory"), "resolved"],
            ["reject", "fail", n.Callbacks("once memory"), "rejected"],
            ["notify", "progress", n.Callbacks("memory")],
          ],
          c = "pending",
          d = {
            state: function () {
              return c;
            },
            always: function () {
              return e.done(arguments).fail(arguments), this;
            },
            then: function () {
              var a = arguments;
              return n
                .Deferred(function (c) {
                  n.each(b, function (b, f) {
                    var g = n.isFunction(a[b]) && a[b];
                    e[f[1]](function () {
                      var a = g && g.apply(this, arguments);
                      a && n.isFunction(a.promise)
                        ? a
                            .promise()
                            .progress(c.notify)
                            .done(c.resolve)
                            .fail(c.reject)
                        : c[f[0] + "With"](
                            this === d ? c.promise() : this,
                            g ? [a] : arguments
                          );
                    });
                  }),
                    (a = null);
                })
                .promise();
            },
            promise: function (a) {
              return null != a ? n.extend(a, d) : d;
            },
          },
          e = {};
        return (
          (d.pipe = d.then),
          n.each(b, function (a, f) {
            var g = f[2],
              h = f[3];
            (d[f[1]] = g.add),
              h &&
                g.add(
                  function () {
                    c = h;
                  },
                  b[1 ^ a][2].disable,
                  b[2][2].lock
                ),
              (e[f[0]] = function () {
                return e[f[0] + "With"](this === e ? d : this, arguments), this;
              }),
              (e[f[0] + "With"] = g.fireWith);
          }),
          d.promise(e),
          a && a.call(e, e),
          e
        );
      },
      when: function (a) {
        var b = 0,
          c = e.call(arguments),
          d = c.length,
          f = 1 !== d || (a && n.isFunction(a.promise)) ? d : 0,
          g = 1 === f ? a : n.Deferred(),
          h = function (a, b, c) {
            return function (d) {
              (b[a] = this),
                (c[a] = arguments.length > 1 ? e.call(arguments) : d),
                c === i ? g.notifyWith(b, c) : --f || g.resolveWith(b, c);
            };
          },
          i,
          j,
          k;
        if (d > 1)
          for (i = new Array(d), j = new Array(d), k = new Array(d); d > b; b++)
            c[b] && n.isFunction(c[b].promise)
              ? c[b]
                  .promise()
                  .progress(h(b, j, i))
                  .done(h(b, k, c))
                  .fail(g.reject)
              : --f;
        return f || g.resolveWith(k, c), g.promise();
      },
    });
  var I;
  (n.fn.ready = function (a) {
    return n.ready.promise().done(a), this;
  }),
    n.extend({
      isReady: !1,
      readyWait: 1,
      holdReady: function (a) {
        a ? n.readyWait++ : n.ready(!0);
      },
      ready: function (a) {
        (a === !0 ? --n.readyWait : n.isReady) ||
          ((n.isReady = !0),
          (a !== !0 && --n.readyWait > 0) ||
            (I.resolveWith(d, [n]),
            n.fn.triggerHandler &&
              (n(d).triggerHandler("ready"), n(d).off("ready"))));
      },
    });
  function J() {
    d.addEventListener
      ? (d.removeEventListener("DOMContentLoaded", K),
        a.removeEventListener("load", K))
      : (d.detachEvent("onreadystatechange", K), a.detachEvent("onload", K));
  }
  function K() {
    (d.addEventListener ||
      "load" === a.event.type ||
      "complete" === d.readyState) &&
      (J(), n.ready());
  }
  (n.ready.promise = function (b) {
    if (!I)
      if (
        ((I = n.Deferred()),
        "complete" === d.readyState ||
          ("loading" !== d.readyState && !d.documentElement.doScroll))
      )
        a.setTimeout(n.ready);
      else if (d.addEventListener)
        d.addEventListener("DOMContentLoaded", K),
          a.addEventListener("load", K);
      else {
        d.attachEvent("onreadystatechange", K), a.attachEvent("onload", K);
        var c = !1;
        try {
          c = null == a.frameElement && d.documentElement;
        } catch (e) {}
        c &&
          c.doScroll &&
          !(function f() {
            if (!n.isReady) {
              try {
                c.doScroll("left");
              } catch (b) {
                return a.setTimeout(f, 50);
              }
              J(), n.ready();
            }
          })();
      }
    return I.promise(b);
  }),
    n.ready.promise();
  var L;
  for (L in n(l)) break;
  (l.ownFirst = "0" === L),
    (l.inlineBlockNeedsLayout = !1),
    n(function () {
      var a, b, c, e;
      (c = d.getElementsByTagName("body")[0]),
        c &&
          c.style &&
          ((b = d.createElement("div")),
          (e = d.createElement("div")),
          (e.style.cssText =
            "position:absolute;border:0;width:0;height:0;top:0;left:-9999px"),
          c.appendChild(e).appendChild(b),
          "undefined" != typeof b.style.zoom &&
            ((b.style.cssText =
              "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1"),
            (l.inlineBlockNeedsLayout = a = 3 === b.offsetWidth),
            a && (c.style.zoom = 1)),
          c.removeChild(e));
    }),
    (function () {
      var a = d.createElement("div");
      l.deleteExpando = !0;
      try {
        delete a.test;
      } catch (b) {
        l.deleteExpando = !1;
      }
      a = null;
    })();
  var M = function (a) {
      var b = n.noData[(a.nodeName + " ").toLowerCase()],
        c = +a.nodeType || 1;
      return 1 !== c && 9 !== c
        ? !1
        : !b || (b !== !0 && a.getAttribute("classid") === b);
    },
    N = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
    O = /([A-Z])/g;
  function P(a, b, c) {
    if (void 0 === c && 1 === a.nodeType) {
      var d = "data-" + b.replace(O, "-$1").toLowerCase();
      if (((c = a.getAttribute(d)), "string" == typeof c)) {
        try {
          c =
            "true" === c
              ? !0
              : "false" === c
              ? !1
              : "null" === c
              ? null
              : +c + "" === c
              ? +c
              : N.test(c)
              ? n.parseJSON(c)
              : c;
        } catch (e) {}
        n.data(a, b, c);
      } else c = void 0;
    }
    return c;
  }
  function Q(a) {
    var b;
    for (b in a)
      if (("data" !== b || !n.isEmptyObject(a[b])) && "toJSON" !== b) return !1;
    return !0;
  }
  function R(a, b, d, e) {
    if (M(a)) {
      var f,
        g,
        h = n.expando,
        i = a.nodeType,
        j = i ? n.cache : a,
        k = i ? a[h] : a[h] && h;
      if (
        (k && j[k] && (e || j[k].data)) ||
        void 0 !== d ||
        "string" != typeof b
      )
        return (
          k || (k = i ? (a[h] = c.pop() || n.guid++) : h),
          j[k] || (j[k] = i ? {} : { toJSON: n.noop }),
          ("object" != typeof b && "function" != typeof b) ||
            (e
              ? (j[k] = n.extend(j[k], b))
              : (j[k].data = n.extend(j[k].data, b))),
          (g = j[k]),
          e || (g.data || (g.data = {}), (g = g.data)),
          void 0 !== d && (g[n.camelCase(b)] = d),
          "string" == typeof b
            ? ((f = g[b]), null == f && (f = g[n.camelCase(b)]))
            : (f = g),
          f
        );
    }
  }
  function S(a, b, c) {
    if (M(a)) {
      var d,
        e,
        f = a.nodeType,
        g = f ? n.cache : a,
        h = f ? a[n.expando] : n.expando;
      if (g[h]) {
        if (b && (d = c ? g[h] : g[h].data)) {
          n.isArray(b)
            ? (b = b.concat(n.map(b, n.camelCase)))
            : b in d
            ? (b = [b])
            : ((b = n.camelCase(b)), (b = b in d ? [b] : b.split(" "))),
            (e = b.length);
          while (e--) delete d[b[e]];
          if (c ? !Q(d) : !n.isEmptyObject(d)) return;
        }
        (c || (delete g[h].data, Q(g[h]))) &&
          (f
            ? n.cleanData([a], !0)
            : l.deleteExpando || g != g.window
            ? delete g[h]
            : (g[h] = void 0));
      }
    }
  }
  n.extend({
    cache: {},
    noData: {
      "applet ": !0,
      "embed ": !0,
      "object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
    },
    hasData: function (a) {
      return (
        (a = a.nodeType ? n.cache[a[n.expando]] : a[n.expando]), !!a && !Q(a)
      );
    },
    data: function (a, b, c) {
      return R(a, b, c);
    },
    removeData: function (a, b) {
      return S(a, b);
    },
    _data: function (a, b, c) {
      return R(a, b, c, !0);
    },
    _removeData: function (a, b) {
      return S(a, b, !0);
    },
  }),
    n.fn.extend({
      data: function (a, b) {
        var c,
          d,
          e,
          f = this[0],
          g = f && f.attributes;
        if (void 0 === a) {
          if (
            this.length &&
            ((e = n.data(f)), 1 === f.nodeType && !n._data(f, "parsedAttrs"))
          ) {
            c = g.length;
            while (c--)
              g[c] &&
                ((d = g[c].name),
                0 === d.indexOf("data-") &&
                  ((d = n.camelCase(d.slice(5))), P(f, d, e[d])));
            n._data(f, "parsedAttrs", !0);
          }
          return e;
        }
        return "object" == typeof a
          ? this.each(function () {
              n.data(this, a);
            })
          : arguments.length > 1
          ? this.each(function () {
              n.data(this, a, b);
            })
          : f
          ? P(f, a, n.data(f, a))
          : void 0;
      },
      removeData: function (a) {
        return this.each(function () {
          n.removeData(this, a);
        });
      },
    }),
    n.extend({
      queue: function (a, b, c) {
        var d;
        return a
          ? ((b = (b || "fx") + "queue"),
            (d = n._data(a, b)),
            c &&
              (!d || n.isArray(c)
                ? (d = n._data(a, b, n.makeArray(c)))
                : d.push(c)),
            d || [])
          : void 0;
      },
      dequeue: function (a, b) {
        b = b || "fx";
        var c = n.queue(a, b),
          d = c.length,
          e = c.shift(),
          f = n._queueHooks(a, b),
          g = function () {
            n.dequeue(a, b);
          };
        "inprogress" === e && ((e = c.shift()), d--),
          e &&
            ("fx" === b && c.unshift("inprogress"),
            delete f.stop,
            e.call(a, g, f)),
          !d && f && f.empty.fire();
      },
      _queueHooks: function (a, b) {
        var c = b + "queueHooks";
        return (
          n._data(a, c) ||
          n._data(a, c, {
            empty: n.Callbacks("once memory").add(function () {
              n._removeData(a, b + "queue"), n._removeData(a, c);
            }),
          })
        );
      },
    }),
    n.fn.extend({
      queue: function (a, b) {
        var c = 2;
        return (
          "string" != typeof a && ((b = a), (a = "fx"), c--),
          arguments.length < c
            ? n.queue(this[0], a)
            : void 0 === b
            ? this
            : this.each(function () {
                var c = n.queue(this, a, b);
                n._queueHooks(this, a),
                  "fx" === a && "inprogress" !== c[0] && n.dequeue(this, a);
              })
        );
      },
      dequeue: function (a) {
        return this.each(function () {
          n.dequeue(this, a);
        });
      },
      clearQueue: function (a) {
        return this.queue(a || "fx", []);
      },
      promise: function (a, b) {
        var c,
          d = 1,
          e = n.Deferred(),
          f = this,
          g = this.length,
          h = function () {
            --d || e.resolveWith(f, [f]);
          };
        "string" != typeof a && ((b = a), (a = void 0)), (a = a || "fx");
        while (g--)
          (c = n._data(f[g], a + "queueHooks")),
            c && c.empty && (d++, c.empty.add(h));
        return h(), e.promise(b);
      },
    }),
    (function () {
      var a;
      l.shrinkWrapBlocks = function () {
        if (null != a) return a;
        a = !1;
        var b, c, e;
        return (
          (c = d.getElementsByTagName("body")[0]),
          c && c.style
            ? ((b = d.createElement("div")),
              (e = d.createElement("div")),
              (e.style.cssText =
                "position:absolute;border:0;width:0;height:0;top:0;left:-9999px"),
              c.appendChild(e).appendChild(b),
              "undefined" != typeof b.style.zoom &&
                ((b.style.cssText =
                  "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1"),
                (b.appendChild(d.createElement("div")).style.width = "5px"),
                (a = 3 !== b.offsetWidth)),
              c.removeChild(e),
              a)
            : void 0
        );
      };
    })();
  var T = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
    U = new RegExp("^(?:([+-])=|)(" + T + ")([a-z%]*)$", "i"),
    V = ["Top", "Right", "Bottom", "Left"],
    W = function (a, b) {
      return (
        (a = b || a),
        "none" === n.css(a, "display") || !n.contains(a.ownerDocument, a)
      );
    };
  function X(a, b, c, d) {
    var e,
      f = 1,
      g = 20,
      h = d
        ? function () {
            return d.cur();
          }
        : function () {
            return n.css(a, b, "");
          },
      i = h(),
      j = (c && c[3]) || (n.cssNumber[b] ? "" : "px"),
      k = (n.cssNumber[b] || ("px" !== j && +i)) && U.exec(n.css(a, b));
    if (k && k[3] !== j) {
      (j = j || k[3]), (c = c || []), (k = +i || 1);
      do (f = f || ".5"), (k /= f), n.style(a, b, k + j);
      while (f !== (f = h() / i) && 1 !== f && --g);
    }
    return (
      c &&
        ((k = +k || +i || 0),
        (e = c[1] ? k + (c[1] + 1) * c[2] : +c[2]),
        d && ((d.unit = j), (d.start = k), (d.end = e))),
      e
    );
  }
  var Y = function (a, b, c, d, e, f, g) {
      var h = 0,
        i = a.length,
        j = null == c;
      if ("object" === n.type(c)) {
        e = !0;
        for (h in c) Y(a, b, h, c[h], !0, f, g);
      } else if (
        void 0 !== d &&
        ((e = !0),
        n.isFunction(d) || (g = !0),
        j &&
          (g
            ? (b.call(a, d), (b = null))
            : ((j = b),
              (b = function (a, b, c) {
                return j.call(n(a), c);
              }))),
        b)
      )
        for (; i > h; h++) b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));
      return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;
    },
    Z = /^(?:checkbox|radio)$/i,
    $ = /<([\w:-]+)/,
    _ = /^$|\/(?:java|ecma)script/i,
    aa = /^\s+/,
    ba =
      "abbr|article|aside|audio|bdi|canvas|data|datalist|details|dialog|figcaption|figure|footer|header|hgroup|main|mark|meter|nav|output|picture|progress|section|summary|template|time|video";
  function ca(a) {
    var b = ba.split("|"),
      c = a.createDocumentFragment();
    if (c.createElement) while (b.length) c.createElement(b.pop());
    return c;
  }
  !(function () {
    var a = d.createElement("div"),
      b = d.createDocumentFragment(),
      c = d.createElement("input");
    (a.innerHTML =
      "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>"),
      (l.leadingWhitespace = 3 === a.firstChild.nodeType),
      (l.tbody = !a.getElementsByTagName("tbody").length),
      (l.htmlSerialize = !!a.getElementsByTagName("link").length),
      (l.html5Clone =
        "<:nav></:nav>" !== d.createElement("nav").cloneNode(!0).outerHTML),
      (c.type = "checkbox"),
      (c.checked = !0),
      b.appendChild(c),
      (l.appendChecked = c.checked),
      (a.innerHTML = "<textarea>x</textarea>"),
      (l.noCloneChecked = !!a.cloneNode(!0).lastChild.defaultValue),
      b.appendChild(a),
      (c = d.createElement("input")),
      c.setAttribute("type", "radio"),
      c.setAttribute("checked", "checked"),
      c.setAttribute("name", "t"),
      a.appendChild(c),
      (l.checkClone = a.cloneNode(!0).cloneNode(!0).lastChild.checked),
      (l.noCloneEvent = !!a.addEventListener),
      (a[n.expando] = 1),
      (l.attributes = !a.getAttribute(n.expando));
  })();
  var da = {
    option: [1, "<select multiple='multiple'>", "</select>"],
    legend: [1, "<fieldset>", "</fieldset>"],
    area: [1, "<map>", "</map>"],
    param: [1, "<object>", "</object>"],
    thead: [1, "<table>", "</table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    _default: l.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"],
  };
  (da.optgroup = da.option),
    (da.tbody = da.tfoot = da.colgroup = da.caption = da.thead),
    (da.th = da.td);
  function ea(a, b) {
    var c,
      d,
      e = 0,
      f =
        "undefined" != typeof a.getElementsByTagName
          ? a.getElementsByTagName(b || "*")
          : "undefined" != typeof a.querySelectorAll
          ? a.querySelectorAll(b || "*")
          : void 0;
    if (!f)
      for (f = [], c = a.childNodes || a; null != (d = c[e]); e++)
        !b || n.nodeName(d, b) ? f.push(d) : n.merge(f, ea(d, b));
    return void 0 === b || (b && n.nodeName(a, b)) ? n.merge([a], f) : f;
  }
  function fa(a, b) {
    for (var c, d = 0; null != (c = a[d]); d++)
      n._data(c, "globalEval", !b || n._data(b[d], "globalEval"));
  }
  var ga = /<|&#?\w+;/,
    ha = /<tbody/i;
  function ia(a) {
    Z.test(a.type) && (a.defaultChecked = a.checked);
  }
  function ja(a, b, c, d, e) {
    for (
      var f, g, h, i, j, k, m, o = a.length, p = ca(b), q = [], r = 0;
      o > r;
      r++
    )
      if (((g = a[r]), g || 0 === g))
        if ("object" === n.type(g)) n.merge(q, g.nodeType ? [g] : g);
        else if (ga.test(g)) {
          (i = i || p.appendChild(b.createElement("div"))),
            (j = ($.exec(g) || ["", ""])[1].toLowerCase()),
            (m = da[j] || da._default),
            (i.innerHTML = m[1] + n.htmlPrefilter(g) + m[2]),
            (f = m[0]);
          while (f--) i = i.lastChild;
          if (
            (!l.leadingWhitespace &&
              aa.test(g) &&
              q.push(b.createTextNode(aa.exec(g)[0])),
            !l.tbody)
          ) {
            (g =
              "table" !== j || ha.test(g)
                ? "<table>" !== m[1] || ha.test(g)
                  ? 0
                  : i
                : i.firstChild),
              (f = g && g.childNodes.length);
            while (f--)
              n.nodeName((k = g.childNodes[f]), "tbody") &&
                !k.childNodes.length &&
                g.removeChild(k);
          }
          n.merge(q, i.childNodes), (i.textContent = "");
          while (i.firstChild) i.removeChild(i.firstChild);
          i = p.lastChild;
        } else q.push(b.createTextNode(g));
    i && p.removeChild(i),
      l.appendChecked || n.grep(ea(q, "input"), ia),
      (r = 0);
    while ((g = q[r++]))
      if (d && n.inArray(g, d) > -1) e && e.push(g);
      else if (
        ((h = n.contains(g.ownerDocument, g)),
        (i = ea(p.appendChild(g), "script")),
        h && fa(i),
        c)
      ) {
        f = 0;
        while ((g = i[f++])) _.test(g.type || "") && c.push(g);
      }
    return (i = null), p;
  }
  !(function () {
    var b,
      c,
      e = d.createElement("div");
    for (b in { submit: !0, change: !0, focusin: !0 })
      (c = "on" + b),
        (l[b] = c in a) ||
          (e.setAttribute(c, "t"), (l[b] = e.attributes[c].expando === !1));
    e = null;
  })();
  var ka = /^(?:input|select|textarea)$/i,
    la = /^key/,
    ma = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
    na = /^(?:focusinfocus|focusoutblur)$/,
    oa = /^([^.]*)(?:\.(.+)|)/;
  function pa() {
    return !0;
  }
  function qa() {
    return !1;
  }
  function ra() {
    try {
      return d.activeElement;
    } catch (a) {}
  }
  function sa(a, b, c, d, e, f) {
    var g, h;
    if ("object" == typeof b) {
      "string" != typeof c && ((d = d || c), (c = void 0));
      for (h in b) sa(a, h, c, d, b[h], f);
      return a;
    }
    if (
      (null == d && null == e
        ? ((e = c), (d = c = void 0))
        : null == e &&
          ("string" == typeof c
            ? ((e = d), (d = void 0))
            : ((e = d), (d = c), (c = void 0))),
      e === !1)
    )
      e = qa;
    else if (!e) return a;
    return (
      1 === f &&
        ((g = e),
        (e = function (a) {
          return n().off(a), g.apply(this, arguments);
        }),
        (e.guid = g.guid || (g.guid = n.guid++))),
      a.each(function () {
        n.event.add(this, b, e, d, c);
      })
    );
  }
  (n.event = {
    global: {},
    add: function (a, b, c, d, e) {
      var f,
        g,
        h,
        i,
        j,
        k,
        l,
        m,
        o,
        p,
        q,
        r = n._data(a);
      if (r) {
        c.handler && ((i = c), (c = i.handler), (e = i.selector)),
          c.guid || (c.guid = n.guid++),
          (g = r.events) || (g = r.events = {}),
          (k = r.handle) ||
            ((k = r.handle = function (a) {
              return "undefined" == typeof n ||
                (a && n.event.triggered === a.type)
                ? void 0
                : n.event.dispatch.apply(k.elem, arguments);
            }),
            (k.elem = a)),
          (b = (b || "").match(G) || [""]),
          (h = b.length);
        while (h--)
          (f = oa.exec(b[h]) || []),
            (o = q = f[1]),
            (p = (f[2] || "").split(".").sort()),
            o &&
              ((j = n.event.special[o] || {}),
              (o = (e ? j.delegateType : j.bindType) || o),
              (j = n.event.special[o] || {}),
              (l = n.extend(
                {
                  type: o,
                  origType: q,
                  data: d,
                  handler: c,
                  guid: c.guid,
                  selector: e,
                  needsContext: e && n.expr.match.needsContext.test(e),
                  namespace: p.join("."),
                },
                i
              )),
              (m = g[o]) ||
                ((m = g[o] = []),
                (m.delegateCount = 0),
                (j.setup && j.setup.call(a, d, p, k) !== !1) ||
                  (a.addEventListener
                    ? a.addEventListener(o, k, !1)
                    : a.attachEvent && a.attachEvent("on" + o, k))),
              j.add &&
                (j.add.call(a, l), l.handler.guid || (l.handler.guid = c.guid)),
              e ? m.splice(m.delegateCount++, 0, l) : m.push(l),
              (n.event.global[o] = !0));
        a = null;
      }
    },
    remove: function (a, b, c, d, e) {
      var f,
        g,
        h,
        i,
        j,
        k,
        l,
        m,
        o,
        p,
        q,
        r = n.hasData(a) && n._data(a);
      if (r && (k = r.events)) {
        (b = (b || "").match(G) || [""]), (j = b.length);
        while (j--)
          if (
            ((h = oa.exec(b[j]) || []),
            (o = q = h[1]),
            (p = (h[2] || "").split(".").sort()),
            o)
          ) {
            (l = n.event.special[o] || {}),
              (o = (d ? l.delegateType : l.bindType) || o),
              (m = k[o] || []),
              (h =
                h[2] &&
                new RegExp("(^|\\.)" + p.join("\\.(?:.*\\.|)") + "(\\.|$)")),
              (i = f = m.length);
            while (f--)
              (g = m[f]),
                (!e && q !== g.origType) ||
                  (c && c.guid !== g.guid) ||
                  (h && !h.test(g.namespace)) ||
                  (d && d !== g.selector && ("**" !== d || !g.selector)) ||
                  (m.splice(f, 1),
                  g.selector && m.delegateCount--,
                  l.remove && l.remove.call(a, g));
            i &&
              !m.length &&
              ((l.teardown && l.teardown.call(a, p, r.handle) !== !1) ||
                n.removeEvent(a, o, r.handle),
              delete k[o]);
          } else for (o in k) n.event.remove(a, o + b[j], c, d, !0);
        n.isEmptyObject(k) && (delete r.handle, n._removeData(a, "events"));
      }
    },
    trigger: function (b, c, e, f) {
      var g,
        h,
        i,
        j,
        l,
        m,
        o,
        p = [e || d],
        q = k.call(b, "type") ? b.type : b,
        r = k.call(b, "namespace") ? b.namespace.split(".") : [];
      if (
        ((i = m = e = e || d),
        3 !== e.nodeType &&
          8 !== e.nodeType &&
          !na.test(q + n.event.triggered) &&
          (q.indexOf(".") > -1 &&
            ((r = q.split(".")), (q = r.shift()), r.sort()),
          (h = q.indexOf(":") < 0 && "on" + q),
          (b = b[n.expando] ? b : new n.Event(q, "object" == typeof b && b)),
          (b.isTrigger = f ? 2 : 3),
          (b.namespace = r.join(".")),
          (b.rnamespace = b.namespace
            ? new RegExp("(^|\\.)" + r.join("\\.(?:.*\\.|)") + "(\\.|$)")
            : null),
          (b.result = void 0),
          b.target || (b.target = e),
          (c = null == c ? [b] : n.makeArray(c, [b])),
          (l = n.event.special[q] || {}),
          f || !l.trigger || l.trigger.apply(e, c) !== !1))
      ) {
        if (!f && !l.noBubble && !n.isWindow(e)) {
          for (
            j = l.delegateType || q, na.test(j + q) || (i = i.parentNode);
            i;
            i = i.parentNode
          )
            p.push(i), (m = i);
          m === (e.ownerDocument || d) &&
            p.push(m.defaultView || m.parentWindow || a);
        }
        o = 0;
        while ((i = p[o++]) && !b.isPropagationStopped())
          (b.type = o > 1 ? j : l.bindType || q),
            (g = (n._data(i, "events") || {})[b.type] && n._data(i, "handle")),
            g && g.apply(i, c),
            (g = h && i[h]),
            g &&
              g.apply &&
              M(i) &&
              ((b.result = g.apply(i, c)),
              b.result === !1 && b.preventDefault());
        if (
          ((b.type = q),
          !f &&
            !b.isDefaultPrevented() &&
            (!l._default || l._default.apply(p.pop(), c) === !1) &&
            M(e) &&
            h &&
            e[q] &&
            !n.isWindow(e))
        ) {
          (m = e[h]), m && (e[h] = null), (n.event.triggered = q);
          try {
            e[q]();
          } catch (s) {}
          (n.event.triggered = void 0), m && (e[h] = m);
        }
        return b.result;
      }
    },
    dispatch: function (a) {
      a = n.event.fix(a);
      var b,
        c,
        d,
        f,
        g,
        h = [],
        i = e.call(arguments),
        j = (n._data(this, "events") || {})[a.type] || [],
        k = n.event.special[a.type] || {};
      if (
        ((i[0] = a),
        (a.delegateTarget = this),
        !k.preDispatch || k.preDispatch.call(this, a) !== !1)
      ) {
        (h = n.event.handlers.call(this, a, j)), (b = 0);
        while ((f = h[b++]) && !a.isPropagationStopped()) {
          (a.currentTarget = f.elem), (c = 0);
          while ((g = f.handlers[c++]) && !a.isImmediatePropagationStopped())
            (a.rnamespace && !a.rnamespace.test(g.namespace)) ||
              ((a.handleObj = g),
              (a.data = g.data),
              (d = (
                (n.event.special[g.origType] || {}).handle || g.handler
              ).apply(f.elem, i)),
              void 0 !== d &&
                (a.result = d) === !1 &&
                (a.preventDefault(), a.stopPropagation()));
        }
        return k.postDispatch && k.postDispatch.call(this, a), a.result;
      }
    },
    handlers: function (a, b) {
      var c,
        d,
        e,
        f,
        g = [],
        h = b.delegateCount,
        i = a.target;
      if (
        h &&
        i.nodeType &&
        ("click" !== a.type || isNaN(a.button) || a.button < 1)
      )
        for (; i != this; i = i.parentNode || this)
          if (1 === i.nodeType && (i.disabled !== !0 || "click" !== a.type)) {
            for (d = [], c = 0; h > c; c++)
              (f = b[c]),
                (e = f.selector + " "),
                void 0 === d[e] &&
                  (d[e] = f.needsContext
                    ? n(e, this).index(i) > -1
                    : n.find(e, this, null, [i]).length),
                d[e] && d.push(f);
            d.length && g.push({ elem: i, handlers: d });
          }
      return h < b.length && g.push({ elem: this, handlers: b.slice(h) }), g;
    },
    fix: function (a) {
      if (a[n.expando]) return a;
      var b,
        c,
        e,
        f = a.type,
        g = a,
        h = this.fixHooks[f];
      h ||
        (this.fixHooks[f] = h = ma.test(f)
          ? this.mouseHooks
          : la.test(f)
          ? this.keyHooks
          : {}),
        (e = h.props ? this.props.concat(h.props) : this.props),
        (a = new n.Event(g)),
        (b = e.length);
      while (b--) (c = e[b]), (a[c] = g[c]);
      return (
        a.target || (a.target = g.srcElement || d),
        3 === a.target.nodeType && (a.target = a.target.parentNode),
        (a.metaKey = !!a.metaKey),
        h.filter ? h.filter(a, g) : a
      );
    },
    props: "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(
      " "
    ),
    fixHooks: {},
    keyHooks: {
      props: "char charCode key keyCode".split(" "),
      filter: function (a, b) {
        return (
          null == a.which &&
            (a.which = null != b.charCode ? b.charCode : b.keyCode),
          a
        );
      },
    },
    mouseHooks: {
      props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(
        " "
      ),
      filter: function (a, b) {
        var c,
          e,
          f,
          g = b.button,
          h = b.fromElement;
        return (
          null == a.pageX &&
            null != b.clientX &&
            ((e = a.target.ownerDocument || d),
            (f = e.documentElement),
            (c = e.body),
            (a.pageX =
              b.clientX +
              ((f && f.scrollLeft) || (c && c.scrollLeft) || 0) -
              ((f && f.clientLeft) || (c && c.clientLeft) || 0)),
            (a.pageY =
              b.clientY +
              ((f && f.scrollTop) || (c && c.scrollTop) || 0) -
              ((f && f.clientTop) || (c && c.clientTop) || 0))),
          !a.relatedTarget &&
            h &&
            (a.relatedTarget = h === a.target ? b.toElement : h),
          a.which ||
            void 0 === g ||
            (a.which = 1 & g ? 1 : 2 & g ? 3 : 4 & g ? 2 : 0),
          a
        );
      },
    },
    special: {
      load: { noBubble: !0 },
      focus: {
        trigger: function () {
          if (this !== ra() && this.focus)
            try {
              return this.focus(), !1;
            } catch (a) {}
        },
        delegateType: "focusin",
      },
      blur: {
        trigger: function () {
          return this === ra() && this.blur ? (this.blur(), !1) : void 0;
        },
        delegateType: "focusout",
      },
      click: {
        trigger: function () {
          return n.nodeName(this, "input") &&
            "checkbox" === this.type &&
            this.click
            ? (this.click(), !1)
            : void 0;
        },
        _default: function (a) {
          return n.nodeName(a.target, "a");
        },
      },
      beforeunload: {
        postDispatch: function (a) {
          void 0 !== a.result &&
            a.originalEvent &&
            (a.originalEvent.returnValue = a.result);
        },
      },
    },
    simulate: function (a, b, c) {
      var d = n.extend(new n.Event(), c, { type: a, isSimulated: !0 });
      n.event.trigger(d, null, b), d.isDefaultPrevented() && c.preventDefault();
    },
  }),
    (n.removeEvent = d.removeEventListener
      ? function (a, b, c) {
          a.removeEventListener && a.removeEventListener(b, c);
        }
      : function (a, b, c) {
          var d = "on" + b;
          a.detachEvent &&
            ("undefined" == typeof a[d] && (a[d] = null), a.detachEvent(d, c));
        }),
    (n.Event = function (a, b) {
      return this instanceof n.Event
        ? (a && a.type
            ? ((this.originalEvent = a),
              (this.type = a.type),
              (this.isDefaultPrevented =
                a.defaultPrevented ||
                (void 0 === a.defaultPrevented && a.returnValue === !1)
                  ? pa
                  : qa))
            : (this.type = a),
          b && n.extend(this, b),
          (this.timeStamp = (a && a.timeStamp) || n.now()),
          void (this[n.expando] = !0))
        : new n.Event(a, b);
    }),
    (n.Event.prototype = {
      constructor: n.Event,
      isDefaultPrevented: qa,
      isPropagationStopped: qa,
      isImmediatePropagationStopped: qa,
      preventDefault: function () {
        var a = this.originalEvent;
        (this.isDefaultPrevented = pa),
          a && (a.preventDefault ? a.preventDefault() : (a.returnValue = !1));
      },
      stopPropagation: function () {
        var a = this.originalEvent;
        (this.isPropagationStopped = pa),
          a &&
            !this.isSimulated &&
            (a.stopPropagation && a.stopPropagation(), (a.cancelBubble = !0));
      },
      stopImmediatePropagation: function () {
        var a = this.originalEvent;
        (this.isImmediatePropagationStopped = pa),
          a && a.stopImmediatePropagation && a.stopImmediatePropagation(),
          this.stopPropagation();
      },
    }),
    n.each(
      {
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout",
      },
      function (a, b) {
        n.event.special[a] = {
          delegateType: b,
          bindType: b,
          handle: function (a) {
            var c,
              d = this,
              e = a.relatedTarget,
              f = a.handleObj;
            return (
              (e && (e === d || n.contains(d, e))) ||
                ((a.type = f.origType),
                (c = f.handler.apply(this, arguments)),
                (a.type = b)),
              c
            );
          },
        };
      }
    ),
    l.submit ||
      (n.event.special.submit = {
        setup: function () {
          return n.nodeName(this, "form")
            ? !1
            : void n.event.add(
                this,
                "click._submit keypress._submit",
                function (a) {
                  var b = a.target,
                    c =
                      n.nodeName(b, "input") || n.nodeName(b, "button")
                        ? n.prop(b, "form")
                        : void 0;
                  c &&
                    !n._data(c, "submit") &&
                    (n.event.add(c, "submit._submit", function (a) {
                      a._submitBubble = !0;
                    }),
                    n._data(c, "submit", !0));
                }
              );
        },
        postDispatch: function (a) {
          a._submitBubble &&
            (delete a._submitBubble,
            this.parentNode &&
              !a.isTrigger &&
              n.event.simulate("submit", this.parentNode, a));
        },
        teardown: function () {
          return n.nodeName(this, "form")
            ? !1
            : void n.event.remove(this, "._submit");
        },
      }),
    l.change ||
      (n.event.special.change = {
        setup: function () {
          return ka.test(this.nodeName)
            ? (("checkbox" !== this.type && "radio" !== this.type) ||
                (n.event.add(this, "propertychange._change", function (a) {
                  "checked" === a.originalEvent.propertyName &&
                    (this._justChanged = !0);
                }),
                n.event.add(this, "click._change", function (a) {
                  this._justChanged && !a.isTrigger && (this._justChanged = !1),
                    n.event.simulate("change", this, a);
                })),
              !1)
            : void n.event.add(this, "beforeactivate._change", function (a) {
                var b = a.target;
                ka.test(b.nodeName) &&
                  !n._data(b, "change") &&
                  (n.event.add(b, "change._change", function (a) {
                    !this.parentNode ||
                      a.isSimulated ||
                      a.isTrigger ||
                      n.event.simulate("change", this.parentNode, a);
                  }),
                  n._data(b, "change", !0));
              });
        },
        handle: function (a) {
          var b = a.target;
          return this !== b ||
            a.isSimulated ||
            a.isTrigger ||
            ("radio" !== b.type && "checkbox" !== b.type)
            ? a.handleObj.handler.apply(this, arguments)
            : void 0;
        },
        teardown: function () {
          return n.event.remove(this, "._change"), !ka.test(this.nodeName);
        },
      }),
    l.focusin ||
      n.each({ focus: "focusin", blur: "focusout" }, function (a, b) {
        var c = function (a) {
          n.event.simulate(b, a.target, n.event.fix(a));
        };
        n.event.special[b] = {
          setup: function () {
            var d = this.ownerDocument || this,
              e = n._data(d, b);
            e || d.addEventListener(a, c, !0), n._data(d, b, (e || 0) + 1);
          },
          teardown: function () {
            var d = this.ownerDocument || this,
              e = n._data(d, b) - 1;
            e
              ? n._data(d, b, e)
              : (d.removeEventListener(a, c, !0), n._removeData(d, b));
          },
        };
      }),
    n.fn.extend({
      on: function (a, b, c, d) {
        return sa(this, a, b, c, d);
      },
      one: function (a, b, c, d) {
        return sa(this, a, b, c, d, 1);
      },
      off: function (a, b, c) {
        var d, e;
        if (a && a.preventDefault && a.handleObj)
          return (
            (d = a.handleObj),
            n(a.delegateTarget).off(
              d.namespace ? d.origType + "." + d.namespace : d.origType,
              d.selector,
              d.handler
            ),
            this
          );
        if ("object" == typeof a) {
          for (e in a) this.off(e, b, a[e]);
          return this;
        }
        return (
          (b !== !1 && "function" != typeof b) || ((c = b), (b = void 0)),
          c === !1 && (c = qa),
          this.each(function () {
            n.event.remove(this, a, c, b);
          })
        );
      },
      trigger: function (a, b) {
        return this.each(function () {
          n.event.trigger(a, b, this);
        });
      },
      triggerHandler: function (a, b) {
        var c = this[0];
        return c ? n.event.trigger(a, b, c, !0) : void 0;
      },
    });
  var ta = / jQuery\d+="(?:null|\d+)"/g,
    ua = new RegExp("<(?:" + ba + ")[\\s/>]", "i"),
    va = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,
    wa = /<script|<style|<link/i,
    xa = /checked\s*(?:[^=]|=\s*.checked.)/i,
    ya = /^true\/(.*)/,
    za = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
    Aa = ca(d),
    Ba = Aa.appendChild(d.createElement("div"));
  function Ca(a, b) {
    return n.nodeName(a, "table") &&
      n.nodeName(11 !== b.nodeType ? b : b.firstChild, "tr")
      ? a.getElementsByTagName("tbody")[0] ||
          a.appendChild(a.ownerDocument.createElement("tbody"))
      : a;
  }
  function Da(a) {
    return (a.type = (null !== n.find.attr(a, "type")) + "/" + a.type), a;
  }
  function Ea(a) {
    var b = ya.exec(a.type);
    return b ? (a.type = b[1]) : a.removeAttribute("type"), a;
  }
  function Fa(a, b) {
    if (1 === b.nodeType && n.hasData(a)) {
      var c,
        d,
        e,
        f = n._data(a),
        g = n._data(b, f),
        h = f.events;
      if (h) {
        delete g.handle, (g.events = {});
        for (c in h)
          for (d = 0, e = h[c].length; e > d; d++) n.event.add(b, c, h[c][d]);
      }
      g.data && (g.data = n.extend({}, g.data));
    }
  }
  function Ga(a, b) {
    var c, d, e;
    if (1 === b.nodeType) {
      if (((c = b.nodeName.toLowerCase()), !l.noCloneEvent && b[n.expando])) {
        e = n._data(b);
        for (d in e.events) n.removeEvent(b, d, e.handle);
        b.removeAttribute(n.expando);
      }
      "script" === c && b.text !== a.text
        ? ((Da(b).text = a.text), Ea(b))
        : "object" === c
        ? (b.parentNode && (b.outerHTML = a.outerHTML),
          l.html5Clone &&
            a.innerHTML &&
            !n.trim(b.innerHTML) &&
            (b.innerHTML = a.innerHTML))
        : "input" === c && Z.test(a.type)
        ? ((b.defaultChecked = b.checked = a.checked),
          b.value !== a.value && (b.value = a.value))
        : "option" === c
        ? (b.defaultSelected = b.selected = a.defaultSelected)
        : ("input" !== c && "textarea" !== c) ||
          (b.defaultValue = a.defaultValue);
    }
  }
  function Ha(a, b, c, d) {
    b = f.apply([], b);
    var e,
      g,
      h,
      i,
      j,
      k,
      m = 0,
      o = a.length,
      p = o - 1,
      q = b[0],
      r = n.isFunction(q);
    if (r || (o > 1 && "string" == typeof q && !l.checkClone && xa.test(q)))
      return a.each(function (e) {
        var f = a.eq(e);
        r && (b[0] = q.call(this, e, f.html())), Ha(f, b, c, d);
      });
    if (
      o &&
      ((k = ja(b, a[0].ownerDocument, !1, a, d)),
      (e = k.firstChild),
      1 === k.childNodes.length && (k = e),
      e || d)
    ) {
      for (i = n.map(ea(k, "script"), Da), h = i.length; o > m; m++)
        (g = k),
          m !== p &&
            ((g = n.clone(g, !0, !0)), h && n.merge(i, ea(g, "script"))),
          c.call(a[m], g, m);
      if (h)
        for (j = i[i.length - 1].ownerDocument, n.map(i, Ea), m = 0; h > m; m++)
          (g = i[m]),
            _.test(g.type || "") &&
              !n._data(g, "globalEval") &&
              n.contains(j, g) &&
              (g.src
                ? n._evalUrl && n._evalUrl(g.src)
                : n.globalEval(
                    (g.text || g.textContent || g.innerHTML || "").replace(
                      za,
                      ""
                    )
                  ));
      k = e = null;
    }
    return a;
  }
  function Ia(a, b, c) {
    for (var d, e = b ? n.filter(b, a) : a, f = 0; null != (d = e[f]); f++)
      c || 1 !== d.nodeType || n.cleanData(ea(d)),
        d.parentNode &&
          (c && n.contains(d.ownerDocument, d) && fa(ea(d, "script")),
          d.parentNode.removeChild(d));
    return a;
  }
  n.extend({
    htmlPrefilter: function (a) {
      return a.replace(va, "<$1></$2>");
    },
    clone: function (a, b, c) {
      var d,
        e,
        f,
        g,
        h,
        i = n.contains(a.ownerDocument, a);
      if (
        (l.html5Clone || n.isXMLDoc(a) || !ua.test("<" + a.nodeName + ">")
          ? (f = a.cloneNode(!0))
          : ((Ba.innerHTML = a.outerHTML), Ba.removeChild((f = Ba.firstChild))),
        !(
          (l.noCloneEvent && l.noCloneChecked) ||
          (1 !== a.nodeType && 11 !== a.nodeType) ||
          n.isXMLDoc(a)
        ))
      )
        for (d = ea(f), h = ea(a), g = 0; null != (e = h[g]); ++g)
          d[g] && Ga(e, d[g]);
      if (b)
        if (c)
          for (h = h || ea(a), d = d || ea(f), g = 0; null != (e = h[g]); g++)
            Fa(e, d[g]);
        else Fa(a, f);
      return (
        (d = ea(f, "script")),
        d.length > 0 && fa(d, !i && ea(a, "script")),
        (d = h = e = null),
        f
      );
    },
    cleanData: function (a, b) {
      for (
        var d,
          e,
          f,
          g,
          h = 0,
          i = n.expando,
          j = n.cache,
          k = l.attributes,
          m = n.event.special;
        null != (d = a[h]);
        h++
      )
        if ((b || M(d)) && ((f = d[i]), (g = f && j[f]))) {
          if (g.events)
            for (e in g.events)
              m[e] ? n.event.remove(d, e) : n.removeEvent(d, e, g.handle);
          j[f] &&
            (delete j[f],
            k || "undefined" == typeof d.removeAttribute
              ? (d[i] = void 0)
              : d.removeAttribute(i),
            c.push(f));
        }
    },
  }),
    n.fn.extend({
      domManip: Ha,
      detach: function (a) {
        return Ia(this, a, !0);
      },
      remove: function (a) {
        return Ia(this, a);
      },
      text: function (a) {
        return Y(
          this,
          function (a) {
            return void 0 === a
              ? n.text(this)
              : this.empty().append(
                  ((this[0] && this[0].ownerDocument) || d).createTextNode(a)
                );
          },
          null,
          a,
          arguments.length
        );
      },
      append: function () {
        return Ha(this, arguments, function (a) {
          if (
            1 === this.nodeType ||
            11 === this.nodeType ||
            9 === this.nodeType
          ) {
            var b = Ca(this, a);
            b.appendChild(a);
          }
        });
      },
      prepend: function () {
        return Ha(this, arguments, function (a) {
          if (
            1 === this.nodeType ||
            11 === this.nodeType ||
            9 === this.nodeType
          ) {
            var b = Ca(this, a);
            b.insertBefore(a, b.firstChild);
          }
        });
      },
      before: function () {
        return Ha(this, arguments, function (a) {
          this.parentNode && this.parentNode.insertBefore(a, this);
        });
      },
      after: function () {
        return Ha(this, arguments, function (a) {
          this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);
        });
      },
      empty: function () {
        for (var a, b = 0; null != (a = this[b]); b++) {
          1 === a.nodeType && n.cleanData(ea(a, !1));
          while (a.firstChild) a.removeChild(a.firstChild);
          a.options && n.nodeName(a, "select") && (a.options.length = 0);
        }
        return this;
      },
      clone: function (a, b) {
        return (
          (a = null == a ? !1 : a),
          (b = null == b ? a : b),
          this.map(function () {
            return n.clone(this, a, b);
          })
        );
      },
      html: function (a) {
        return Y(
          this,
          function (a) {
            var b = this[0] || {},
              c = 0,
              d = this.length;
            if (void 0 === a)
              return 1 === b.nodeType ? b.innerHTML.replace(ta, "") : void 0;
            if (
              "string" == typeof a &&
              !wa.test(a) &&
              (l.htmlSerialize || !ua.test(a)) &&
              (l.leadingWhitespace || !aa.test(a)) &&
              !da[($.exec(a) || ["", ""])[1].toLowerCase()]
            ) {
              a = n.htmlPrefilter(a);
              try {
                for (; d > c; c++)
                  (b = this[c] || {}),
                    1 === b.nodeType &&
                      (n.cleanData(ea(b, !1)), (b.innerHTML = a));
                b = 0;
              } catch (e) {}
            }
            b && this.empty().append(a);
          },
          null,
          a,
          arguments.length
        );
      },
      replaceWith: function () {
        var a = [];
        return Ha(
          this,
          arguments,
          function (b) {
            var c = this.parentNode;
            n.inArray(this, a) < 0 &&
              (n.cleanData(ea(this)), c && c.replaceChild(b, this));
          },
          a
        );
      },
    }),
    n.each(
      {
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith",
      },
      function (a, b) {
        n.fn[a] = function (a) {
          for (var c, d = 0, e = [], f = n(a), h = f.length - 1; h >= d; d++)
            (c = d === h ? this : this.clone(!0)),
              n(f[d])[b](c),
              g.apply(e, c.get());
          return this.pushStack(e);
        };
      }
    );
  var Ja,
    Ka = { HTML: "block", BODY: "block" };
  function La(a, b) {
    var c = n(b.createElement(a)).appendTo(b.body),
      d = n.css(c[0], "display");
    return c.detach(), d;
  }
  function Ma(a) {
    var b = d,
      c = Ka[a];
    return (
      c ||
        ((c = La(a, b)),
        ("none" !== c && c) ||
          ((Ja = (
            Ja || n("<iframe frameborder='0' width='0' height='0'/>")
          ).appendTo(b.documentElement)),
          (b = (Ja[0].contentWindow || Ja[0].contentDocument).document),
          b.write(),
          b.close(),
          (c = La(a, b)),
          Ja.detach()),
        (Ka[a] = c)),
      c
    );
  }
  var Na = /^margin/,
    Oa = new RegExp("^(" + T + ")(?!px)[a-z%]+$", "i"),
    Pa = function (a, b, c, d) {
      var e,
        f,
        g = {};
      for (f in b) (g[f] = a.style[f]), (a.style[f] = b[f]);
      e = c.apply(a, d || []);
      for (f in b) a.style[f] = g[f];
      return e;
    },
    Qa = d.documentElement;
  !(function () {
    var b,
      c,
      e,
      f,
      g,
      h,
      i = d.createElement("div"),
      j = d.createElement("div");
    if (j.style) {
      (j.style.cssText = "float:left;opacity:.5"),
        (l.opacity = "0.5" === j.style.opacity),
        (l.cssFloat = !!j.style.cssFloat),
        (j.style.backgroundClip = "content-box"),
        (j.cloneNode(!0).style.backgroundClip = ""),
        (l.clearCloneStyle = "content-box" === j.style.backgroundClip),
        (i = d.createElement("div")),
        (i.style.cssText =
          "border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute"),
        (j.innerHTML = ""),
        i.appendChild(j),
        (l.boxSizing =
          "" === j.style.boxSizing ||
          "" === j.style.MozBoxSizing ||
          "" === j.style.WebkitBoxSizing),
        n.extend(l, {
          reliableHiddenOffsets: function () {
            return null == b && k(), f;
          },
          boxSizingReliable: function () {
            return null == b && k(), e;
          },
          pixelMarginRight: function () {
            return null == b && k(), c;
          },
          pixelPosition: function () {
            return null == b && k(), b;
          },
          reliableMarginRight: function () {
            return null == b && k(), g;
          },
          reliableMarginLeft: function () {
            return null == b && k(), h;
          },
        });
      function k() {
        var k,
          l,
          m = d.documentElement;
        m.appendChild(i),
          (j.style.cssText =
            "-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%"),
          (b = e = h = !1),
          (c = g = !0),
          a.getComputedStyle &&
            ((l = a.getComputedStyle(j)),
            (b = "1%" !== (l || {}).top),
            (h = "2px" === (l || {}).marginLeft),
            (e = "4px" === (l || { width: "4px" }).width),
            (j.style.marginRight = "50%"),
            (c = "4px" === (l || { marginRight: "4px" }).marginRight),
            (k = j.appendChild(d.createElement("div"))),
            (k.style.cssText = j.style.cssText =
              "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0"),
            (k.style.marginRight = k.style.width = "0"),
            (j.style.width = "1px"),
            (g = !parseFloat((a.getComputedStyle(k) || {}).marginRight)),
            j.removeChild(k)),
          (j.style.display = "none"),
          (f = 0 === j.getClientRects().length),
          f &&
            ((j.style.display = ""),
            (j.innerHTML = "<table><tr><td></td><td>t</td></tr></table>"),
            (j.childNodes[0].style.borderCollapse = "separate"),
            (k = j.getElementsByTagName("td")),
            (k[0].style.cssText = "margin:0;border:0;padding:0;display:none"),
            (f = 0 === k[0].offsetHeight),
            f &&
              ((k[0].style.display = ""),
              (k[1].style.display = "none"),
              (f = 0 === k[0].offsetHeight))),
          m.removeChild(i);
      }
    }
  })();
  var Ra,
    Sa,
    Ta = /^(top|right|bottom|left)$/;
  a.getComputedStyle
    ? ((Ra = function (b) {
        var c = b.ownerDocument.defaultView;
        return (c && c.opener) || (c = a), c.getComputedStyle(b);
      }),
      (Sa = function (a, b, c) {
        var d,
          e,
          f,
          g,
          h = a.style;
        return (
          (c = c || Ra(a)),
          (g = c ? c.getPropertyValue(b) || c[b] : void 0),
          ("" !== g && void 0 !== g) ||
            n.contains(a.ownerDocument, a) ||
            (g = n.style(a, b)),
          c &&
            !l.pixelMarginRight() &&
            Oa.test(g) &&
            Na.test(b) &&
            ((d = h.width),
            (e = h.minWidth),
            (f = h.maxWidth),
            (h.minWidth = h.maxWidth = h.width = g),
            (g = c.width),
            (h.width = d),
            (h.minWidth = e),
            (h.maxWidth = f)),
          void 0 === g ? g : g + ""
        );
      }))
    : Qa.currentStyle &&
      ((Ra = function (a) {
        return a.currentStyle;
      }),
      (Sa = function (a, b, c) {
        var d,
          e,
          f,
          g,
          h = a.style;
        return (
          (c = c || Ra(a)),
          (g = c ? c[b] : void 0),
          null == g && h && h[b] && (g = h[b]),
          Oa.test(g) &&
            !Ta.test(b) &&
            ((d = h.left),
            (e = a.runtimeStyle),
            (f = e && e.left),
            f && (e.left = a.currentStyle.left),
            (h.left = "fontSize" === b ? "1em" : g),
            (g = h.pixelLeft + "px"),
            (h.left = d),
            f && (e.left = f)),
          void 0 === g ? g : g + "" || "auto"
        );
      }));
  function Ua(a, b) {
    return {
      get: function () {
        return a()
          ? void delete this.get
          : (this.get = b).apply(this, arguments);
      },
    };
  }
  var Va = /alpha\([^)]*\)/i,
    Wa = /opacity\s*=\s*([^)]*)/i,
    Xa = /^(none|table(?!-c[ea]).+)/,
    Ya = new RegExp("^(" + T + ")(.*)$", "i"),
    Za = { position: "absolute", visibility: "hidden", display: "block" },
    $a = { letterSpacing: "0", fontWeight: "400" },
    _a = ["Webkit", "O", "Moz", "ms"],
    ab = d.createElement("div").style;
  function bb(a) {
    if (a in ab) return a;
    var b = a.charAt(0).toUpperCase() + a.slice(1),
      c = _a.length;
    while (c--) if (((a = _a[c] + b), a in ab)) return a;
  }
  function cb(a, b) {
    for (var c, d, e, f = [], g = 0, h = a.length; h > g; g++)
      (d = a[g]),
        d.style &&
          ((f[g] = n._data(d, "olddisplay")),
          (c = d.style.display),
          b
            ? (f[g] || "none" !== c || (d.style.display = ""),
              "" === d.style.display &&
                W(d) &&
                (f[g] = n._data(d, "olddisplay", Ma(d.nodeName))))
            : ((e = W(d)),
              ((c && "none" !== c) || !e) &&
                n._data(d, "olddisplay", e ? c : n.css(d, "display"))));
    for (g = 0; h > g; g++)
      (d = a[g]),
        d.style &&
          ((b && "none" !== d.style.display && "" !== d.style.display) ||
            (d.style.display = b ? f[g] || "" : "none"));
    return a;
  }
  function db(a, b, c) {
    var d = Ya.exec(b);
    return d ? Math.max(0, d[1] - (c || 0)) + (d[2] || "px") : b;
  }
  function eb(a, b, c, d, e) {
    for (
      var f = c === (d ? "border" : "content") ? 4 : "width" === b ? 1 : 0,
        g = 0;
      4 > f;
      f += 2
    )
      "margin" === c && (g += n.css(a, c + V[f], !0, e)),
        d
          ? ("content" === c && (g -= n.css(a, "padding" + V[f], !0, e)),
            "margin" !== c && (g -= n.css(a, "border" + V[f] + "Width", !0, e)))
          : ((g += n.css(a, "padding" + V[f], !0, e)),
            "padding" !== c &&
              (g += n.css(a, "border" + V[f] + "Width", !0, e)));
    return g;
  }
  function fb(a, b, c) {
    var d = !0,
      e = "width" === b ? a.offsetWidth : a.offsetHeight,
      f = Ra(a),
      g = l.boxSizing && "border-box" === n.css(a, "boxSizing", !1, f);
    if (0 >= e || null == e) {
      if (
        ((e = Sa(a, b, f)),
        (0 > e || null == e) && (e = a.style[b]),
        Oa.test(e))
      )
        return e;
      (d = g && (l.boxSizingReliable() || e === a.style[b])),
        (e = parseFloat(e) || 0);
    }
    return e + eb(a, b, c || (g ? "border" : "content"), d, f) + "px";
  }
  n.extend({
    cssHooks: {
      opacity: {
        get: function (a, b) {
          if (b) {
            var c = Sa(a, "opacity");
            return "" === c ? "1" : c;
          }
        },
      },
    },
    cssNumber: {
      animationIterationCount: !0,
      columnCount: !0,
      fillOpacity: !0,
      flexGrow: !0,
      flexShrink: !0,
      fontWeight: !0,
      lineHeight: !0,
      opacity: !0,
      order: !0,
      orphans: !0,
      widows: !0,
      zIndex: !0,
      zoom: !0,
    },
    cssProps: { float: l.cssFloat ? "cssFloat" : "styleFloat" },
    style: function (a, b, c, d) {
      if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {
        var e,
          f,
          g,
          h = n.camelCase(b),
          i = a.style;
        if (
          ((b = n.cssProps[h] || (n.cssProps[h] = bb(h) || h)),
          (g = n.cssHooks[b] || n.cssHooks[h]),
          void 0 === c)
        )
          return g && "get" in g && void 0 !== (e = g.get(a, !1, d)) ? e : i[b];
        if (
          ((f = typeof c),
          "string" === f &&
            (e = U.exec(c)) &&
            e[1] &&
            ((c = X(a, b, e)), (f = "number")),
          null != c &&
            c === c &&
            ("number" === f &&
              (c += (e && e[3]) || (n.cssNumber[h] ? "" : "px")),
            l.clearCloneStyle ||
              "" !== c ||
              0 !== b.indexOf("background") ||
              (i[b] = "inherit"),
            !(g && "set" in g && void 0 === (c = g.set(a, c, d)))))
        )
          try {
            i[b] = c;
          } catch (j) {}
      }
    },
    css: function (a, b, c, d) {
      var e,
        f,
        g,
        h = n.camelCase(b);
      return (
        (b = n.cssProps[h] || (n.cssProps[h] = bb(h) || h)),
        (g = n.cssHooks[b] || n.cssHooks[h]),
        g && "get" in g && (f = g.get(a, !0, c)),
        void 0 === f && (f = Sa(a, b, d)),
        "normal" === f && b in $a && (f = $a[b]),
        "" === c || c
          ? ((e = parseFloat(f)), c === !0 || isFinite(e) ? e || 0 : f)
          : f
      );
    },
  }),
    n.each(["height", "width"], function (a, b) {
      n.cssHooks[b] = {
        get: function (a, c, d) {
          return c
            ? Xa.test(n.css(a, "display")) && 0 === a.offsetWidth
              ? Pa(a, Za, function () {
                  return fb(a, b, d);
                })
              : fb(a, b, d)
            : void 0;
        },
        set: function (a, c, d) {
          var e = d && Ra(a);
          return db(
            a,
            c,
            d
              ? eb(
                  a,
                  b,
                  d,
                  l.boxSizing && "border-box" === n.css(a, "boxSizing", !1, e),
                  e
                )
              : 0
          );
        },
      };
    }),
    l.opacity ||
      (n.cssHooks.opacity = {
        get: function (a, b) {
          return Wa.test(
            (b && a.currentStyle ? a.currentStyle.filter : a.style.filter) || ""
          )
            ? 0.01 * parseFloat(RegExp.$1) + ""
            : b
            ? "1"
            : "";
        },
        set: function (a, b) {
          var c = a.style,
            d = a.currentStyle,
            e = n.isNumeric(b) ? "alpha(opacity=" + 100 * b + ")" : "",
            f = (d && d.filter) || c.filter || "";
          (c.zoom = 1),
            ((b >= 1 || "" === b) &&
              "" === n.trim(f.replace(Va, "")) &&
              c.removeAttribute &&
              (c.removeAttribute("filter"), "" === b || (d && !d.filter))) ||
              (c.filter = Va.test(f) ? f.replace(Va, e) : f + " " + e);
        },
      }),
    (n.cssHooks.marginRight = Ua(l.reliableMarginRight, function (a, b) {
      return b
        ? Pa(a, { display: "inline-block" }, Sa, [a, "marginRight"])
        : void 0;
    })),
    (n.cssHooks.marginLeft = Ua(l.reliableMarginLeft, function (a, b) {
      return b
        ? (parseFloat(Sa(a, "marginLeft")) ||
            (n.contains(a.ownerDocument, a)
              ? a.getBoundingClientRect().left -
                Pa(
                  a,
                  {
                    marginLeft: 0,
                  },
                  function () {
                    return a.getBoundingClientRect().left;
                  }
                )
              : 0)) + "px"
        : void 0;
    })),
    n.each({ margin: "", padding: "", border: "Width" }, function (a, b) {
      (n.cssHooks[a + b] = {
        expand: function (c) {
          for (
            var d = 0, e = {}, f = "string" == typeof c ? c.split(" ") : [c];
            4 > d;
            d++
          )
            e[a + V[d] + b] = f[d] || f[d - 2] || f[0];
          return e;
        },
      }),
        Na.test(a) || (n.cssHooks[a + b].set = db);
    }),
    n.fn.extend({
      css: function (a, b) {
        return Y(
          this,
          function (a, b, c) {
            var d,
              e,
              f = {},
              g = 0;
            if (n.isArray(b)) {
              for (d = Ra(a), e = b.length; e > g; g++)
                f[b[g]] = n.css(a, b[g], !1, d);
              return f;
            }
            return void 0 !== c ? n.style(a, b, c) : n.css(a, b);
          },
          a,
          b,
          arguments.length > 1
        );
      },
      show: function () {
        return cb(this, !0);
      },
      hide: function () {
        return cb(this);
      },
      toggle: function (a) {
        return "boolean" == typeof a
          ? a
            ? this.show()
            : this.hide()
          : this.each(function () {
              W(this) ? n(this).show() : n(this).hide();
            });
      },
    });
  function gb(a, b, c, d, e) {
    return new gb.prototype.init(a, b, c, d, e);
  }
  (n.Tween = gb),
    (gb.prototype = {
      constructor: gb,
      init: function (a, b, c, d, e, f) {
        (this.elem = a),
          (this.prop = c),
          (this.easing = e || n.easing._default),
          (this.options = b),
          (this.start = this.now = this.cur()),
          (this.end = d),
          (this.unit = f || (n.cssNumber[c] ? "" : "px"));
      },
      cur: function () {
        var a = gb.propHooks[this.prop];
        return a && a.get ? a.get(this) : gb.propHooks._default.get(this);
      },
      run: function (a) {
        var b,
          c = gb.propHooks[this.prop];
        return (
          this.options.duration
            ? (this.pos = b = n.easing[this.easing](
                a,
                this.options.duration * a,
                0,
                1,
                this.options.duration
              ))
            : (this.pos = b = a),
          (this.now = (this.end - this.start) * b + this.start),
          this.options.step &&
            this.options.step.call(this.elem, this.now, this),
          c && c.set ? c.set(this) : gb.propHooks._default.set(this),
          this
        );
      },
    }),
    (gb.prototype.init.prototype = gb.prototype),
    (gb.propHooks = {
      _default: {
        get: function (a) {
          var b;
          return 1 !== a.elem.nodeType ||
            (null != a.elem[a.prop] && null == a.elem.style[a.prop])
            ? a.elem[a.prop]
            : ((b = n.css(a.elem, a.prop, "")), b && "auto" !== b ? b : 0);
        },
        set: function (a) {
          n.fx.step[a.prop]
            ? n.fx.step[a.prop](a)
            : 1 !== a.elem.nodeType ||
              (null == a.elem.style[n.cssProps[a.prop]] && !n.cssHooks[a.prop])
            ? (a.elem[a.prop] = a.now)
            : n.style(a.elem, a.prop, a.now + a.unit);
        },
      },
    }),
    (gb.propHooks.scrollTop = gb.propHooks.scrollLeft = {
      set: function (a) {
        a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);
      },
    }),
    (n.easing = {
      linear: function (a) {
        return a;
      },
      swing: function (a) {
        return 0.5 - Math.cos(a * Math.PI) / 2;
      },
      _default: "swing",
    }),
    (n.fx = gb.prototype.init),
    (n.fx.step = {});
  var hb,
    ib,
    jb = /^(?:toggle|show|hide)$/,
    kb = /queueHooks$/;
  function lb() {
    return (
      a.setTimeout(function () {
        hb = void 0;
      }),
      (hb = n.now())
    );
  }
  function mb(a, b) {
    var c,
      d = { height: a },
      e = 0;
    for (b = b ? 1 : 0; 4 > e; e += 2 - b)
      (c = V[e]), (d["margin" + c] = d["padding" + c] = a);
    return b && (d.opacity = d.width = a), d;
  }
  function nb(a, b, c) {
    for (
      var d,
        e = (qb.tweeners[b] || []).concat(qb.tweeners["*"]),
        f = 0,
        g = e.length;
      g > f;
      f++
    )
      if ((d = e[f].call(c, b, a))) return d;
  }
  function ob(a, b, c) {
    var d,
      e,
      f,
      g,
      h,
      i,
      j,
      k,
      m = this,
      o = {},
      p = a.style,
      q = a.nodeType && W(a),
      r = n._data(a, "fxshow");
    c.queue ||
      ((h = n._queueHooks(a, "fx")),
      null == h.unqueued &&
        ((h.unqueued = 0),
        (i = h.empty.fire),
        (h.empty.fire = function () {
          h.unqueued || i();
        })),
      h.unqueued++,
      m.always(function () {
        m.always(function () {
          h.unqueued--, n.queue(a, "fx").length || h.empty.fire();
        });
      })),
      1 === a.nodeType &&
        ("height" in b || "width" in b) &&
        ((c.overflow = [p.overflow, p.overflowX, p.overflowY]),
        (j = n.css(a, "display")),
        (k = "none" === j ? n._data(a, "olddisplay") || Ma(a.nodeName) : j),
        "inline" === k &&
          "none" === n.css(a, "float") &&
          (l.inlineBlockNeedsLayout && "inline" !== Ma(a.nodeName)
            ? (p.zoom = 1)
            : (p.display = "inline-block"))),
      c.overflow &&
        ((p.overflow = "hidden"),
        l.shrinkWrapBlocks() ||
          m.always(function () {
            (p.overflow = c.overflow[0]),
              (p.overflowX = c.overflow[1]),
              (p.overflowY = c.overflow[2]);
          }));
    for (d in b)
      if (((e = b[d]), jb.exec(e))) {
        if (
          (delete b[d], (f = f || "toggle" === e), e === (q ? "hide" : "show"))
        ) {
          if ("show" !== e || !r || void 0 === r[d]) continue;
          q = !0;
        }
        o[d] = (r && r[d]) || n.style(a, d);
      } else j = void 0;
    if (n.isEmptyObject(o))
      "inline" === ("none" === j ? Ma(a.nodeName) : j) && (p.display = j);
    else {
      r ? "hidden" in r && (q = r.hidden) : (r = n._data(a, "fxshow", {})),
        f && (r.hidden = !q),
        q
          ? n(a).show()
          : m.done(function () {
              n(a).hide();
            }),
        m.done(function () {
          var b;
          n._removeData(a, "fxshow");
          for (b in o) n.style(a, b, o[b]);
        });
      for (d in o)
        (g = nb(q ? r[d] : 0, d, m)),
          d in r ||
            ((r[d] = g.start),
            q &&
              ((g.end = g.start),
              (g.start = "width" === d || "height" === d ? 1 : 0)));
    }
  }
  function pb(a, b) {
    var c, d, e, f, g;
    for (c in a)
      if (
        ((d = n.camelCase(c)),
        (e = b[d]),
        (f = a[c]),
        n.isArray(f) && ((e = f[1]), (f = a[c] = f[0])),
        c !== d && ((a[d] = f), delete a[c]),
        (g = n.cssHooks[d]),
        g && "expand" in g)
      ) {
        (f = g.expand(f)), delete a[d];
        for (c in f) c in a || ((a[c] = f[c]), (b[c] = e));
      } else b[d] = e;
  }
  function qb(a, b, c) {
    var d,
      e,
      f = 0,
      g = qb.prefilters.length,
      h = n.Deferred().always(function () {
        delete i.elem;
      }),
      i = function () {
        if (e) return !1;
        for (
          var b = hb || lb(),
            c = Math.max(0, j.startTime + j.duration - b),
            d = c / j.duration || 0,
            f = 1 - d,
            g = 0,
            i = j.tweens.length;
          i > g;
          g++
        )
          j.tweens[g].run(f);
        return (
          h.notifyWith(a, [j, f, c]),
          1 > f && i ? c : (h.resolveWith(a, [j]), !1)
        );
      },
      j = h.promise({
        elem: a,
        props: n.extend({}, b),
        opts: n.extend(!0, { specialEasing: {}, easing: n.easing._default }, c),
        originalProperties: b,
        originalOptions: c,
        startTime: hb || lb(),
        duration: c.duration,
        tweens: [],
        createTween: function (b, c) {
          var d = n.Tween(
            a,
            j.opts,
            b,
            c,
            j.opts.specialEasing[b] || j.opts.easing
          );
          return j.tweens.push(d), d;
        },
        stop: function (b) {
          var c = 0,
            d = b ? j.tweens.length : 0;
          if (e) return this;
          for (e = !0; d > c; c++) j.tweens[c].run(1);
          return (
            b
              ? (h.notifyWith(a, [j, 1, 0]), h.resolveWith(a, [j, b]))
              : h.rejectWith(a, [j, b]),
            this
          );
        },
      }),
      k = j.props;
    for (pb(k, j.opts.specialEasing); g > f; f++)
      if ((d = qb.prefilters[f].call(j, a, k, j.opts)))
        return (
          n.isFunction(d.stop) &&
            (n._queueHooks(j.elem, j.opts.queue).stop = n.proxy(d.stop, d)),
          d
        );
    return (
      n.map(k, nb, j),
      n.isFunction(j.opts.start) && j.opts.start.call(a, j),
      n.fx.timer(n.extend(i, { elem: a, anim: j, queue: j.opts.queue })),
      j
        .progress(j.opts.progress)
        .done(j.opts.done, j.opts.complete)
        .fail(j.opts.fail)
        .always(j.opts.always)
    );
  }
  (n.Animation = n.extend(qb, {
    tweeners: {
      "*": [
        function (a, b) {
          var c = this.createTween(a, b);
          return X(c.elem, a, U.exec(b), c), c;
        },
      ],
    },
    tweener: function (a, b) {
      n.isFunction(a) ? ((b = a), (a = ["*"])) : (a = a.match(G));
      for (var c, d = 0, e = a.length; e > d; d++)
        (c = a[d]),
          (qb.tweeners[c] = qb.tweeners[c] || []),
          qb.tweeners[c].unshift(b);
    },
    prefilters: [ob],
    prefilter: function (a, b) {
      b ? qb.prefilters.unshift(a) : qb.prefilters.push(a);
    },
  })),
    (n.speed = function (a, b, c) {
      var d =
        a && "object" == typeof a
          ? n.extend({}, a)
          : {
              complete: c || (!c && b) || (n.isFunction(a) && a),
              duration: a,
              easing: (c && b) || (b && !n.isFunction(b) && b),
            };
      return (
        (d.duration = n.fx.off
          ? 0
          : "number" == typeof d.duration
          ? d.duration
          : d.duration in n.fx.speeds
          ? n.fx.speeds[d.duration]
          : n.fx.speeds._default),
        (null != d.queue && d.queue !== !0) || (d.queue = "fx"),
        (d.old = d.complete),
        (d.complete = function () {
          n.isFunction(d.old) && d.old.call(this),
            d.queue && n.dequeue(this, d.queue);
        }),
        d
      );
    }),
    n.fn.extend({
      fadeTo: function (a, b, c, d) {
        return this.filter(W)
          .css("opacity", 0)
          .show()
          .end()
          .animate({ opacity: b }, a, c, d);
      },
      animate: function (a, b, c, d) {
        var e = n.isEmptyObject(a),
          f = n.speed(b, c, d),
          g = function () {
            var b = qb(this, n.extend({}, a), f);
            (e || n._data(this, "finish")) && b.stop(!0);
          };
        return (
          (g.finish = g),
          e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g)
        );
      },
      stop: function (a, b, c) {
        var d = function (a) {
          var b = a.stop;
          delete a.stop, b(c);
        };
        return (
          "string" != typeof a && ((c = b), (b = a), (a = void 0)),
          b && a !== !1 && this.queue(a || "fx", []),
          this.each(function () {
            var b = !0,
              e = null != a && a + "queueHooks",
              f = n.timers,
              g = n._data(this);
            if (e) g[e] && g[e].stop && d(g[e]);
            else for (e in g) g[e] && g[e].stop && kb.test(e) && d(g[e]);
            for (e = f.length; e--; )
              f[e].elem !== this ||
                (null != a && f[e].queue !== a) ||
                (f[e].anim.stop(c), (b = !1), f.splice(e, 1));
            (!b && c) || n.dequeue(this, a);
          })
        );
      },
      finish: function (a) {
        return (
          a !== !1 && (a = a || "fx"),
          this.each(function () {
            var b,
              c = n._data(this),
              d = c[a + "queue"],
              e = c[a + "queueHooks"],
              f = n.timers,
              g = d ? d.length : 0;
            for (
              c.finish = !0,
                n.queue(this, a, []),
                e && e.stop && e.stop.call(this, !0),
                b = f.length;
              b--;

            )
              f[b].elem === this &&
                f[b].queue === a &&
                (f[b].anim.stop(!0), f.splice(b, 1));
            for (b = 0; g > b; b++)
              d[b] && d[b].finish && d[b].finish.call(this);
            delete c.finish;
          })
        );
      },
    }),
    n.each(["toggle", "show", "hide"], function (a, b) {
      var c = n.fn[b];
      n.fn[b] = function (a, d, e) {
        return null == a || "boolean" == typeof a
          ? c.apply(this, arguments)
          : this.animate(mb(b, !0), a, d, e);
      };
    }),
    n.each(
      {
        slideDown: mb("show"),
        slideUp: mb("hide"),
        slideToggle: mb("toggle"),
        fadeIn: { opacity: "show" },
        fadeOut: { opacity: "hide" },
        fadeToggle: { opacity: "toggle" },
      },
      function (a, b) {
        n.fn[a] = function (a, c, d) {
          return this.animate(b, a, c, d);
        };
      }
    ),
    (n.timers = []),
    (n.fx.tick = function () {
      var a,
        b = n.timers,
        c = 0;
      for (hb = n.now(); c < b.length; c++)
        (a = b[c]), a() || b[c] !== a || b.splice(c--, 1);
      b.length || n.fx.stop(), (hb = void 0);
    }),
    (n.fx.timer = function (a) {
      n.timers.push(a), a() ? n.fx.start() : n.timers.pop();
    }),
    (n.fx.interval = 13),
    (n.fx.start = function () {
      ib || (ib = a.setInterval(n.fx.tick, n.fx.interval));
    }),
    (n.fx.stop = function () {
      a.clearInterval(ib), (ib = null);
    }),
    (n.fx.speeds = { slow: 600, fast: 200, _default: 400 }),
    (n.fn.delay = function (b, c) {
      return (
        (b = n.fx ? n.fx.speeds[b] || b : b),
        (c = c || "fx"),
        this.queue(c, function (c, d) {
          var e = a.setTimeout(c, b);
          d.stop = function () {
            a.clearTimeout(e);
          };
        })
      );
    }),
    (function () {
      var a,
        b = d.createElement("input"),
        c = d.createElement("div"),
        e = d.createElement("select"),
        f = e.appendChild(d.createElement("option"));
      (c = d.createElement("div")),
        c.setAttribute("className", "t"),
        (c.innerHTML =
          "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>"),
        (a = c.getElementsByTagName("a")[0]),
        b.setAttribute("type", "checkbox"),
        c.appendChild(b),
        (a = c.getElementsByTagName("a")[0]),
        (a.style.cssText = "top:1px"),
        (l.getSetAttribute = "t" !== c.className),
        (l.style = /top/.test(a.getAttribute("style"))),
        (l.hrefNormalized = "/a" === a.getAttribute("href")),
        (l.checkOn = !!b.value),
        (l.optSelected = f.selected),
        (l.enctype = !!d.createElement("form").enctype),
        (e.disabled = !0),
        (l.optDisabled = !f.disabled),
        (b = d.createElement("input")),
        b.setAttribute("value", ""),
        (l.input = "" === b.getAttribute("value")),
        (b.value = "t"),
        b.setAttribute("type", "radio"),
        (l.radioValue = "t" === b.value);
    })();
  var rb = /\r/g,
    sb = /[\x20\t\r\n\f]+/g;
  n.fn.extend({
    val: function (a) {
      var b,
        c,
        d,
        e = this[0];
      {
        if (arguments.length)
          return (
            (d = n.isFunction(a)),
            this.each(function (c) {
              var e;
              1 === this.nodeType &&
                ((e = d ? a.call(this, c, n(this).val()) : a),
                null == e
                  ? (e = "")
                  : "number" == typeof e
                  ? (e += "")
                  : n.isArray(e) &&
                    (e = n.map(e, function (a) {
                      return null == a ? "" : a + "";
                    })),
                (b =
                  n.valHooks[this.type] ||
                  n.valHooks[this.nodeName.toLowerCase()]),
                (b && "set" in b && void 0 !== b.set(this, e, "value")) ||
                  (this.value = e));
            })
          );
        if (e)
          return (
            (b = n.valHooks[e.type] || n.valHooks[e.nodeName.toLowerCase()]),
            b && "get" in b && void 0 !== (c = b.get(e, "value"))
              ? c
              : ((c = e.value),
                "string" == typeof c ? c.replace(rb, "") : null == c ? "" : c)
          );
      }
    },
  }),
    n.extend({
      valHooks: {
        option: {
          get: function (a) {
            var b = n.find.attr(a, "value");
            return null != b ? b : n.trim(n.text(a)).replace(sb, " ");
          },
        },
        select: {
          get: function (a) {
            for (
              var b,
                c,
                d = a.options,
                e = a.selectedIndex,
                f = "select-one" === a.type || 0 > e,
                g = f ? null : [],
                h = f ? e + 1 : d.length,
                i = 0 > e ? h : f ? e : 0;
              h > i;
              i++
            )
              if (
                ((c = d[i]),
                (c.selected || i === e) &&
                  (l.optDisabled
                    ? !c.disabled
                    : null === c.getAttribute("disabled")) &&
                  (!c.parentNode.disabled ||
                    !n.nodeName(c.parentNode, "optgroup")))
              ) {
                if (((b = n(c).val()), f)) return b;
                g.push(b);
              }
            return g;
          },
          set: function (a, b) {
            var c,
              d,
              e = a.options,
              f = n.makeArray(b),
              g = e.length;
            while (g--)
              if (((d = e[g]), n.inArray(n.valHooks.option.get(d), f) > -1))
                try {
                  d.selected = c = !0;
                } catch (h) {
                  d.scrollHeight;
                }
              else d.selected = !1;
            return c || (a.selectedIndex = -1), e;
          },
        },
      },
    }),
    n.each(["radio", "checkbox"], function () {
      (n.valHooks[this] = {
        set: function (a, b) {
          return n.isArray(b)
            ? (a.checked = n.inArray(n(a).val(), b) > -1)
            : void 0;
        },
      }),
        l.checkOn ||
          (n.valHooks[this].get = function (a) {
            return null === a.getAttribute("value") ? "on" : a.value;
          });
    });
  var tb,
    ub,
    vb = n.expr.attrHandle,
    wb = /^(?:checked|selected)$/i,
    xb = l.getSetAttribute,
    yb = l.input;
  n.fn.extend({
    attr: function (a, b) {
      return Y(this, n.attr, a, b, arguments.length > 1);
    },
    removeAttr: function (a) {
      return this.each(function () {
        n.removeAttr(this, a);
      });
    },
  }),
    n.extend({
      attr: function (a, b, c) {
        var d,
          e,
          f = a.nodeType;
        if (3 !== f && 8 !== f && 2 !== f)
          return "undefined" == typeof a.getAttribute
            ? n.prop(a, b, c)
            : ((1 === f && n.isXMLDoc(a)) ||
                ((b = b.toLowerCase()),
                (e = n.attrHooks[b] || (n.expr.match.bool.test(b) ? ub : tb))),
              void 0 !== c
                ? null === c
                  ? void n.removeAttr(a, b)
                  : e && "set" in e && void 0 !== (d = e.set(a, c, b))
                  ? d
                  : (a.setAttribute(b, c + ""), c)
                : e && "get" in e && null !== (d = e.get(a, b))
                ? d
                : ((d = n.find.attr(a, b)), null == d ? void 0 : d));
      },
      attrHooks: {
        type: {
          set: function (a, b) {
            if (!l.radioValue && "radio" === b && n.nodeName(a, "input")) {
              var c = a.value;
              return a.setAttribute("type", b), c && (a.value = c), b;
            }
          },
        },
      },
      removeAttr: function (a, b) {
        var c,
          d,
          e = 0,
          f = b && b.match(G);
        if (f && 1 === a.nodeType)
          while ((c = f[e++]))
            (d = n.propFix[c] || c),
              n.expr.match.bool.test(c)
                ? (yb && xb) || !wb.test(c)
                  ? (a[d] = !1)
                  : (a[n.camelCase("default-" + c)] = a[d] = !1)
                : n.attr(a, c, ""),
              a.removeAttribute(xb ? c : d);
      },
    }),
    (ub = {
      set: function (a, b, c) {
        return (
          b === !1
            ? n.removeAttr(a, c)
            : (yb && xb) || !wb.test(c)
            ? a.setAttribute((!xb && n.propFix[c]) || c, c)
            : (a[n.camelCase("default-" + c)] = a[c] = !0),
          c
        );
      },
    }),
    n.each(n.expr.match.bool.source.match(/\w+/g), function (a, b) {
      var c = vb[b] || n.find.attr;
      (yb && xb) || !wb.test(b)
        ? (vb[b] = function (a, b, d) {
            var e, f;
            return (
              d ||
                ((f = vb[b]),
                (vb[b] = e),
                (e = null != c(a, b, d) ? b.toLowerCase() : null),
                (vb[b] = f)),
              e
            );
          })
        : (vb[b] = function (a, b, c) {
            return c
              ? void 0
              : a[n.camelCase("default-" + b)]
              ? b.toLowerCase()
              : null;
          });
    }),
    (yb && xb) ||
      (n.attrHooks.value = {
        set: function (a, b, c) {
          return n.nodeName(a, "input")
            ? void (a.defaultValue = b)
            : tb && tb.set(a, b, c);
        },
      }),
    xb ||
      ((tb = {
        set: function (a, b, c) {
          var d = a.getAttributeNode(c);
          return (
            d || a.setAttributeNode((d = a.ownerDocument.createAttribute(c))),
            (d.value = b += ""),
            "value" === c || b === a.getAttribute(c) ? b : void 0
          );
        },
      }),
      (vb.id = vb.name = vb.coords = function (a, b, c) {
        var d;
        return c
          ? void 0
          : (d = a.getAttributeNode(b)) && "" !== d.value
          ? d.value
          : null;
      }),
      (n.valHooks.button = {
        get: function (a, b) {
          var c = a.getAttributeNode(b);
          return c && c.specified ? c.value : void 0;
        },
        set: tb.set,
      }),
      (n.attrHooks.contenteditable = {
        set: function (a, b, c) {
          tb.set(a, "" === b ? !1 : b, c);
        },
      }),
      n.each(["width", "height"], function (a, b) {
        n.attrHooks[b] = {
          set: function (a, c) {
            return "" === c ? (a.setAttribute(b, "auto"), c) : void 0;
          },
        };
      })),
    l.style ||
      (n.attrHooks.style = {
        get: function (a) {
          return a.style.cssText || void 0;
        },
        set: function (a, b) {
          return (a.style.cssText = b + "");
        },
      });
  var zb = /^(?:input|select|textarea|button|object)$/i,
    Ab = /^(?:a|area)$/i;
  n.fn.extend({
    prop: function (a, b) {
      return Y(this, n.prop, a, b, arguments.length > 1);
    },
    removeProp: function (a) {
      return (
        (a = n.propFix[a] || a),
        this.each(function () {
          try {
            (this[a] = void 0), delete this[a];
          } catch (b) {}
        })
      );
    },
  }),
    n.extend({
      prop: function (a, b, c) {
        var d,
          e,
          f = a.nodeType;
        if (3 !== f && 8 !== f && 2 !== f)
          return (
            (1 === f && n.isXMLDoc(a)) ||
              ((b = n.propFix[b] || b), (e = n.propHooks[b])),
            void 0 !== c
              ? e && "set" in e && void 0 !== (d = e.set(a, c, b))
                ? d
                : (a[b] = c)
              : e && "get" in e && null !== (d = e.get(a, b))
              ? d
              : a[b]
          );
      },
      propHooks: {
        tabIndex: {
          get: function (a) {
            var b = n.find.attr(a, "tabindex");
            return b
              ? parseInt(b, 10)
              : zb.test(a.nodeName) || (Ab.test(a.nodeName) && a.href)
              ? 0
              : -1;
          },
        },
      },
      propFix: { for: "htmlFor", class: "className" },
    }),
    l.hrefNormalized ||
      n.each(["href", "src"], function (a, b) {
        n.propHooks[b] = {
          get: function (a) {
            return a.getAttribute(b, 4);
          },
        };
      }),
    l.optSelected ||
      (n.propHooks.selected = {
        get: function (a) {
          var b = a.parentNode;
          return (
            b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex),
            null
          );
        },
        set: function (a) {
          var b = a.parentNode;
          b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex);
        },
      }),
    n.each(
      [
        "tabIndex",
        "readOnly",
        "maxLength",
        "cellSpacing",
        "cellPadding",
        "rowSpan",
        "colSpan",
        "useMap",
        "frameBorder",
        "contentEditable",
      ],
      function () {
        n.propFix[this.toLowerCase()] = this;
      }
    ),
    l.enctype || (n.propFix.enctype = "encoding");
  var Bb = /[\t\r\n\f]/g;
  function Cb(a) {
    return n.attr(a, "class") || "";
  }
  n.fn.extend({
    addClass: function (a) {
      var b,
        c,
        d,
        e,
        f,
        g,
        h,
        i = 0;
      if (n.isFunction(a))
        return this.each(function (b) {
          n(this).addClass(a.call(this, b, Cb(this)));
        });
      if ("string" == typeof a && a) {
        b = a.match(G) || [];
        while ((c = this[i++]))
          if (
            ((e = Cb(c)),
            (d = 1 === c.nodeType && (" " + e + " ").replace(Bb, " ")))
          ) {
            g = 0;
            while ((f = b[g++])) d.indexOf(" " + f + " ") < 0 && (d += f + " ");
            (h = n.trim(d)), e !== h && n.attr(c, "class", h);
          }
      }
      return this;
    },
    removeClass: function (a) {
      var b,
        c,
        d,
        e,
        f,
        g,
        h,
        i = 0;
      if (n.isFunction(a))
        return this.each(function (b) {
          n(this).removeClass(a.call(this, b, Cb(this)));
        });
      if (!arguments.length) return this.attr("class", "");
      if ("string" == typeof a && a) {
        b = a.match(G) || [];
        while ((c = this[i++]))
          if (
            ((e = Cb(c)),
            (d = 1 === c.nodeType && (" " + e + " ").replace(Bb, " ")))
          ) {
            g = 0;
            while ((f = b[g++]))
              while (d.indexOf(" " + f + " ") > -1)
                d = d.replace(" " + f + " ", " ");
            (h = n.trim(d)), e !== h && n.attr(c, "class", h);
          }
      }
      return this;
    },
    toggleClass: function (a, b) {
      var c = typeof a;
      return "boolean" == typeof b && "string" === c
        ? b
          ? this.addClass(a)
          : this.removeClass(a)
        : n.isFunction(a)
        ? this.each(function (c) {
            n(this).toggleClass(a.call(this, c, Cb(this), b), b);
          })
        : this.each(function () {
            var b, d, e, f;
            if ("string" === c) {
              (d = 0), (e = n(this)), (f = a.match(G) || []);
              while ((b = f[d++]))
                e.hasClass(b) ? e.removeClass(b) : e.addClass(b);
            } else (void 0 !== a && "boolean" !== c) || ((b = Cb(this)), b && n._data(this, "__className__", b), n.attr(this, "class", b || a === !1 ? "" : n._data(this, "__className__") || ""));
          });
    },
    hasClass: function (a) {
      var b,
        c,
        d = 0;
      b = " " + a + " ";
      while ((c = this[d++]))
        if (
          1 === c.nodeType &&
          (" " + Cb(c) + " ").replace(Bb, " ").indexOf(b) > -1
        )
          return !0;
      return !1;
    },
  }),
    n.each(
      "blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(
        " "
      ),
      function (a, b) {
        n.fn[b] = function (a, c) {
          return arguments.length > 0
            ? this.on(b, null, a, c)
            : this.trigger(b);
        };
      }
    ),
    n.fn.extend({
      hover: function (a, b) {
        return this.mouseenter(a).mouseleave(b || a);
      },
    });
  var Db = a.location,
    Eb = n.now(),
    Fb = /\?/,
    Gb = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;
  (n.parseJSON = function (b) {
    if (a.JSON && a.JSON.parse) return a.JSON.parse(b + "");
    var c,
      d = null,
      e = n.trim(b + "");
    return e &&
      !n.trim(
        e.replace(Gb, function (a, b, e, f) {
          return (
            c && b && (d = 0), 0 === d ? a : ((c = e || b), (d += !f - !e), "")
          );
        })
      )
      ? Function("return " + e)()
      : n.error("Invalid JSON: " + b);
  }),
    (n.parseXML = function (b) {
      var c, d;
      if (!b || "string" != typeof b) return null;
      try {
        a.DOMParser
          ? ((d = new a.DOMParser()), (c = d.parseFromString(b, "text/xml")))
          : ((c = new a.ActiveXObject("Microsoft.XMLDOM")),
            (c.async = "false"),
            c.loadXML(b));
      } catch (e) {
        c = void 0;
      }
      return (
        (c &&
          c.documentElement &&
          !c.getElementsByTagName("parsererror").length) ||
          n.error("Invalid XML: " + b),
        c
      );
    });
  var Hb = /#.*$/,
    Ib = /([?&])_=[^&]*/,
    Jb = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm,
    Kb = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
    Lb = /^(?:GET|HEAD)$/,
    Mb = /^\/\//,
    Nb = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
    Ob = {},
    Pb = {},
    Qb = "*/".concat("*"),
    Rb = Db.href,
    Sb = Nb.exec(Rb.toLowerCase()) || [];
  function Tb(a) {
    return function (b, c) {
      "string" != typeof b && ((c = b), (b = "*"));
      var d,
        e = 0,
        f = b.toLowerCase().match(G) || [];
      if (n.isFunction(c))
        while ((d = f[e++]))
          "+" === d.charAt(0)
            ? ((d = d.slice(1) || "*"), (a[d] = a[d] || []).unshift(c))
            : (a[d] = a[d] || []).push(c);
    };
  }
  function Ub(a, b, c, d) {
    var e = {},
      f = a === Pb;
    function g(h) {
      var i;
      return (
        (e[h] = !0),
        n.each(a[h] || [], function (a, h) {
          var j = h(b, c, d);
          return "string" != typeof j || f || e[j]
            ? f
              ? !(i = j)
              : void 0
            : (b.dataTypes.unshift(j), g(j), !1);
        }),
        i
      );
    }
    return g(b.dataTypes[0]) || (!e["*"] && g("*"));
  }
  function Vb(a, b) {
    var c,
      d,
      e = n.ajaxSettings.flatOptions || {};
    for (d in b) void 0 !== b[d] && ((e[d] ? a : c || (c = {}))[d] = b[d]);
    return c && n.extend(!0, a, c), a;
  }
  function Wb(a, b, c) {
    var d,
      e,
      f,
      g,
      h = a.contents,
      i = a.dataTypes;
    while ("*" === i[0])
      i.shift(),
        void 0 === e && (e = a.mimeType || b.getResponseHeader("Content-Type"));
    if (e)
      for (g in h)
        if (h[g] && h[g].test(e)) {
          i.unshift(g);
          break;
        }
    if (i[0] in c) f = i[0];
    else {
      for (g in c) {
        if (!i[0] || a.converters[g + " " + i[0]]) {
          f = g;
          break;
        }
        d || (d = g);
      }
      f = f || d;
    }
    return f ? (f !== i[0] && i.unshift(f), c[f]) : void 0;
  }
  function Xb(a, b, c, d) {
    var e,
      f,
      g,
      h,
      i,
      j = {},
      k = a.dataTypes.slice();
    if (k[1]) for (g in a.converters) j[g.toLowerCase()] = a.converters[g];
    f = k.shift();
    while (f)
      if (
        (a.responseFields[f] && (c[a.responseFields[f]] = b),
        !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)),
        (i = f),
        (f = k.shift()))
      )
        if ("*" === f) f = i;
        else if ("*" !== i && i !== f) {
          if (((g = j[i + " " + f] || j["* " + f]), !g))
            for (e in j)
              if (
                ((h = e.split(" ")),
                h[1] === f && (g = j[i + " " + h[0]] || j["* " + h[0]]))
              ) {
                g === !0
                  ? (g = j[e])
                  : j[e] !== !0 && ((f = h[0]), k.unshift(h[1]));
                break;
              }
          if (g !== !0)
            if (g && a["throws"]) b = g(b);
            else
              try {
                b = g(b);
              } catch (l) {
                return {
                  state: "parsererror",
                  error: g ? l : "No conversion from " + i + " to " + f,
                };
              }
        }
    return { state: "success", data: b };
  }
  n.extend({
    active: 0,
    lastModified: {},
    etag: {},
    ajaxSettings: {
      url: Rb,
      type: "GET",
      isLocal: Kb.test(Sb[1]),
      global: !0,
      processData: !0,
      async: !0,
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",
      accepts: {
        "*": Qb,
        text: "text/plain",
        html: "text/html",
        xml: "application/xml, text/xml",
        json: "application/json, text/javascript",
      },
      contents: { xml: /\bxml\b/, html: /\bhtml/, json: /\bjson\b/ },
      responseFields: {
        xml: "responseXML",
        text: "responseText",
        json: "responseJSON",
      },
      converters: {
        "* text": String,
        "text html": !0,
        "text json": n.parseJSON,
        "text xml": n.parseXML,
      },
      flatOptions: { url: !0, context: !0 },
    },
    ajaxSetup: function (a, b) {
      return b ? Vb(Vb(a, n.ajaxSettings), b) : Vb(n.ajaxSettings, a);
    },
    ajaxPrefilter: Tb(Ob),
    ajaxTransport: Tb(Pb),
    ajax: function (b, c) {
      "object" == typeof b && ((c = b), (b = void 0)), (c = c || {});
      var d,
        e,
        f,
        g,
        h,
        i,
        j,
        k,
        l = n.ajaxSetup({}, c),
        m = l.context || l,
        o = l.context && (m.nodeType || m.jquery) ? n(m) : n.event,
        p = n.Deferred(),
        q = n.Callbacks("once memory"),
        r = l.statusCode || {},
        s = {},
        t = {},
        u = 0,
        v = "canceled",
        w = {
          readyState: 0,
          getResponseHeader: function (a) {
            var b;
            if (2 === u) {
              if (!k) {
                k = {};
                while ((b = Jb.exec(g))) k[b[1].toLowerCase()] = b[2];
              }
              b = k[a.toLowerCase()];
            }
            return null == b ? null : b;
          },
          getAllResponseHeaders: function () {
            return 2 === u ? g : null;
          },
          setRequestHeader: function (a, b) {
            var c = a.toLowerCase();
            return u || ((a = t[c] = t[c] || a), (s[a] = b)), this;
          },
          overrideMimeType: function (a) {
            return u || (l.mimeType = a), this;
          },
          statusCode: function (a) {
            var b;
            if (a)
              if (2 > u) for (b in a) r[b] = [r[b], a[b]];
              else w.always(a[w.status]);
            return this;
          },
          abort: function (a) {
            var b = a || v;
            return j && j.abort(b), y(0, b), this;
          },
        };
      if (
        ((p.promise(w).complete = q.add),
        (w.success = w.done),
        (w.error = w.fail),
        (l.url = ((b || l.url || Rb) + "")
          .replace(Hb, "")
          .replace(Mb, Sb[1] + "//")),
        (l.type = c.method || c.type || l.method || l.type),
        (l.dataTypes = n
          .trim(l.dataType || "*")
          .toLowerCase()
          .match(G) || [""]),
        null == l.crossDomain &&
          ((d = Nb.exec(l.url.toLowerCase())),
          (l.crossDomain = !(
            !d ||
            (d[1] === Sb[1] &&
              d[2] === Sb[2] &&
              (d[3] || ("http:" === d[1] ? "80" : "443")) ===
                (Sb[3] || ("http:" === Sb[1] ? "80" : "443")))
          ))),
        l.data &&
          l.processData &&
          "string" != typeof l.data &&
          (l.data = n.param(l.data, l.traditional)),
        Ub(Ob, l, c, w),
        2 === u)
      )
        return w;
      (i = n.event && l.global),
        i && 0 === n.active++ && n.event.trigger("ajaxStart"),
        (l.type = l.type.toUpperCase()),
        (l.hasContent = !Lb.test(l.type)),
        (f = l.url),
        l.hasContent ||
          (l.data &&
            ((f = l.url += (Fb.test(f) ? "&" : "?") + l.data), delete l.data),
          l.cache === !1 &&
            (l.url = Ib.test(f)
              ? f.replace(Ib, "$1_=" + Eb++)
              : f + (Fb.test(f) ? "&" : "?") + "_=" + Eb++)),
        l.ifModified &&
          (n.lastModified[f] &&
            w.setRequestHeader("If-Modified-Since", n.lastModified[f]),
          n.etag[f] && w.setRequestHeader("If-None-Match", n.etag[f])),
        ((l.data && l.hasContent && l.contentType !== !1) || c.contentType) &&
          w.setRequestHeader("Content-Type", l.contentType),
        w.setRequestHeader(
          "Accept",
          l.dataTypes[0] && l.accepts[l.dataTypes[0]]
            ? l.accepts[l.dataTypes[0]] +
                ("*" !== l.dataTypes[0] ? ", " + Qb + "; q=0.01" : "")
            : l.accepts["*"]
        );
      for (e in l.headers) w.setRequestHeader(e, l.headers[e]);
      if (l.beforeSend && (l.beforeSend.call(m, w, l) === !1 || 2 === u))
        return w.abort();
      v = "abort";
      for (e in { success: 1, error: 1, complete: 1 }) w[e](l[e]);
      if ((j = Ub(Pb, l, c, w))) {
        if (((w.readyState = 1), i && o.trigger("ajaxSend", [w, l]), 2 === u))
          return w;
        l.async &&
          l.timeout > 0 &&
          (h = a.setTimeout(function () {
            w.abort("timeout");
          }, l.timeout));
        try {
          (u = 1), j.send(s, y);
        } catch (x) {
          if (!(2 > u)) throw x;
          y(-1, x);
        }
      } else y(-1, "No Transport");
      function y(b, c, d, e) {
        var k,
          s,
          t,
          v,
          x,
          y = c;
        2 !== u &&
          ((u = 2),
          h && a.clearTimeout(h),
          (j = void 0),
          (g = e || ""),
          (w.readyState = b > 0 ? 4 : 0),
          (k = (b >= 200 && 300 > b) || 304 === b),
          d && (v = Wb(l, w, d)),
          (v = Xb(l, v, w, k)),
          k
            ? (l.ifModified &&
                ((x = w.getResponseHeader("Last-Modified")),
                x && (n.lastModified[f] = x),
                (x = w.getResponseHeader("etag")),
                x && (n.etag[f] = x)),
              204 === b || "HEAD" === l.type
                ? (y = "nocontent")
                : 304 === b
                ? (y = "notmodified")
                : ((y = v.state), (s = v.data), (t = v.error), (k = !t)))
            : ((t = y), (!b && y) || ((y = "error"), 0 > b && (b = 0))),
          (w.status = b),
          (w.statusText = (c || y) + ""),
          k ? p.resolveWith(m, [s, y, w]) : p.rejectWith(m, [w, y, t]),
          w.statusCode(r),
          (r = void 0),
          i && o.trigger(k ? "ajaxSuccess" : "ajaxError", [w, l, k ? s : t]),
          q.fireWith(m, [w, y]),
          i &&
            (o.trigger("ajaxComplete", [w, l]),
            --n.active || n.event.trigger("ajaxStop")));
      }
      return w;
    },
    getJSON: function (a, b, c) {
      return n.get(a, b, c, "json");
    },
    getScript: function (a, b) {
      return n.get(a, void 0, b, "script");
    },
  }),
    n.each(["get", "post"], function (a, b) {
      n[b] = function (a, c, d, e) {
        return (
          n.isFunction(c) && ((e = e || d), (d = c), (c = void 0)),
          n.ajax(
            n.extend(
              { url: a, type: b, dataType: e, data: c, success: d },
              n.isPlainObject(a) && a
            )
          )
        );
      };
    }),
    (n._evalUrl = function (a) {
      return n.ajax({
        url: a,
        type: "GET",
        dataType: "script",
        cache: !0,
        async: !1,
        global: !1,
        throws: !0,
      });
    }),
    n.fn.extend({
      wrapAll: function (a) {
        if (n.isFunction(a))
          return this.each(function (b) {
            n(this).wrapAll(a.call(this, b));
          });
        if (this[0]) {
          var b = n(a, this[0].ownerDocument).eq(0).clone(!0);
          this[0].parentNode && b.insertBefore(this[0]),
            b
              .map(function () {
                var a = this;
                while (a.firstChild && 1 === a.firstChild.nodeType)
                  a = a.firstChild;
                return a;
              })
              .append(this);
        }
        return this;
      },
      wrapInner: function (a) {
        return n.isFunction(a)
          ? this.each(function (b) {
              n(this).wrapInner(a.call(this, b));
            })
          : this.each(function () {
              var b = n(this),
                c = b.contents();
              c.length ? c.wrapAll(a) : b.append(a);
            });
      },
      wrap: function (a) {
        var b = n.isFunction(a);
        return this.each(function (c) {
          n(this).wrapAll(b ? a.call(this, c) : a);
        });
      },
      unwrap: function () {
        return this.parent()
          .each(function () {
            n.nodeName(this, "body") || n(this).replaceWith(this.childNodes);
          })
          .end();
      },
    });
  function Yb(a) {
    return (a.style && a.style.display) || n.css(a, "display");
  }
  function Zb(a) {
    if (!n.contains(a.ownerDocument || d, a)) return !0;
    while (a && 1 === a.nodeType) {
      if ("none" === Yb(a) || "hidden" === a.type) return !0;
      a = a.parentNode;
    }
    return !1;
  }
  (n.expr.filters.hidden = function (a) {
    return l.reliableHiddenOffsets()
      ? a.offsetWidth <= 0 && a.offsetHeight <= 0 && !a.getClientRects().length
      : Zb(a);
  }),
    (n.expr.filters.visible = function (a) {
      return !n.expr.filters.hidden(a);
    });
  var $b = /%20/g,
    _b = /\[\]$/,
    ac = /\r?\n/g,
    bc = /^(?:submit|button|image|reset|file)$/i,
    cc = /^(?:input|select|textarea|keygen)/i;
  function dc(a, b, c, d) {
    var e;
    if (n.isArray(b))
      n.each(b, function (b, e) {
        c || _b.test(a)
          ? d(a, e)
          : dc(
              a + "[" + ("object" == typeof e && null != e ? b : "") + "]",
              e,
              c,
              d
            );
      });
    else if (c || "object" !== n.type(b)) d(a, b);
    else for (e in b) dc(a + "[" + e + "]", b[e], c, d);
  }
  (n.param = function (a, b) {
    var c,
      d = [],
      e = function (a, b) {
        (b = n.isFunction(b) ? b() : null == b ? "" : b),
          (d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(b));
      };
    if (
      (void 0 === b && (b = n.ajaxSettings && n.ajaxSettings.traditional),
      n.isArray(a) || (a.jquery && !n.isPlainObject(a)))
    )
      n.each(a, function () {
        e(this.name, this.value);
      });
    else for (c in a) dc(c, a[c], b, e);
    return d.join("&").replace($b, "+");
  }),
    n.fn.extend({
      serialize: function () {
        return n.param(this.serializeArray());
      },
      serializeArray: function () {
        return this.map(function () {
          var a = n.prop(this, "elements");
          return a ? n.makeArray(a) : this;
        })
          .filter(function () {
            var a = this.type;
            return (
              this.name &&
              !n(this).is(":disabled") &&
              cc.test(this.nodeName) &&
              !bc.test(a) &&
              (this.checked || !Z.test(a))
            );
          })
          .map(function (a, b) {
            var c = n(this).val();
            return null == c
              ? null
              : n.isArray(c)
              ? n.map(c, function (a) {
                  return { name: b.name, value: a.replace(ac, "\r\n") };
                })
              : { name: b.name, value: c.replace(ac, "\r\n") };
          })
          .get();
      },
    }),
    (n.ajaxSettings.xhr =
      void 0 !== a.ActiveXObject
        ? function () {
            return this.isLocal
              ? ic()
              : d.documentMode > 8
              ? hc()
              : (/^(get|post|head|put|delete|options)$/i.test(this.type) &&
                  hc()) ||
                ic();
          }
        : hc);
  var ec = 0,
    fc = {},
    gc = n.ajaxSettings.xhr();
  a.attachEvent &&
    a.attachEvent("onunload", function () {
      for (var a in fc) fc[a](void 0, !0);
    }),
    (l.cors = !!gc && "withCredentials" in gc),
    (gc = l.ajax = !!gc),
    gc &&
      n.ajaxTransport(function (b) {
        if (!b.crossDomain || l.cors) {
          var c;
          return {
            send: function (d, e) {
              var f,
                g = b.xhr(),
                h = ++ec;
              if (
                (g.open(b.type, b.url, b.async, b.username, b.password),
                b.xhrFields)
              )
                for (f in b.xhrFields) g[f] = b.xhrFields[f];
              b.mimeType &&
                g.overrideMimeType &&
                g.overrideMimeType(b.mimeType),
                b.crossDomain ||
                  d["X-Requested-With"] ||
                  (d["X-Requested-With"] = "XMLHttpRequest");
              for (f in d) void 0 !== d[f] && g.setRequestHeader(f, d[f] + "");
              g.send((b.hasContent && b.data) || null),
                (c = function (a, d) {
                  var f, i, j;
                  if (c && (d || 4 === g.readyState))
                    if (
                      (delete fc[h],
                      (c = void 0),
                      (g.onreadystatechange = n.noop),
                      d)
                    )
                      4 !== g.readyState && g.abort();
                    else {
                      (j = {}),
                        (f = g.status),
                        "string" == typeof g.responseText &&
                          (j.text = g.responseText);
                      try {
                        i = g.statusText;
                      } catch (k) {
                        i = "";
                      }
                      f || !b.isLocal || b.crossDomain
                        ? 1223 === f && (f = 204)
                        : (f = j.text ? 200 : 404);
                    }
                  j && e(f, i, j, g.getAllResponseHeaders());
                }),
                b.async
                  ? 4 === g.readyState
                    ? a.setTimeout(c)
                    : (g.onreadystatechange = fc[h] = c)
                  : c();
            },
            abort: function () {
              c && c(void 0, !0);
            },
          };
        }
      });
  function hc() {
    try {
      return new a.XMLHttpRequest();
    } catch (b) {}
  }
  function ic() {
    try {
      return new a.ActiveXObject("Microsoft.XMLHTTP");
    } catch (b) {}
  }
  n.ajaxSetup({
    accepts: {
      script:
        "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript",
    },
    contents: { script: /\b(?:java|ecma)script\b/ },
    converters: {
      "text script": function (a) {
        return n.globalEval(a), a;
      },
    },
  }),
    n.ajaxPrefilter("script", function (a) {
      void 0 === a.cache && (a.cache = !1),
        a.crossDomain && ((a.type = "GET"), (a.global = !1));
    }),
    n.ajaxTransport("script", function (a) {
      if (a.crossDomain) {
        var b,
          c = d.head || n("head")[0] || d.documentElement;
        return {
          send: function (e, f) {
            (b = d.createElement("script")),
              (b.async = !0),
              a.scriptCharset && (b.charset = a.scriptCharset),
              (b.src = a.url),
              (b.onload = b.onreadystatechange = function (a, c) {
                (c || !b.readyState || /loaded|complete/.test(b.readyState)) &&
                  ((b.onload = b.onreadystatechange = null),
                  b.parentNode && b.parentNode.removeChild(b),
                  (b = null),
                  c || f(200, "success"));
              }),
              c.insertBefore(b, c.firstChild);
          },
          abort: function () {
            b && b.onload(void 0, !0);
          },
        };
      }
    });
  var jc = [],
    kc = /(=)\?(?=&|$)|\?\?/;
  n.ajaxSetup({
    jsonp: "callback",
    jsonpCallback: function () {
      var a = jc.pop() || n.expando + "_" + Eb++;
      return (this[a] = !0), a;
    },
  }),
    n.ajaxPrefilter("json jsonp", function (b, c, d) {
      var e,
        f,
        g,
        h =
          b.jsonp !== !1 &&
          (kc.test(b.url)
            ? "url"
            : "string" == typeof b.data &&
              0 ===
                (b.contentType || "").indexOf(
                  "application/x-www-form-urlencoded"
                ) &&
              kc.test(b.data) &&
              "data");
      return h || "jsonp" === b.dataTypes[0]
        ? ((e = b.jsonpCallback = n.isFunction(b.jsonpCallback)
            ? b.jsonpCallback()
            : b.jsonpCallback),
          h
            ? (b[h] = b[h].replace(kc, "$1" + e))
            : b.jsonp !== !1 &&
              (b.url += (Fb.test(b.url) ? "&" : "?") + b.jsonp + "=" + e),
          (b.converters["script json"] = function () {
            return g || n.error(e + " was not called"), g[0];
          }),
          (b.dataTypes[0] = "json"),
          (f = a[e]),
          (a[e] = function () {
            g = arguments;
          }),
          d.always(function () {
            void 0 === f ? n(a).removeProp(e) : (a[e] = f),
              b[e] && ((b.jsonpCallback = c.jsonpCallback), jc.push(e)),
              g && n.isFunction(f) && f(g[0]),
              (g = f = void 0);
          }),
          "script")
        : void 0;
    }),
    (n.parseHTML = function (a, b, c) {
      if (!a || "string" != typeof a) return null;
      "boolean" == typeof b && ((c = b), (b = !1)), (b = b || d);
      var e = x.exec(a),
        f = !c && [];
      return e
        ? [b.createElement(e[1])]
        : ((e = ja([a], b, f)),
          f && f.length && n(f).remove(),
          n.merge([], e.childNodes));
    });
  var lc = n.fn.load;
  (n.fn.load = function (a, b, c) {
    if ("string" != typeof a && lc) return lc.apply(this, arguments);
    var d,
      e,
      f,
      g = this,
      h = a.indexOf(" ");
    return (
      h > -1 && ((d = n.trim(a.slice(h, a.length))), (a = a.slice(0, h))),
      n.isFunction(b)
        ? ((c = b), (b = void 0))
        : b && "object" == typeof b && (e = "POST"),
      g.length > 0 &&
        n
          .ajax({ url: a, type: e || "GET", dataType: "html", data: b })
          .done(function (a) {
            (f = arguments),
              g.html(d ? n("<div>").append(n.parseHTML(a)).find(d) : a);
          })
          .always(
            c &&
              function (a, b) {
                g.each(function () {
                  c.apply(this, f || [a.responseText, b, a]);
                });
              }
          ),
      this
    );
  }),
    n.each(
      [
        "ajaxStart",
        "ajaxStop",
        "ajaxComplete",
        "ajaxError",
        "ajaxSuccess",
        "ajaxSend",
      ],
      function (a, b) {
        n.fn[b] = function (a) {
          return this.on(b, a);
        };
      }
    ),
    (n.expr.filters.animated = function (a) {
      return n.grep(n.timers, function (b) {
        return a === b.elem;
      }).length;
    });
  function mc(a) {
    return n.isWindow(a)
      ? a
      : 9 === a.nodeType
      ? a.defaultView || a.parentWindow
      : !1;
  }
  (n.offset = {
    setOffset: function (a, b, c) {
      var d,
        e,
        f,
        g,
        h,
        i,
        j,
        k = n.css(a, "position"),
        l = n(a),
        m = {};
      "static" === k && (a.style.position = "relative"),
        (h = l.offset()),
        (f = n.css(a, "top")),
        (i = n.css(a, "left")),
        (j =
          ("absolute" === k || "fixed" === k) &&
          n.inArray("auto", [f, i]) > -1),
        j
          ? ((d = l.position()), (g = d.top), (e = d.left))
          : ((g = parseFloat(f) || 0), (e = parseFloat(i) || 0)),
        n.isFunction(b) && (b = b.call(a, c, n.extend({}, h))),
        null != b.top && (m.top = b.top - h.top + g),
        null != b.left && (m.left = b.left - h.left + e),
        "using" in b ? b.using.call(a, m) : l.css(m);
    },
  }),
    n.fn.extend({
      offset: function (a) {
        if (arguments.length)
          return void 0 === a
            ? this
            : this.each(function (b) {
                n.offset.setOffset(this, a, b);
              });
        var b,
          c,
          d = { top: 0, left: 0 },
          e = this[0],
          f = e && e.ownerDocument;
        if (f)
          return (
            (b = f.documentElement),
            n.contains(b, e)
              ? ("undefined" != typeof e.getBoundingClientRect &&
                  (d = e.getBoundingClientRect()),
                (c = mc(f)),
                {
                  top:
                    d.top + (c.pageYOffset || b.scrollTop) - (b.clientTop || 0),
                  left:
                    d.left +
                    (c.pageXOffset || b.scrollLeft) -
                    (b.clientLeft || 0),
                })
              : d
          );
      },
      position: function () {
        if (this[0]) {
          var a,
            b,
            c = { top: 0, left: 0 },
            d = this[0];
          return (
            "fixed" === n.css(d, "position")
              ? (b = d.getBoundingClientRect())
              : ((a = this.offsetParent()),
                (b = this.offset()),
                n.nodeName(a[0], "html") || (c = a.offset()),
                (c.top += n.css(a[0], "borderTopWidth", !0)),
                (c.left += n.css(a[0], "borderLeftWidth", !0))),
            {
              top: b.top - c.top - n.css(d, "marginTop", !0),
              left: b.left - c.left - n.css(d, "marginLeft", !0),
            }
          );
        }
      },
      offsetParent: function () {
        return this.map(function () {
          var a = this.offsetParent;
          while (
            a &&
            !n.nodeName(a, "html") &&
            "static" === n.css(a, "position")
          )
            a = a.offsetParent;
          return a || Qa;
        });
      },
    }),
    n.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (
      a,
      b
    ) {
      var c = /Y/.test(b);
      n.fn[a] = function (d) {
        return Y(
          this,
          function (a, d, e) {
            var f = mc(a);
            return void 0 === e
              ? f
                ? b in f
                  ? f[b]
                  : f.document.documentElement[d]
                : a[d]
              : void (f
                  ? f.scrollTo(
                      c ? n(f).scrollLeft() : e,
                      c ? e : n(f).scrollTop()
                    )
                  : (a[d] = e));
          },
          a,
          d,
          arguments.length,
          null
        );
      };
    }),
    n.each(["top", "left"], function (a, b) {
      n.cssHooks[b] = Ua(l.pixelPosition, function (a, c) {
        return c
          ? ((c = Sa(a, b)), Oa.test(c) ? n(a).position()[b] + "px" : c)
          : void 0;
      });
    }),
    n.each({ Height: "height", Width: "width" }, function (a, b) {
      n.each(
        {
          padding: "inner" + a,
          content: b,
          "": "outer" + a,
        },
        function (c, d) {
          n.fn[d] = function (d, e) {
            var f = arguments.length && (c || "boolean" != typeof d),
              g = c || (d === !0 || e === !0 ? "margin" : "border");
            return Y(
              this,
              function (b, c, d) {
                var e;
                return n.isWindow(b)
                  ? b.document.documentElement["client" + a]
                  : 9 === b.nodeType
                  ? ((e = b.documentElement),
                    Math.max(
                      b.body["scroll" + a],
                      e["scroll" + a],
                      b.body["offset" + a],
                      e["offset" + a],
                      e["client" + a]
                    ))
                  : void 0 === d
                  ? n.css(b, c, g)
                  : n.style(b, c, d, g);
              },
              b,
              f ? d : void 0,
              f,
              null
            );
          };
        }
      );
    }),
    n.fn.extend({
      bind: function (a, b, c) {
        return this.on(a, null, b, c);
      },
      unbind: function (a, b) {
        return this.off(a, null, b);
      },
      delegate: function (a, b, c, d) {
        return this.on(b, a, c, d);
      },
      undelegate: function (a, b, c) {
        return 1 === arguments.length
          ? this.off(a, "**")
          : this.off(b, a || "**", c);
      },
    }),
    (n.fn.size = function () {
      return this.length;
    }),
    (n.fn.andSelf = n.fn.addBack),
    "function" == typeof define &&
      define.amd &&
      define("jquery", [], function () {
        return n;
      });
  var nc = a.jQuery,
    oc = a.$;
  return (
    (n.noConflict = function (b) {
      return a.$ === n && (a.$ = oc), b && a.jQuery === n && (a.jQuery = nc), n;
    }),
    b || (a.jQuery = a.$ = n),
    n
  );
});

// Move jQuery to $telerik
$telerik.$ = jQuery.noConflict(true);
$telerik.$.ajaxPrefilter(function (s) {
  if (s.crossDomain) {
    s.contents.script = false;
  }
});
/* END Telerik.Web.UI.Common.jQuery.js */
/* START Telerik.Web.UI.Common.jQueryPlugins.js */
if (typeof $telerik.$ === "undefined") {
  $telerik.$ = jQuery;
  /*
   * jQuery Easing v1.3 - http://gsgd.co.uk/sandbox/jquery/easing/
   *
   * TERMS OF USE - jQuery Easing
   *
   * Open source under the BSD License.
   *
   * Copyright ï¿½ 2008 George McGinley Smith
   * All rights reserved.
   */
  /*
   * TERMS OF USE - EASING EQUATIONS
   *
   * Open source under the BSD License.
   *
   * Copyright ï¿½ 2001 Robert Penner
   * All rights reserved.
   */
}
(function (a) {
  a.easing.jswing = a.easing.swing;
  a.extend(a.easing, {
    def: "easeOutQuad",
    swing: function (i, h, e, f, g) {
      return a.easing[a.easing.def](i, h, e, f, g);
    },
    easeLinear: function (i, h, e, f, g) {
      return (f * h) / g + e;
    },
    easeInQuad: function (i, h, e, f, g) {
      return f * (h /= g) * h + e;
    },
    easeOutQuad: function (i, h, e, f, g) {
      return -f * (h /= g) * (h - 2) + e;
    },
    easeInOutQuad: function (i, h, e, f, g) {
      if ((h /= g / 2) < 1) {
        return (f / 2) * h * h + e;
      }
      return (-f / 2) * (--h * (h - 2) - 1) + e;
    },
    easeInCubic: function (i, h, e, f, g) {
      return f * (h /= g) * h * h + e;
    },
    easeOutCubic: function (i, h, e, f, g) {
      return f * ((h = h / g - 1) * h * h + 1) + e;
    },
    easeInOutCubic: function (i, h, e, f, g) {
      if ((h /= g / 2) < 1) {
        return (f / 2) * h * h * h + e;
      }
      return (f / 2) * ((h -= 2) * h * h + 2) + e;
    },
    easeInQuart: function (i, h, e, f, g) {
      return f * (h /= g) * h * h * h + e;
    },
    easeOutQuart: function (i, h, e, f, g) {
      return -f * ((h = h / g - 1) * h * h * h - 1) + e;
    },
    easeInOutQuart: function (i, h, e, f, g) {
      if ((h /= g / 2) < 1) {
        return (f / 2) * h * h * h * h + e;
      }
      return (-f / 2) * ((h -= 2) * h * h * h - 2) + e;
    },
    easeInQuint: function (i, h, e, f, g) {
      return f * (h /= g) * h * h * h * h + e;
    },
    easeOutQuint: function (i, h, e, f, g) {
      return f * ((h = h / g - 1) * h * h * h * h + 1) + e;
    },
    easeInOutQuint: function (i, h, e, f, g) {
      if ((h /= g / 2) < 1) {
        return (f / 2) * h * h * h * h * h + e;
      }
      return (f / 2) * ((h -= 2) * h * h * h * h + 2) + e;
    },
    easeInSine: function (i, h, e, f, g) {
      return -f * Math.cos((h / g) * (Math.PI / 2)) + f + e;
    },
    easeOutSine: function (i, h, e, f, g) {
      return f * Math.sin((h / g) * (Math.PI / 2)) + e;
    },
    easeInOutSine: function (i, h, e, f, g) {
      return (-f / 2) * (Math.cos((Math.PI * h) / g) - 1) + e;
    },
    easeInExpo: function (i, h, e, f, g) {
      return h == 0 ? e : f * Math.pow(2, 10 * (h / g - 1)) + e;
    },
    easeOutExpo: function (i, h, e, f, g) {
      return h == g ? e + f : f * (-Math.pow(2, (-10 * h) / g) + 1) + e;
    },
    easeInOutExpo: function (i, h, e, f, g) {
      if (h == 0) {
        return e;
      }
      if (h == g) {
        return e + f;
      }
      if ((h /= g / 2) < 1) {
        return (f / 2) * Math.pow(2, 10 * (h - 1)) + e;
      }
      return (f / 2) * (-Math.pow(2, -10 * --h) + 2) + e;
    },
    easeInCirc: function (i, h, e, f, g) {
      return -f * (Math.sqrt(1 - (h /= g) * h) - 1) + e;
    },
    easeOutCirc: function (i, h, e, f, g) {
      return f * Math.sqrt(1 - (h = h / g - 1) * h) + e;
    },
    easeInOutCirc: function (i, h, e, f, g) {
      if ((h /= g / 2) < 1) {
        return (-f / 2) * (Math.sqrt(1 - h * h) - 1) + e;
      }
      return (f / 2) * (Math.sqrt(1 - (h -= 2) * h) + 1) + e;
    },
    easeInElastic: function (l, k, f, g, h) {
      var j = 1.70158;
      var i = 0;
      var e = g;
      if (k == 0) {
        return f;
      }
      if ((k /= h) == 1) {
        return f + g;
      }
      if (!i) {
        i = h * 0.3;
      }
      if (e < Math.abs(g)) {
        e = g;
        var j = i / 4;
      } else {
        var j = (i / (2 * Math.PI)) * Math.asin(g / e);
      }
      return (
        -(
          e *
          Math.pow(2, 10 * (k -= 1)) *
          Math.sin(((k * h - j) * (2 * Math.PI)) / i)
        ) + f
      );
    },
    easeOutElastic: function (l, k, f, g, h) {
      var j = 1.70158;
      var i = 0;
      var e = g;
      if (k == 0) {
        return f;
      }
      if ((k /= h) == 1) {
        return f + g;
      }
      if (!i) {
        i = h * 0.3;
      }
      if (e < Math.abs(g)) {
        e = g;
        var j = i / 4;
      } else {
        var j = (i / (2 * Math.PI)) * Math.asin(g / e);
      }
      return (
        e * Math.pow(2, -10 * k) * Math.sin(((k * h - j) * (2 * Math.PI)) / i) +
        g +
        f
      );
    },
    easeInOutElastic: function (l, k, f, g, h) {
      var j = 1.70158;
      var i = 0;
      var e = g;
      if (k == 0) {
        return f;
      }
      if ((k /= h / 2) == 2) {
        return f + g;
      }
      if (!i) {
        i = h * (0.3 * 1.5);
      }
      if (e < Math.abs(g)) {
        e = g;
        var j = i / 4;
      } else {
        var j = (i / (2 * Math.PI)) * Math.asin(g / e);
      }
      if (k < 1) {
        return (
          -0.5 *
            (e *
              Math.pow(2, 10 * (k -= 1)) *
              Math.sin(((k * h - j) * (2 * Math.PI)) / i)) +
          f
        );
      }
      return (
        e *
          Math.pow(2, -10 * (k -= 1)) *
          Math.sin(((k * h - j) * (2 * Math.PI)) / i) *
          0.5 +
        g +
        f
      );
    },
    easeInBack: function (j, i, e, f, g, h) {
      if (h == undefined) {
        h = 1.70158;
      }
      return f * (i /= g) * i * ((h + 1) * i - h) + e;
    },
    easeOutBack: function (j, i, e, f, g, h) {
      if (h == undefined) {
        h = 1.70158;
      }
      return f * ((i = i / g - 1) * i * ((h + 1) * i + h) + 1) + e;
    },
    easeInOutBack: function (j, i, e, f, g, h) {
      if (h == undefined) {
        h = 1.70158;
      }
      if ((i /= g / 2) < 1) {
        return (f / 2) * (i * i * (((h *= 1.525) + 1) * i - h)) + e;
      }
      return (f / 2) * ((i -= 2) * i * (((h *= 1.525) + 1) * i + h) + 2) + e;
    },
    easeInBounce: function (i, h, e, f, g) {
      return f - a.easing.easeOutBounce(i, g - h, 0, f, g) + e;
    },
    easeOutBounce: function (i, h, e, f, g) {
      if ((h /= g) < 1 / 2.75) {
        return f * (7.5625 * h * h) + e;
      } else {
        if (h < 2 / 2.75) {
          return f * (7.5625 * (h -= 1.5 / 2.75) * h + 0.75) + e;
        } else {
          if (h < 2.5 / 2.75) {
            return f * (7.5625 * (h -= 2.25 / 2.75) * h + 0.9375) + e;
          } else {
            return f * (7.5625 * (h -= 2.625 / 2.75) * h + 0.984375) + e;
          }
        }
      }
    },
    easeInOutBounce: function (i, h, e, f, g) {
      if (h < g / 2) {
        return a.easing.easeInBounce(i, h * 2, 0, f, g) * 0.5 + e;
      }
      return a.easing.easeOutBounce(i, h * 2 - g, 0, f, g) * 0.5 + f * 0.5 + e;
    },
  });
})($telerik.$);
/*
 * jQuery throttle / debounce - v1.1 - 3/7/2010
 * http://benalman.com/projects/jquery-throttle-debounce-plugin/
 *
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */
(function (d, c) {
  var a = $telerik.$ || d.Cowboy || (d.Cowboy = {}),
    b;
  a.throttle = b = function (g, i, e, f) {
    var j,
      h = 0;
    if (typeof i !== "boolean") {
      f = e;
      e = i;
      i = c;
    }
    function k() {
      var p = this,
        n = +new Date() - h,
        l = arguments;
      function o() {
        h = +new Date();
        e.apply(p, l);
      }
      function m() {
        j = c;
      }
      if (f && !j) {
        o();
      }
      j && clearTimeout(j);
      if (f === c && n > g) {
        o();
      } else {
        if (i !== true) {
          j = setTimeout(f ? m : o, f === c ? g - n : g);
        }
      }
    }
    if (a.guid) {
      k.guid = e.guid = e.guid || a.guid++;
    }
    return k;
  };
  a.debounce = function (g, e, f) {
    return f === c ? b(g, e, false) : b(g, f, e !== false);
  };
})(window);
(function (b) {
  b.fx.step.height = function (e) {
    var f = $telerik.quirksMode ? 1 : 0;
    var g = e.now > f ? e.now : f;
    e.elem.style[e.prop] = Math.round(g) + e.unit;
  };
  function c(f, e) {
    return ["live", f, e.replace(/\./g, "`").replace(/ /g, "|")].join(".");
  }
  function a(f, e) {
    b.each(e, function (g, h) {
      if (g.indexOf("et_") > 0) {
        f[g] = h;
        return;
      }
      if (g == "domEvent" && h) {
        f["get_" + g] = function () {
          return new Sys.UI.DomEvent(h.originalEvent || h.rawEvent || h);
        };
      } else {
        f["get_" + g] = (function (i) {
          return function () {
            return i;
          };
        })(h);
      }
    });
    return f;
  }
  b.extend({
    registerControlEvents: function (e, f) {
      b.each(f, function (h, g) {
        e.prototype["add_" + g] = function (i) {
          this.get_events().addHandler(g, i);
        };
        e.prototype["remove_" + g] = function (i) {
          this.get_events().removeHandler(g, i);
        };
      });
    },
    registerKendoWidgetEvents: function (e, f) {
      b.each(f, function (h, g) {
        e.prototype["add_" + g] = function (i) {
          this.kendoWidget.bind(g, i);
        };
        e.prototype["remove_" + g] = function (i) {
          this.kendoWidget.unbind(g, i);
        };
      });
    },
    registerControlProperties: function (e, f) {
      b.each(f, function (h, g) {
        e.prototype["get_" + h] = function () {
          var i = this["_" + h];
          return typeof i == "undefined" ? g : i;
        };
        e.prototype["set_" + h] = function (i) {
          this["_" + h] = i;
        };
      });
    },
    extendControlProperties: function (e, f, g) {
      b.each(f, function (l, k) {
        var i = e.prototype;
        var h = "_" + l;
        var j = "get" + h;
        var m = "set" + h;
        i[j] ||
          (i[j] = function () {
            var n = this[h];
            return n === g ? k : n;
          });
        i[m] ||
          (i[m] = function (n) {
            this[h] = n;
          });
      });
    },
    registerEnum: function (f, e, h, g) {
      g = g || false;
      f[e] = function () {};
      f[e].prototype = h;
      f[e].registerEnum(f.getName() + "." + e, g);
    },
    raiseControlEvent: function (f, g, e) {
      var h = f.get_events().getHandler(g);
      if (h) {
        h(f, a(new Sys.EventArgs(), e));
      }
    },
    raiseCancellableControlEvent: function (g, h, e) {
      var i = g.get_events().getHandler(h);
      if (i) {
        var f = a(new Sys.CancelEventArgs(), e);
        i(g, f);
        return f.get_cancel();
      }
      return false;
    },
    extendEventArgs: function (e, f) {
      return a(e, f);
    },
    isBogus: function (e) {
      try {
        var g = e.parentNode;
        return false;
      } catch (f) {
        return true;
      }
    },
  });
  b.eachCallback = function (e, g) {
    var f = 0;
    function h() {
      if (e.length == 0) {
        return;
      }
      var i = e[f];
      g.apply(i);
      f++;
      if (f < e.length) {
        setTimeout(h, 1);
      }
    }
    setTimeout(h, 1);
  };
  b.fn.eachCallback = function (g) {
    var e = 0;
    var f = this;
    function h() {
      if (f.length == 0) {
        return;
      }
      var i = f.get(e);
      g.apply(i);
      e++;
      if (e < f.length) {
        setTimeout(h, 1);
      }
    }
    setTimeout(h, 1);
  };
  if ($telerik.isTouchDevice) {
    var d;
    b.each(["t_touchover", "t_touchout"], function (e, f) {
      b.fn[f] = function (g) {
        return this.bind(f, g);
      };
    });
    b(document.body)
      .bind("touchstart", function (f) {
        d = f.originalEvent.currentTarget;
      })
      .bind("touchmove", function (f) {
        var i = f.originalEvent.changedTouches[0],
          h = document.elementFromPoint(i.clientX, i.clientY);
        if (d != h) {
          var g = {
            target: d,
            relatedTarget: d,
            CtrlKey: false,
            AltKey: false,
            ShiftKey: false,
          };
          b(d).trigger("t_touchout", g);
          d = h;
          b(d).trigger(
            "t_touchover",
            b.extend(g, { target: d, relatedTarget: d })
          );
        }
      });
  }
})($telerik.$);
/*
 * jQuery Double Tap Plugin.
 *
 * Copyright (c) 2010 Raul Sanchez (http://www.appcropolis.com)
 *
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 */
(function (a) {
  a.fn.doubletap = function (e, f, c) {
    var d, b;
    c = c == null ? 500 : c;
    d = $telerik.isTouchDevice ? "touchend" : "click";
    a(this).bind(d, function (h) {
      var j = new Date().getTime();
      var i = a(this).data("lastTouch") || j + 1;
      var g = j - i;
      clearTimeout(b);
      if (g < 500 && g > 0) {
        if (e != null && typeof e == "function") {
          e(h);
        }
      } else {
        a(this).data("lastTouch", j);
        b = setTimeout(
          function (k) {
            if (f != null && typeof f == "function") {
              f(k);
            }
            clearTimeout(b);
          },
          c,
          [h]
        );
      }
      a(this).data("lastTouch", j);
    });
  };
})($telerik.$);
(function (a) {
  a.observable = function (d) {
    var c = {};
    a.extend(d, {
      trigger: function (g) {
        var h = c[g];
        if (!h) {
          return;
        }
        for (var j = 0; j < h.length; j++) {
          var f = Array.prototype.slice.call(arguments);
          f.shift();
          h[j].handler.apply(h[j].context, f);
        }
      },
      on: function (g, f) {
        a.each(g, function (h, i) {
          b(h, i, f);
        });
      },
      off: function (g, f) {
        a.each(g, function (h, i) {
          e(h, i, f);
        });
      },
      disposeObservable: function () {
        for (var f in c) {
          delete c[f];
        }
        c = null;
      },
    });
    function b(g, h, f) {
      var i = c[g] || [];
      i.push({ handler: h, context: f });
      c[g] = i;
    }
    function e(g, h, f) {
      var k = c[g];
      if (!k) {
        return;
      }
      var m = -1;
      for (var l = 0; l < k.length; l++) {
        var j = k[l];
        if (j.func === h && j.context === f) {
          m = l;
          break;
        }
      }
      if (m > -1) {
        k = k.splice(m, 1);
      }
      c[g] = k;
    }
  };
})($telerik.$);
(function (a, D) {
  var k = window;
  var e = k.document;
  var c = k.$telerik;
  var x = k.setTimeout;
  var d = k.clearTimeout;
  var b = Telerik.Web.UI;
  var o = a.fn;
  var n = a.isNumeric;
  var A = [].splice;
  var y = [].slice;
  var h = [];
  var r = ".telerik";
  var C = "touchstart";
  var B = "touchend";
  var f = ".";
  var z = " ";
  var g = "";
  var u = "on";
  var s = "off";
  var p = /mouse/gi;
  b.EventType = function () {
    throw Error.invalidOperation();
  };
  b.EventType.prototype = { Up: 0, Down: 1, Move: 2, Leave: 3 };
  b.EventType.registerEnum("Telerik.Web.UI.EventType", false);
  function j() {
    var G = [];
    var F = b.EventType;
    for (var E in F) {
      if (n(F[E])) {
        G.push(E.toLowerCase());
      }
    }
    return G;
  }
  h = j();
  function m() {
    var E = Telerik.Web;
    var J = E.Platform;
    var I = J.ios;
    var F = J.android;
    var G = E.BrowserFeatures;
    var H = {
      up: "mouseup",
      down: "mousedown",
      move: "mousemove",
      leave: "mouseleave",
    };
    if (G.pointerEvents) {
      H = {
        up: "pointerup",
        down: "pointerdown",
        move: "pointermove",
        leave: "pointercancel pointerleave",
      };
    } else {
      if (G.msPointerEvents) {
        H = {
          up: "MSPointerUp",
          down: "MSPointerDown",
          move: "MSPointerMove",
          leave: "MSPointerCancel MSPointerLeave",
        };
      } else {
        if (G.touchEvents) {
          if (I || F) {
            H = {
              up: "touchend touchcancel",
              down: "touchstart",
              move: "touchmove",
              leave: "touchcancel",
            };
          } else {
            H = {
              up: "mouseup touchend touchcancel",
              down: "mousedown touchstart",
              move: "mousemove touchmove",
              leave: "mouseleave touchcancel",
            };
          }
        }
      }
    }
    return H;
  }
  b.EventNamesMap = m();
  var q = function () {
    var E = [
      "mousedown",
      "mousemove",
      "mouseup",
      "mouseenter",
      "mouseover",
      "mouseleave",
      "mouseout",
    ];
    if (q._instance) {
      return q._instance;
    }
    q._instance = this;
    this.options = {
      mouseEventDelay: 400,
      enabled: false,
      captureMouseEvents: false,
    };
    this.mouseEventTimeout = null;
    this.enable = function () {
      var G = 0;
      var H = E.length;
      var F = e.documentElement;
      var I = function (J) {
        if (q._instance.options.captureMouseEvents) {
          J.stopPropagation();
        }
      };
      if (q._instance.options.enabled || !F.addEventListener) {
        return;
      }
      q._instance.options.enabled = true;
      q._instance.options.captureMouseEvents = false;
      for (G = 0; G < H; G++) {
        F.addEventListener(E[G], I, true);
      }
    };
    this.disableMouseEventPropagation = function (F) {
      q._instance.options.captureMouseEvents = true;
      d(q._instance.mouseEventTimeout);
    };
    this.enableMouseEventPropagation = function () {
      d(q._instance.mouseEventTimeout);
      q._instance.mouseEventTimeout = x(function () {
        q._instance.options.captureMouseEvents = false;
      }, q._instance.options.mouseEventDelay);
    };
  };
  q.getInstance = function () {
    return q._instance || new q();
  };
  function v(E, F) {
    return l(u, E, F);
  }
  function t(E, F) {
    return l(s, E, F);
  }
  function l(I, E, F) {
    var H = i(F);
    var K;
    var G;
    var J = q.getInstance();
    if (Telerik.Web.BrowserFeatures.touchAndMouseEvents && H.search(p) > -1) {
      if (I === u) {
        J.enable();
      }
      K = F.length === 2 ? D : F[1];
      E[I](C + r, K, G, J.disableMouseEventPropagation);
      E[I](B + r, K, G, J.enableMouseEventPropagation);
    }
    if (F.length > 0) {
      F[0] = H;
    }
    return o[I].apply(E, F);
  }
  function i(E) {
    var F = E.length > 0 ? E[0] : g;
    var J = n(F) ? h[F] : F;
    var H = [];
    var G;
    var L;
    var K;
    var I = J.split(f);
    if (I.length == 2) {
      G = w(I[0]).split(z);
      L = I[I.length - 1];
      for (K = 0; K < G.length; K++) {
        H.push(G[K] + f + L);
      }
      return H.join(z);
    } else {
      return w(I[0]);
    }
  }
  function w(F) {
    var E = b.EventNamesMap;
    return E[F] || E[h[F]] || F;
  }
  o.onEvent = function () {
    var E = this;
    var F = y.call(arguments);
    return v(E, F);
  };
  o.offEvent = function () {
    var E = this;
    var F = y.call(arguments);
    return t(E, F);
  };
  c.onEvent = function () {
    var F = arguments[0];
    var E = A.call(arguments, 1, arguments.length);
    return v(a(F), E);
  };
  c.offEvent = function () {
    var F = arguments[0];
    var E = A.call(arguments, 1, arguments.length);
    return t(a(F), E);
  };
})($telerik.$);

/* END Telerik.Web.UI.Common.jQueryPlugins.js */
/* START Telerik.Web.UI.Common.MaterialRipple.MaterialRippleScripts.js */
(function (G) {
  Type.registerNamespace("Telerik.Web.UI");
  var a = Telerik.Web.UI,
    f = Telerik.Web.BrowserFeatures,
    g = Math.ceil,
    l = "scale(0.0001, 0.0001)",
    j = "",
    k = 0.6,
    B = "t-ripple-effect-icon",
    x = "t-ripple-effect-button",
    z = "t-ripple-container",
    A = "t-ripple-effect",
    y = "t-ripple-center",
    w = "t-ripple",
    C = "t-ripple-white",
    c = "t-ripple-animating",
    H = "t-ripple-visible",
    n = "mousedown",
    p = "mouseup",
    o = "mouseleave",
    s = "pointerdown",
    u = "pointerup",
    t = "pointerleave",
    q = "MSPointerDown",
    r = "MSPointerUp",
    F = "touchstart",
    E = "touchend",
    e = "blur",
    b = Sys.UI.DomElement.addCssClass,
    v = Sys.UI.DomElement.removeCssClass,
    h = Sys.UI.DomElement.containsCssClass,
    D = '<span class="t-ripple"></span>',
    i = Function.createDelegate,
    d =
      window.requestAnimationFrame ||
      window.webkitRequestAnimationFrame ||
      window.mozRequestAnimationFrame ||
      window.oRequestAnimationFrame ||
      window.msRequestAnimationFrame ||
      function (I) {
        setTimeout(I, 1000 / 60);
      },
    m = function (I) {
      return I ? I.tagName == "BUTTON" : false;
    };
  a.MaterialRippleConstants = {
    RIPPLE_ICON: B,
    RIPPLE_BUTTON: x,
    RIPPLE_ELEMENT: A,
    RIPPLE_CONTAINER: z,
    VISIBLE: H,
  };
  a.MaterialRippleType = function () {
    throw Error.invalidOperation();
  };
  a.MaterialRippleType.prototype = { Element: 0, Icon: 1 };
  a.MaterialRippleType.registerEnum("Telerik.Web.UI.MaterialRippleType", false);
  a.MaterialRipple = function (I, J) {
    this._element = I;
    this._frameCount = 0;
    this._rippleSize = 0;
    this._x = 0;
    this._y = 0;
    this._ignoringMouseDown = false;
    this._options = J || {};
    this.initialize();
  };
  a.MaterialRipple.prototype = {
    initialize: function () {
      var I = this._element;
      this._applyElementClasses();
      if (h(I, B)) {
        this._isIconRipple = true;
        b(I, y);
      }
      this._initializeRippleElement();
      this._attachEvents();
    },
    _applyElementClasses: function () {
      var I = this._element;
      var J = this._options;
      if (J && J.rippleType == a.MaterialRippleType.Icon) {
        b(I, B);
        if (J.hasButtonParent) {
          b(I, x);
        }
      } else {
        b(I, A);
      }
    },
    _initializeRippleElement: function () {
      var J = this._element;
      var K;
      var I;
      var L = J.getElementsByClassName(w);
      if (L.length === 0) {
        I = document.createElement("span");
        b(I, z);
        I.innerHTML = D;
        J.appendChild(I);
        K = I.firstChild;
      } else {
        K = L[0];
      }
      this._rippleElement = K;
    },
    _attachEvents: function () {
      var I = this._getButton();
      var J = I || this._element;
      if (I) {
        this._downDelegate = i(this, this._buttonDownHandler);
        this._upDelegate = i(this, this._buttonUpHandler);
        this._downHandlerDelegate = i(this, this._downHandler);
        this._upHandlerDelegate = i(this, this._upHandler);
      } else {
        this._downDelegate = i(this, this._downHandler);
        this._upDelegate = i(this, this._upHandler);
      }
      if (J.addEventListener) {
        if (f.pointerEvents) {
          J.addEventListener(s, this._downDelegate);
          J.addEventListener(u, this._upDelegate);
          J.addEventListener(t, this._upDelegate);
        } else {
          if (f.msPointerEvents) {
            J.addEventListener(q, this._downDelegate);
            J.addEventListener(r, this._upDelegate);
            J.addEventListener(o, this._upDelegate);
          } else {
            J.addEventListener(n, this._downDelegate);
            J.addEventListener(F, this._downDelegate);
            J.addEventListener(p, this._upDelegate);
            J.addEventListener(E, this._upDelegate);
            J.addEventListener(o, this._upDelegate);
          }
        }
        J.addEventListener(e, this._upDelegate);
      }
    },
    _getButton: function () {
      var J = this._element;
      var I;
      if (($telerik.isIE || $telerik.isFirefox) && h(J, x)) {
        I = $telerik.getParentBy(J, m);
        if (I) {
          this._button = I;
          this._buttonIsRightToLeft = $telerik.isRightToLeft(I);
        }
      }
      return I;
    },
    _detachEvents: function () {
      var I = this._button || this._element;
      if (I.removeEventListener) {
        if (f.pointerEvents) {
          I.removeEventListener(s, this._downDelegate);
          I.removeEventListener(u, this._upDelegate);
          I.removeEventListener(t, this._upDelegate);
        } else {
          if (f.msPointerEvents) {
            I.removeEventListener(q, this._downDelegate);
            I.removeEventListener(r, this._upDelegate);
            I.removeEventListener(o, this._upDelegate);
          } else {
            I.removeEventListener(n, this._downDelegate);
            I.removeEventListener(F, this._downDelegate);
            I.removeEventListener(p, this._upDelegate);
            I.removeEventListener(E, this._upDelegate);
            I.removeEventListener(o, this._upDelegate);
          }
        }
        I.removeEventListener(e, this._upDelegate);
      }
    },
    get_frameCount: function () {
      return this._frameCount;
    },
    set_frameCount: function (I) {
      this._frameCount = I;
    },
    get_rippleElement: function () {
      return this._rippleElement;
    },
    set_rippleXY: function (I, J) {
      this._x = I;
      this._y = J;
    },
    set_rippleStyles: function (P) {
      var K = this._element;
      var N = this._rippleElement;
      var M = h(K, y);
      if (N !== null) {
        var Q;
        var O;
        var L = "translate(" + g(this._x) + "px, " + g(this._y) + "px)";
        if (P) {
          O = l;
        } else {
          O = j;
          if (M) {
            var I = this.boundWidth / 2;
            var J = this.boundHeight / 2;
            L = "translate(" + g(I) + "px, " + g(J) + "px)";
          }
        }
        Q = "translate(-50%, -50%) " + L + " " + O;
        N.style.webkitTransform = Q;
        N.style.msTransform = Q;
        N.style.transform = Q;
        if (P) {
          v(N, c);
        } else {
          b(N, c);
        }
      }
    },
    animFrameHandler: function () {
      if (this._frameCount-- > 0) {
        d(i(this, this.animFrameHandler));
      } else {
        this.set_rippleStyles(false);
      }
    },
    _downHandler: function (L) {
      var M = this._element;
      var T = this._rippleElement;
      var U = L.currentTarget || L.target;
      var S = this._options;
      if (this._isEnabled()) {
        this._setRippleElementBackgroundColor();
        var W = M.offsetWidth;
        var Q = M.offsetHeight;
        this.boundWidth = W;
        this.boundHeight = Q;
        if (!S.boundToElementSize) {
          this._rippleSize = Math.sqrt(W * W + Q * Q) * 2 + 2;
          var R = S.maxRippleSize;
          if (R) {
            this._rippleSize = Math.min(this._rippleSize, R);
          }
          if (this._isIconRipple) {
            this._rippleSize *= S.iconRippleSizeFactor || k;
          }
          W = g(this._rippleSize);
          Q = W;
        }
        T.style.width = W + "px";
        T.style.height = Q + "px";
        b(T, H);
        if (L.type === "mousedown" && this._ignoringMouseDown) {
          this._ignoringMouseDown = false;
        } else {
          if (L.type === "touchstart") {
            this._ignoringMouseDown = true;
          }
          var P = this.get_frameCount();
          if (P > 0) {
            return;
          }
          this.set_frameCount(1);
          var X;
          var Y;
          var N = L.clientX || 0;
          var O = L.clientY || 0;
          if (!L.touches && N === 0 && O === 0) {
            X = g(U.offsetWidth / 2);
            Y = g(U.offsetHeight / 2);
          } else {
            var V = L.touches;
            var J = N || (V ? V[0].clientX : 0);
            var K = O || (V ? V[0].clientY : 0);
            var I;
            if (U.getBoundingClientRect) {
              I = U.getBoundingClientRect();
            } else {
              I = { left: U.offsetLeft, top: U.offsetTop };
            }
            X = g(J - I.left);
            Y = g(K - I.top);
          }
          this.set_rippleXY(X, Y);
          this.set_rippleStyles(true);
          d(i(this, this.animFrameHandler));
        }
        if (S.autoHide) {
          window.setTimeout(this._upDelegate, 310);
        }
        if (S.cancelBubble) {
          L.cancelBubble = true;
        }
      }
    },
    _buttonDownHandler: function (I) {
      var J = this._element;
      var O = $telerik.getComputedStyle(this._button, "position");
      var L = $telerik.getComputedStyle(this._element, "position");
      var N =
        O == "absolute" || L == "absolute"
          ? I.offsetX
          : I.offsetX - J.offsetLeft + this._button.offsetLeft;
      var K = N >= 0 && N <= J.offsetWidth;
      if (K) {
        var M = $telerik.cloneJsObject(I);
        M.currentTarget = J;
        this._downHandlerDelegate(M);
      }
    },
    _isEnabled: function () {
      var I = this._element;
      var J = this._enabledCheck(I);
      var K = I.parentNode;
      while (
        K &&
        K.tagName != "BODY" &&
        K.tagName.toLowerCase() != "html" &&
        J
      ) {
        J = this._enabledCheck(K);
        K = K.parentNode;
      }
      return J;
    },
    _enabledCheck: function (J) {
      var K = !J.getAttribute("disabled");
      var I = this._options.disabledClass;
      if (K && I) {
        K = !h(J, I);
      }
      return K;
    },
    _setRippleElementBackgroundColor: function () {
      var I = $telerik.getComputedStyle(this._element, "color");
      var J = this._rippleElement;
      if (I === "rgb(255, 255, 255)") {
        b(J, C);
      } else {
        v(J, C);
      }
      J.style.backgroundColor = I;
    },
    _upHandler: function (I) {
      var J = this._rippleElement;
      if (I && I.detail !== 2) {
        v(J, H);
      }
      window.setTimeout(function () {
        v(J, H);
      }, 0);
      window.setTimeout(function () {
        v(J, c);
      }, 300);
    },
    _buttonUpHandler: function (I) {
      this._upHandlerDelegate(I);
    },
    dispose: function () {
      this._detachEvents();
      var I = $telerik.getElementByClassName(this._element, z);
      if (I && I.parentNode) {
        I.parentNode.removeChild(I);
      }
    },
  };
})();
(function (n) {
  Type.registerNamespace("Telerik.Web.UI");
  var a = Telerik.Web.UI,
    b = Telerik.Web.Browser,
    e = b.ie && b.version < 10,
    h = Telerik.Web.Platform,
    m = h.android || h.iphone,
    f = !m && b.opera,
    d = e || f,
    g = ".Telerik.Web.UI.MaterialRippleManager",
    c = "mousedown" + g,
    l = "touchstart" + g,
    i = a.MaterialRippleConstants.RIPPLE_ELEMENT,
    k = a.MaterialRippleConstants.VISIBLE,
    j = a.MaterialRippleConstants.RIPPLE_ICON;
  a.MaterialRippleManager = (function () {
    var p;
    var o = function () {
      this._ripples = [];
      this._rippleDelegatedZones = [];
      this._controls = [];
      Sys.Application.add_load(
        Function.createDelegate(this, this._initializeRippleZones)
      );
      Sys.Application.add_unload(Function.createDelegate(this, this.dispose));
    };
    o.prototype = {
      initializeRipple: function (q, r) {
        if (!d && !this._getRippleByElement(q)) {
          return this._createRipple(q, r);
        }
        return null;
      },
      _getRippleByElement: function (q) {
        var t = this._ripples;
        for (var r = 0; r < t.length; r++) {
          var s = t[r];
          if (s._element === q) {
            return s;
          }
        }
        return null;
      },
      _createRipple: function (q, r) {
        var s = new a.MaterialRipple(q, r);
        this._ripples.push(s);
        return s;
      },
      _initializeRippleZones: function () {
        var r = this._controls;
        for (var s = 0; s < r.length; s++) {
          var q = r[s];
          if (q.get_rippleZonesConfiguration) {
            var u = q.get_rippleZonesConfiguration();
            for (var t = 0; t < u.length; t++) {
              this.initializeRippleZone(u[t]);
            }
          }
        }
      },
      initializeRippleZone: function (q) {
        if (d || !q.element) {
          return;
        }
        if (q.initializeRipples) {
          this._initializeRipplesInZone(q);
        } else {
          this._initializeRippleZoneDownDelegate(q);
        }
      },
      _initializeRipplesInZone: function (w) {
        var u = w.rippleConfigurations;
        for (var q = 0; q < u.length; q++) {
          var t = u[q];
          if (w.element) {
            var v = w.element.querySelectorAll(t.containerSelector);
            var s = this._getRippleOptions(t);
            for (var r = 0; r < v.length; r++) {
              this.initializeRipple(v[r], s);
            }
          }
        }
      },
      _getRippleOptions: function (q) {
        return {
          rippleType: q.rippleType || a.MaterialRippleType.Element,
          maxRippleSize: q.maxRippleSize,
          autoHide: q.autoHide,
          cancelBubble: q.cancelBubble,
          disabledClass: q.disabledClass,
          iconRippleSizeFactor: q.iconRippleSizeFactor,
          boundToElementSize: q.boundToElementSize,
        };
      },
      _initializeRippleZoneDownDelegate: function (w) {
        var q = $telerik.$;
        var r = w.element;
        var t = w.rippleConfigurations;
        var v = t
          .map(function (x) {
            return x.containerSelector;
          })
          .join(",");
        var u = this._getRippleZoneDownHandlerDelegate();
        var s = function (x) {
          u(x, w, v);
        };
        if (q) {
          this._rippleDelegatedZones.push(r);
          if (m) {
            q(r).on(l, v, s);
          } else {
            q(r).on(c, v, s);
          }
        }
      },
      removeRippleZoneDownDelegate: function (r) {
        var q = $telerik.$;
        if (q) {
          if (m) {
            q(r).off(l);
          } else {
            q(r).off(c);
          }
          var t = this._rippleDelegatedZones;
          for (var s = 0; s < t.length; s++) {
            if (r === t[s]) {
              this._rippleDelegatedZones.splice(s, 1);
              return;
            }
          }
        }
      },
      disposeControl: function (q) {
        var r = this._controls;
        for (var s = 0; s < r.length; s++) {
          var t = r[s];
          if (t === q) {
            if (t.get_rippleZonesConfiguration) {
              var w = t.get_rippleZonesConfiguration();
              for (var u = 0; u < w.length; u++) {
                var v = w[u];
                this.disposeRippleZone(v.element);
              }
            }
            r.splice(s, 1);
            return;
          }
        }
      },
      _getRippleZoneDownHandlerDelegate: function () {
        if (!this._rippleZoneDownHandlerDelegate) {
          this._rippleZoneDownHandlerDelegate = Function.createDelegate(
            this,
            this._rippleZoneDownHandler
          );
        }
        return this._rippleZoneDownHandlerDelegate;
      },
      _rippleZoneDownHandler: function (r, D, B) {
        var q = $telerik.$;
        var s = D.element;
        var z = D.rippleConfigurations;
        var t = r.target;
        for (var u = 0; u < z.length; u++) {
          var y = z[u];
          var A = y.containerSelector;
          var C = $telerik.$(t).closest(A).get(0);
          if (C) {
            var v = this._getRippleOptions(y);
            var x = this.initializeRipple(C, v);
            if (x) {
              var w = t;
              while (w && w != s) {
                if (q(w).is(B)) {
                  if (C === w) {
                    this._callRippleDownDelegate(r, x);
                    if (!y.cancelBubble) {
                      this._initChildCancelBubbleRipples(C, D, u);
                    }
                  }
                  break;
                } else {
                  w = w.parentNode;
                }
              }
            }
          }
        }
      },
      _callRippleDownDelegate: function (q, t) {
        var r = $telerik.cloneJsObject(q.originalEvent);
        r.currentTarget = t._element;
        var s = window.setInterval(function () {
          if (!$telerik.$(t._rippleElement).hasClass(k)) {
            t._downDelegate(r);
          } else {
            window.clearInterval(s);
            if (m) {
              window.setTimeout(t._upDelegate, 310);
            }
          }
        }, 4);
      },
      _initChildCancelBubbleRipples: function (s, y, u) {
        var x = y.rippleConfigurations;
        var r = s.children;
        for (var t = 0; t < x.length; t++) {
          if (t != u) {
            var w = x[t];
            if (w.cancelBubble) {
              for (var v = 0; v < r.length; v++) {
                var q = r[v];
                if ($telerik.$(q).is(w.containerSelector)) {
                  this.initializeRipple(q, this._getRippleOptions(w));
                }
              }
            }
          }
        }
      },
      disposeRippleZone: function (q) {
        this.removeRippleZoneDownDelegate(q);
        this.disposeRipplesInElement(q);
      },
      disposeRipplesInElement: function (r) {
        var s = this;
        var q = $telerik.$;
        if (q) {
          q("." + i + ", ." + j, r).each(function () {
            var v = this;
            for (var t = 0; t < s._ripples.length; t++) {
              var u = s._ripples[t];
              if (v === u._element) {
                s._ripples.splice(t, 1);
                u.dispose();
                return;
              }
            }
          });
        }
      },
      dispose: function () {
        var q = $telerik.$;
        var s;
        var t = this._rippleDelegatedZones;
        if (q) {
          for (s = 0; s < t.length; s++) {
            var r = t[s];
            if (m) {
              q(r).off(l);
            } else {
              q(r).off(c);
            }
          }
        }
        var u = this._ripples;
        for (s = 0; s < u; s++) {
          u[s].ripple.dispose();
        }
      },
      get_controls: function (q) {
        return this._controls;
      },
    };
    return {
      getInstance: function () {
        if (!p) {
          p = new o();
        }
        return p;
      },
    };
  })();
})();

/* END Telerik.Web.UI.Common.MaterialRipple.MaterialRippleScripts.js */
/* START Telerik.Web.UI.Common.Navigation.OverlayScript.js */
Type.registerNamespace("Telerik.Web.UI");
Telerik.Web.UI.Overlay = function (a) {
  this._targetElement = a;
  this._element = null;
};
Telerik.Web.UI.Overlay.IsSupported = function () {
  return $telerik.isIE;
};
Telerik.Web.UI.Overlay.prototype = {
  initialize: function () {
    var a = document.createElement("div");
    a.innerHTML =
      "<iframe>Your browser does not support inline frames or is currently configured not to display inline frames.</iframe>";
    this._element = a.firstChild;
    this._element.src = "about:blank";
    this._targetElement.parentNode.insertBefore(
      this._element,
      this._targetElement
    );
    if (this._targetElement.style.zIndex > 0) {
      this._element.style.zIndex = this._targetElement.style.zIndex - 1;
    }
    this._element.style.position = "absolute";
    this._element.style.border = "0px";
    this._element.frameBorder = 0;
    this._element.style.filter =
      "progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=0)";
    this._element.tabIndex = -1;
    if (!$telerik.isSafari && !$telerik.isIE10Mode) {
      a.outerHTML = null;
    }
    this.updatePosition();
  },
  dispose: function () {
    if (this._element.parentNode) {
      this._element.parentNode.removeChild(this._element);
    }
    this._targetElement = null;
    this._element = null;
  },
  get_targetElement: function () {
    return this._targetElement;
  },
  set_targetElement: function (a) {
    this._targetElement = a;
  },
  get_element: function () {
    return this._element;
  },
  updatePosition: function () {
    this._element.style.top = this._toUnit(this._targetElement.style.top);
    this._element.style.left = this._toUnit(this._targetElement.style.left);
    this._element.style.width = this._targetElement.offsetWidth + "px";
    this._element.style.height = this._targetElement.offsetHeight + "px";
  },
  _toUnit: function (a) {
    if (!a) {
      return "0px";
    }
    return parseInt(a, 10) + "px";
  },
};
Telerik.Web.UI.Overlay.registerClass(
  "Telerik.Web.UI.Overlay",
  null,
  Sys.IDisposable
);

/* END Telerik.Web.UI.Common.Navigation.OverlayScript.js */
/* START Telerik.Web.UI.Common.Navigation.NavigationScripts.js */
Type.registerNamespace("Telerik.Web.UI");
Telerik.Web.UI.AttributeCollection = function (a) {
  this._owner = a;
  this._data = {};
  this._keys = [];
};
Telerik.Web.UI.AttributeCollection.prototype = {
  getAttribute: function (a) {
    return this._data[a];
  },
  setAttribute: function (b, c) {
    this._add(b, c);
    var a = {};
    a[b] = c;
    this._owner._notifyPropertyChanged("attributes", a);
  },
  _add: function (a, b) {
    if (Array.indexOf(this._keys, a) < 0) {
      Array.add(this._keys, a);
    }
    this._data[a] = b;
  },
  removeAttribute: function (a) {
    Array.remove(this._keys, a);
    delete this._data[a];
  },
  _load: function (b, e) {
    if (e) {
      for (var a = 0, d = b.length; a < d; a++) {
        this._add(b[a].Key, b[a].Value);
      }
    } else {
      for (var c in b) {
        this._add(c, b[c]);
      }
    }
  },
  get_count: function () {
    return this._keys.length;
  },
};
Telerik.Web.UI.AttributeCollection.registerClass(
  "Telerik.Web.UI.AttributeCollection"
);
(function (b, c) {
  Type.registerNamespace("Telerik.Web.UI");
  var a = Telerik.Web.UI;
  Telerik.Web.JavaScriptSerializer = {
    _stringRegEx: new RegExp('["\b\f\n\r\t\\\\\x00-\x1F]', "i"),
    serialize: function (d) {
      var e = new Telerik.Web.StringBuilder();
      Telerik.Web.JavaScriptSerializer._serializeWithBuilder(d, e);
      return e.toString();
    },
    _serializeWithBuilder: function (j, m) {
      var e;
      switch (typeof j) {
        case "object":
          if (j) {
            if (j.constructor == Array) {
              m.append("[");
              for (e = 0; e < j.length; ++e) {
                if (e > 0) {
                  m.append(",");
                }
                this._serializeWithBuilder(j[e], m);
              }
              m.append("]");
            } else {
              if (j.constructor == Date) {
                m.append('"\\/Date(');
                m.append(j.getTime());
                m.append(')\\/"');
                break;
              }
              var k = [];
              var l = 0;
              for (var g in j) {
                if (g.startsWith("$")) {
                  continue;
                }
                k[l++] = g;
              }
              m.append("{");
              var h = false;
              for (e = 0; e < l; e++) {
                var n = j[k[e]];
                if (typeof n !== "undefined" && typeof n !== "function") {
                  if (h) {
                    m.append(",");
                  } else {
                    h = true;
                  }
                  this._serializeWithBuilder(k[e], m);
                  m.append(":");
                  this._serializeWithBuilder(n, m);
                }
              }
              m.append("}");
            }
          } else {
            m.append("null");
          }
          break;
        case "number":
          if (isFinite(j)) {
            m.append(String(j));
          } else {
            throw Error.invalidOperation(
              Sys.Res.cannotSerializeNonFiniteNumbers
            );
          }
          break;
        case "string":
          m.append('"');
          if (
            Sys.Browser.agent === Sys.Browser.Safari ||
            Telerik.Web.JavaScriptSerializer._stringRegEx.test(j)
          ) {
            var f = j.length;
            for (e = 0; e < f; ++e) {
              var d = j.charAt(e);
              if (d >= " ") {
                if (d === "\\" || d === '"') {
                  m.append("\\");
                }
                m.append(d);
              } else {
                switch (d) {
                  case "\b":
                    m.append("\\b");
                    break;
                  case "\f":
                    m.append("\\f");
                    break;
                  case "\n":
                    m.append("\\n");
                    break;
                  case "\r":
                    m.append("\\r");
                    break;
                  case "\t":
                    m.append("\\t");
                    break;
                  default:
                    m.append("\\u00");
                    if (d.charCodeAt() < 16) {
                      m.append("0");
                    }
                    m.append(d.charCodeAt().toString(16));
                }
              }
            }
          } else {
            m.append(j);
          }
          m.append('"');
          break;
        case "boolean":
          m.append(j.toString());
          break;
        default:
          m.append("null");
          break;
      }
    },
  };
  a.ChangeLog = function () {
    this._opCodeInsert = 1;
    this._opCodeDelete = 2;
    this._opCodeClear = 3;
    this._opCodePropertyChanged = 4;
    this._opCodeReorder = 5;
    this._logEntries = null;
  };
  a.ChangeLog.prototype = {
    initialize: function () {
      this._logEntries = [];
      this._serializedEntries = null;
    },
    logInsert: function (d) {
      var e = {};
      e.Type = this._opCodeInsert;
      e.Index = d._getHierarchicalIndex();
      e.Data = d._getData();
      Array.add(this._logEntries, e);
    },
    logDelete: function (d) {
      var e = {};
      e.Type = this._opCodeDelete;
      e.Index = d._getHierarchicalIndex();
      Array.add(this._logEntries, e);
    },
    logClear: function (d) {
      var e = {};
      e.Type = this._opCodeClear;
      if (d._getHierarchicalIndex) {
        e.Index = d._getHierarchicalIndex();
      }
      Array.add(this._logEntries, e);
    },
    logPropertyChanged: function (d, f, g) {
      var e = {};
      e.Type = this._opCodePropertyChanged;
      e.Index = d._getHierarchicalIndex();
      e.Data = {};
      e.Data[f] = g;
      Array.add(this._logEntries, e);
    },
    logReorder: function (d, f, e) {
      Array.add(this._logEntries, {
        Type: this._opCodeReorder,
        Index: f + "",
        Data: { NewIndex: e + "" },
      });
    },
    serialize: function () {
      if (this._logEntries.length == 0) {
        if (this._serializedEntries == null) {
          return "[]";
        }
        return this._serializedEntries;
      }
      var d = Telerik.Web.JavaScriptSerializer.serialize(this._logEntries);
      if (this._serializedEntries == null) {
        this._serializedEntries = d;
      } else {
        this._serializedEntries =
          this._serializedEntries.substring(
            0,
            this._serializedEntries.length - 1
          ) +
          "," +
          d.substring(1);
      }
      this._logEntries = [];
      return this._serializedEntries;
    },
  };
  a.ChangeLog.registerClass("Telerik.Web.UI.ChangeLog");
})(window);
Type.registerNamespace("Telerik.Web.UI");
Telerik.Web.UI.PropertyBag = function (a) {
  this._data = {};
  this._owner = a;
};
Telerik.Web.UI.PropertyBag.prototype = {
  getValue: function (b, a) {
    var c = this._data[b];
    if (typeof c === "undefined") {
      return a;
    }
    return c;
  },
  setValue: function (b, c, a) {
    this._data[b] = c;
    if (a) {
      this._owner._notifyPropertyChanged(b, c);
    }
  },
  load: function (a) {
    this._data = a;
  },
};
Telerik.Web.UI.ControlItem = function () {
  this._key = null;
  this._element = null;
  this._parent = null;
  this._text = null;
  this._children = null;
  this._childControlsCreated = false;
  this._itemData = null;
  this._control = null;
  this._properties = new Telerik.Web.UI.PropertyBag(this);
};
Telerik.Web.UI.ControlItem.prototype = {
  _shouldNavigate: function () {
    var a = this.get_navigateUrl();
    if (!a) {
      return false;
    }
    return !a.endsWith("#");
  },
  _getNavigateUrl: function () {
    if (this.get_linkElement()) {
      return this._properties.getValue(
        "navigateUrl",
        this.get_linkElement().getAttribute("href", 2)
      );
    }
    return this._properties.getValue("navigateUrl", null);
  },
  _initialize: function (b, a) {
    this.set_element(a);
    this._properties.load(b);
    if (b.attributes) {
      this.get_attributes()._load(b.attributes);
    }
    this._itemData = b.items;
  },
  _dispose: function () {
    if (this._children) {
      this._children.forEach(function (a) {
        a._dispose();
      });
    }
    if (this._element) {
      this._element._item = null;
      this._element = null;
    }
    if (this._control) {
      this._control = null;
    }
  },
  _initializeRenderedItem: function () {
    var c = this._children;
    if (!c || c.get_count() < 1) {
      return;
    }
    var a = this._getChildElements();
    for (var d = 0, e = c.get_count(); d < e; d++) {
      var b = c.getItem(d);
      if (!b.get_element()) {
        b.set_element(a[d]);
        if (this._shouldInitializeChild(b)) {
          b._initializeRenderedItem();
        }
      }
    }
  },
  findControl: function (a) {
    return $telerik.findControl(this.get_element(), a);
  },
  get_attributes: function () {
    if (!this._attributes) {
      this._attributes = new Telerik.Web.UI.AttributeCollection(this);
    }
    return this._attributes;
  },
  get_element: function () {
    return this._element;
  },
  set_element: function (a) {
    this._element = a;
    this._element._item = this;
    this._element._itemTypeName = Object.getTypeName(this);
  },
  get_parent: function () {
    return this._parent;
  },
  set_parent: function (a) {
    this._parent = a;
  },
  get_text: function () {
    if (this._text !== null) {
      return this._text;
    }
    this._text = this._properties.getValue("text", "");
    if (this._text) {
      return this._text;
    }
    if (!this.get_element()) {
      return "";
    }
    var a = this.get_textElement();
    if (!a) {
      return "";
    }
    this._text = a.textContent || a.innerText;
    return this._text;
  },
  set_text: function (a) {
    var b = this.get_textElement();
    if (b) {
      b.innerHTML = a;
    }
    this._text = a;
    this._properties.setValue("text", a, true);
  },
  get_value: function () {
    return this._properties.getValue("value", null);
  },
  set_value: function (a) {
    this._properties.setValue("value", a, true);
  },
  get_itemData: function () {
    return this._itemData;
  },
  get_index: function () {
    if (!this.get_parent()) {
      return -1;
    }
    return this.get_parent()._getChildren().indexOf(this);
  },
  set_enabled: function (a) {
    this._properties.setValue("enabled", a, true);
  },
  get_enabled: function () {
    return this._properties.getValue("enabled", true) == true;
  },
  get_isEnabled: function () {
    var a = this._getControl();
    if (a) {
      return a.get_enabled() && this.get_enabled();
    }
    return this.get_enabled();
  },
  set_visible: function (a) {
    this._properties.setValue("visible", a);
  },
  get_visible: function () {
    return this._properties.getValue("visible", true);
  },
  get_level: function () {
    var b = this.get_parent();
    var a = 0;
    while (b) {
      if (Telerik.Web.UI.ControlItemContainer.isInstanceOfType(b)) {
        return a;
      }
      a++;
      b = b.get_parent();
    }
    return a;
  },
  get_isLast: function () {
    return this.get_index() == this.get_parent()._getChildren().get_count() - 1;
  },
  get_isFirst: function () {
    return this.get_index() == 0;
  },
  get_nextSibling: function () {
    if (!this.get_parent()) {
      return null;
    }
    return this.get_parent()
      ._getChildren()
      .getItem(this.get_index() + 1);
  },
  get_previousSibling: function () {
    if (!this.get_parent()) {
      return null;
    }
    return this.get_parent()
      ._getChildren()
      .getItem(this.get_index() - 1);
  },
  toJsonString: function () {
    return Sys.Serialization.JavaScriptSerializer.serialize(this._getData());
  },
  _getHierarchicalIndex: function () {
    var c = [];
    var a = this._getControl();
    var b = this;
    while (b != a) {
      c[c.length] = b.get_index();
      b = b.get_parent();
    }
    return c.reverse().join(":");
  },
  _getChildren: function () {
    this._ensureChildControls();
    return this._children;
  },
  _ensureChildControls: function () {
    if (!this._childControlsCreated) {
      this._createChildControls();
      this._childControlsCreated = true;
    }
  },
  _setCssClass: function (b, a) {
    if (b.className != a) {
      b.className = a;
    }
  },
  _createChildControls: function () {
    this._children = this._createItemCollection();
  },
  _createItemCollection: function () {},
  _getControl: function () {
    if (!this._control) {
      var a = this.get_parent();
      if (a) {
        if (Telerik.Web.UI.ControlItemContainer.isInstanceOfType(a)) {
          this._control = a;
        } else {
          this._control = a._getControl();
        }
      }
    }
    return this._control;
  },
  _getAllItems: function () {
    var a = [];
    this._getAllItemsRecursive(a, this);
    return a;
  },
  _getAllItemsRecursive: function (e, c) {
    var b = c._getChildren();
    for (var d = 0; d < b.get_count(); d++) {
      var a = b.getItem(d);
      Array.add(e, a);
      this._getAllItemsRecursive(e, a);
    }
  },
  _getData: function () {
    var a = this._properties._data;
    delete a.items;
    a.text = this.get_text();
    if (this.get_attributes().get_count() > 0) {
      a.attributes = this.get_attributes()._data;
    }
    return a;
  },
  _notifyPropertyChanged: function (b, c) {
    var a = this._getControl();
    if (a) {
      a._itemPropertyChanged(this, b, c);
    }
  },
  _loadFromDictionary: function (a, b) {
    if (typeof a.Text != "undefined") {
      this.set_text(a.Text);
    }
    if (typeof a.Key != "undefined") {
      this.set_text(a.Key);
    }
    if (typeof a.Value != "undefined" && a.Value !== "") {
      this.set_value(a.Value);
    }
    if (typeof a.Enabled != "undefined" && a.Enabled !== true) {
      this.set_enabled(a.Enabled);
    }
    if (a.Attributes) {
      this.get_attributes()._load(a.Attributes, b);
    }
  },
  _loadFromCustomDictionary: function (b, c) {
    var f = b[c.dataTextField],
      g = b[c.dataValueField],
      e = b[c.dataKeyField],
      d = b[c.Enabled],
      a = b[c.Attributes];
    if (typeof f != "undefined") {
      this.set_text(f);
    }
    if (typeof g != "undefined" && g !== "") {
      this.set_value(g);
    }
    if (typeof e != "undefined") {
      this.set_key(e);
    }
    if (typeof d != "undefined" && d !== true) {
      this.set_enabled(d);
    }
    if (a) {
      this.get_attributes()._load(a, false);
    }
  },
  _createDomElement: function () {
    var b = document.createElement("ul");
    var a = [];
    this._render(a);
    b.innerHTML = a.join("");
    return b.firstChild;
  },
  get_cssClass: function () {
    return this._properties.getValue("cssClass", "");
  },
  set_cssClass: function (b) {
    var a = this.get_cssClass();
    this._properties.setValue("cssClass", b, true);
    this._applyCssClass(b, a);
  },
  get_key: function () {
    return this._properties.getValue("key", null);
  },
  set_key: function (a) {
    this._properties.setValue("key", a, true);
  },
  _applyCssClass: function () {},
};
Telerik.Web.UI.ControlItem.registerClass("Telerik.Web.UI.ControlItem");
Type.registerNamespace("Telerik.Web.UI");
Telerik.Web.UI.ControlItemCollection = function (a) {
  this._array = [];
  this._parent = a;
  this._control = null;
};
Telerik.Web.UI.ControlItemCollection.prototype = {
  add: function (b) {
    var a = this._array.length;
    this.insert(a, b);
  },
  insert: function (b, c) {
    var d = c.get_parent();
    var a = this._parent._getControl();
    if (d) {
      d._getChildren().remove(c);
    }
    if (a) {
      a._childInserting(b, c, this._parent);
    }
    Array.insert(this._array, b, c);
    c.set_parent(this._parent);
    if (a) {
      a._childInserted(b, c, this._parent);
      a._logInserted(c);
    }
  },
  remove: function (b) {
    var a = this._parent._getControl();
    if (a) {
      a._childRemoving(b);
    }
    Array.remove(this._array, b);
    if (a) {
      a._childRemoved(b, this._parent);
    }
    b.set_parent(null);
    b._control = null;
  },
  removeAt: function (a) {
    var b = this.getItem(a);
    if (b) {
      this.remove(b);
    }
  },
  clear: function () {
    var a = this._parent._getControl();
    if (a) {
      a._logClearing(this._parent);
      a._childrenCleared(this._parent);
    }
    this._array = [];
  },
  get_count: function () {
    return this._array.length;
  },
  getItem: function (a) {
    return this._array[a];
  },
  indexOf: function (b) {
    for (var a = 0, c = this._array.length; a < c; a++) {
      if (this._array[a] === b) {
        return a;
      }
    }
    return -1;
  },
  forEach: function (c) {
    for (var b = 0, a = this.get_count(); b < a; b++) {
      c(this._array[b]);
    }
  },
  toArray: function () {
    return this._array.slice(0);
  },
};
Telerik.Web.UI.ControlItemCollection.registerClass(
  "Telerik.Web.UI.ControlItemCollection"
);
function WebForm_CallbackComplete() {
  for (var c = 0; c < __pendingCallbacks.length; c++) {
    var b = __pendingCallbacks[c];
    if (b && b.xmlRequest && b.xmlRequest.readyState == 4) {
      __pendingCallbacks[c] = null;
      WebForm_ExecuteCallback(b);
      if (!b.async) {
        __synchronousCallBackIndex = -1;
      }
      var a = "__CALLBACKFRAME" + c;
      var d = document.getElementById(a);
      if (d) {
        d.parentNode.removeChild(d);
      }
    }
  }
}
Type.registerNamespace("Telerik.Web.UI");
(function (a, b) {
  b.ControlItemContainer = function (c) {
    b.ControlItemContainer.initializeBase(this, [c]);
    this._childControlsCreated = false;
    this._enabled = true;
    this._log = new b.ChangeLog();
    this._enableClientStatePersistence = false;
    this._eventMap = new b.EventMap();
    this._attributes = new b.AttributeCollection(this);
    this._children = null;
    this._odataClientSettings = null;
    this._dataTextField = "";
    this._dataValueField = "";
    this._clientDataSourceID = "";
    this._navigationSettings = null;
  };
  b.ControlItemContainer.prototype = {
    initialize: function () {
      b.ControlItemContainer.callBaseMethod(this, "initialize");
      this._ensureChildControls();
      this._log.initialize();
      this._initializeEventMap();
      if (this.get_isUsingODataSource()) {
        this._initializeODataSourceBinder();
      }
      if (this._navigationSettings) {
        this._applyKeyboardNavigationSettings();
      }
    },
    dispose: function () {
      if (this._eventMap) {
        this._eventMap.dispose();
      }
      if (this._childControlsCreated) {
        this._disposeChildren();
      }
      if (this._keyboardNavigationSettings) {
        this._keyboardNavigationSettings.dispose();
      }
      if (this.get_isUsingODataSource()) {
        this._disposeODataSourceBinder();
      }
      b.ControlItemContainer.callBaseMethod(this, "dispose");
    },
    trackChanges: function () {
      this._enableClientStatePersistence = true;
    },
    set_enabled: function (c) {
      this._enabled = c;
    },
    set_clientDataSource: function () {
      throw "Not implemented";
    },
    get_enabled: function () {
      return this._enabled;
    },
    commitChanges: function () {
      this.updateClientState();
      this._enableClientStatePersistence = false;
    },
    get_attributes: function () {
      return this._attributes;
    },
    set_attributes: function (c) {
      this._attributes._load(c);
    },
    get_isUsingODataSource: function () {
      return this._odataClientSettings != null;
    },
    get_odataClientSettings: function () {
      return this._odataClientSettings;
    },
    set_odataClientSettings: function (c) {
      this._odataClientSettings = c;
    },
    _disposeChildren: function () {
      var c = this._getChildren();
      if (!c) {
        return;
      }
      for (var d = 0, e = c.get_count(); d < e; d++) {
        c.getItem(d)._dispose();
      }
    },
    _initializeEventMap: function () {
      this._eventMap.initialize(this);
    },
    _initializeODataSourceBinder: function () {},
    _disposeODataSourceBinder: function () {},
    _applyKeyboardNavigationSettings: function () {
      this._keyboardNavigationSettings = new b.KeyboardNavigationSettings(
        this.get_element(),
        this._navigationSettings
      );
      this._keyboardNavigationSettings.initialize();
    },
    _getChildren: function () {
      this._ensureChildControls();
      return this._children;
    },
    _extractErrorMessage: function (c) {
      if (c.get_message) {
        return c.get_message();
      } else {
        return c.replace(/(\d*\|.*)/, "");
      }
    },
    _notifyPropertyChanged: function (c, d) {},
    _childInserting: function (c, d, e) {},
    _childInserted: function (c, d, g) {
      if (!g._childControlsCreated) {
        return;
      }
      if (!g.get_element()) {
        return;
      }
      var e = d._createDomElement();
      var f = e.parentNode;
      this._attachChildItem(d, e, g);
      this._destroyDomElement(f);
      if (!d.get_element()) {
        d.set_element(e);
        d._initializeRenderedItem();
      } else {
        d.set_element(e);
      }
    },
    _attachChildItem: function (c, d, g) {
      var h = g.get_childListElement();
      if (!h) {
        h = g._createChildListElement();
      }
      var e = c.get_nextSibling();
      var f = e ? e.get_element() : null;
      g.get_childListElement().insertBefore(d, f);
    },
    _destroyDomElement: function (d) {
      var c = "radControlsElementContainer";
      var e = $get(c);
      if (!e) {
        e = document.createElement("div");
        e.id = c;
        e.style.display = "none";
        document.body.appendChild(e);
      }
      e.appendChild(d);
      e.innerHTML = "";
    },
    _childrenCleared: function (e) {
      for (var d = 0; d < e._getChildren().get_count(); d++) {
        e._getChildren().getItem(d)._dispose();
      }
      var c = e.get_childListElement();
      if (c) {
        c.innerHTML = "";
      }
    },
    _childRemoving: function (c) {
      this._logRemoving(c);
    },
    _childRemoved: function (c, d) {
      c._dispose();
    },
    _createChildListElement: function () {
      throw Error.notImplemented();
    },
    _createDomElement: function () {
      throw Error.notImplemented();
    },
    _getControl: function () {
      return this;
    },
    _logInserted: function (e) {
      if (
        !e.get_parent()._childControlsCreated ||
        !this._enableClientStatePersistence
      ) {
        return;
      }
      this._log.logInsert(e);
      var c = e._getAllItems();
      for (var d = 0; d < c.length; d++) {
        this._log.logInsert(c[d]);
      }
    },
    _logRemoving: function (c) {
      if (this._enableClientStatePersistence) {
        this._log.logDelete(c);
      }
    },
    _logClearing: function (c) {
      if (this._enableClientStatePersistence) {
        this._log.logClear(c);
      }
    },
    _itemPropertyChanged: function (c, d, e) {
      if (this._enableClientStatePersistence) {
        this._log.logPropertyChanged(c, d, e);
      }
    },
    _ensureChildControls: function () {
      if (!this._childControlsCreated) {
        this._createChildControls();
        this._childControlsCreated = true;
      }
    },
    _createChildControls: function () {
      throw Error.notImplemented();
    },
    _extractItemFromDomElement: function (c) {
      this._ensureChildControls();
      while (c && c.nodeType !== 9) {
        if (c._item && this._verifyChildType(c._itemTypeName)) {
          return c._item;
        }
        c = c.parentNode;
      }
      return null;
    },
    _verifyChildType: function (c) {
      return c === this._childTypeName;
    },
    _getAllItems: function () {
      var c = [];
      for (var d = 0; d < this._getChildren().get_count(); d++) {
        var e = this._getChildren().getItem(d);
        Array.add(c, e);
        Array.addRange(c, e._getAllItems());
      }
      return c;
    },
    _findItemByText: function (e) {
      var c = this._getAllItems();
      for (var d = 0; d < c.length; d++) {
        if (c[d].get_text() == e) {
          return c[d];
        }
      }
      return null;
    },
    _findItemByValue: function (e) {
      var c = this._getAllItems();
      for (var d = 0; d < c.length; d++) {
        if (c[d].get_value() == e) {
          return c[d];
        }
      }
      return null;
    },
    _findItemByAttribute: function (d, f) {
      var c = this._getAllItems();
      for (var e = 0; e < c.length; e++) {
        if (c[e].get_attributes().getAttribute(d) == f) {
          return c[e];
        }
      }
      return null;
    },
    _findItemByAbsoluteUrl: function (e) {
      var c = this._getAllItems();
      for (var d = 0; d < c.length; d++) {
        if (c[d].get_linkElement() && c[d].get_linkElement().href == e) {
          return c[d];
        }
      }
      return null;
    },
    _findItemByUrl: function (e) {
      var c = this._getAllItems();
      for (var d = 0; d < c.length; d++) {
        if (c[d].get_navigateUrl() == e) {
          return c[d];
        }
      }
      return null;
    },
    _findItemByHierarchicalIndex: function (g) {
      var e = null;
      var c = this;
      var h = g.split(":");
      for (var f = 0; f < h.length; f++) {
        var d = parseInt(h[f], 10);
        if (c._getChildren().get_count() <= d) {
          return null;
        }
        e = c._getChildren().getItem(d);
        c = e;
      }
      return e;
    },
  };
  b.ControlItemContainer.registerClass(
    "Telerik.Web.UI.ControlItemContainer",
    b.RadWebControl
  );
})($telerik.$, Telerik.Web.UI);
(function (a, e) {
  var b = Telerik.Web.UI;
  var d = ".dropdown";
  var c = {
    anchor: null,
    enableOverlay: false,
    width: "",
    height: "",
    maxWidth: "",
    maxHeight: "",
    enableScreenBoundaryDetection: true,
    enableDirectionDetection: false,
    rtl: false,
    offsetX: 0,
    offsetY: 0,
  };
  b.DropDown = function (f, g) {
    a.observable(this);
    this._options = a.extend(
      {},
      c,
      {
        direction: b.jSlideDirection.Down,
        expandAnimation: new b.AnimationSettings({}),
        collapseAnimation: new b.AnimationSettings({}),
      },
      g
    );
    this._element = f.children[0];
    this._animationContainer = f;
    if (f) {
      f._dropDown = this;
    }
  };
  b.DropDown.prototype = {
    initialize: function () {
      this._initializeSlide();
    },
    _initializeSlide: function () {
      this._slide = new b.jSlide(
        this._element,
        this.get_expandAnimation(),
        this.get_collapseAnimation(),
        this._options.enableOverlay
      );
      this._slide.set_direction(this.get_direction());
      this._slide.initialize();
      this._expandAnimationStartedDelegate = Function.createDelegate(
        this,
        this._onExpandAnimationStarted
      );
      this._slide.add_expandAnimationStarted(
        this._expandAnimationStartedDelegate
      );
      this._expandAnimationEndedDelegate = Function.createDelegate(
        this,
        this._onExpandAnimationEnded
      );
      this._slide.add_expandAnimationEnded(this._expandAnimationEndedDelegate);
      this._collapseAnimationStartedDelegate = Function.createDelegate(
        this,
        this._onCollapseAnimationStarted
      );
      this._slide.add_collapseAnimationStarted(
        this._collapseAnimationStartedDelegate
      );
      this._collapseAnimationEndedDelegate = Function.createDelegate(
        this,
        this._onCollapseAnimationEnded
      );
      this._slide.add_collapseAnimationEnded(
        this._collapseAnimationEndedDelegate
      );
    },
    dispose: function () {
      this._unbindParentsScroll();
      this.disposeObservable();
      this._disposeSlide();
      var f = Sys.WebForms
        ? Sys.WebForms.PageRequestManager.getInstance().get_isInAsyncPostBack()
        : false;
      if (f) {
        $telerik.disposeElement(this._animationContainer);
      }
      a(this._animationContainer).remove();
      this._animationContainer = null;
      this._element = null;
    },
    _disposeSlide: function () {
      if (this._expandAnimationStartedDelegate) {
        if (this._slide) {
          this._slide.remove_expandAnimationStarted(
            this._expandAnimationStartedDelegate
          );
        }
        this._expandAnimationStartedDelegate = null;
      }
      if (this._expandAnimationEndedDelegate) {
        if (this._slide) {
          this._slide.remove_expandAnimationEnded(
            this._expandAnimationEndedDelegate
          );
        }
        this._expandAnimationEndedDelegate = null;
      }
      if (this._collapseAnimationStartedDelegate) {
        if (this._slide) {
          this._slide.remove_collapseAnimationStarted(
            this._collapseAnimationStartedDelegate
          );
        }
        this._collapseAnimationStartedDelegate = null;
      }
      if (this._collapseAnimationEndedDelegate) {
        if (this._slide) {
          this._slide.remove_collapseAnimationEnded(
            this._collapseAnimationEndedDelegate
          );
        }
        this._collapseAnimationEndedDelegate = null;
      }
      if (this._slide) {
        this._slide.dispose();
        this._slide = null;
      }
    },
    get_anchor: function () {
      return this._options.anchor;
    },
    set_anchor: function (f) {
      this._options.anchor = f;
    },
    get_direction: function () {
      return this._options.direction;
    },
    set_direction: function (f) {
      this._options.direction = f;
      this._slide._direction = f;
    },
    get_expandAnimation: function () {
      return this._options.expandAnimation;
    },
    set_expandAnimation: function (f) {
      this._options.expandAnimation = f;
      this._slide._expandAnimation = f;
    },
    get_collapseAnimation: function () {
      return this._options.collapseAnimation;
    },
    set_collapseAnimation: function (f) {
      this._options.collapseAnimation = f;
      this._slide._collapseAnimation = f;
    },
    get_width: function () {
      return this._options.width;
    },
    set_width: function (f) {
      this._options.width = f;
    },
    get_height: function () {
      return this._options.height;
    },
    set_height: function (f) {
      this._options.height = f;
    },
    get_maxWidth: function () {
      return this._options.maxWidth;
    },
    set_maxWidth: function (f) {
      this._options.maxWidth = f;
    },
    get_maxHeight: function () {
      return this._options.maxHeight;
    },
    set_maxHeight: function (f) {
      this._options.maxHeight = f;
    },
    get_enableScreenBoundaryDetection: function () {
      return this._options.enableScreenBoundaryDetection;
    },
    set_enableScreenBoundaryDetection: function (f) {
      this._options.enableScreenBoundaryDetection = f;
    },
    get_enableDirectionDetection: function () {
      return this._options.enableDirectionDetection;
    },
    set_enableDirectionDetection: function (f) {
      this._options.enableDirectionDetection = f;
    },
    get_offsetX: function () {
      return this._options.offsetX;
    },
    set_offsetX: function (f) {
      this._options.offsetX = f;
    },
    get_offsetY: function () {
      return this._options.offsetY;
    },
    set_offsetY: function (f) {
      this._options.offsetY = f;
    },
    _onExpandAnimationStarted: function () {
      this.trigger("expandAnimationStarted", new Sys.EventArgs());
    },
    _onExpandAnimationEnded: function () {
      this.trigger("expandAnimationEnded", new Sys.EventArgs());
    },
    _onCollapseAnimationStarted: function () {
      this.trigger("collapseAnimationStarted", new Sys.EventArgs());
    },
    _onCollapseAnimationEnded: function () {
      this.trigger("collapseAnimationEnded", new Sys.EventArgs());
    },
    show: function (f) {
      if (this.isVisible()) {
        return;
      }
      var g = new Sys.CancelEventArgs();
      this.trigger("opening", g);
      if (!g.get_cancel()) {
        f = f || this.get_anchor();
        this.reflow(f);
        this._slide.expand();
        this._bindParentsScroll();
        this._bindWindowResize(f);
        this.trigger("opened", new Sys.EventArgs());
      }
    },
    hide: function () {
      if (!this.isVisible()) {
        return;
      }
      var f = new Sys.CancelEventArgs();
      this.trigger("closing", f);
      if (!f.get_cancel()) {
        this._slide.collapse();
        this._unbindParentsScroll();
        this._unbindWindowResize();
        this.trigger("closed", new Sys.EventArgs());
      }
    },
    toggle: function (f) {
      if (this.isVisible()) {
        this.hide();
      } else {
        this.show(f);
      }
    },
    isVisible: function () {
      return a(this._animationContainer).is(":visible");
    },
    updateSize: function (g) {
      var f = a(g);
      var i = this.get_width();
      var h = this.get_height();
      if (i === "auto") {
        i = f.outerWidth();
      }
      if (h === "auto") {
        h = f.outerHeight();
      }
      this._setDimensions({ width: i, height: h });
      this._checkMaxDimensions();
    },
    resolveScreenBoundaries: function () {
      if (this.get_enableScreenBoundaryDetection()) {
        var f = this._options.enableDirectionDetection;
        var i = this.get_direction();
        var g = this._getAvailableSpace();
        var j = this._getHiddenElementSize(this._animationContainer);
        var n;
        var k;
        var m = this.get_maxWidth();
        var l = this.get_maxHeight();
        var h = {};
        switch (i) {
          case b.jSlideDirection.Up:
            if (j.height > g.top) {
              if (f && g.bottom > 0 && g.bottom > g.top) {
                i = b.jSlideDirection.Down;
                k = Math.min(j.height, g.bottom);
              } else {
                k = g.top;
              }
            }
            break;
          case b.jSlideDirection.Down:
            if (j.height > g.bottom) {
              if (f && g.top > 0 && g.top > g.bottom) {
                i = b.jSlideDirection.Up;
                k = Math.min(j.height, g.top);
              } else {
                k = g.bottom;
              }
            }
            break;
          case b.jSlideDirection.Left:
            if (j.width > g.left) {
              if (f && g.right > 0 && g.right > g.left) {
                i = b.jSlideDirection.Right;
                n = Math.min(j.width, g.right);
              } else {
                n = g.left;
              }
            }
            break;
          case b.jSlideDirection.Right:
            if (j.width > g.right) {
              if (f && g.left > 0 && g.left > g.right) {
                i = b.jSlideDirection.Left;
                n = Math.min(j.width, g.left);
              } else {
                n = g.right;
              }
            }
            break;
        }
        if (n && n > 0) {
          if (m) {
            n = Math.min(n, m);
          }
          h.width = n;
        } else {
          if (k && k > 0) {
            if (l) {
              k = Math.min(k, l);
            }
            h.height = k;
          }
        }
        this._setDimensions(h);
        this._slide._direction = i;
      }
    },
    position: function (g) {
      var f = a(g || this.get_anchor());
      var h = this._animationContainer;
      var l = f.offset();
      var j = this._getHiddenElementSize(h);
      var m = this._getHiddenElementOffsetParent(h) || document.body;
      var n = a(m).offset();
      var o = l.top + this.get_offsetY();
      var k = l.left + this.get_offsetX();
      var i = $telerik.getComputedStyle(document.body, "position", null);
      switch (this._slide._direction) {
        case b.jSlideDirection.Up:
          o -= j.height;
          break;
        case b.jSlideDirection.Down:
          o += f.outerHeight();
          break;
        case b.jSlideDirection.Left:
          k -= j.width;
          break;
        case b.jSlideDirection.Right:
          k += f.outerWidth();
          break;
      }
      if (m !== document.body || i === "relative" || i === "absolute") {
        o -= n.top;
        k -= n.left;
      }
      if (this._options.rtl) {
        k -= j.width - f.outerWidth();
      }
      a(h).css({ top: o + "px", left: k + "px" });
    },
    reflow: function (f) {
      var g = new Sys.CancelEventArgs();
      f = f || this.get_anchor();
      this._detachDropDown();
      this.trigger("reflowing", g);
      if (!g.get_cancel()) {
        this.updateSize(f);
        this.resolveScreenBoundaries();
        this.position(f);
        this.trigger("reflowed", new Sys.EventArgs());
      }
    },
    _detachDropDown: function () {
      if (!this._detached) {
        var f = a(this._element);
        var g = f.parents("form").eq(0);
        if (!g.length) {
          g = f.parents("body").eq(0);
        }
        g.prepend(this._animationContainer);
        this._detached = true;
      }
    },
    _setDimensions: function (h) {
      var f = a(this._animationContainer);
      var g = a(this._element);
      if (h.width !== e) {
        f.width(h.width);
        g.outerWidth(h.width);
      }
      if (h.height !== e) {
        f.height(h.height);
        g.outerHeight(h.height);
      }
    },
    _checkMaxDimensions: function () {
      var h = this.get_maxWidth();
      var g = this.get_maxHeight();
      var f;
      if (h || g) {
        f = this._getHiddenElementSize(this._animationContainer);
        if (h && h < f.width) {
          this._setDimensions({ width: h });
        }
        if (g && g < f.height) {
          this._setDimensions({ height: g });
        }
      }
    },
    _bindParentsScroll: function () {
      var g = this;
      var f = this._getScrollableParents();
      f.on("scroll" + d, function () {
        g.hide();
      });
    },
    _unbindParentsScroll: function () {
      var f = this._getScrollableParents();
      f.off("scroll" + d);
    },
    _getScrollableParents: function () {
      return a(this.get_anchor())
        .parentsUntil("body")
        .filter(function (g, f) {
          var h = $telerik.getComputedStyle(f, "overflow", null);
          return h !== "visible";
        });
    },
    _bindWindowResize: function (f) {
      var g = this;
      a(window).on("resize" + d, function () {
        g.reflow(f);
      });
      if ($telerik.isTouchDevice) {
        a(window).on("scroll" + d, function (h) {
          g.reflow(f);
        });
      }
    },
    _unbindWindowResize: function () {
      a(window)
        .off("resize" + d)
        .off("scroll" + d);
    },
    _getAvailableSpace: function () {
      var f = a(this.get_anchor());
      var g = a(document);
      var h = a(window);
      var i = f.offset();
      var m = i.top + this.get_offsetY() - g.scrollTop();
      var j = h.outerHeight() - m - f.outerHeight();
      var k = i.left + this.get_offsetX() - g.scrollLeft();
      var l = h.outerWidth() - k - f.outerWidth();
      return { top: m, bottom: j, left: k, right: l };
    },
    _getHiddenElementSize: function (f) {
      var g;
      this._withHiddenElement(f, function (h) {
        g = { width: f.offsetWidth, height: f.offsetHeight };
      });
      return g;
    },
    _getHiddenElementOffsetParent: function (f) {
      var g;
      this._withHiddenElement(f, function (h) {
        g = h.offsetParent;
      });
      return g;
    },
    _withHiddenElement: function (g, f) {
      var h = g.style.display;
      var i = g.style.visibility;
      g.style.visibility = "hidden";
      g.style.display = "block";
      f(g);
      g.style.visibility = i;
      g.style.display = h;
    },
  };
  b.DropDown.registerClass("Telerik.Web.UI.DropDown");
})($telerik.$);
Type.registerNamespace("Telerik.Web.UI");
Telerik.Web.UI.EventMap = function () {
  this._owner = null;
  this._element = null;
  this._eventMap = {};
  this._onDomEventDelegate = null;
  this._browserHandlers = {};
  this._externalHandlers = {};
};
Telerik.Web.UI.EventMap.prototype = {
  initialize: function (b, a) {
    this._owner = b;
    if (!a) {
      a = this._owner.get_element();
    }
    this._element = a;
  },
  skipElement: function (b, c) {
    var f = b.target;
    if (f.nodeType == 3) {
      return false;
    }
    var d = f.tagName.toLowerCase();
    var a = f.className;
    if (d == "select") {
      return true;
    }
    if (d == "option") {
      return true;
    }
    if (d == "a" && (!c || a.indexOf(c) < 0)) {
      return true;
    }
    if (d == "input") {
      return true;
    }
    if (d == "label") {
      return true;
    }
    if (d == "textarea") {
      return true;
    }
    if (d == "button") {
      return true;
    }
    return false;
  },
  dispose: function () {
    if (this._onDomEventDelegate) {
      for (var d in this._eventMap) {
        if (this._shouldUseEventCapture(d)) {
          var a = this._browserHandlers[d];
          this._element.removeEventListener(d, a, true);
        } else {
          $telerik.removeHandler(this._element, d, this._onDomEventDelegate);
        }
        var f = this._externalHandlers[d];
        if (f) {
          $telerik.removeExternalHandler(this._element, d, f);
        }
      }
      this._onDomEventDelegate = null;
      var b = true;
      if (this._element._events) {
        for (var c in this._element._events) {
          if (this._element._events[c].length > 0) {
            b = false;
            break;
          }
        }
        if (b) {
          this._element._events = null;
        }
      }
    }
  },
  addHandlerForClassName: function (f, b, h, j) {
    var i = this;
    if (typeof this._eventMap[f] == "undefined") {
      this._eventMap[f] = {};
      if (this._shouldUseEventCapture(f)) {
        var c = this._getDomEventDelegate();
        var d = this._element;
        var a = function (k) {
          return c.call(d, new Sys.UI.DomEvent(k));
        };
        this._browserHandlers[f] = a;
        d.addEventListener(f, a, true);
      } else {
        if (!!j) {
          var g = function (k) {
            i._onDomEvent(new Sys.UI.DomEvent(k));
          };
          $telerik.addExternalHandler(this._element, f, g);
          this._externalHandlers[f] = g;
        } else {
          $telerik.addHandler(this._element, f, this._getDomEventDelegate());
        }
      }
    }
    var e = this._eventMap[f];
    e[b] = h;
  },
  addHandlerForClassNames: function (b, a, c, e) {
    if (!(a instanceof Array)) {
      a = a.split(/[,\s]+/g);
    }
    for (var d = 0; d < a.length; d++) {
      this.addHandlerForClassName(b, a[d], c, e);
    }
  },
  _onDomEvent: function (d) {
    var c = this._eventMap[d.type];
    if (!c) {
      return;
    }
    var h = d.target;
    while (h && h.nodeType !== 9) {
      var a = h.className;
      if (!a) {
        h = h.parentNode;
        continue;
      }
      var g = typeof a == "string" ? a.split(" ") : [];
      var b = null;
      for (var f = 0; f < g.length; f++) {
        b = c[g[f]];
        if (b) {
          break;
        }
      }
      if (b) {
        this._fillEventFields(d, h);
        if (b.call(this._owner, d) != true) {
          if (!h.parentNode) {
            d.stopPropagation();
          }
          return;
        }
      }
      if (h == this._element) {
        return;
      }
      h = h.parentNode;
    }
  },
  _fillEventFields: function (b, a) {
    b.eventMapTarget = a;
    if (b.rawEvent.relatedTarget) {
      b.eventMapRelatedTarget = b.rawEvent.relatedTarget;
    } else {
      if (b.type == "mouseover") {
        b.eventMapRelatedTarget = b.rawEvent.fromElement;
      } else {
        b.eventMapRelatedTarget = b.rawEvent.toElement;
      }
    }
    if (!b.eventMapRelatedTarget) {
      return;
    }
    try {
      b.eventMapRelatedTarget.className;
    } catch (c) {
      b.eventMapRelatedTarget = this._element;
    }
  },
  _shouldUseEventCapture: function (a) {
    return (a == "blur" || a == "focus") && !$telerik.isIE;
  },
  _getDomEventDelegate: function () {
    if (!this._onDomEventDelegate) {
      this._onDomEventDelegate = Function.createDelegate(
        this,
        this._onDomEvent
      );
    }
    return this._onDomEventDelegate;
  },
};
Telerik.Web.UI.EventMap.registerClass("Telerik.Web.UI.EventMap");
(function (a, b) {
  Type.registerNamespace("Telerik.Web.UI");
  Telerik.Web.UI.AnimationType = function () {};
  Telerik.Web.UI.AnimationType.toEasing = function (c) {
    return "ease" + Telerik.Web.UI.AnimationType.toString(c);
  };
  Telerik.Web.UI.AnimationType.prototype = {
    None: 0,
    Linear: 1,
    InQuad: 2,
    OutQuad: 3,
    InOutQuad: 4,
    InCubic: 5,
    OutCubic: 6,
    InOutCubic: 7,
    InQuart: 8,
    OutQuart: 9,
    InOutQuart: 10,
    InQuint: 11,
    OutQuint: 12,
    InOutQuint: 13,
    InSine: 14,
    OutSine: 15,
    InOutSine: 16,
    InExpo: 17,
    OutExpo: 18,
    InOutExpo: 19,
    InBack: 20,
    OutBack: 21,
    InOutBack: 22,
    InBounce: 23,
    OutBounce: 24,
    InOutBounce: 25,
    InElastic: 26,
    OutElastic: 27,
    InOutElastic: 28,
  };
  Telerik.Web.UI.AnimationType.registerEnum("Telerik.Web.UI.AnimationType");
  Telerik.Web.UI.AnimationSettings = function (c) {
    this._type = Telerik.Web.UI.AnimationType.OutQuart;
    this._duration = 300;
    if (typeof c.type != "undefined") {
      this._type = c.type;
    }
    if (typeof c.duration != "undefined") {
      this._duration = c.duration;
    }
  };
  Telerik.Web.UI.AnimationSettings.prototype = {
    get_type: function () {
      return this._type;
    },
    set_type: function (c) {
      this._type = c;
    },
    get_duration: function () {
      return this._duration;
    },
    set_duration: function (c) {
      this._duration = c;
    },
  };
  Telerik.Web.UI.AnimationSettings.registerClass(
    "Telerik.Web.UI.AnimationSettings"
  );
  Telerik.Web.UI.jSlideDirection = function () {};
  Telerik.Web.UI.jSlideDirection.prototype = {
    Up: 1,
    Down: 2,
    Left: 3,
    Right: 4,
  };
  Telerik.Web.UI.jSlideDirection.registerEnum("Telerik.Web.UI.jSlideDirection");
  Telerik.Web.UI.jSlide = function (c, f, d, e) {
    this._animatedElement = c;
    this._element = c.parentNode;
    this._expandAnimation = f;
    this._collapseAnimation = d;
    this._direction = Telerik.Web.UI.jSlideDirection.Down;
    this._expanding = null;
    if (e == null) {
      this._enableOverlay = true;
    } else {
      this._enableOverlay = e;
    }
    this._events = null;
    this._overlay = null;
    this._animationEndedDelegate = null;
  };
  Telerik.Web.UI.jSlide.prototype = {
    initialize: function () {
      if (Telerik.Web.UI.Overlay.IsSupported() && this._enableOverlay) {
        var c = this.get_animatedElement();
        this._overlay = new Telerik.Web.UI.Overlay(c);
        this._overlay.initialize();
      }
      this._animationEndedDelegate = Function.createDelegate(
        this,
        this._animationEnded
      );
    },
    dispose: function () {
      this._animatedElement = null;
      this._events = null;
      if (this._overlay) {
        this._overlay.dispose();
        this._overlay = null;
      }
      this._animationEndedDelegate = null;
      this._element = null;
      this._expandAnimation = null;
      this._collapseAnimation = null;
    },
    get_element: function () {
      return this._element;
    },
    get_animatedElement: function () {
      return this._animatedElement;
    },
    set_animatedElement: function (c) {
      this._animatedElement = c;
      if (this._overlay) {
        this._overlay.set_targetElement(this._animatedElement);
      }
    },
    get_direction: function () {
      return this._direction;
    },
    set_direction: function (c) {
      this._direction = c;
    },
    get_events: function () {
      if (!this._events) {
        this._events = new Sys.EventHandlerList();
      }
      return this._events;
    },
    updateSize: function () {
      var c = this.get_animatedElement();
      var d = this.get_element();
      var g = 0;
      if (c.style.top) {
        g = Math.max(parseInt(c.style.top, 10), 0);
      }
      var f = 0;
      if (c.style.left) {
        f = Math.max(parseInt(c.style.left, 10), 0);
      }
      var e = c.offsetHeight + g;
      if (d.style.height != e + "px") {
        d.style.height = Math.max(e, 0) + "px";
      }
      var h = c.offsetWidth + f;
      if (d.style.width != h + "px") {
        d.style.width = Math.max(h, 0) + "px";
      }
      if (this._overlay) {
        this._updateOverlay();
      }
    },
    show: function () {
      this._showElement();
    },
    expand: function () {
      this._expanding = true;
      this._resetState(true);
      var d = null;
      var c = null;
      switch (this.get_direction()) {
        case Telerik.Web.UI.jSlideDirection.Up:
        case Telerik.Web.UI.jSlideDirection.Left:
          d = parseInt(this._getSize(), 10);
          c = 0;
          break;
        case Telerik.Web.UI.jSlideDirection.Down:
        case Telerik.Web.UI.jSlideDirection.Right:
          d = parseInt(this._getPosition(), 10);
          c = 0;
          break;
      }
      this._expandAnimationStarted();
      if (
        d == c ||
        this._expandAnimation.get_type() == Telerik.Web.UI.AnimationType.None
      ) {
        this._setPosition(c);
        this.get_animatedElement().style.visibility = "visible";
        this._animationEnded();
      } else {
        this._playAnimation(this._expandAnimation, c);
      }
    },
    collapse: function () {
      this._resetState();
      this._expanding = false;
      var f = null;
      var c = null;
      var e = parseInt(this._getSize(), 10);
      var d = parseInt(this._getPosition(), 10);
      switch (this.get_direction()) {
        case Telerik.Web.UI.jSlideDirection.Up:
        case Telerik.Web.UI.jSlideDirection.Left:
          f = 0;
          c = e;
          break;
        case Telerik.Web.UI.jSlideDirection.Down:
        case Telerik.Web.UI.jSlideDirection.Right:
          f = 0;
          c = d - e;
          break;
      }
      this._collapseAnimationStarted();
      if (
        f == c ||
        this._collapseAnimation.get_type() == Telerik.Web.UI.AnimationType.None
      ) {
        this._setPosition(c);
        this._animationEnded();
      } else {
        this._playAnimation(this._collapseAnimation, c);
      }
    },
    add_collapseAnimationStarted: function (c) {
      this.get_events().addHandler("collapseAnimationStarted", c);
    },
    remove_collapseAnimationStarted: function (c) {
      this.get_events().removeHandler("collapseAnimationStarted", c);
    },
    add_collapseAnimationEnded: function (c) {
      this.get_events().addHandler("collapseAnimationEnded", c);
    },
    remove_collapseAnimationEnded: function (c) {
      this.get_events().removeHandler("collapseAnimationEnded", c);
    },
    add_expandAnimationStarted: function (c) {
      this.get_events().addHandler("expandAnimationStarted", c);
    },
    remove_expandAnimationStarted: function (c) {
      this.get_events().removeHandler("expandAnimationStarted", c);
    },
    add_expandAnimationEnded: function (c) {
      this.get_events().addHandler("expandAnimationEnded", c);
    },
    remove_expandAnimationEnded: function (c) {
      this.get_events().removeHandler("expandAnimationEnded", c);
    },
    _playAnimation: function (d, f) {
      this.get_animatedElement().style.visibility = "visible";
      var h = this._getAnimationQuery();
      var c = this._getAnimatedStyleProperty();
      var g = {};
      g[c] = f;
      var e = d.get_duration();
      $telerik.stopTransition(h, false);
      $telerik.transition(
        h,
        g,
        e,
        Telerik.Web.UI.AnimationType.toEasing(d.get_type()),
        this._animationEndedDelegate
      );
    },
    _stopAnimation: function () {
      $telerik.stopTransition(this._getAnimationQuery(), false, true);
    },
    _expandAnimationStarted: function () {
      this._raiseEvent("expandAnimationStarted", Sys.EventArgs.Empty);
    },
    _collapseAnimationStarted: function () {
      this._raiseEvent("collapseAnimationStarted", Sys.EventArgs.Empty);
    },
    _animationEnded: function () {
      if (this._expanding) {
        if (this._element) {
          this._element.style.overflow = "visible";
        }
        this._raiseEvent("expandAnimationEnded", Sys.EventArgs.Empty);
      } else {
        if (this._element) {
          this._element.style.display = "none";
        }
        this._raiseEvent("collapseAnimationEnded", Sys.EventArgs.Empty);
      }
      if (this._overlay) {
        this._updateOverlay();
      }
    },
    _updateOverlay: function () {
      this._overlay.updatePosition();
    },
    _showElement: function () {
      var c = this.get_animatedElement();
      var d = this.get_element();
      if (!d) {
        return;
      }
      if (!d.style) {
        return;
      }
      d.style.display = d.tagName.toUpperCase() != "TABLE" ? "block" : "";
      c.style.display = c.tagName.toUpperCase() != "TABLE" ? "block" : "";
      d.style.overflow = "hidden";
    },
    _resetState: function (d) {
      this._stopAnimation();
      this._showElement();
      if (d) {
        var c = this.get_animatedElement();
        switch (this.get_direction()) {
          case Telerik.Web.UI.jSlideDirection.Up:
            c.style.top = c.offsetHeight + "px";
            break;
          case Telerik.Web.UI.jSlideDirection.Down:
            c.style.top = -c.offsetHeight + "px";
            break;
          case Telerik.Web.UI.jSlideDirection.Left:
            c.style.left = c.offsetWidth + "px";
            break;
          case Telerik.Web.UI.jSlideDirection.Right:
            c.style.left = -c.offsetWidth + "px";
            break;
          default:
            Error.argumentOutOfRange(
              "direction",
              this.get_direction(),
              "Slide direction is invalid. Use one of the values in the Telerik.Web.UI.SlideDirection enumeration."
            );
            break;
        }
      }
    },
    _getAnimationQuery: function () {
      var c = [this.get_animatedElement()];
      if (this._enableOverlay && this._overlay) {
        c[c.length] = this._overlay.get_element();
      }
      return a(c);
    },
    _getSize: function () {
      var c = this.get_animatedElement();
      switch (this.get_direction()) {
        case Telerik.Web.UI.jSlideDirection.Up:
        case Telerik.Web.UI.jSlideDirection.Down:
          return c.offsetHeight;
        case Telerik.Web.UI.jSlideDirection.Left:
        case Telerik.Web.UI.jSlideDirection.Right:
          return c.offsetWidth;
        default:
          return 0;
      }
    },
    _setPosition: function (e) {
      var c = this.get_animatedElement();
      var d = this._getAnimatedStyleProperty();
      c.style[d] = e;
    },
    _getPosition: function () {
      var c = this.get_animatedElement();
      var d = this._getAnimatedStyleProperty();
      return c.style[d] || 0;
    },
    _getAnimatedStyleProperty: function () {
      switch (this.get_direction()) {
        case Telerik.Web.UI.jSlideDirection.Up:
        case Telerik.Web.UI.jSlideDirection.Down:
          return "top";
        case Telerik.Web.UI.jSlideDirection.Left:
        case Telerik.Web.UI.jSlideDirection.Right:
          return "left";
      }
    },
    _raiseEvent: function (d, c) {
      var e = this.get_events().getHandler(d);
      if (e) {
        if (!c) {
          c = Sys.EventArgs.Empty;
        }
        e(this, c);
      }
    },
  };
  Telerik.Web.UI.jSlide.registerClass(
    "Telerik.Web.UI.jSlide",
    null,
    Sys.IDisposable
  );
})($telerik.$);
(function (a) {
  a.TemplateRenderer = {
    renderTemplate: function (c, b, h) {
      var i = this._getTemplateFunction(b, h),
        g;
      if (!i) {
        return null;
      }
      try {
        g = i(c);
      } catch (d) {
        throw Error.invalidOperation(
          String.format("Error rendering template: {0}", d.message)
        );
      }
      if (b && b.raiseEvent) {
        var f = new a.RadTemplateBoundEventArgs(c, i, g);
        b.raiseEvent("templateDataBound", f);
        g = f.get_html();
      }
      return g;
    },
    _getTemplateFunction: function (c, f) {
      var g;
      if (f && f.get_clientTemplate) {
        g = f.get_clientTemplate();
      }
      if (!g && c) {
        g = c.get_clientTemplate();
      }
      if (!g) {
        return null;
      }
      if (c) {
        if (!c._templateCache) {
          c._templateCache = {};
        }
        var b = c._templateCache[g];
        if (b) {
          return b;
        }
      }
      var h;
      try {
        h = a.Template.compile(g);
      } catch (d) {
        throw Error.invalidOperation(
          String.format("Error creating template: {0}", d.message)
        );
      }
      if (c) {
        c._templateCache[g] = h;
      }
      return h;
    },
  };
})(Telerik.Web.UI);

/* END Telerik.Web.UI.Common.Navigation.NavigationScripts.js */
/* START Telerik.Web.UI.TabStrip.RadTabStripScripts.js */
(function (a, c) {
  Type.registerNamespace("Telerik.Web.UI");
  var b = Telerik.Web.UI;
  b.RadTab = function () {
    b.RadTab.initializeBase(this);
    this._properties = new b.PropertyBag(this);
  };
  b.RadTab.GetView = function (g, f) {
    var e = g._renderMode,
      d = b.RadTab.Views;
    if (e == b.RenderMode.Classic) {
      return new d.Classic(f);
    } else {
      return new d.Lite(f);
    }
  };
  b.RadTab.prototype = {
    _requiresScrolling: function () {
      return this.get_tabStrip()._tabContainerRequiresScrolling(this);
    },
    _createChildControls: function () {
      this._children = new b.RadTabCollection(this);
      b.RadTabStrip._createChildControls(this, this._children);
    },
    _tabsFromSameLevel: function () {
      var f = [];
      Array.addRange(f, this.get_tabStrip()._children._array);
      while (f.length > 0) {
        var e = f.length;
        if (Array.indexOf(f, this) > -1) {
          return f;
        }
        for (var d = 0; d < e; d++) {
          var g = f[0];
          Array.remove(f, g);
          Array.addRange(f, g._children._array);
        }
      }
      return f;
    },
    _getChildListIndex: function () {
      if (!this.get_tabData()) {
        return -1;
      }
      var g = this._tabsFromSameLevel();
      var d = -1;
      for (var e = 0; e < g.length; e++) {
        var f = g[e];
        if (f.get_tabData()) {
          d++;
        }
        if (f == this) {
          break;
        }
      }
      return d;
    },
    _ensureElements: function () {
      if (!this.get_childListElement()) {
        this._createChildListElement();
      }
    },
    _createChildListElement: function () {
      var d = document.createElement("ul"),
        e = this._getListItemsForTheCurrentLevel(),
        f = this.get_parent();
      d.className = "rtsUL";
      d.style.display = "none";
      if (this.get_enableAriaSupport()) {
        d.setAttribute("role", "tablist");
      }
      if (this.get_selected() && f && a(f._childListElement).is(":visible")) {
        d.style.display = "";
      }
      if (!e) {
        this.get_parent()._ensureElements();
        this.get_tabStrip()._createLevelElement(this.get_level() + 2);
        e = this._getListItemsForTheCurrentLevel();
      }
      this._requireChildList();
      this.get_levelElement().insertBefore(
        d,
        e[this._getChildListIndex()] || null
      );
      Array.insert(e, this._getChildListIndex(), d);
      return d;
    },
    _shouldInitializeChild: function (d) {
      return true;
    },
    _getListItemsForTheCurrentLevel: function () {
      return this.get_tabStrip()._getListElementsForLevel(
        this._getLevelIndex()
      );
    },
    _getChildElements: function () {
      return $telerik.getChildrenByTagName(this.get_childListElement(), "li");
    },
    _requireChildList: function () {
      this._itemData = [];
    },
    _doesNotRequireChildList: function () {
      this._itemData = null;
    },
    _destroyChildListElement: function () {
      this.get_tabStrip()._destroyChildren(this);
      this._doesNotRequireChildList();
    },
    _renderSeparator: function (d) {
      d[d.length] = "<li class='rtsLI rtsSeparator'>";
      d[d.legnth] = this.get_text();
      d[d.length] = "</li>";
    },
    _renderTab: function (d) {
      var e = this;
      this.withView(function () {
        e.get_view()._renderTab(d);
      });
    },
    _renderLink: function (d) {
      var e = this;
      d[d.length] = "<a ";
      if (this.get_target()) {
        d[d.length] = "target='";
        d[d.length] = this.get_target();
        d[d.length] = "' ";
      }
      d[d.length] = "href='";
      if (this.get_navigateUrl()) {
        d[d.length] = this.get_navigateUrl();
      } else {
        d[d.length] = "#";
      }
      d[d.length] = "' class='";
      d[d.length] = this._getLinkCssClass();
      d[d.length] = "'>";
      this.withView(function () {
        e.get_view()._renderContent(d);
      });
      d[d.length] = "</a>";
    },
    _renderInnerContent: function (d) {
      this._renderImgElement(d);
      this._renderTextElement(d);
    },
    _renderImgElement: function (d) {
      var e = this._determineImage();
      if (e) {
        d[d.length] = "<img alt='' class='rtsImg' src='";
        d[d.length] = e;
        d[d.length] = "' />";
      }
    },
    _renderTextElement: function (d) {
      d[d.length] = "<span class='rtsTxt'>";
      d[d.length] = this.get_text();
      d[d.length] = "</span>";
    },
    _removeGhostTab: function () {
      var d = this._ghost;
      if (d) {
        d.parentNode.removeChild(d);
      }
      this._ghost = null;
      delete this._ghost;
    },
    _getLinkCssClass: function (e) {
      var f = this;
      var d;
      this.withView(function () {
        d = f.get_view()._getLinkCssClass(e);
      });
      return d.join(" ");
    },
    _getElementCssClass: function () {
      var e = this;
      var d;
      this.withView(function () {
        d = e.get_view()._getElementCssClass();
      });
      return d.join(" ");
    },
    _determineStateCssClass: function () {
      var d = [];
      if (this.get_cssClass()) {
        d[d.length] = this.get_cssClass();
      }
      if (this.get_selected()) {
        d[d.length] = "rtsSelected";
        if (this.get_selectedCssClass()) {
          d[d.length] = this.get_selectedCssClass();
        }
      }
      if (!this.get_enabled()) {
        d[d.length] = "rtsDisabled";
        if (this.get_disabledCssClass()) {
          d[d.length] = this.get_disabledCssClass();
        }
      }
      return d;
    },
    _render: function (d) {
      if (this.get_isSeparator()) {
        this._renderSeparator(d);
      } else {
        this._renderTab(d);
      }
      this._updateSiblings();
      if (this.get_tabs().get_count() > 0) {
        this._renderChildren();
      }
    },
    _updateSiblings: function () {
      var d = this;
      this.withView(function () {
        var e = d.get_view();
        if (e._updateSiblings !== c) {
          e._updateSiblings();
        }
      });
    },
    _renderChildren: function () {
      var d = this._createChildListElement();
      var e = [];
      this.get_tabs().forEach(function (f) {
        f._render(e);
      });
      d.innerHTML = e.join("");
    },
    _cacheDomProperties: function () {
      this.get_text();
      this.get_navigateUrl();
    },
    _cleanElements: function () {
      this._cacheDomProperties();
      b.RadTabStrip._disposeScroller(this);
      var e = this.get_parent(),
        d = e.get_childListElement();
      this.get_tabs().forEach(function (f) {
        f._cacheDomProperties();
        f._cleanElements();
      });
      d.removeChild(this.get_element());
      this._element = null;
      this._linkElement = null;
      this._outerWrapElement = null;
      this._innerWrapElement = null;
      this._imageElement = null;
      this._textElement = null;
      if ($telerik.getChildrenByTagName(d, "li") < 1) {
        e._destroyChildListElement();
      }
    },
    _getLevelIndex: function () {
      if (this.get_tabStrip()._ascendingRendering()) {
        return this.get_level() + 1;
      }
      return (
        this.get_tabStrip()._getLevelElements().length - this.get_level() - 2
      );
    },
    _updateAppearance: function () {
      if (!this.get_element()) {
        return;
      }
      if (this.get_linkElement()) {
        this._setCssClass(this.get_linkElement(), this._getLinkCssClass());
      }
      this._updateImage();
      this._setCssClass(this.get_element(), this._getElementCssClass());
    },
    _determineImage: function () {
      var d = this.get_imageUrl();
      if (this.get_selected() && this.get_selectedImageUrl()) {
        d = this.get_selectedImageUrl();
      }
      if (!this.get_enabled() && this.get_disabledImageUrl()) {
        d = this.get_disabledImageUrl();
      }
      return d;
    },
    _updateImage: function () {
      if (!this.get_element()) {
        return;
      }
      var e = this._determineImage();
      var d = this.get_imageElement();
      if (e) {
        if (!d) {
          d = document.createElement("img");
          d.className = "rtsImg";
          d.alt = "";
          this.get_innerWrapElement().insertBefore(d, this.get_textElement());
        }
        if (this.get_imageElement().src != e) {
          this.get_imageElement().src = e;
        }
        return;
      }
      if (d) {
        a(d).remove();
        this._imageElement = null;
      }
    },
    _setChildListDisplay: function (f) {
      var g = this.get_tabStrip();
      var e = this;
      while (e) {
        var d = e.get_childListElement();
        if (d) {
          d.style.display = f;
          if (f != "none" && g._align == b.TabStripAlign.Justify) {
            b.RadTabStrip._justify(d, g._orientation);
          }
        }
        e = e.get_selectedTab();
      }
    },
    _setHighlight: function (d) {
      var e = this;
      this.withView(function () {
        e.get_view()._setHighlight(d);
      });
    },
    _highlight: function () {
      if (!this.get_isEnabled()) {
        return;
      }
      this._setHighlight(true);
      if (!this.get_hoveredImageUrl() || !this.get_imageElement()) {
        return;
      }
      if (this.get_imageElement().src != this.get_hoveredImageUrl()) {
        this.get_imageElement().src = this.get_hoveredImageUrl();
      }
    },
    _unhighlight: function () {
      this._setHighlight(false);
      this._updateImage();
    },
    _shouldPostBack: function () {
      var d = this.get_tabStrip();
      if (!d) {
        return false;
      }
      return this.get_postBack() && (d._autoPostBack || d._postBackOnClick);
    },
    _initialize: function (d, e) {
      b.RadTab.callBaseMethod(this, "_initialize", [d, e]);
      this._perTabScrolling = this._properties.getValue(
        "perTabScrolling",
        false
      );
      this._scrollChildren = this._properties.getValue("scrollChildren", false);
      this._scrollButtonsPosition = this._properties.getValue(
        "scrollButtonsPosition",
        b.TabStripScrollButtonsPosition.Right
      );
      this._ensureChildControls();
    },
    _dispose: function () {
      b.RadTab.callBaseMethod(this, "_dispose");
      b.RadTabStrip._disposeScroller(this);
    },
    _initScrolling: function () {
      if (this.get_selected() && this._requiresScrolling()) {
        this.get_tabStrip()._initScrollingForTabContainer(this);
      }
    },
    _selectPageView: function (e) {
      var d = this.get_pageView();
      if (d) {
        d._select(e);
      }
      if (this.get_selectedIndex() > -1) {
        this.get_selectedTab()._selectPageView(e);
      }
    },
    _setVisible: function (d) {
      b.RadTab.callBaseMethod(this, "set_visible", [d]);
      if (d) {
        this.get_element().style.display = "";
        this._updateSiblings();
        this._updateAppearance();
      } else {
        this.get_element().style.display = "none";
        this.unselect();
        this._updateSiblings();
      }
    },
    _getGlobalIndex: function () {
      return Array.indexOf(this.get_tabStrip().get_allTabs(), this);
    },
    _setNavigateUrl: function (d) {
      this._properties.setValue("navigateUrl", d, true);
    },
    get_view: function () {
      return this._view;
    },
    withView: function (d, e) {
      if (!this.get_view()) {
        if (this.get_tabStrip()) {
          this._view = b.RadTab.GetView(this.get_tabStrip(), this);
        } else {
          if (e) {
            return e();
          } else {
            return;
          }
        }
      }
      return d();
    },
    scrollIntoView: function () {
      var d = this;
      this.withView(function () {
        d.get_view().scrollIntoView();
      });
    },
    scrollIntoViewWhenNeeded: function () {
      var d = this;
      this.withView(function () {
        d.get_view().scrollIntoViewWhenNeeded();
      });
    },
    get_nextTab: function () {
      return this.get_nextSibling();
    },
    get_previousTab: function () {
      return this.get_previousSibling();
    },
    click: function (d) {
      if (!this.get_isEnabled()) {
        if (d && d.preventDefault) {
          d.preventDefault();
        }
        return false;
      }
      var f = this.get_tabStrip();
      if (!f) {
        return false;
      }
      if (f.get_causesValidation()) {
        if (
          typeof Page_ClientValidate !== "undefined" &&
          !Page_ClientValidate(f.get_validationGroup())
        ) {
          return false;
        }
      }
      if (!this.select(d)) {
        return false;
      }
      if (this._shouldNavigate()) {
        return true;
      }
      if (this._shouldPostBack()) {
        f._postback({
          type: b.TabStripCommand.TabClick,
          index: this._getHierarchicalIndex(),
        });
      }
      return false;
    },
    get_pageView: function () {
      var e = this.get_tabStrip().get_multiPage();
      if (!e) {
        return null;
      }
      if (this.get_pageViewID()) {
        return e.findPageViewByID(this.get_pageViewID());
      }
      var d = this._properties.getValue("_implPageViewID", "");
      if (d) {
        return e.findPageViewByID(d);
      }
      return e.get_pageViews().getPageView(this._getGlobalIndex());
    },
    get_pageViewID: function () {
      return this._properties.getValue("pageViewID", null);
    },
    set_pageViewID: function (d) {
      this._properties.setValue("pageViewID", d);
    },
    get_target: function () {
      if (this.get_linkElement()) {
        return this._properties.getValue(
          "target",
          this.get_linkElement().target
        );
      }
      return this._properties.getValue("target", null);
    },
    set_target: function (d) {
      this._properties.setValue("target", d, true);
      if (this.get_linkElement()) {
        this.get_linkElement().target = d;
      }
    },
    get_navigateUrl: function () {
      return this._getNavigateUrl();
    },
    set_navigateUrl: function (e) {
      var d = this;
      this._setNavigateUrl(e);
      this.withView(function () {
        d.get_view().set_navigateUrl(e);
      });
    },
    get_postBack: function () {
      return this._properties.getValue("postback", true);
    },
    set_postBack: function (d) {
      this._properties.setValue("postback", d, true);
    },
    get_selected: function () {
      if (!this.get_parent()) {
        return false;
      }
      return this.get_index() == this.get_parent().get_selectedIndex();
    },
    set_selected: function (d) {
      if (d) {
        this.select();
      } else {
        this.unselect();
      }
    },
    selectParents: function () {
      var f = [];
      var d = this;
      while (d != this.get_tabStrip()) {
        f[f.length] = d;
        d = d.get_parent();
      }
      var e = f.length;
      while (e--) {
        f[e].select();
      }
    },
    select: function (d) {
      var k = this;
      var f = this.get_parent();
      if (!f) {
        this._cachedSelected = true;
        return true;
      }
      var h = this._shouldNavigate(),
        g = f.get_selectedTab(),
        j = this.get_tabStrip();
      if (!h && g == this && !j.get_clickSelectedTab()) {
        return false;
      }
      if (j._raiseCancelEvent("tabSelecting", this, d)) {
        return false;
      }
      var i =
        this._shouldPostBack() ||
        (h && (!this.get_target() || this.get_target() == "_self"));
      if (!d) {
        i = false;
      }
      if (g && g != this) {
        g.unselect(i, d);
      }
      f._setSelectedIndex(this.get_index());
      j._registerSelectedTab(this);
      if (j.get_enableAriaSupport()) {
        b.RadTabStrip._toggleActiveDescendantAttributes(this, j.get_id(), true);
      }
      this.withView(function () {
        var e = k.get_view();
        if (e.select) {
          e.select();
        }
      });
      if (!i) {
        this._updateAppearance();
        this._updateSiblings();
        this._setChildListDisplay("");
        if (this._scroller) {
          if (this._scroller._showArrows != c) {
            this._scroller._showArrows();
          }
        } else {
          j._scrollInitInProgress = true;
          this._initScrolling();
          j._scrollInitInProgress = false;
        }
        if (j._reorderTabsOnSelect) {
          b.RadTabStrip._reorderTabs(
            f.get_childListElement(),
            this.get_element()
          );
        }
      }
      if (j.get_multiPage()) {
        this._selectPageView(i);
      }
      j._raiseEvent("tabSelected", this, d);
      return true;
    },
    unselect: function (h, d) {
      var j = this;
      var f = this.get_parent();
      if (!f) {
        return;
      }
      if (!this.get_selected()) {
        return;
      }
      f._setSelectedIndex(-1);
      var i = this.get_tabStrip();
      i._unregisterSelectedTab(this);
      if (i.get_enableAriaSupport()) {
        b.RadTabStrip._toggleActiveDescendantAttributes(
          this,
          i.get_id(),
          false
        );
      }
      this.withView(function () {
        var e = j.get_view();
        if (e.unselect) {
          e.unselect();
        }
      });
      if (!h) {
        this._setChildListDisplay("none");
        if (this._scroller && this._scroller._hideArrows != c) {
          this._scroller._hideArrows();
        }
        this._updateAppearance();
        this._updateSiblings();
      }
      var g = this.get_selectedTab();
      if (i.get_unselectChildren() && g) {
        g.unselect(h);
      }
      i._raiseEvent("tabUnSelected", this, d);
    },
    get_selectedIndex: function () {
      return this._properties.getValue("selectedIndex", -1);
    },
    _setSelectedIndex: function (d) {
      this._properties.setValue("selectedIndex", d);
    },
    set_selectedIndex: function (f) {
      if (f > -1) {
        var e = this.get_tabs().getTab(f);
        if (e) {
          e.select();
        }
      } else {
        var d = this.get_selectedTab();
        if (d) {
          d.unselect();
        }
      }
    },
    get_selectedTab: function () {
      return this.get_tabs().getTab(this.get_selectedIndex()) || null;
    },
    get_tabStrip: function () {
      return this._getControl();
    },
    get_isSeparator: function () {
      return this._properties.getValue("isSeparator", false);
    },
    set_isSeparator: function (d) {
      this._properties.setValue("isSeparator", d);
    },
    get_tabData: function () {
      return this.get_itemData();
    },
    get_levelElement: function () {
      if (!this._levelElement) {
        this._levelElement =
          this._getControl()._getLevelElements()[this._getLevelIndex()] || null;
      }
      return this._levelElement;
    },
    get_textElement: function () {
      if (this.get_isSeparator()) {
        return this.get_element();
      }
      if (!this.get_innerWrapElement()) {
        return null;
      }
      if (!this._textElement) {
        this._textElement = $telerik.getChildByClassName(
          this.get_innerWrapElement(),
          "rtsTxt"
        );
      }
      return this._textElement;
    },
    get_linkElement: function () {
      if (!this.get_element()) {
        return null;
      }
      if (!this._linkElement) {
        this._linkElement = $telerik.getChildByClassName(
          this.get_element(),
          "rtsLink"
        );
      }
      return this._linkElement;
    },
    get_imageElement: function () {
      if (!this.get_innerWrapElement()) {
        return null;
      }
      if (!this._imageElement) {
        this._imageElement = $telerik.getChildByClassName(
          this.get_innerWrapElement(),
          "rtsImg"
        );
      }
      return this._imageElement;
    },
    get_outerWrapElement: function () {
      var d = this;
      if (!this.get_linkElement()) {
        return null;
      }
      if (!this._outerWrapElement) {
        this._outerWrapElement = this.withView(function () {
          return d.get_view().get_outerWrapElement();
        });
      }
      return this._outerWrapElement;
    },
    get_innerWrapElement: function () {
      var d = this;
      if (!this.get_outerWrapElement()) {
        return null;
      }
      if (!this._innerWrapElement) {
        this._innerWrapElement = this.withView(function () {
          return d.get_view().get_innerWrapElement();
        });
      }
      return this._innerWrapElement;
    },
    get_childListElement: function () {
      if (!this._childListElement) {
        var d = this._getListItemsForTheCurrentLevel();
        if (!d) {
          return null;
        }
        this._childListElement = d[this._getChildListIndex()] || null;
      }
      return this._childListElement;
    },
    get_tabs: function () {
      return this._getChildren();
    },
    enable: function () {
      this.set_enabled(true);
    },
    disable: function () {
      this.set_enabled(false);
    },
    set_visible: function (d) {
      this._setVisible(d);
    },
    show: function () {
      this._setVisible(true);
    },
    hide: function () {
      this._setVisible(false);
    },
    set_enabled: function (h) {
      if (this.get_enabled() == h) {
        return;
      }
      b.RadTab.callBaseMethod(this, "set_enabled", [h]);
      var g = this.get_tabStrip();
      if (g && g.get_enableAriaSupport()) {
        a(this.get_element()).attr("aria-disabled", !this.get_enabled());
      }
      this._updateAppearance();
      if ($telerik.isIE8 && this.get_linkElement()) {
        this.get_linkElement().disabled = !h;
      }
      if (this._scroller) {
        this._scroller._toggleEnabled();
      }
      var f = this.get_tabs();
      for (var d = 0, e = f.get_count(); d < e; d++) {
        f.getTab(d).set_enabled(h);
      }
    },
    get_disabledCssClass: function () {
      return this._properties.getValue("disabledCssClass", null);
    },
    set_disabledCssClass: function (d) {
      this._properties.setValue("disabledCssClass", d, true);
      this._updateAppearance();
    },
    get_selectedCssClass: function () {
      return this._properties.getValue("selectedCssClass", null);
    },
    set_selectedCssClass: function (d) {
      this._properties.setValue("selectedCssClass", d, true);
      this._updateAppearance();
    },
    get_hoveredCssClass: function () {
      return this._properties.getValue("hoveredCssClass", null);
    },
    set_hoveredCssClass: function (d) {
      this._properties.setValue("hoveredCssClass", d, true);
    },
    _applyCssClass: function () {
      this._updateAppearance();
    },
    get_outerCssClass: function () {
      return this._properties.getValue("outerCssClass", null);
    },
    set_outerCssClass: function (d) {
      this._properties.setValue("outerCssClass", d, true);
      this._updateAppearance();
    },
    get_imageUrl: function () {
      return this._properties.getValue("imageUrl", null);
    },
    set_imageUrl: function (d) {
      this._properties.setValue("imageUrl", d, true);
      this._updateImage();
    },
    get_selectedImageUrl: function () {
      return this._properties.getValue("selectedImageUrl", null);
    },
    set_selectedImageUrl: function (d) {
      this._properties.setValue("selectedImageUrl", d, true);
      this._updateImage();
    },
    get_disabledImageUrl: function () {
      return this._properties.getValue("disabledImageUrl", null);
    },
    set_disabledImageUrl: function (d) {
      this._properties.setValue("disabledImageUrl", d, true);
      this._updateImage();
    },
    get_hoveredImageUrl: function () {
      return this._properties.getValue("hoveredImageUrl", null);
    },
    set_hoveredImageUrl: function (d) {
      this._properties.setValue("hoveredImageUrl", d, true);
    },
    get_isBreak: function () {
      return this._properties.getValue("isBreak", false);
    },
    set_isBreak: function (d) {
      this._properties.setValue("isBreak", d, true);
    },
  };
  b.RadTab.registerClass("Telerik.Web.UI.RadTab", b.ControlItem);
})($telerik.$);
(function (b) {
  Type.registerNamespace("Telerik.Web.UI");
  var a = Telerik.Web.UI;
  a.RadTabCollection = function (c) {
    a.RadTabCollection.initializeBase(this, [c]);
    this._tabStrip = c.get_tabStrip ? c.get_tabStrip() : c;
  };
  a.RadTabCollection.prototype = {
    getTab: function (c) {
      return this.getItem(c);
    },
    insert: function (c, d) {
      a.RadTabCollection.callBaseMethod(this, "insert", [c, d]);
      var e = this._parent;
      var f = this._tabStrip;
      if (!e._childControlsCreated) {
        return;
      }
      if (e._scroller) {
        f._updateScroller(e);
      } else {
        if (e._scrollChildren && f._tabContainerRequiresScrolling(e)) {
          e._initScrolling();
        }
      }
    },
    remove: function (c) {
      a.RadTabCollection.callBaseMethod(this, "remove", [c]);
      var d = this._parent;
      if (d && d._scroller) {
        if (this._tabStrip._tabContainerRequiresScrolling(d)) {
          this._tabStrip._updateScroller(d);
        } else {
          d._scroller.dispose();
          this._tabStrip._updateScrollState(d, 0);
        }
      }
    },
  };
  a.RadTabCollection.registerClass(
    "Telerik.Web.UI.RadTabCollection",
    a.ControlItemCollection
  );
})();
(function (a, k) {
  $telerik.findTabStrip = $find;
  $telerik.toTabStrip = function (l) {
    return l;
  };
  Type.registerNamespace("Telerik.Web.UI");
  var c = Telerik.Web.UI,
    b = Sys.Serialization.JavaScriptSerializer,
    e = Telerik.Web.Browser,
    f = document,
    d = f.body,
    j = "style",
    g = $telerik.isTouchDevice ? "touchstart" : "mousedown",
    i = $telerik.isTouchDevice ? "touchend" : "mouseup",
    h = $telerik.isTouchDevice ? "touchmove" : "mousemove";
  c.TabStripOrientation = function () {};
  c.TabStripOrientation.prototype = {
    HorizontalTop: 0,
    HorizontalBottom: 1,
    VerticalRight: 2,
    VerticalLeft: 3,
  };
  c.TabStripOrientation.isHorizontal = function (l) {
    return (
      l == c.TabStripOrientation.HorizontalTop ||
      l == c.TabStripOrientation.HorizontalBottom
    );
  };
  c.TabStripOrientation.isVertical = function (l) {
    return !c.TabStripOrientation.isHorizontal(l);
  };
  c.TabStripOrientation.registerEnum("Telerik.Web.UI.TabStripOrientation");
  c.TabStripAlign = function () {};
  c.TabStripAlign.prototype = { Left: 0, Center: 1, Right: 2, Justify: 3 };
  c.TabStripAlign.registerEnum("Telerik.Web.UI.TabStripAlign");
  c.TabStripScrollButtonsPosition = function () {};
  c.TabStripScrollButtonsPosition.prototype = { Left: 0, Middle: 1, Right: 2 };
  c.TabStripScrollButtonsPosition.registerEnum(
    "Telerik.Web.UI.TabStripScrollButtonsPosition"
  );
  c.TabStripDropPosition = { None: 0, Before: 1, After: 2 };
  c.TabStripCommand = { TabClick: 0, Reorder: 1 };
  c.RadTabStripCancelEventArgs = function (m, l) {
    c.RadTabStripCancelEventArgs.initializeBase(this);
    this._tab = m;
    this._domEvent = l;
  };
  c.RadTabStripCancelEventArgs.prototype = {
    get_tab: function () {
      return this._tab;
    },
    get_domEvent: function () {
      return this._domEvent;
    },
  };
  c.RadTabStripCancelEventArgs.registerClass(
    "Telerik.Web.UI.RadTabStripCancelEventArgs",
    Sys.CancelEventArgs
  );
  c.RadTabStripEventArgs = function (m, l) {
    c.RadTabStripEventArgs.initializeBase(this);
    this._tab = m;
    this._domEvent = l;
  };
  c.RadTabStripEventArgs.prototype = {
    get_tab: function () {
      return this._tab;
    },
    get_domEvent: function () {
      return this._domEvent;
    },
  };
  c.RadTabStripEventArgs.registerClass(
    "Telerik.Web.UI.RadTabStripEventArgs",
    Sys.EventArgs
  );
  c.RadTabStrip = function (l) {
    c.RadTabStrip.initializeBase(this, [l]);
    this._childTypeName = "Telerik.Web.UI.RadTab";
    this._orientation = c.TabStripOrientation.HorizontalTop;
    this._align = c.TabStripAlign.Left;
    this._selectedIndex = -1;
    this._selectedIndexes = [];
    this._selectedIndexesJson = "[]";
    this._logEntriesJson = "[]";
    this._scrollState = {};
    this._scrollStateJson = "{}";
    this._multiPageID = null;
    this._shouldReorder = false;
    this._enableDragToReorder = false;
    (this._enableAriaSupport = false), (this._draggedTab = null);
    this._dropPosition = c.TabStripDropPosition.None;
    this._autoPostBack = false;
    this._postBackOnReorder = false;
    this._postBackOnClick = false;
    this._causesValidation = true;
    this._validationGroup = "";
    this._postBackReference = null;
    this._scrollChildren = false;
    this._scrollButtonsPosition = c.TabStripScrollButtonsPosition.Right;
    this._perTabScrolling = false;
    this._reorderTabsOnSelect = false;
    this._rightToLeft = false;
    this._skin = null;
    this._scrollPosition = 0;
    this._isVertical = false;
    this._isUsedOnTouchDevices = false;
    this._ariaSettings = null;
  };
  c.RadTabStrip.GetView = function (n) {
    var m = n._renderMode,
      l = c.RadTabStrip.Views;
    if (m == c.RenderMode.Classic) {
      return new l.Classic(n);
    } else {
      return new l.Lite(n);
    }
  };
  c.RadTabStrip._getTabGroups = function (q, s) {
    var o = [];
    var n = [];
    n.size = 0;
    Array.add(o, n);
    var r = $telerik.getChildrenByTagName(q, "li");
    for (var p = 0; p < r.length; p++) {
      if (r[p].className == "rtsBreak") {
        n = [];
        n.size = 0;
        Array.add(o, n);
        continue;
      }
      var t;
      if (!($telerik.isIE7 || $telerik.isIE8)) {
        var m = getComputedStyle(r[p]),
          l = 0;
        if (m) {
          l =
            s == "offsetWidth"
              ? parseFloat(m.width) + parseFloat(m.paddingLeft)
              : parseFloat(m.height);
        }
        t = l;
      } else {
        t = r[p][s];
      }
      n.size += t;
      Array.add(n, r[p]);
    }
    if (!($telerik.isIE7 || $telerik.isIE8)) {
      Array.forEach(o, function (u) {
        u.size = Math.ceil(u.size);
      });
    }
    return o;
  };
  c.RadTabStrip._reorder = function (l, p) {
    var r = $get(l);
    if (!r) {
      return;
    }
    var m = $telerik.getChildByClassName(r, "rtsLevel1");
    if (!m) {
      return;
    }
    var n = $telerik.getFirstChildByTagName(m, "ul");
    if (!n) {
      return;
    }
    var o = $telerik.getChildrenByClassName(n, "rtsLI");
    var q = o[p];
    if (!q) {
      return;
    }
    c.RadTabStrip._reorderTabs(n, q);
  };
  c.RadTabStrip._reorderTabs = function (p, q) {
    var m = c.RadTabStrip._getTabGroups(p);
    if (m.length < 2) {
      return;
    }
    var o = m[m.length - 1];
    var l = null;
    var n;
    for (n = 0; n < m.length; n++) {
      if (Array.indexOf(m[n], q) > -1) {
        l = m[n];
        break;
      }
    }
    if (!l || l == o) {
      return;
    }
    for (n = 0; n < o.length; n++) {
      p.insertBefore(o[n], l[0]);
    }
    for (n = 0; n < l.length; n++) {
      p.appendChild(l[n]);
    }
  };
  c.RadTabStrip._align = function (m, l, n) {
    var o = $get(m);
    if (l != c.TabStripAlign.Justify && c.TabStripOrientation.isHorizontal(n)) {
      return;
    }
    if (l == c.TabStripAlign.Left || o._aligned) {
      return;
    }
    if (l == c.TabStripAlign.Justify) {
      c.RadTabStrip._justifyTabStrip(o, n);
      return;
    }
    c.RadTabStrip._verticalAlign(o, l, n);
  };
  c.RadTabStrip._justifyTabStrip = function (r, q) {
    var p = $telerik.getChildrenByTagName(r, "div");
    if (p.length < 1) {
      return;
    }
    for (var n = 0; n < p.length; n++) {
      var o = p[n];
      var l = $telerik.getChildrenByTagName(o, "ul");
      if (l.length < 1) {
        return;
      }
      for (var m = 0; m < l.length; m++) {
        c.RadTabStrip._justify(l[m], q);
      }
    }
  };
  c.RadTabStrip._justify = function (m, n) {
    var l = a(m).children(),
      p,
      o;
    if (c.TabStripOrientation.isVertical(n)) {
      l.find(".rtsIn").css("height", "");
      p = "offsetHeight";
      o = c.RadTabStrip._setSize;
    } else {
      l.css("width", "");
      (p = "offsetWidth"),
        (o = function (q, r) {
          a(q).outerWidth(r);
        });
    }
    c.RadTabStrip._justifyListElement(m, p, o);
  };
  c.RadTabStrip._justifyListElement = function (n, u, r) {
    var l = a(n),
      t =
        u == "offsetWidth"
          ? { innerSize: "width", outerSize: "outerWidth" }
          : { innerSize: "height", outerSize: "outerHeight" },
      x,
      w;
    x = l.parent()[t.innerSize]() - (l[t.outerSize]() - l[t.innerSize]());
    if (x <= 0) {
      return;
    }
    w = c.RadTabStrip._getTabGroups(n, u);
    for (var v = 0; v < w.length; v++) {
      var o = w[v];
      if (o.size <= 0) {
        continue;
      }
      var q = [];
      var p;
      for (p = 0; p < o.length; p++) {
        q[p] = o[p][u] / o.size;
      }
      var m = 0;
      for (p = 0; p < o.length - 1; p++) {
        var s = Math.round(x * q[p]);
        r(o[p], s);
        m += s;
      }
      r(o[p], x - m);
    }
  };
  c.RadTabStrip._verticalAlign = function (q, l, p) {
    var n = $telerik.getChildByClassName(q, "rtsLevel1");
    if (!n) {
      return;
    }
    var m = $telerik.getChildByClassName(n, "rtsUL");
    if (!m) {
      return;
    }
    var o = 0;
    if (l == c.TabStripAlign.Center) {
      o = (n.offsetHeight - m.offsetHeight) / 2;
    }
    if (l == c.TabStripAlign.Right) {
      o = n.offsetHeight - m.offsetHeight;
    }
    if (o > 0) {
      m.style.marginTop = o + "px";
      q._aligned = true;
    }
  };
  c.RadTabStrip._createChildControls = function (p, r) {
    var m = p.get_tabData();
    if (!m) {
      return;
    }
    var l = $telerik.getChildrenByClassName(p.get_childListElement(), "rtsLI");
    for (var o = 0; o < m.length; o++) {
      var q = new c.RadTab();
      r.add(q);
      var n = o;
      if (typeof m[o].index !== "undefined") {
        n = m[o].index;
      }
      q._initialize(m[o], l[n]);
    }
  };
  c.RadTabStrip._disposeScroller = function (m, l) {
    if (m._scroller) {
      m._scroller.dispose(l);
    }
  };
  c.RadTabStrip._toggleAttribute = function (o, m, n, p) {
    var l = a(o);
    if (p) {
      l.attr(m, n);
    } else {
      l.removeAttr(m);
    }
  };
  c.RadTabStrip._toggleActiveDescendantAttributes = function (o, m, p) {
    var q = a("#" + m).get(0);
    var l = o.get_element();
    var n = o.get_selected();
    m += "_active_tab";
    c.RadTabStrip._toggleAttribute(q, "aria-activedescendant", m, false);
    c.RadTabStrip._toggleAttribute(l, "aria-selected", n, n);
    c.RadTabStrip._toggleAttribute(l, "id", m, p);
    c.RadTabStrip._toggleAttribute(q, "aria-activedescendant", m, p);
  };
  c.RadTabStrip.prototype = {
    _initScrolling: function () {
      var l = this;
      this.withView(function () {
        l.get_view()._initScrolling();
      });
    },
    _initScrollingForTabContainer: function (l) {
      var m = this;
      this.withView(function () {
        m.get_view()._initScrollingForTabContainer(l);
      });
    },
    _updateScroller: function (l) {
      var m = this;
      this.withView(function () {
        m.get_view()._updateScroller(l);
      });
    },
    _updateScrollState: function (l, m) {
      this._scrollState[l._getHierarchicalIndex()] = -Math.round(m);
      this._scrollStateJson = Sys.Serialization.JavaScriptSerializer.serialize(
        this._scrollState
      );
      this.updateClientState();
    },
    _applyWaiAria: function () {
      var n = this;
      var m = this.get_selectedTab();
      var l = function () {
        n._applyRootElementAttributes();
        n._applyAriaAttributesToChildren();
        n._applyAriaAttributesToChildListElements();
        if (m) {
          c.RadTabStrip._toggleActiveDescendantAttributes(m, n.get_id(), true);
        }
        Sys.Application.remove_load(l);
      };
      Sys.Application.add_load(l);
    },
    _applyRootElementAttributes: function () {
      a(this.get_element()).attr({
        role: "tablist",
        "aria-disabled": !this.get_enabled(),
      });
      if (this._ariaSettings) {
        var m = b.deserialize(this._ariaSettings);
        var l = new c.WaiAriaDecorator(this.get_element(), m);
        l.setAttributes();
      }
    },
    _applyAriaAttributesToChildren: function () {
      var q = this.get_allTabs();
      var p;
      var m;
      for (var n = 0, o = q.length; n < o; n++) {
        p = q[n];
        m = {
          role: "tab",
          "aria-disabled": !p.get_enabled(),
          "aria-level": p.get_level() + 1,
        };
        if (p.get_pageView()) {
          m["aria-controls"] = p.get_pageView().get_id();
        }
        a(p.get_element()).attr(m);
      }
    },
    _applyAriaAttributesToChildListElements: function () {
      a(this.get_element()).find("ul.rtsUL").attr("role", "tablist");
    },
    _extractTabFromDomEvent: function (l) {
      var m = $telerik.getTouchTarget(l);
      return this._extractItemFromDomElement(m);
    },
    _attachDragToReorderHandler: function () {
      var l = a(this._element);
      if (($telerik.isIE7 || $telerik.isIE8) && !$telerik.isIE9Mode) {
        l.on("drag", ".rtsLI", function (m) {
          return false;
        });
      }
      l.find(".rtsUL").on(g, ".rtsLI", a.proxy(this._onTabMouseDown, this));
    },
    _detachDragToReordeHandler: function () {
      a(this._element)
        .find(".rtsUL")
        .off(g, ".rtsLI", a.proxy(this._onTabMouseDown, this));
    },
    _detachSupplementaryDragHandlers: function (l) {
      a(l).off(h, ".rtsLI");
      a(l).off(i, ".rtsLI", this._onTabMouseUp);
      a(l).unbind("mouseleave");
      a(document).unbind("mouseup", this._documentMouseUp);
      a(document).unbind("mousemove", this._onTabMouseMove);
    },
    _attachScrollingHandlersWhenDrag: function () {
      var l = this._scroller;
      if (
        this._rightToLeft &&
        this._orientation != c.ScrollerOrientation.Vertical
      ) {
        a(l._nextArrow).on("mouseover", function () {
          l._scrollBackward(c.ScrollerSpeed.Slow);
        });
        a(l._previousArrow).on("mouseover", function () {
          l._scrollForward(c.ScrollerSpeed.Slow);
        });
      } else {
        a(l._nextArrow).on("mouseover", function (m) {
          l._scrollForward(c.ScrollerSpeed.Slow);
        });
        a(l._previousArrow).on("mouseover", function (m) {
          l._scrollBackward(c.ScrollerSpeed.Slow);
        });
      }
      a(l._nextArrow).on("mouseleave", function (m) {
        l._stopScroll();
      });
      a(l._previousArrow).on("mouseleave", function (m) {
        l._stopScroll();
      });
    },
    _detachScrollingHandlersWhenDrag: function () {
      var l = this._scroller;
      a(l._nextArrow).off();
      a(l._previousArrow).off();
    },
    _ensureTabGhost: function (l) {
      var o = this,
        n = o._draggedTab,
        m;
      m = f.createElement("div");
      m.className = "RadTabStrip_" + o._skin + " rtsDetachedTabContainer";
      m.innerHTML = '<div class="rtsGhostTab">' + n.get_text() + "</div>";
      d.appendChild(m);
      m.style.top = "-999em";
      m.style.left = "-999em";
      m.style.display = "block";
      n._ghost = m;
      o._initializeDropClues();
      a(n.get_parent()._childListElement).off(h, ".rtsLI", o._ensureTabGhost);
    },
    _initializeDropClues: function () {
      var q = this,
        o = q._isVertical,
        m = (q._dropClueFirst = f.createElement("SPAN")),
        n = (q._dropClueSecond = f.createElement("SPAN")),
        p = q._skin;
      function l(r) {
        return String.format(
          "{0} {0}_{1} {0}{2} {0}{2}_{1}",
          "rtsDropClue",
          p,
          r
        );
      }
      m.className = l(o ? "Left" : "Top");
      n.className = l(o ? "Right" : "Bottom");
      d.appendChild(m);
      d.appendChild(n);
    },
    _positionDropClues: function (s, l) {
      var t = this,
        q = t._dropPosition,
        r = t._isVertical,
        m = t._dropClueFirst,
        n = m[j],
        o = t._dropClueSecond,
        p = o[j];
      switch (q) {
        case c.TabStripDropPosition.Before:
          if (r) {
            n.top = l.y + "px";
            n.left = l.x + "px";
            p.top = l.y + "px";
            p.left = l.x + a(s).outerWidth() + "px";
          } else {
            n.top = l.y + "px";
            n.left = l.x + "px";
            p.top = l.y + s.offsetHeight + "px";
            p.left = l.x + "px";
          }
          n.display = "block";
          p.display = "block";
          break;
        case c.TabStripDropPosition.After:
          if (r) {
            n.top = l.y + a(s).outerHeight() + "px";
            n.left = l.x + "px";
            p.top = l.y + s.offsetHeight + "px";
            p.left = l.x + a(s).outerWidth() + "px";
          } else {
            n.top = l.y + "px";
            n.left = l.x + a(s).outerWidth() + "px";
            p.top = l.y + s.offsetHeight + "px";
            p.left = l.x + a(s).outerWidth() + "px";
          }
          n.display = "block";
          p.display = "block";
          break;
      }
    },
    _hideDropClues: function () {
      if (this._dropClueFirst) {
        this._dropClueFirst.style.display = "none";
      }
      if (this._dropClueSecond) {
        this._dropClueSecond.style.display = "none";
      }
    },
    _getScrollableSize: function (l) {
      if (this._isVertical) {
        return (
          this._getTabsSize(l, "offsetHeight") -
          l.get_levelElement().offsetHeight
        );
      }
      return (
        this._getTabsSize(l, "offsetWidth") - l.get_levelElement().offsetWidth
      );
    },
    _getTabsSize: function (o, p) {
      var l = c.RadTabStrip._getTabGroups(o.get_childListElement(), p);
      var n = 0;
      for (var m = 0; m < l.length; m++) {
        if (n < l[m].size) {
          n = l[m].size;
        }
      }
      return n;
    },
    _tabContainerRequiresScrolling: function (m) {
      if (!m._scrollChildren || m.get_tabs().get_count() === 0) {
        return false;
      }
      var l = m.get_levelElement();
      if (!l) {
        return false;
      }
      if (this._isVertical) {
        return l.offsetHeight < this._getTabsSize(m, "offsetHeight");
      }
      return l.offsetWidth < this._getTabsSize(m, "offsetWidth");
    },
    _createChildControls: function () {
      this._children = new c.RadTabCollection(this);
      c.RadTabStrip._createChildControls(this, this._children);
    },
    _getLevelElements: function () {
      if (!this._levelElements) {
        this._levelElements = $telerik.getChildrenByTagName(
          this._element,
          "div"
        );
      }
      return this._levelElements;
    },
    _getListElementsForLevel: function (l) {
      return this._listElementsPerLevel[l];
    },
    _childInserting: function (l, n, m) {
      if (!m._childControlsCreated) {
        return;
      }
      this._cachedSelectedTab = m.get_selectedTab();
      if (l < m.get_selectedIndex()) {
        this._selectedIndex = this._selectedIndex + 1;
      }
    },
    _childInserted: function (m, o, n) {
      this._allTabs = null;
      if (this._cachedSelectedTab) {
        n._setSelectedIndex(this._cachedSelectedTab.get_index());
        this._cachedSelectedTab = null;
      }
      if (o._cachedSelected) {
        n._setSelectedIndex(m);
        o._cachedSelected = false;
      }
      c.RadTabStrip.callBaseMethod(this, "_childInserted", [m, o, n]);
      if (o.get_isBreak()) {
        var l = document.createElement("li");
        l.className = "rtsBreak";
        n.get_childListElement().insertBefore(l, o._element.nextSibling);
      }
    },
    _childRemoving: function (m) {
      if (m.get_selected()) {
        m.unselect();
      }
      var l = m.get_parent();
      if (m.get_index() < l.get_selectedIndex()) {
        l._setSelectedIndex(l.get_selectedIndex() - 1);
      }
      m._cleanElements();
      c.RadTabStrip.callBaseMethod(this, "_childRemoving", [m]);
    },
    _childRemoved: function (o, n) {
      this._allTabs = null;
      var l = n.get_tabs().getTab(0);
      if (l) {
        l._updateAppearance();
      }
      var m = n.get_tabs().getTab(n.get_tabs().get_count() - 1);
      if (m) {
        m._updateAppearance();
      }
      c.RadTabStrip.callBaseMethod(this, "_childRemoved", [o, n]);
    },
    _childrenCleared: function (l) {
      this._allTabs = null;
      l.get_tabs().forEach(function (m) {
        m._cleanElements();
      });
      c.RadTabStrip._disposeScroller(this);
      c.RadTabStrip.callBaseMethod(this, "_childrenCleared", [l]);
    },
    _destroyChildren: function (l) {
      l.get_levelElement().removeChild(l.get_childListElement());
      Array.remove(
        this._listElementsPerLevel[l._getLevelIndex()],
        l.get_childListElement()
      );
      if (this._listElementsPerLevel[l._getLevelIndex()].length < 1) {
        Array.removeAt(this._listElementsPerLevel, l._getLevelIndex());
        Array.remove(this._levelElements, l.get_levelElement());
        this._element.removeChild(l.get_levelElement());
        l._levelElement = null;
      }
      l._childListElement = null;
    },
    _destroyChildListElement: function () {
      this._destroyChildren(this);
    },
    _disposeGhost: function () {
      var l = this._draggedTab;
      if (l) {
        l._removeGhostTab();
        this._draggedTab = null;
      }
    },
    _disposeDropClues: function () {
      var l = this._dropClueFirst,
        m = this._dropClueSecond;
      if (l) {
        l.parentNode.removeChild(l);
      }
      this._dropClueFirst = null;
      delete this._dropClueFirst;
      if (m) {
        m.parentNode.removeChild(m);
      }
      this._dropClueSecond = null;
      delete this._dropClueSecond;
    },
    _ensureElements: function () {
      if (!this.get_childListElement()) {
        this._createChildListElement();
      }
    },
    _calculateOffset: function (n, l) {
      var m = 0;
      if (n > l) {
        m = n - l;
      } else {
        m = l - n;
      }
      return m;
    },
    _createLevelElement: function (l) {
      var o = this;
      var n = document.createElement("div");
      var m = ["rtsLevel", "rtsLevel" + l];
      this.withView(function () {
        var p = o.get_view();
        if (p._getLevelClasses !== k) {
          m = m.concat(o.get_view()._getLevelClasses());
        }
      });
      n.className = m.join(" ");
      if (this._ascendingRendering()) {
        Array.add(this._listElementsPerLevel, []);
        Array.add(this._levelElements, n);
        this._element.appendChild(n);
      } else {
        Array.insert(this._listElementsPerLevel, 0, []);
        Array.insert(this._levelElements, 0, n);
        this._element.insertBefore(n, this._element.firstChild);
      }
      return n;
    },
    _createChildListElement: function () {
      var l = document.createElement("ul");
      l.className = "rtsUL";
      var m = this._createLevelElement(1);
      m.appendChild(l);
      Array.add(this._listElementsPerLevel[this._getLevelIndex()], l);
      return l;
    },
    _initLevelElements: function () {
      this._listElementsPerLevel = [];
      var m = this._getLevelElements();
      for (var l = 0; l < m.length; l++) {
        Array.add(
          this._listElementsPerLevel,
          $telerik.getChildrenByTagName(m[l], "ul")
        );
      }
    },
    _ascendingRendering: function () {
      return this._orientation != c.TabStripOrientation.HorizontalBottom;
    },
    _getLevelIndex: function () {
      if (this._ascendingRendering()) {
        return 0;
      }
      return this._getLevelElements().length - 1;
    },
    _unregisterSelectedTab: function (l) {
      Array.remove(this._selectedIndexes, l._getHierarchicalIndex());
      this._updateSelectedState();
    },
    _registerSelectedTab: function (l) {
      Array.add(this._selectedIndexes, l._getHierarchicalIndex());
      this._updateSelectedState();
    },
    _updateSelectedState: function () {
      this._selectedIndexesJson = Sys.Serialization.JavaScriptSerializer.serialize(
        this._selectedIndexes
      );
      this.updateClientState();
    },
    _getHierarchicalIndex: function () {
      return "-1";
    },
    _postback: function (l) {
      if (!this._postBackReference) {
        return;
      }
      var m = this._postBackReference.replace("arguments", b.serialize(l));
      if (e.ff) {
        setTimeout(function () {
          eval(m);
        }, 0);
      } else {
        eval(m);
      }
    },
    _raiseCancelEvent: function (n, o, l) {
      var m = new c.RadTabStripCancelEventArgs(o, l);
      this.raiseEvent(n, m);
      return m.get_cancel();
    },
    _raiseEvent: function (m, n, l) {
      this.raiseEvent(m, new c.RadTabStripEventArgs(n, l));
    },
    _raiseReordering: function (l, m, o, p) {
      var n = new c.RadTabStripCancelEventArgs(l, m);
      a.extendEventArgs(n, { index: o, offset: p });
      this.raiseEvent("reordering", n);
      return n.get_cancel();
    },
    _raiseReordered: function (l, m, o) {
      var n = new c.RadTabStripEventArgs(l, m);
      a.extendEventArgs(n, { offset: o });
      this.raiseEvent("reordered", n);
    },
    _performReorder: function (r, o, s, p) {
      var m = this._draggedTab,
        u = m.get_index(),
        n = m.get_parent().get_tabs(),
        t,
        l = a(m._element).width();
      if (o === c.TabStripDropPosition.Before) {
        if (r > u) {
          r--;
        }
        if (r === u) {
          return;
        }
      } else {
        if (u > r) {
          r++;
        }
      }
      t = this._calculateOffset(u, r);
      if (this._raiseReordering(m, p, r, t)) {
        return;
      }
      this._detachDragToReordeHandler();
      var v = m.get_parent(),
        w = v.get_selectedTab(),
        x = this.get_tabs();
      this._selectedIndexes = [];
      m._setNavigateUrl(m._getNavigateUrl());
      n.insert(r, m);
      if (w) {
        Array.add(this._selectedIndexes, w._getHierarchicalIndex());
        w._updateSiblings();
      }
      for (var q = 0; q < x.get_count(); q++) {
        this._recursiveSelectedIndecesUpdate(x.getTab(q));
      }
      this._updateSelectedState();
      this._raiseReordered(m, p, t);
      this._persisted(function (y) {
        y._log.logReorder(m, u, r);
      });
      if (this._align == c.TabStripAlign.Justify) {
        a(m._element).width(l);
      }
      if (s) {
        m.set_selected(s);
        m._setChildListDisplay("");
      }
      this._attachDragToReorderHandler();
      this._onReorder(t, m);
    },
    _recursiveSelectedIndecesUpdate: function (n) {
      var m = n.get_selectedTab(),
        o = n.get_tabs();
      if (m) {
        Array.add(this._selectedIndexes, m._getHierarchicalIndex());
      }
      for (var l = 0; l < o.get_count(); l++) {
        this._recursiveSelectedIndecesUpdate(o.getTab(l));
      }
    },
    _onReorder: function (m, l) {
      if (!this._postBackOnReorder && this._postBackReference === null) {
        return;
      }
      this._postback({
        type: c.TabStripCommand.Reorder,
        index: l._getHierarchicalIndex(),
        offset: m,
      });
    },
    _persisted: function (l) {
      this.trackChanges();
      l(this);
      this.commitChanges();
    },
    _setSelectedIndex: function (l) {
      this._selectedIndex = l;
    },
    _initializeKeyboardNavigation: function () {
      var m = this;
      var l = a(this.get_element());
      if ($telerik.isTouchDevice || !this._navigationSettings) {
        return;
      }
      if (!l.attr("tabIndex")) {
        l.attr("tabIndex", 0);
      }
      l.on("focus", function (n) {
        m._current = m.get_selectedTab() || m.get_tabs().getTab(0);
        if (m._current) {
          a(m._current.get_element()).addClass("rtsFocused");
        }
      })
        .on("focusout", function (n) {
          if (m._current) {
            a(m._current.get_element()).removeClass("rtsFocused");
            m._current = null;
          }
        })
        .on("keydown", function (n) {
          if (m._current) {
            m._keydown(n);
          }
        })
        .on("mousedown", ".rtsLI", function (o) {
          var p = m._extractItemFromDomElement($telerik.getTouchTarget(o));
          var n = a(p.get_element());
          setTimeout(function () {
            l.focus();
            if (m._current) {
              a(m._current.get_element()).removeClass("rtsFocused");
            }
            m._current = p;
            n.addClass("rtsFocused");
          }, 100);
        });
    },
    _applyRtl: function () {
      var l = this.get_element();
      if (l.className.indexOf("RadTabStrip_rtl") === -1) {
        l.className = String.format(
          "{0} RadTabStrip_rtl RadTabStrip_{1}_rtl",
          l.className,
          this._skin
        );
      }
      this._rightToLeft = true;
    },
    _resize: function (l) {
      this.repaint();
    },
    _doubleClick: function (l) {
      var m = this._extractTabFromDomEvent(l);
      this._raiseEvent("doubleClick", m, l);
    },
    _onTabMouseDown: function (m) {
      var p = this,
        q = $telerik.getTouchTarget(m);
      if (!this._isUsedOnTouchDevices) {
        m.preventDefault();
      }
      p._draggedTab = p._extractItemFromDomElement(q);
      if (!p._draggedTab) {
        return;
      }
      var n = p._draggedTab.get_parent(),
        l = n._childListElement,
        o = { tabstrip: p, childList: l };
      if (p._raiseCancelEvent("tabDragStart", p._draggedTab, m)) {
        p._draggedTab = null;
        return false;
      }
      a(l)
        .on(h, ".rtsLI", a.proxy(p._ensureTabGhost, p))
        .on(h, ".rtsLI", function (r) {
          r.preventDefault();
          var u = this;
          if (p._isUsedOnTouchDevices) {
            var v = $telerik.getTouchTarget(r);
            u = a(l).find(v).parents(".rtsLI", a(l).parent()).get(0);
          }
          if (!u && p._isUsedOnTouchDevices) {
            p._hideDropClues();
            p._onTabMouseMove(r);
            return;
          }
          var s = $telerik.getLocation(u),
            y = s.x,
            z = s.y,
            x = y + a(u).width() / 2,
            w = z + a(u).height() / 2,
            t = p._isUsedOnTouchDevices
              ? $telerik.getTouchEventLocation(r)
              : { x: r.pageX, y: r.pageY };
          if (!p._isVertical) {
            if (x < t.x) {
              p._dropPosition = c.TabStripDropPosition.After;
            } else {
              p._dropPosition = c.TabStripDropPosition.Before;
            }
          } else {
            if (w < t.y) {
              p._dropPosition = c.TabStripDropPosition.After;
            } else {
              p._dropPosition = c.TabStripDropPosition.Before;
            }
          }
          p._positionDropClues(u, { x: y, y: z });
          p._onTabMouseMove(r);
        })
        .on(i, ".rtsLI", a.proxy(p._onTabMouseUp, p))
        .bind("mouseleave", function (r) {
          p._hideDropClues();
        });
      a(document).bind({
        mouseup: a.proxy(p._documentMouseUp, o),
        mousemove: a.proxy(p._onTabMouseMove, p),
      });
      if (p.get_multiPage()) {
        a(p.get_multiPage().get_element())
          .find(".rmpView")
          .children("iframe")
          .one("mouseenter", function (r) {
            p._pageViewMouseEnter(r);
          });
      }
      if (p._scroller) {
        p._attachScrollingHandlersWhenDrag();
      }
    },
    _pageViewMouseEnter: function (l) {
      var n = this;
      var m;
      if (n._dragInAction && n._draggedTab) {
        m = n._draggedTab.get_parent()._childListElement;
        n._dragInAction = false;
        n._detachSupplementaryDragHandlers(m);
        n._disposeGhost();
        n._disposeDropClues();
      }
    },
    _onTabMouseUp: function (n) {
      if (this._dragInAction) {
        n.stopPropagation();
        this._dragInAction = false;
      }
      var p = $telerik.getTouchTarget(n),
        m = this._extractItemFromDomElement(p),
        o = this._draggedTab.get_parent()._childListElement;
      this._detachSupplementaryDragHandlers(o);
      if (this._scroller) {
        this._detachScrollingHandlersWhenDrag();
      }
      if (!m) {
        this._disposeGhost();
        this._disposeDropClues();
        return;
      }
      if (
        m.get_index() == this._draggedTab.get_index() ||
        m.get_level() != this._draggedTab.get_level()
      ) {
        this._disposeGhost();
        this._disposeDropClues();
        return;
      }
      if (m) {
        var l = this._draggedTab.get_selected();
        this._performReorder(m.get_index(), this._dropPosition, l, n);
      }
      this._disposeGhost();
      this._disposeDropClues();
    },
    _documentMouseUp: function (m) {
      var n = this.tabstrip,
        l = this.childList;
      n._detachSupplementaryDragHandlers(l);
      if (n._scroller) {
        n._detachScrollingHandlersWhenDrag();
      }
      n._disposeGhost();
      n._disposeDropClues();
    },
    _onTabMouseMove: function (l) {
      this._isUsedOnTouchDevices
        ? l.originalEvent.stopPropagation()
        : l.stopPropagation();
      var n = this._draggedTab._ghost;
      var p = 5;
      if (n._isMoving) {
        return;
      }
      n._isMoving = true;
      this._dragInAction = true;
      setTimeout(function () {
        n._isMoving = false;
      }, 10);
      setTimeout(function () {
        this._dragInAction = false;
      }, 200);
      var q = $telerik.getScrollOffset(document.body, true);
      if (this._isUsedOnTouchDevices) {
        var o = $telerik.getTouchEventLocation(l),
          m = 25;
        n.style.top = o.y - m + "px";
        n.style.left = o.x + m + "px";
      } else {
        n.style.top = l.clientY + (window.pageYOffset || q.y) + p + "px";
        n.style.left = l.clientX + (window.pageXOffset || q.x) + "px";
      }
    },
    _mouseOver: function (l) {
      var m = this._extractTabFromDomEvent(l);
      if (this._highlightedTab == m) {
        return;
      }
      if (this._highlightedTab) {
        this._highlightedTab._unhighlight();
      }
      m._highlight();
      this._highlightedTab = m;
      this._raiseEvent("mouseOver", m, l);
    },
    _mouseOut: function (l) {
      if (!this._highlightedTab) {
        return;
      }
      if (!l.relatedTarget) {
        return;
      }
      if (
        $telerik.isDescendant(this._highlightedTab._element, l.relatedTarget)
      ) {
        return;
      }
      this._highlightedTab._unhighlight();
      this._raiseEvent("mouseOut", this._highlightedTab, l);
      this._highlightedTab = null;
    },
    _contextMenu: function (l) {
      var m = this._extractItemFromDomElement(l.target);
      this._raiseEvent("contextMenu", m, l);
    },
    _click: function (m) {
      var p = this,
        o = $telerik.getTouchTarget(m),
        l = a(o),
        n = this._extractItemFromDomElement(o);
      if (
        l.is("select, option, a, input, label, textarea, button") &&
        !l.hasClass("rtsLink")
      ) {
        return;
      }
      this.withView(function () {
        p.get_view()._click(n);
      });
      if (!n.click(m)) {
        m.preventDefault();
      }
    },
    _mouseDown: function (m) {
      var q = this,
        p = $telerik.getTouchTarget(m),
        o = this._extractItemFromDomElement(p),
        l = a(p),
        n = o.get_linkElement();
      if (!o) {
        return;
      }
      if (
        !o._shouldNavigate() &&
        !l.is("select, option, input, a, label, textarea, button")
      ) {
        m.preventDefault();
      }
      if (n) {
        this.withView(function () {
          var r = q.get_view();
          if (r._mouseDown) {
            r._mouseDown(o);
          }
        });
        setTimeout(function () {
          if (o.get_isEnabled()) {
            n.focus();
          }
        }, 0);
      }
    },
    _focus: function (l) {
      var n = this,
        m = this._extractTabFromDomEvent(l);
      if (!m) {
        return;
      }
      this.withView(function () {
        var o = n.get_view();
        if (o._focus) {
          o._focus(m);
        }
      });
    },
    _blur: function (l) {
      var n = this,
        m = this._extractTabFromDomEvent(l);
      if (!m) {
        return;
      }
      this.withView(function () {
        var o = n.get_view();
        if (o._blur) {
          o._blur(m);
        }
      });
    },
    _activate: function (l) {
      if (!l.altKey) {
        return;
      }
      var m = this._extractTabFromDomEvent(l);
      m.click();
    },
    _keydown: function (m) {
      var y = this;
      var p = m.keyCode;
      var o = Sys.UI.Key;
      var l = { up: 0, down: 1, left: 2, right: 3 };
      var z = function (A) {
        if (A) {
          a(y._current.get_element()).removeClass("rtsFocused");
          a(A.get_element()).addClass("rtsFocused");
          if (y.get_enableAriaSupport()) {
            c.RadTabStrip._toggleActiveDescendantAttributes(
              y._current,
              y.get_id(),
              false
            );
          }
          y._current = A;
          y._current.scrollIntoViewWhenNeeded();
          if (y.get_enableAriaSupport()) {
            c.RadTabStrip._toggleActiveDescendantAttributes(
              A,
              y.get_id(),
              true
            );
          }
        }
      };
      var q = function (A) {
        if (y._isVertical) {
          w(A);
        } else {
          r(A);
        }
      };
      var v = function () {
        var A = y._current.get_parent();
        if (A != y) {
          z(A);
        }
      };
      var s = function () {
        var A = y._current.get_tabs();
        if (y._current.get_selected() && A.get_count() > 0) {
          z(y._current.get_selectedTab() || A.getTab(0));
        }
      };
      var r = function (A) {
        var B;
        switch (A) {
          case l.up:
            v();
            break;
          case l.down:
            s();
            break;
          case l.left:
            B = y._rightToLeft ? "get_nextTab" : "get_previousTab";
            z(y._current[B]());
            break;
          case l.right:
            B = y._rightToLeft ? "get_previousTab" : "get_nextTab";
            z(y._current[B]());
            break;
        }
      };
      var w = function (A) {
        switch (A) {
          case l.up:
            z(y._current.get_previousTab());
            break;
          case l.down:
            z(y._current.get_nextTab());
            break;
          case l.left:
            if (y._rightToLeft) {
              s();
            } else {
              v();
            }
            break;
          case l.right:
            if (y._rightToLeft) {
              v();
            } else {
              s();
            }
            break;
        }
      };
      var t = function () {
        var A = y._current.get_parent().get_tabs().getTab(0);
        z(A);
      };
      var u = function () {
        var B = y._current.get_parent().get_tabs();
        var A = B.getTab(B.get_count() - 1);
        z(A);
      };
      var n = function () {
        var B = y._current.get_pageView();
        var A = B && a(B.get_element()).find("a, button, :input, [tabindex]");
        if (B && B.get_selected() && A.length) {
          A.eq(0).focus();
          m.preventDefault();
        }
      };
      var x = function () {
        if (y._current.click()) {
          y._current.get_linkElement().click();
        }
        z(y._current);
      };
      switch (p) {
        case o.left:
          q(l.left);
          m.preventDefault();
          break;
        case o.right:
          q(l.right);
          m.preventDefault();
          break;
        case o.down:
          q(l.down);
          m.preventDefault();
          break;
        case o.up:
          q(l.up);
          m.preventDefault();
          break;
        case o.home:
          t();
          m.preventDefault();
          break;
        case o.end:
          u();
          m.preventDefault();
          break;
        case o.enter:
          x();
          break;
        case o.space:
          x();
          m.preventDefault();
          break;
        case o.tab:
          n();
          break;
      }
    },
    initialize: function () {
      var l = this;
      if (this._shouldReorder) {
        c.RadTabStrip._reorder(this.get_id(), this._selectedIndex);
      }
      this._initLevelElements();
      this._initializeKeyboardNavigation();
      c.RadTabStrip.callBaseMethod(this, "initialize");
      c.RadTabStrip._align(this.get_id(), this._align, this._orientation);
      this._updateSelectedState();
      a(this._element)
        .on("click", ".rtsLI", function (m) {
          l._click(m);
        })
        .on("dblclick", ".rtsLI", function (m) {
          l._doubleClick(m);
        })
        .on("mousedown", ".rtsLI", function (m) {
          l._mouseDown(m);
        })
        .on("mouseover", ".rtsLI", function (m) {
          l._mouseOver(m);
        })
        .on("mouseout", ".rtsLI", function (m) {
          l._mouseOut(m);
        })
        .on("contextmenu", ".rtsLI", function (m) {
          l._contextMenu(m);
        })
        .on("focus", ".rtsLink", function (m) {
          l._focus(m);
        })
        .on("blur", ".rtsLink", function (m) {
          l._blur(m);
        });
      if ($telerik.isIE && a.isEmptyObject(this._navigationSettings)) {
        $telerik.addHandler(
          this._element,
          "activate",
          a.proxy(this._activate, this)
        );
      }
      this._resizeDelegate = Function.createDelegate(this, this._resize);
      $telerik.addHandler(window, "resize", this._resizeDelegate);
      this._isUsedOnTouchDevices = $telerik.isTouchDevice;
      if (this._enableDragToReorder) {
        this._attachDragToReorderHandler();
      }
      if ($telerik.isRightToLeft(this._element)) {
        this._applyRtl();
      }
      this._isVertical =
        this._orientation === c.TabStripOrientation.VerticalRight ||
        this._orientation === c.TabStripOrientation.VerticalLeft;
      this._initScrolling();
      if (this.get_enableAriaSupport()) {
        this._applyWaiAria();
      }
      this.raiseEvent("load");
    },
    get_rippleZonesConfiguration: function () {
      return [
        {
          element: this.get_element(),
          rippleConfigurations: [
            {
              containerSelector: ".rtsLink, .rtsNextArrow , .rtsPrevArrow",
              disabledClass: "rtsDisabled",
            },
          ],
        },
      ];
    },
    get_view: function () {
      return this._view;
    },
    withView: function (l) {
      if (!this.get_view()) {
        this._view = c.RadTabStrip.GetView(this);
      }
      return l();
    },
    repaint: function () {
      if (!this._scrollInitInProgress) {
        this._initScrolling();
      }
      this._element._aligned = null;
      c.RadTabStrip._align(this.get_id(), this._align, this._orientation);
    },
    dispose: function () {
      if ($telerik.isIE && a.isEmptyObject(this._navigationSettings)) {
        $telerik.removeHandler(this._element, "activate", this._activate);
      }
      a(this._element).off();
      a(document.body).off("keydown", this._keyboardNavigationHandler);
      c.RadTabStrip.callBaseMethod(this, "dispose");
      this._detachDragToReordeHandler();
      $telerik.removeHandler(window, "resize", this._resizeDelegate);
      c.RadTabStrip._disposeScroller(this, true);
    },
    commitChanges: function () {
      this._logEntriesJson = this._log.serialize();
      c.RadTabStrip.callBaseMethod(this, "commitChanges");
    },
    enable: function () {
      this.set_enabled(true);
    },
    disable: function () {
      this.set_enabled(false);
    },
    set_enabled: function (p) {
      if (this.get_enabled() == p) {
        return;
      }
      c.RadTabStrip.callBaseMethod(this, "set_enabled", [p]);
      if (!this.get_isInitialized()) {
        return;
      }
      if (!$telerik.isIE7) {
        this._element.disabled = !p;
      }
      if (this._scroller) {
        this._scroller._toggleEnabled();
      }
      if (this.get_enableAriaSupport()) {
        c.RadTabStrip._toggleAttribute(
          this.get_element(),
          "aria-disabled",
          !p,
          true
        );
      }
      var o = this.get_tabs(),
        l = this.get_view()._getDisabledClass();
      for (var m = 0, n = o.get_count(); m < n; m++) {
        o.getTab(m).set_enabled(p);
      }
      this.toggleCssClass(l);
    },
    get_causesValidation: function () {
      return this._causesValidation;
    },
    set_causesValidation: function (l) {
      this._causesValidation = l;
    },
    get_validationGroup: function () {
      return this._validationGroup;
    },
    set_validationGroup: function (l) {
      this._validationGroup = l;
    },
    get_unselectChildren: function () {
      return this._unselectChildren === true;
    },
    set_unselectChildren: function (l) {
      this._unselectChildren = l;
    },
    get_selectedIndexes: function () {
      return this._selectedIndexes;
    },
    set_selectedIndexes: function (l) {
      this._selectedIndexes = l;
    },
    saveClientState: function () {
      return (
        '{"selectedIndexes":' +
        this._selectedIndexesJson +
        ',"logEntries":' +
        this._logEntriesJson +
        ',"scrollState":' +
        this._scrollStateJson +
        "}"
      );
    },
    get_selectedTab: function () {
      return this.get_tabs().getTab(this.get_selectedIndex()) || null;
    },
    get_selectedIndex: function () {
      return this._selectedIndex;
    },
    set_selectedIndex: function (n) {
      if (n > -1) {
        var m = this.get_tabs().getTab(n);
        if (m) {
          m.select();
        }
      } else {
        var l = this.get_selectedTab();
        if (l) {
          l.unselect();
        }
      }
    },
    get_levelElement: function () {
      if (!this._levelElement) {
        this._levelElement =
          this._getLevelElements()[this._getLevelIndex()] || null;
      }
      return this._levelElement;
    },
    get_childListElement: function () {
      if (!this.get_levelElement()) {
        return null;
      }
      if (!this._childListElement) {
        this._childListElement = $telerik.getChildByClassName(
          this.get_levelElement(),
          "rtsUL"
        );
      }
      return this._childListElement;
    },
    get_tabData: function () {
      return this._tabData;
    },
    set_tabData: function (l) {
      this._tabData = l;
    },
    get_tabs: function () {
      return this._getChildren();
    },
    get_clickSelectedTab: function () {
      return this._clickSelectedTab === true;
    },
    set_clickSelectedTab: function (l) {
      this._clickSelectedTab = l;
    },
    findTabByText: function (l) {
      return this._findItemByText(l);
    },
    findTabByValue: function (l) {
      return this._findItemByValue(l);
    },
    findTabByAttribute: function (l, m) {
      return this._findItemByAttribute(l, m);
    },
    findTabByUrl: function (l) {
      return this._findItemByUrl(l);
    },
    findTabByAbsoluteUrl: function (l) {
      return this._findItemByAbsoluteUrl(l);
    },
    get_allTabs: function () {
      if (!this._allTabs) {
        this._allTabs = this._getAllItems();
      }
      return this._allTabs;
    },
    get_multiPage: function () {
      if (!this.get_multiPageID()) {
        return null;
      }
      return $find(this.get_multiPageID());
    },
    set_multiPageID: function (l) {
      this._multiPageID = l;
    },
    get_multiPageID: function () {
      return this._multiPageID;
    },
    get_enableAriaSupport: function () {
      return this._enableAriaSupport;
    },
    set_enableAriaSupport: function (l) {
      this._enableAriaSupport = l;
    },
    add_tabDragStart: function (l) {
      this.get_events().addHandler("tabDragStart", l);
    },
    remove_tabDragStart: function (l) {
      this.get_events().removeHandler("tabDragStart", l);
    },
    add_reordered: function (l) {
      this.get_events().addHandler("reordered", l);
    },
    remove_reordered: function (l) {
      this.get_events().removeHandler("reordered", l);
    },
    add_reordering: function (l) {
      this.get_events().addHandler("reordering", l);
    },
    remove_reordering: function (l) {
      this.get_events().removeHandler("reordering", l);
    },
    add_tabSelecting: function (l) {
      this.get_events().addHandler("tabSelecting", l);
    },
    remove_tabSelecting: function (l) {
      this.get_events().removeHandler("tabSelecting", l);
    },
    add_tabSelected: function (l) {
      this.get_events().addHandler("tabSelected", l);
    },
    remove_tabSelected: function (l) {
      this.get_events().removeHandler("tabSelected", l);
    },
    add_tabUnSelected: function (l) {
      this.get_events().addHandler("tabUnSelected", l);
    },
    remove_tabUnSelected: function (l) {
      this.get_events().removeHandler("tabUnSelected", l);
    },
    add_load: function (l) {
      this.get_events().addHandler("load", l);
    },
    remove_load: function (l) {
      this.get_events().removeHandler("load", l);
    },
    add_mouseOver: function (l) {
      this.get_events().addHandler("mouseOver", l);
    },
    remove_mouseOver: function (l) {
      this.get_events().removeHandler("mouseOver", l);
    },
    add_mouseOut: function (l) {
      this.get_events().addHandler("mouseOut", l);
    },
    remove_mouseOut: function (l) {
      this.get_events().removeHandler("mouseOut", l);
    },
    add_contextMenu: function (l) {
      this.get_events().addHandler("contextMenu", l);
    },
    remove_contextMenu: function (l) {
      this.get_events().removeHandler("contextMenu", l);
    },
    add_doubleClick: function (l) {
      this.get_events().addHandler("doubleClick", l);
    },
    remove_doubleClick: function (l) {
      this.get_events().removeHandler("doubleClick", l);
    },
  };
  c.RadTabStrip.registerClass(
    "Telerik.Web.UI.RadTabStrip",
    c.ControlItemContainer
  );
})($telerik.$);

/* END Telerik.Web.UI.TabStrip.RadTabStripScripts.js */
/* START Telerik.Web.UI.TabStrip.Views.ClassicView.js */
(function (a, b, k) {
  if (!b.RadTab.Views) {
    b.RadTab.Views = {};
  }
  b.RadTab.Views.Classic = function (n) {
    this._owner = n;
  };
  b.RadTab.Views.Classic.prototype = {
    _renderTab: function (n) {
      var o = this._owner;
      n[n.length] = "<li class='rtsLI";
      if (o.get_isFirst()) {
        n[n.length] = " rtsFirst";
      }
      if (o.get_isLast()) {
        n[n.length] = " rtsLast";
      }
      if (o.get_tabStrip().get_enableAriaSupport()) {
        n[n.length] =
          "' role='tab' aria-level='" +
          (o.get_level() + 1) +
          "' aria-disabled='" +
          !o.get_enabled() +
          "'>";
      } else {
        n[n.length] = "'>";
      }
      o._renderLink(n);
      n[n.length] = "</li>";
    },
    _renderContent: function (n) {
      var o = this._owner;
      n[n.length] = "<span class='rtsOut'><span class='rtsIn'>";
      o._renderInnerContent(n);
      n[n.length] = "</span></span>";
    },
    _getElementCssClass: function () {
      var p = this._owner;
      var o = p.get_index();
      var n = ["rtsLI"];
      if (a(p.get_element()).hasClass("rtsFocused")) {
        n[n.length] = "rtsFocused";
      }
      if (o == this._getFirstVisibleIndex()) {
        n[n.length] = "rtsFirst";
      }
      if (o == this._getLastVisibleIndex()) {
        n[n.length] = " rtsLast";
      }
      if (p.get_outerCssClass()) {
        n[n.length] = p.get_outerCssClass();
      }
      return n;
    },
    _getLinkCssClass: function () {
      var t = this._owner;
      var o = t.get_index();
      var n = ["rtsLink"];
      var s = t.get_parent().get_selectedTab();
      var p = s
        ? s.withView(function () {
            return s.get_view()._getNextVisibleTab();
          })
        : null;
      var r = s
        ? s.withView(function () {
            return s.get_view()._getPreviousVisibleTab();
          })
        : null;
      var q = t.get_linkElement() ? t.get_linkElement().className : "";
      n = n.concat(t._determineStateCssClass());
      if (r && r.get_index() == o) {
        n[n.length] = "rtsBefore";
      }
      if (
        p &&
        p.get_index() == o &&
        !$telerik.$(t.get_element()).prev().hasClass("rtsBreak")
      ) {
        n[n.length] = "rtsAfter";
      }
      if (q.search("rtsClicked") != -1) {
        n[n.length] = "rtsClicked";
      }
      return n;
    },
    _updateSiblings: function () {
      var p = [this._getPreviousVisibleTab(), this._getNextVisibleTab()];
      for (var n = 0; n < p.length; n++) {
        var o = p[n];
        if (o) {
          o._updateAppearance();
        }
      }
    },
    _setHighlight: function (n) {
      var q = this._owner;
      var p = q.get_previousTab();
      var o = q.get_nextTab();
      if (q.get_hoveredCssClass()) {
        a(q.get_linkElement()).toggleClass(q.get_hoveredCssClass(), n);
      }
      if (p) {
        a(p.get_linkElement()).toggleClass("rtsHoverBefore", n);
      }
      if (o) {
        a(o.get_linkElement()).toggleClass("rtsHoverBefore", n);
      }
    },
    scrollIntoView: function () {
      var r = this._owner;
      var p = r.get_parent();
      var q;
      var s = r.get_tabStrip();
      if (!p) {
        return;
      }
      q = p._scroller;
      if (!q) {
        return;
      }
      if (!s) {
        return;
      }
      q._scrollTo(q._minPosition);
      var o = s._isVertical ? "offsetTop" : "offsetLeft";
      var n = r.get_element()[o];
      n = Math.min(n, q._maxPosition);
      n = Math.max(n, q._minPosition);
      q.set_currentPosition(n);
      q._currentTabIndex = r.get_index();
      s._updateScrollState(p, p._scroller._currentPosition);
    },
    scrollIntoViewWhenNeeded: function () {
      var y = this._owner;
      var v = y.get_parent();
      var x;
      var z = y.get_tabStrip();
      var w;
      if (!y.get_isEnabled()) {
        return;
      }
      if (!v) {
        return;
      }
      x = v.get_levelElement();
      if (!x) {
        return;
      }
      w = v._scroller;
      if (!w) {
        return;
      }
      if (!z) {
        return;
      }
      if (!$telerik.isIE7 && !$telerik.isChrome) {
        x[z._isVertical ? "scrollTop" : "scrollLeft"] = 0;
      }
      var n = v.get_childListElement();
      var t = z._isVertical ? "offsetTop" : "offsetLeft";
      var D = z._isVertical ? "offsetHeight" : "offsetWidth";
      var q = w._getMinScrollImageSize();
      var p = w._getMaxScrollImageSize();
      var B = -n[t];
      var A = B + x[D];
      var C = A - B;
      var s = Math.abs(y.get_element()[t]);
      var u = y.get_element()[D];
      var r = s + u;
      if (s < B + q || r > A - p) {
        var o = 0;
        if ($telerik.isIE7 && z._rightToLeft) {
          if (B - s < r - A) {
            o = r + q - w._tabsWidth;
          } else {
            o = s - q + C - w._tabsWidth;
          }
        } else {
          if (B - s > r - A) {
            o = s - q;
          } else {
            o = r - C + p;
          }
        }
        w.set_currentPosition(o);
        if (z._perTabScrolling) {
          w._currentTabIndex = y.get_index();
        }
        z._updateScrollState(v, v._scroller._currentPosition);
      }
    },
    get_outerWrapElement: function () {
      return $telerik.getChildByClassName(
        this._owner.get_linkElement(),
        "rtsOut"
      );
    },
    get_innerWrapElement: function () {
      return $telerik.getChildByClassName(
        this._owner.get_outerWrapElement(),
        "rtsIn"
      );
    },
    set_navigateUrl: function (o) {
      var n = this._owner;
      if (n.get_linkElement()) {
        n.get_linkElement().href = o;
      }
    },
    _getFirstVisibleIndex: function () {
      var q = this._owner;
      var p = q.get_parent().get_tabs();
      for (var o = 0, n = p.get_count(); o < n; o++) {
        if (p.getTab(o).get_visible()) {
          return o;
        }
      }
      return p.get_count();
    },
    _getLastVisibleIndex: function () {
      var p = this._owner;
      var o = p.get_parent().get_tabs();
      for (var n = o.get_count() - 1; n > -1; n--) {
        if (o.getTab(n).get_visible()) {
          return n;
        }
      }
      return -1;
    },
    _getPreviousVisibleTab: function () {
      var r = this._owner;
      var p = r.get_parent().get_tabs();
      var n = r.get_index();
      if (!r.get_visible()) {
        n++;
      }
      for (var o = n - 1; o > -1; o--) {
        var q = p.getTab(o);
        if (q.get_visible()) {
          return q;
        }
      }
      return null;
    },
    _getNextVisibleTab: function () {
      var s = this._owner;
      var q = s.get_parent().get_tabs();
      var n = s.get_index();
      if (!s.get_visible()) {
        n--;
      }
      for (var o = n + 1, p = q.get_count(); o < p; o++) {
        var r = q.getTab(o);
        if (r.get_visible()) {
          return r;
        }
      }
      return null;
    },
  };
  if (!b.RadTabStrip.Views) {
    b.RadTabStrip.Views = {};
  }
  b.RadTabStrip.Views.Classic = function (n) {
    this._owner = n;
  };
  b.RadTabStrip.Views.Classic.prototype = {
    _click: function (o) {
      var n = o.get_linkElement();
      if (n && Sys.UI.DomElement.containsCssClass(n, "rtsClicked")) {
        o.scrollIntoViewWhenNeeded();
      }
    },
    _mouseDown: function (o) {
      var n = o.get_linkElement();
      Sys.UI.DomElement.addCssClass(n, "rtsClicked");
    },
    _focus: function (o) {
      var n = o.get_linkElement();
      if (n) {
        if (!Sys.UI.DomElement.containsCssClass(n, "rtsClicked")) {
          o.scrollIntoViewWhenNeeded();
        }
      } else {
        o.scrollIntoViewWhenNeeded();
      }
    },
    _blur: function (o) {
      var n = o.get_linkElement();
      if (n) {
        Sys.UI.DomElement.removeCssClass(n, "rtsClicked");
      }
    },
    _getLevelClasses: function () {
      var o = this._owner;
      var n = [];
      if (o._align == b.TabStripAlign.Center) {
        n[n.length] = "rtsCenter";
      }
      if (o._align == b.TabStripAlign.Right) {
        n[n.length] = "rtsRight";
      }
      return n;
    },
    _initScrolling: function () {
      var p = this._owner;
      var o = p;
      var n;
      while (o) {
        n = o._scroller;
        if (p._tabContainerRequiresScrolling(o)) {
          if (n) {
            n._showArrows();
            p._updateScroller(o);
          } else {
            this._initScrollingForTabContainer(o);
          }
        } else {
          if (n) {
            n._hideArrows();
            n.set_currentPosition(0);
          } else {
            a(o.get_levelElement()).css("position", "");
            a(o.get_childListElement()).css({
              position: "",
              left: "",
              top: "",
            });
          }
        }
        o = o.get_selectedTab();
      }
    },
    _initScrollingForTabContainer: function (p) {
      var t = this._owner;
      p.get_levelElement().style.position = "relative";
      var n = p.get_childListElement(),
        q = { left: n.style.left, top: n.style.top },
        r = b.ScrollerOrientation.Horizontal,
        o,
        s;
      if (t._isVertical) {
        r = b.ScrollerOrientation.Vertical;
      }
      p._scroller = new b.TabScroller(p, r);
      p._scroller.initialize();
      s = -p._scroller._getMinScrollImageSize();
      o = t._getScrollableSize(p) + p._scroller._getMaxScrollImageSize();
      if (q.left !== "") {
        s = -Math.max(parseInt(q.left, 10), -o);
      } else {
        if (t._rightToLeft && !t._isVertical) {
          s = o;
        }
      }
      if (t._isVertical && q.top !== "") {
        s = -Math.max(parseInt(q.top, 10), -o);
      }
      p._scroller.setScrollingLimits(0, t._getScrollableSize(p));
      p._scroller.set_currentPosition(s);
      p._scroller._previousScrollLocation = s;
      p._scroller._calculateInitialTab();
      p._scroller._updateArrows();
      t._updateScrollState(p, s);
    },
    _updateScroller: function (s) {
      var r = this._owner;
      var q = s._scroller;
      var p = r._getScrollableSize(s);
      var n = p + q._getMaxScrollImageSize();
      var o = q._currentPosition + (n - q._maxPosition);
      q.setScrollingLimits(0, p);
      if (r._rightToLeft && q._currentPosition !== o) {
        q.set_currentPosition(o);
      }
      q.repaint();
    },
    _getDisabledClass: function () {
      return String.format("RadTabStrip_{0}_disabled", this._owner._skin);
    },
  };
  var d = $telerik.isTouchDevice ? "touchstart" : "click",
    g = $telerik.isTouchDevice ? "touchstart" : "mousedown",
    i = $telerik.isTouchDevice ? "touchend" : "mouseup",
    h = $telerik.isTouchDevice ? "touchmove" : "mousemove",
    e = ".",
    j = "rtsLI",
    c = "rtsScroll",
    l = "X",
    m = "Y",
    f = "page";
  b.TabScroller = function (o, n) {
    this._owner = o;
    this._tabStrip = this._owner.get_tabStrip
      ? this._owner.get_tabStrip()
      : this._owner;
    this._childListElement = o.get_childListElement();
    this._levelElement = o.get_levelElement();
    this._scrollDirection =
      this._owner._rightToLeft &&
      b.TabStripOrientation.isHorizontal(this._tabStrip._orientation)
        ? -1
        : 1;
    this._tabsWidth = this._tabStrip._getTabsSize(this._owner, "offsetWidth");
    this._initialTouchLocation = 0;
    this._previousScrollLocation = 0;
    this._lastDelta = 0;
    this._disabled = !(
      this._tabStrip.get_enabled() && this._owner.get_enabled()
    );
    this._touchScrollInAction = false;
    this._coordinateAxis = m;
    b.TabScroller.initializeBase(this, [
      o.get_childListElement(),
      o.get_levelElement(),
      n,
    ]);
    this._sizeAttribute = "offsetHeight";
    this._scrollMultiplier = 2;
    if ($telerik.isIE8) {
      this._scrollMultiplier = 3;
    }
    if (this._orientation != b.ScrollerOrientation.Vertical) {
      this._coordinateAxis = l;
      this._sizeAttribute = "offsetWidth";
      this._childListElement.style.width = this._tabsWidth + "px";
      this._childListElement.style.height = "auto";
    }
  };
  b.TabScroller.prototype = {
    scrollRelative: function (n) {
      this.set_currentPosition(this.get_currentPosition() + n);
    },
    get_currentPosition: function () {
      return this._currentPosition;
    },
    set_currentPosition: function (n) {
      this._scrollTo(
        Math.max(Math.min(this._maxPosition, n), this._minPosition)
      );
    },
    repaint: function () {
      if (this._orientation != b.ScrollerOrientation.Vertical) {
        this._tabsWidth = this._tabStrip._getTabsSize(
          this._owner,
          "offsetWidth"
        );
        this._childListElement.style.width = this._tabsWidth + "px";
      }
      if ($telerik.isIE7 && this._owner._rightToLeft) {
        this._minPosition =
          -this._tabStrip._getScrollableSize(this._owner) -
          this._getMaxScrollImageSize();
      } else {
        this._maxPosition =
          this._tabStrip._getScrollableSize(this._owner) +
          this._getMaxScrollImageSize();
      }
      this._updateArrows();
    },
    _scrollTo: function (n) {
      var o = "left";
      if (this._orientation == b.ScrollerOrientation.Vertical) {
        o = "top";
      }
      this._currentPosition = n;
      this._scrolledElement.style[o] = -n + "px";
      this._raiseEvent("positionChanged", Sys.EventArgs.Empty);
    },
    _createArrow: function (o) {
      var n = document.createElement("a");
      n.className = o;
      n.href = "#";
      n.innerHTML = "&nbsp;";
      n.style.position = "relative";
      return n;
    },
    _preventDefault: function (n) {
      n.preventDefault();
    },
    _onTick: function () {
      var n = this._currentPosition + this._direction * this._speed;
      this._previousScrollLocation = n;
      this.set_currentPosition(n);
      if (this.isAtMinPosition(n) || this.isAtMaxPosition(n)) {
        this.stopScroll();
      }
    },
    _scrollForward: function (o) {
      var n = b.ScrollerSpeed.Fast;
      if (this._disabled) {
        return;
      }
      if (typeof o == "number") {
        n = o;
      }
      if (this._owner._perTabScrolling) {
        this._scrollToNextTab(this._scrollDirection);
      } else {
        this.startScroll(n, this._scrollDirection * this._scrollMultiplier);
      }
    },
    _stopScroll: function () {
      this.stopScroll();
      this._owner
        ._getControl()
        ._updateScrollState(this._owner, this._currentPosition);
    },
    _scrollBackward: function (o) {
      var n = b.ScrollerSpeed.Fast;
      if (this._disabled) {
        return;
      }
      if (typeof o == "number") {
        n = o;
      }
      if (this._owner._perTabScrolling) {
        this._scrollToNextTab(-this._scrollDirection);
      } else {
        this.startScroll(n, -this._scrollDirection * this._scrollMultiplier);
      }
    },
    _mobileScrollHandler: function (p) {
      p.preventDefault();
      var s = $telerik.getTouches(p);
      var q = f + this._coordinateAxis;
      var n = s[0].location;
      var o;
      var r;
      if (this._initialTouchLocation === 0) {
        this._initialTouchLocation = n[q];
      }
      o = this._initialTouchLocation - n[q];
      r = Math.round(o + this._previousScrollLocation);
      if (this.isAtMinPosition(r) || this.isAtMaxPosition(r)) {
        this.stopScroll();
      } else {
        this._lastDelta = o;
      }
      this.set_currentPosition(r);
      this._touchScrollInAction = true;
      setTimeout(function () {
        this._touchScrollInAction = false;
      }, 100);
    },
    _mobileScrollHandlerStop: function (n) {
      if (this._touchScrollInAction) {
        n.stopPropagation();
        this._initialTouchLocation = 0;
        this._previousScrollLocation += this._lastDelta;
        this._touchScrollInAction = false;
        this._owner
          ._getControl()
          ._updateScrollState(this._owner, this._currentPosition);
      }
    },
    _positionChanged: function () {
      this._updateArrows();
    },
    _ensureArrows: function () {
      if ($telerik.isIE7) {
        this._previousArrow.style.cssText = this._previousArrow.style.cssText;
        this._nextArrow.style.cssText = this._nextArrow.style.cssText;
      }
    },
    _updateArrows: function () {
      var n = "rtsPrevArrow";
      if (this.isAtMinPosition() || this._disabled) {
        n = "rtsPrevArrowDisabled";
      }
      if (this._previousArrow.className != n) {
        this._previousArrow.className = n;
      }
      n = "rtsNextArrow";
      if (this.isAtMaxPosition() || this._disabled) {
        n = "rtsNextArrowDisabled";
      }
      if (this._nextArrow.className != n) {
        this._nextArrow.className = n;
      }
      this._ensureArrows();
    },
    _positionArrowsHorizontally: function (n) {
      this._nextArrow.style.position = "absolute";
      this._previousArrow.style.position = "absolute";
      this._previousArrow.style.top = "0";
      this._nextArrow.style.top = "0";
      if (n == b.TabStripScrollButtonsPosition.Right) {
        this._element.appendChild(this._nextArrow);
        this._element.appendChild(this._previousArrow);
        this._nextArrow.style.right = "0";
        this._previousArrow.style.right = this._nextArrow.offsetWidth + "px";
      } else {
        if (n == b.TabStripScrollButtonsPosition.Left) {
          this._element.appendChild(this._previousArrow);
          this._element.appendChild(this._nextArrow);
          this._previousArrow.style.left = "0";
          this._nextArrow.style.left = this._previousArrow.offsetWidth + "px";
        } else {
          this._element.appendChild(this._previousArrow);
          this._element.appendChild(this._nextArrow);
          this._previousArrow.style.left = "0";
          this._nextArrow.style.right = "0";
        }
      }
    },
    _positionArrowsVertically: function (n) {
      this._element.style.position = "relative";
      this._nextArrow.style.position = "absolute";
      this._previousArrow.style.position = "absolute";
      this._nextArrow.style.left = "0";
      this._previousArrow.style.left = "0";
      this._element.appendChild(this._previousArrow);
      this._element.appendChild(this._nextArrow);
      if (n == b.TabStripScrollButtonsPosition.Right) {
        this._nextArrow.style.bottom = "0";
        this._previousArrow.style.bottom = this._nextArrow.offsetHeight + "px";
      } else {
        if (n == b.TabStripScrollButtonsPosition.Left) {
          this._previousArrow.style.top = "0";
          this._nextArrow.style.top = this._previousArrow.offsetHeight + "px";
        } else {
          this._previousArrow.style.top = "0";
          this._nextArrow.style.bottom = "0";
        }
      }
    },
    _positionArrows: function (n) {
      if (this._orientation == b.ScrollerOrientation.Horizontal) {
        this._positionArrowsHorizontally(n);
      } else {
        this._positionArrowsVertically(n);
      }
    },
    _detachArrows: function () {
      this._element.removeChild(this._previousArrow);
      this._element.removeChild(this._nextArrow);
    },
    _hideArrows: function () {
      this._nextArrow.style.display = "none";
      this._previousArrow.style.display = "none";
    },
    _showArrows: function () {
      this._nextArrow.style.display = "";
      this._previousArrow.style.display = "";
    },
    _nextScrollPosition: function (n) {
      var o = this._owner.get_tabs();
      var p =
        n < 0
          ? o.getTab(Math.max(0, this._currentTabIndex + n))
          : o.getTab(
              this._currentTabIndex + (this._owner._rightToLeft ? -n : 0)
            );
      if (p) {
        return this._currentPosition + n * p.get_element()[this._sizeAttribute];
      }
      return this._currentPosition;
    },
    setScrollingLimits: function (p, n) {
      var q = p;
      var o = n;
      if ($telerik.isIE7 && this._owner._rightToLeft) {
        o = -p + this._getMaxScrollImageSize();
        q = -n - this._getMinScrollImageSize();
      } else {
        q -= this._getMinScrollImageSize();
        o += this._getMaxScrollImageSize();
      }
      Telerik.Web.UI.TabScroller.callBaseMethod(this, "setScrollingLimits", [
        q,
        o,
      ]);
    },
    isAtMinPosition: function (n) {
      if (!n) {
        return this._currentPosition <= this._minPosition;
      } else {
        return n <= this._minPosition;
      }
    },
    isAtMaxPosition: function (n) {
      if (!n) {
        return this._currentPosition >= this._maxPosition;
      } else {
        return n >= this._maxPosition;
      }
    },
    _getMinScrollImageSize: function () {
      if (
        this._owner._scrollButtonsPosition ===
        b.TabStripScrollButtonsPosition.Left
      ) {
        return (
          this._nextArrow[this._sizeAttribute] +
          this._previousArrow[this._sizeAttribute]
        );
      }
      if (
        this._owner._scrollButtonsPosition ===
        b.TabStripScrollButtonsPosition.Middle
      ) {
        return this._nextArrow[this._sizeAttribute];
      }
      return 0;
    },
    _getMaxScrollImageSize: function () {
      if (
        this._owner._scrollButtonsPosition ==
        b.TabStripScrollButtonsPosition.Right
      ) {
        return (
          this._nextArrow[this._sizeAttribute] +
          this._previousArrow[this._sizeAttribute]
        );
      }
      if (
        this._owner._scrollButtonsPosition ==
        b.TabStripScrollButtonsPosition.Middle
      ) {
        return this._nextArrow[this._sizeAttribute];
      }
      return 0;
    },
    _scrollToNextTab: function (n) {
      if (n > 0 && this.isAtMaxPosition()) {
        return;
      }
      if (n < 0 && this.isAtMinPosition()) {
        return;
      }
      var o = this._nextScrollPosition(n);
      if (o == this._currentPosition) {
        return;
      }
      this.set_currentPosition(o);
      var p = this._owner.get_tabs();
      this._currentTabIndex += this._owner._rightToLeft
        ? p.get_count() > this._currentTabIndex
          ? -n
          : 0
        : n;
    },
    _calculateInitialTab: function () {
      if (!this._owner._perTabScrolling) {
        return;
      }
      var o = 0;
      var p = this._owner.get_tabs();
      var n;
      if (
        this._owner._rightToLeft &&
        this._orientation != b.ScrollerOrientation.Vertical
      ) {
        n = this._tabsWidth - this._currentPosition;
      } else {
        n = this._currentPosition;
      }
      while (o < n) {
        o += p.getTab(this._currentTabIndex).get_element()[this._sizeAttribute];
        this._currentTabIndex++;
      }
    },
    _removeInlineStyles: function () {
      this._levelElement.style.position = "";
      this._childListElement.style.left = "";
      this._childListElement.style.width = "";
      this._childListElement.style.position = "";
      this._childListElement.style.height = "";
    },
    _toggleEnabled: function () {
      this._disabled = !(
        this._tabStrip.get_enabled() && this._owner.get_enabled()
      );
      if (this._disabled) {
        this._previousArrow.className = "rtsPrevArrowDisabled";
        this._nextArrow.className = "rtsNextArrowDisabled";
      } else {
        this._previousArrow.className = "rtsPrevArrow";
        this._nextArrow.className = "rtsNextArrow";
      }
    },
    initialize: function () {
      b.TabScroller.callBaseMethod(this, "initialize");
      this._childListElement.style.position = "relative";
      var n = a(this._childListElement);
      n.addClass(c);
      if (this._owner._perTabScrolling) {
        this._currentTabIndex = 0;
      }
      this._positionChangedDelegate = Function.createDelegate(
        this,
        this._positionChanged
      );
      this.add_positionChanged(this._positionChangedDelegate);
      this._nextArrow = this._createArrow("rtsNextArrow");
      this._previousArrow = this._createArrow("rtsPrevArrow");
      this._positionArrows(this._owner._scrollButtonsPosition);
      this._nextArrowClickDelegate = Function.createDelegate(
        this,
        this._preventDefault
      );
      this._scrollForwardDelegate = Function.createDelegate(
        this,
        this._scrollForward
      );
      this._nextArrowMouseUpDelegate = Function.createDelegate(
        this,
        this._stopScroll
      );
      this._previousArrowClickDelegate = Function.createDelegate(
        this,
        this._preventDefault
      );
      this._scrollBackwardDelegate = Function.createDelegate(
        this,
        this._scrollBackward
      );
      this._previousArrowMouseUpDelegate = Function.createDelegate(
        this,
        this._stopScroll
      );
      if (
        this._owner._rightToLeft &&
        this._orientation != b.ScrollerOrientation.Vertical
      ) {
        $telerik.addHandler(
          this._nextArrow,
          d,
          this._previousArrowClickDelegate
        );
        $telerik.addHandler(this._nextArrow, g, this._scrollBackwardDelegate);
        $telerik.addHandler(
          this._nextArrow,
          i,
          this._previousArrowMouseUpDelegate
        );
        $telerik.addHandler(
          this._previousArrow,
          d,
          this._nextArrowClickDelegate
        );
        $telerik.addHandler(
          this._previousArrow,
          g,
          this._scrollForwardDelegate
        );
        $telerik.addHandler(
          this._previousArrow,
          i,
          this._nextArrowMouseUpDelegate
        );
      } else {
        $telerik.addHandler(this._nextArrow, d, this._nextArrowClickDelegate);
        $telerik.addHandler(this._nextArrow, g, this._scrollForwardDelegate);
        $telerik.addHandler(this._nextArrow, i, this._nextArrowMouseUpDelegate);
        $telerik.addHandler(
          this._previousArrow,
          d,
          this._previousArrowClickDelegate
        );
        $telerik.addHandler(
          this._previousArrow,
          g,
          this._scrollBackwardDelegate
        );
        $telerik.addHandler(
          this._previousArrow,
          i,
          this._previousArrowMouseUpDelegate
        );
      }
      if ($telerik.isTouchDevice) {
        n.on(h, e + j, a.proxy(this._mobileScrollHandler, this));
        n.on(i, e + j, a.proxy(this._mobileScrollHandlerStop, this));
      }
    },
    dispose: function (n) {
      b.TabScroller.callBaseMethod(this, "dispose");
      this._datachEventHandlers();
      this._disposeDelegates();
      if (!n) {
        a(this._childListElement).removeClass(c);
        this._detachArrows();
        this._removeInlineStyles();
      }
      this._disposeDomElement();
      this._owner._scroller = null;
    },
    _disposeDelegates: function () {
      this._nextArrowMouseUpDelegate = null;
      this._nextArrowClickDelegate = null;
      this._scrollForwardDelegate = null;
      this._previousArrowMouseUpDelegate = null;
      this._previousArrowClickDelegate = null;
      this._scrollBackwardDelegate = null;
      this._positionChangedDelegate = null;
    },
    _datachEventHandlers: function () {
      var n = a(this._childListElement),
        o = this._nextArrow,
        p = this._previousArrow;
      if (
        this._owner._rightToLeft &&
        this._orientation != b.ScrollerOrientation.Vertical
      ) {
        $telerik.removeHandler(o, d, this._previousArrowClickDelegate);
        $telerik.removeHandler(o, g, this._scrollBackwardDelegate);
        $telerik.removeHandler(o, i, this._previousArrowMouseUpDelegate);
        $telerik.removeHandler(p, d, this._nextArrowClickDelegate);
        $telerik.removeHandler(p, g, this._scrollForwardDelegate);
        $telerik.removeHandler(p, i, this._nextArrowMouseUpDelegate);
      } else {
        $telerik.removeHandler(o, d, this._nextArrowClickDelegate);
        $telerik.removeHandler(o, g, this._scrollForwardDelegate);
        $telerik.removeHandler(o, i, this._nextArrowMouseUpDelegate);
        $telerik.removeHandler(p, d, this._previousArrowClickDelegate);
        $telerik.removeHandler(p, g, this._scrollBackwardDelegate);
        $telerik.removeHandler(p, i, this._previousArrowMouseUpDelegate);
      }
      if ($telerik.isTouchDevice) {
        n.off(h, e + j, this._mobileScrollHandler);
        n.off(i, e + j, this._mobileScrollHandlerStop);
      }
    },
    _disposeDomElement: function () {
      this._nextArrow = null;
      this._previousArrow = null;
      this._childListElement = null;
      this._levelElement = null;
    },
  };
  b.TabScroller.registerClass("Telerik.Web.UI.TabScroller", b.Scroller);
  b.RadTabStrip._setSize = function (p, q) {
    var n = a(p).find(".rtsIn").get(0),
      o;
    n.style.height = q + "px";
    o = p.offsetHeight - q;
    if (o > 0) {
      n.style.height = q - o + "px";
    }
  };
})($telerik.$, Telerik.Web.UI);

/* END Telerik.Web.UI.TabStrip.Views.ClassicView.js */
/* START Telerik.Web.UI.Ajax.Ajax.js */
Type.registerNamespace("Telerik.Web.UI");
Telerik.Web.UI.RadAjaxControl = function (a) {
  Telerik.Web.UI.RadAjaxControl.initializeBase(this, [a]);
  this._clientEvents = {};
  this._uniqueID = "";
  this._enableHistory = false;
  this._enableAJAX = true;
  this._requestQueueSize = 0;
  this._requestQueue = [];
  this._loadingPanelsToHide = [];
  this._initializeRequestHandler = null;
  this._endRequestHandler = null;
  this._isRequestInProgress = false;
  this._hideLoadingPanels = false;
  this._links = [];
  this._styles = [];
  this.Type = "Telerik.Web.UI.RadAjaxControl";
  this._postBackControls = null;
  this._showLoadingPanelForPostBackControls = false;
  this.UniqueID = this._uniqueID;
  this.EnableHistory = this._enableHistory;
  this.EnableAJAX = this._enableAJAX;
  this.Links = this._links;
  this.Styles = this._styles;
  this._enableAriaSupport = false;
  this._updatePanels = "";
};
Telerik.Web.UI.RadAjaxControl.prototype = {
  initialize: function () {
    Telerik.Web.UI.RadAjaxControl.callBaseMethod(this, "initialize");
    var b = [];
    if (this._postBackControls) {
      b = this._postBackControls.split(",");
    }
    this._setupExclusionFilters(b);
    for (var a in this._clientEvents) {
      if (typeof this._clientEvents[a] != "string") {
        continue;
      }
      if (this._clientEvents[a] != "") {
        var c = this._clientEvents[a];
        if (c.indexOf("(") != -1) {
          this[a] = c;
        } else {
          this[a] = eval(c);
        }
      } else {
        this[a] = null;
      }
    }
    var d = Sys.WebForms.PageRequestManager.getInstance();
    this._initializeRequestHandler = Function.createDelegate(
      this,
      this._initializeRequest
    );
    d.add_initializeRequest(this._initializeRequestHandler);
    if (this.get_enableAriaSupport()) {
      this._initializeAriaSupport();
      d.add_beginRequest(this._beginRequestSaveFocusHandler);
      d.add_endRequest(this._endRequestRestoreFocusHandler);
    }
  },
  _beginRequestSaveFocusHandler: function (b) {
    var a = b._activeElement || document.activeElement;
    if (a && a.id) {
      window._focusedElement = a.id;
    }
  },
  _endRequestRestoreFocusHandler: function (b) {
    var a;
    if (window._focusedElement) {
      a = document.getElementById(window._focusedElement);
      if (a) {
        a.focus();
        window._focusedElement = null;
      }
    }
  },
  _setupExclusionFilters: function (b) {
    var d = this;
    var a = new RegExp("[;:|]ExportTo(?:excel|word|csv|pdf)[;:|]", "ig");
    var c;
    b.push(
      "ExportToExcelButton",
      "ExportToWordButton",
      "ExportToPdfButton",
      "ExportToCsvButton"
    );
    c = function (i, e) {
      var f = i._form.__EVENTARGUMENT.value;
      var h;
      d._hideLoadingPanels = false;
      if (e.get_postBackElement().name) {
        h = e.get_postBackElement().name;
      } else {
        if (i._form.__EVENTTARGET && i._form.__EVENTTARGET.value) {
          h = i._form.__EVENTTARGET.value;
        } else {
          h = e
            .get_postBackElement()
            .id.replace(/\_?ctl[0-9]+\_?/g, function (j) {
              return j.replace(/^\_|\_$/g, "$");
            });
        }
      }
      for (var g = 0; g < b.length; g++) {
        if (h.indexOf(b[g]) != -1 || a.test(f)) {
          e.set_cancel(true);
          i._form.__EVENTTARGET.value = h;
          i._form.submit();
          d._hideLoadingPanels = !d._showLoadingPanelForPostBackControls;
          if (d._showLoadingPanelForPostBackControls) {
            setTimeout(function () {
              d.ajaxRequest("InternalHideLoadingPanelAfterPostback");
              Sys.WebForms.PageRequestManager.getInstance().remove_initializeRequest(
                c
              );
            }, 100);
          }
          return;
        }
      }
      Sys.WebForms.PageRequestManager.getInstance().remove_initializeRequest(c);
    };
    Sys.WebForms.PageRequestManager.getInstance().add_initializeRequest(c);
  },
  _getResponseHeader: function (c, b) {
    try {
      return c.getResponseHeader(b);
    } catch (a) {
      return null;
    }
  },
  _handleAsyncRedirect: function (d) {
    var b = this._getResponseHeader(d, "Location");
    if (b && b != "") {
      var c = document.createElement("a");
      c.style.display = "none";
      c.href = b;
      document.body.appendChild(c);
      if (c.click) {
        try {
          c.click();
        } catch (a) {}
      } else {
        window.location.href = b;
      }
      document.body.removeChild(c);
      return true;
    }
    return false;
  },
  _initializeAriaSupport: function () {
    var b = document.getElementsByTagName("div");
    for (var c = 0; c < b.length; c++) {
      var a = b[c];
      if (a.className && a.className.indexOf("RadAjaxPanel") > -1) {
        a.setAttribute("aria-live", "assertive");
      }
    }
  },
  _onFormSubmitCompleted: function (s, a) {
    if (s._xmlHttpRequest != null) {
      if (this._handleAsyncRedirect(s._xmlHttpRequest)) {
        try {
          s._aborted = true;
        } catch (d) {}
        return;
      }
    }
    var g, k;
    if (s._xmlHttpRequest != null && !s.get_timedOut()) {
      var r = this.getResponseItems(s.get_responseData(), "scriptBlock");
      for (g = 0, k = r.length; g < k; g++) {
        var c = r[g].content;
        if (
          c.indexOf('"links":') != -1 &&
          c.indexOf(
            Sys.WebForms.PageRequestManager.getInstance()._uniqueIDToClientID(
              this._uniqueID
            )
          ) != -1
        ) {
          var l = c
            .substr(
              c.indexOf('"links":') + 10,
              c.indexOf("]", c.indexOf('"links":')) -
                (c.indexOf('"links":') + 10)
            )
            .replace(/\"/g, "");
          if (l != "") {
            this._links = l.split(",");
            this.updateHeadLinks();
          }
        }
        if (c.indexOf(".axd") == -1 && r[g].id == "ScriptPath") {
          Telerik.Web.UI.RadAjaxControl.IncludeClientScript(c);
        }
      }
      var p = this.getResponseItems(s.get_responseData(), "updatePanel");
      Telerik.Web.UI.RadAjaxControl.panelsToClear = [];
      for (g = 0, k = p.length; g < k; g++) {
        var o = p[g];
        if (!$get(o.id)) {
          var m = document.createElement("div");
          m.id = o.id;
          var f = $get(o.id.replace("Panel", ""));
          if (!f) {
            continue;
          }
          var q = f.parentNode;
          var n =
            f.nextSibling ||
            Telerik.Web.UI.RadAjaxControl.GetNodeNextSibling(f);
          if (f.nodeType === 1) {
            if (f.dispose && typeof f.dispose === "function") {
              f.dispose();
            } else {
              if (f.control && typeof f.control.dispose === "function") {
                f.control.dispose();
              }
            }
            var b = Sys.UI.Behavior.getBehaviors(f);
            for (var h = b.length - 1; h >= 0; h--) {
              b[h].dispose();
            }
          }
          $telerik.disposeElement(f);
          q.removeChild(f);
          Telerik.Web.UI.RadAjaxControl.InsertAtLocation(m, q, n);
          Telerik.Web.UI.RadAjaxControl.panelsToClear[
            Telerik.Web.UI.RadAjaxControl.panelsToClear.length
          ] = o;
        }
      }
    }
    s.get_webRequest().remove_completed(this._onFormSubmitCompletedHandler);
  },
  dispose: function () {
    this.hideLoadingPanels();
    var a = Sys.WebForms.PageRequestManager.getInstance();
    a.remove_initializeRequest(this._initializeRequestHandler);
    a.remove_beginRequest(this._beginRequestSaveFocusHandler);
    a.remove_endRequest(this._endRequestRestoreFocusHandler);
    window.$clearHandlers(this.get_element());
    this._element.control = null;
    window[
      Sys.WebForms.PageRequestManager.getInstance()._uniqueIDToClientID(
        this._uniqueID
      )
    ] = null;
    Telerik.Web.UI.RadAjaxControl.callBaseMethod(this, "dispose");
  },
  get_enableAJAX: function () {
    return this._enableAJAX;
  },
  set_enableAJAX: function (a) {
    if (this._enableAJAX != a) {
      this._enableAJAX = a;
    }
  },
  get_enableAriaSupport: function () {
    return this._enableAriaSupport;
  },
  get_enableHistory: function () {
    return this._enableHistory;
  },
  set_enableHistory: function (a) {
    if (this._enableHistory != a) {
      this._enableHistory = a;
    }
  },
  get_clientEvents: function () {
    return this._clientEvents;
  },
  set_clientEvents: function (a) {
    if (this._clientEvents != a) {
      this._clientEvents = a;
    }
  },
  get_links: function () {
    return this._links;
  },
  set_links: function (a) {
    if (this._links != a) {
      this._links = a;
      if (this._links.length > 0) {
        this.updateHeadLinks();
      }
    }
  },
  get_styles: function () {
    return this._styles;
  },
  set_styles: function (a) {
    if (this._styles != a) {
      this._styles = a;
      if (this._styles.length > 0) {
        this.updateHeadStyles();
      }
    }
  },
  get_uniqueID: function () {
    return this._uniqueID;
  },
  set_uniqueID: function (a) {
    if (this._uniqueID != a) {
      this._uniqueID = a;
      window[
        Sys.WebForms.PageRequestManager.getInstance()._uniqueIDToClientID(
          this._uniqueID
        )
      ] = this;
    }
  },
  get_requestQueueSize: function () {
    return this._requestQueueSize;
  },
  set_requestQueueSize: function (a) {
    if (a > 0) {
      this._requestQueueSize = a;
      this.raisePropertyChanged("requestQueueSize");
    }
  },
  isChildOf: function (a, b) {
    while (a != null) {
      if (a == b) {
        return true;
      }
      a = a.parentNode;
    }
    return false;
  },
  _initializeRequest: function (i, a) {
    var g = Sys.WebForms.PageRequestManager.getInstance();
    if (g.get_isInAsyncPostBack() && this._requestQueueSize > 0) {
      this._queueRequest(i, a);
      return false;
    }
    var e;
    var c = false;
    if (this.Type == "Telerik.Web.UI.RadAjaxManager") {
      if (a.get_postBackElement() != this.get_element()) {
        var f = this._updatePanels.split(",");
        if (Array.contains(f, a.get_postBackElement().id)) {
          this._isRequestInProgress = true;
          this._attachRequestHandlers(i, a, false);
          return false;
        } else {
          e = a.get_postBackElement().parentNode;
          c = false;
          while (e != null) {
            if (e.id && Array.contains(f, e.id)) {
              c = true;
              break;
            }
            e = e.parentNode;
          }
          if (c) {
            this._isRequestInProgress = true;
            this._attachRequestHandlers(i, a, false);
            return false;
          }
        }
        if (!this._initiators[a.get_postBackElement().id]) {
          e = a.get_postBackElement().parentNode;
          c = false;
          while (e != null) {
            if (e.id && this._initiators[e.id]) {
              c = true;
              break;
            }
            e = e.parentNode;
          }
          if (!c) {
            this._isRequestInProgress = true;
            this._attachRequestHandlers(i, a, false);
            return false;
          }
        }
      }
    }
    if (this.Type == "Telerik.Web.UI.RadAjaxPanel") {
      var d = this._getParentAjaxPanel(a.get_postBackElement());
      if (d && d.get_id() != this.get_id()) {
        return false;
      }
      if (!this.isChildOf(a.get_postBackElement(), this.get_element())) {
        return false;
      }
    }
    if (this._enableHistory) {
      if (Telerik.Web.UI.RadAjaxControl.History[""] == null) {
        Telerik.Web.UI.RadAjaxControl.HandleHistory(
          i._uniqueIDToClientID(this._uniqueID),
          ""
        );
      }
      Telerik.Web.UI.RadAjaxControl.HandleHistory(
        i._uniqueIDToClientID(this._uniqueID),
        a.get_request().get_body()
      );
    }
    if (i._form.__EVENTTARGET && i._form.__EVENTTARGET.value) {
      this.__EVENTTARGET = i._form.__EVENTTARGET.value;
    } else {
      this.__EVENTTARGET = a.get_postBackElement().id;
    }
    if (a.get_postBackElement().name) {
      this.__EVENTTARGET = a.get_postBackElement().name;
    }
    this.__EVENTARGUMENT = i._form.__EVENTARGUMENT.value;
    var b = new Telerik.Web.UI.RadAjaxRequestEventArgs(
      this.__EVENTTARGET,
      i._form.__EVENTARGUMENT.value,
      this._enableAJAX
    );
    var h = this.fireEvent(this, "OnRequestStart", [b]);
    if (b.get_cancel() || (typeof h != "undefined" && !h)) {
      delete this.__EVENTTARGET;
      delete this.__EVENTARGUMENT;
      a.set_cancel(true);
      return;
    }
    if (!b._enableAjax || !b.EnableAjax) {
      a.set_cancel(true);
      i._form.__EVENTTARGET.value = this.__EVENTTARGET;
      i._form.__EVENTARGUMENT.value = this.__EVENTARGUMENT;
      i._form.submit();
      return;
    }
    this._isRequestInProgress = true;
    this._attachRequestHandlers(i, a, true);
  },
  _endRequest: function (k, a) {
    var l = this.context;
    k.remove_endRequest(l._endRequestHandler);
    for (
      var d = 0, e = Telerik.Web.UI.RadAjaxControl.panelsToClear.length;
      d < e;
      d++
    ) {
      var g = Telerik.Web.UI.RadAjaxControl.panelsToClear[d];
      var h = document.getElementById(g.id);
      var b = $get(g.id.replace("Panel", ""));
      if (!b) {
        continue;
      }
      var j = h.parentNode;
      var f =
        h.nextSibling || Telerik.Web.UI.RadAjaxControl.GetNodeNextSibling(h);
      Telerik.Web.UI.RadAjaxControl.InsertAtLocation(b, j, f);
      h.parentNode.removeChild(h);
    }
    l._isRequestInProgress = false;
    l.hideLoadingPanels();
    if (
      typeof l.__EVENTTARGET != "undefined" &&
      typeof l.__EVENTARGUMENT != "undefined" &&
      !a.get_response().get_aborted()
    ) {
      var c = new Telerik.Web.UI.RadAjaxRequestEventArgs(
        l.__EVENTTARGET,
        l.__EVENTARGUMENT,
        l._enableAJAX
      );
      l.fireEvent(l, "OnResponseEnd", [c]);
    }
    if (l._requestQueue.length > 0) {
      l.__id = this.id;
      l._executePendingRequest();
    }
  },
  _queueRequest: function (e, a) {
    a.set_cancel(true);
    if (this._requestQueue.length >= this._requestQueueSize) {
      return;
    }
    var d = a.get_postBackElement();
    var c = d.id;
    if (d.name) {
      c = d.name;
    }
    if (e._form.__EVENTTARGET && e._form.__EVENTTARGET.value) {
      c = e._form.__EVENTTARGET.value;
    }
    var b = e._form.__EVENTARGUMENT.value;
    Array.enqueue(this._requestQueue, [c, b]);
  },
  _executePendingRequest: function () {
    var d = Array.dequeue(this._requestQueue);
    var c = d[0];
    var b = d[1];
    if (this._requestQueue.length > 0 && this.__id != "") {
      var a = $find(this.__id);
      if (a) {
        Array.addRange(a._requestQueue, this._requestQueue);
      }
    }
    var e = Sys.WebForms.PageRequestManager.getInstance();
    e._doPostBack(c, b);
  },
  _attachRequestHandlers: function (e, a, f) {
    this._endRequestHandler = Function.createDelegate(
      { context: this, id: this.get_id() },
      this._endRequest
    );
    e.add_endRequest(this._endRequestHandler);
    this._onFormSubmitCompletedHandler = Function.createDelegate(
      this,
      this._onFormSubmitCompleted
    );
    a.get_request().add_completed(this._onFormSubmitCompletedHandler);
    if (typeof a.get_request()._get_eventHandlerList == "function") {
      a.get_request()._get_eventHandlerList()._list.completed.reverse();
    } else {
      if (Sys.Observer) {
        var d = Sys.Observer._getContext(a.get_request());
        if (d && d.events) {
          d.events._list.completed.reverse();
        }
      }
    }
    if (f) {
      var c = a.get_request().get_body();
      var b = c.lastIndexOf("&") != c.length - 1 ? "&" : "";
      c += b + "RadAJAXControlID=" + e._uniqueIDToClientID(this._uniqueID);
      a.get_request().set_body(c);
    }
  },
  _getParentAjaxPanel: function (b) {
    var a = null;
    while (b != null) {
      if (
        typeof b.id != "undefined" &&
        $find(b.id) &&
        $find(b.id).Type == "Telerik.Web.UI.RadAjaxPanel"
      ) {
        a = $find(b.id);
        break;
      }
      b = b.parentNode;
    }
    return a;
  },
  getResponseItems: function (m, g, f) {
    var l = Sys.WebForms.PageRequestManager.getInstance();
    var j = m;
    var c, h, n, e, a;
    var k = 0;
    var i = null;
    var b = "|";
    var d = [];
    while (k < j.length) {
      c = j.indexOf(b, k);
      if (c === -1) {
        i = l._findText(j, k);
        break;
      }
      h = parseInt(j.substring(k, c), 10);
      if (h % 1 !== 0) {
        i = l._findText(j, k);
        break;
      }
      k = c + 1;
      c = j.indexOf(b, k);
      if (c === -1) {
        i = l._findText(j, k);
        break;
      }
      n = j.substring(k, c);
      k = c + 1;
      c = j.indexOf(b, k);
      if (c === -1) {
        i = l._findText(j, k);
        break;
      }
      e = j.substring(k, c);
      k = c + 1;
      if (k + h >= j.length) {
        i = l._findText(j, j.length);
        break;
      }
      if (typeof l._decodeString != "undefined") {
        a = l._decodeString(j.substr(k, h));
      } else {
        a = j.substr(k, h);
      }
      k += h;
      if (j.charAt(k) !== b) {
        i = l._findText(j, k);
        break;
      }
      k++;
      if (g != undefined && g != n) {
        continue;
      }
      if (f != undefined && f != e) {
        continue;
      }
      Array.add(d, { type: n, id: e, content: a });
    }
    return d;
  },
  pageLoading: function (b, a) {},
  pageLoaded: function (b, a) {},
  hideLoadingPanels: function () {
    for (var b = 0; b < this._loadingPanelsToHide.length; b++) {
      var c = this._loadingPanelsToHide[b].Panel;
      var a = this._loadingPanelsToHide[b].ControlID;
      if (c != null) {
        c.hide(a);
        Array.remove(this._loadingPanelsToHide, this._loadingPanelsToHide[b]);
        b--;
      }
    }
  },
  fireEvent: function (d, b, a) {
    var c = true;
    if (typeof d[b] == "string") {
      c = eval(d[b]);
    } else {
      if (typeof d[b] == "function") {
        if (a) {
          if (typeof a.unshift != "undefined") {
            a.unshift(d);
            c = d[b].apply(d, a);
          } else {
            c = d[b].apply(d, [a]);
          }
        } else {
          c = d[b]();
        }
      }
    }
    if (typeof c != "boolean") {
      return true;
    } else {
      return c;
    }
  },
  updateHeadLinks: function () {
    var e = this.getHeadElement();
    var d = e.getElementsByTagName("link");
    var c = [];
    for (var l = 0, k = d.length; l < k; l++) {
      var b = d[l].getAttribute("href");
      c.push(b);
    }
    for (var g = 0, m = this._links.length; g < m; g++) {
      var f = this._links[g];
      f = f.replace(/&amp;amp;t/g, "&t");
      f = f.replace(/&amp;t/g, "&t");
      var a = Array.contains(c, f);
      var h = e.innerHTML.indexOf('"' + f + '"');
      if (h > 0 && h < e.innerHTML.indexOf("$create")) {
        a = true;
      }
      if (!a) {
        if (f == "") {
          continue;
        }
        var n = document.createElement("link");
        n.setAttribute("rel", "stylesheet");
        n.setAttribute("href", f);
        e.appendChild(n);
      }
    }
  },
  _retrieveFirstStyleSheet: function () {
    var h = null;
    if (document.createStyleSheet != null) {
      try {
        h = document.createStyleSheet();
      } catch (c) {}
      if (h == null) {
        h = document.createElement("style");
      }
    } else {
      var f = document.styleSheets;
      if (f.length == 0) {
        var b = document.createElement("style");
        b.media = "all";
        b.type = "text/css";
        var d = this.getHeadElement();
        d.appendChild(b);
      }
      var g = f.length;
      var a = 0;
      while (h == null && a < g) {
        h = f[a++];
        try {
          if (h.cssRules == null) {
            h = null;
          }
        } catch (c) {
          h = null;
        }
      }
    }
    return h;
  },
  updateHeadStyles: function () {
    var f = this._retrieveFirstStyleSheet();
    if (f == null) {
      return;
    }
    var b, d, c, a;
    if (document.createStyleSheet != null) {
      for (b = 0, d = this._styles.length; b < d; b++) {
        a = this._styles[b];
        f.cssText = a;
      }
    } else {
      for (b = 0; b < this._styles.length; b++) {
        a = this._styles[b];
        var e = a.split("}");
        for (c = 0; c < e.length; c++) {
          if (e[c].replace(/\s*/, "") == "") {
            continue;
          }
          if (e[c].indexOf("{") != -1) {
            f.insertRule(e[c] + "}", f.cssRules.length);
          }
        }
      }
    }
  },
  getHeadElement: function () {
    var b = document.getElementsByTagName("head");
    if (b.length > 0) {
      return b[0];
    }
    var a = document.createElement("head");
    document.documentElement.appendChild(a);
    return a;
  },
  ajaxRequest: function (a) {
    __doPostBack(this._uniqueID, a);
  },
  ajaxRequestWithTarget: function (b, a) {
    __doPostBack(b, a);
  },
  __doPostBack: function (c, a) {
    var b = Sys.WebForms.PageRequestManager.getInstance()._form;
    if (b != null) {
      if (b.__EVENTTARGET != null) {
        b.__EVENTTARGET.value = c;
      }
      if (b.__EVENTARGUMENT != null) {
        b.__EVENTARGUMENT.value = a;
      }
      b.submit();
    }
  },
};
Telerik.Web.UI.RadAjaxControl.registerClass(
  "Telerik.Web.UI.RadAjaxControl",
  Sys.UI.Control
);
Telerik.Web.UI.RadAjaxRequestEventArgs = function (c, b, a) {
  Telerik.Web.UI.RadAjaxRequestEventArgs.initializeBase(this);
  this._enableAjax = a;
  this._eventTarget = c;
  this._eventArgument = b;
  this._postbackControlClientID = c.replace(/(\$|:)/g, "_");
  this._eventTargetElement = $get(this._postbackControlClientID);
  this.EnableAjax = this._enableAjax;
  this.EventTarget = this._eventTarget;
  this.EventArgument = this._eventArgument;
  this.EventTargetElement = this._eventTargetElement;
};
Telerik.Web.UI.RadAjaxRequestEventArgs.prototype = {
  get_enableAjax: function () {
    return this._enableAjax;
  },
  set_enableAjax: function (a) {
    if (this._enableAjax != a) {
      this._enableAjax = a;
    }
  },
  get_eventTarget: function () {
    return this._eventTarget;
  },
  get_eventArgument: function () {
    return this._eventArgument;
  },
  get_eventTargetElement: function () {
    return this._eventTargetElement;
  },
};
Telerik.Web.UI.RadAjaxRequestEventArgs.registerClass(
  "Telerik.Web.UI.RadAjaxRequestEventArgs",
  Sys.CancelEventArgs
);
Telerik.Web.UI.RadAjaxControl.History = {};
Telerik.Web.UI.RadAjaxControl.HandleHistory = function (a, b) {
  if (window.netscape) {
    return;
  }
  var c = $get(a + "_History");
  if (c == null) {
    c = document.createElement("iframe");
    c.id = a + "_History";
    c.name = a + "_History";
    c.style.width = "0px";
    c.style.height = "0px";
    c.src = "about:blank";
    c.style.visibility = "hidden";
    var d = function (j) {
      if (!Telerik.Web.UI.RadAjaxControl.ShouldLoadHistory) {
        Telerik.Web.UI.RadAjaxControl.ShouldLoadHistory = true;
        return;
      }
      var o = "";
      var f = "";
      var h = c.contentWindow.document.getElementById("__DATA");
      if (!h) {
        return;
      }
      var g = h.value.split("&");
      for (var l = 0, n = g.length; l < n; l++) {
        var m = g[l].split("=");
        if (m[0] == "__EVENTTARGET") {
          o = m[1];
        }
        if (m[0] == "__EVENTARGUMENT") {
          f = m[1];
        }
        var k = document.getElementById(
          Sys.WebForms.PageRequestManager.getInstance()._uniqueIDToClientID(
            m[0]
          )
        );
        if (k != null) {
          Telerik.Web.UI.RadAjaxControl.RestorePostData(
            k,
            Telerik.Web.UI.RadAjaxControl.DecodePostData(m[1])
          );
        }
      }
      if (o != "") {
        __doPostBack(
          Telerik.Web.UI.RadAjaxControl.DecodePostData(o),
          Telerik.Web.UI.RadAjaxControl.DecodePostData(f),
          a
        );
      }
    };
    window.$addHandler(c, "load", d);
    document.body.appendChild(c);
  }
  if (Telerik.Web.UI.RadAjaxControl.History[b] == null) {
    Telerik.Web.UI.RadAjaxControl.History[b] = true;
    Telerik.Web.UI.RadAjaxControl.AddHistoryEntry(c, b);
  }
};
Telerik.Web.UI.RadAjaxControl.AddHistoryEntry = function (b, a) {
  Telerik.Web.UI.RadAjaxControl.ShouldLoadHistory = false;
  b.contentWindow.document.open();
  b.contentWindow.document.write(
    "<input id='__DATA' name='__DATA' type='hidden' value='" + a + "' />"
  );
  b.contentWindow.document.close();
  if (window.netscape) {
    b.contentWindow.document.location.hash = "#'" + new Date() + "'";
  }
};
Telerik.Web.UI.RadAjaxControl.DecodePostData = function (a) {
  if (decodeURIComponent) {
    return decodeURIComponent(a);
  } else {
    return unescape(a);
  }
};
Telerik.Web.UI.RadAjaxControl.RestorePostData = function (a, d) {
  if (a.tagName.toLowerCase() == "select") {
    for (var b = 0, c = a.options.length; b < c; b++) {
      if (d.indexOf(a.options[b].value) != -1) {
        a.options[b].selected = true;
      }
    }
  }
  if (
    a.tagName.toLowerCase() == "input" &&
    (a.type.toLowerCase() == "text" || a.type.toLowerCase() == "hidden")
  ) {
    a.value = d;
  }
  if (
    a.tagName.toLowerCase() == "input" &&
    (a.type.toLowerCase() == "checkbox" || a.type.toLowerCase() == "radio")
  ) {
    a.checked = d;
  }
};
Telerik.Web.UI.RadAjaxControl.GetNodeNextSibling = function (a) {
  if (a != null && a.nextSibling != null) {
    return a.nextSibling;
  }
  return null;
};
Telerik.Web.UI.RadAjaxControl.InsertAtLocation = function (a, c, b) {
  if (b != null) {
    return c.insertBefore(a, b);
  } else {
    return c.appendChild(a);
  }
};
Telerik.Web.UI.RadAjaxControl.FocusElement = function (a) {
  var c = document.getElementById(a);
  if (c) {
    var b = c.tagName;
    var d = c.type;
    if (
      b.toLowerCase() == "input" &&
      (d.toLowerCase() == "checkbox" || d.toLowerCase() == "radio")
    ) {
      window.setTimeout(function () {
        try {
          c.focus();
        } catch (g) {}
      }, 500);
    } else {
      try {
        Telerik.Web.UI.RadAjaxControl.SetSelectionFocus(c);
        c.focus();
      } catch (f) {}
    }
  }
};
Telerik.Web.UI.RadAjaxControl.SetSelectionFocus = function (b) {
  if (b.createTextRange == null) {
    return;
  }
  var c = null;
  try {
    c = b.createTextRange();
  } catch (a) {}
  if (c != null) {
    c.moveStart("textedit", c.text.length);
    c.collapse(false);
    c.select();
  }
};
Telerik.Web.UI.RadAjaxControl.panelsToClear = [];
Telerik.Web.UI.RadAjaxControl.UpdateElement = function (g, e) {
  var a = $get(g);
  if (a != null) {
    a.innerHTML = e;
    var f, h;
    var l = Telerik.Web.UI.RadAjaxControl.GetScriptsSrc(e);
    for (f = 0, h = l.length; f < h; f++) {
      Telerik.Web.UI.RadAjaxControl.IncludeClientScript(l[f]);
    }
    l = Telerik.Web.UI.RadAjaxControl.GetTags(e, "script");
    for (f = 0, h = l.length; f < h; f++) {
      var k = l[f];
      if (k.inner != "") {
        Telerik.Web.UI.RadAjaxControl.EvalScriptCode(k.inner);
      }
    }
    var b = document.getElementsByTagName("head")[0];
    var d = Telerik.Web.UI.RadAjaxControl.GetLinkHrefs(e);
    for (f = 0, h = d.length; f < h; f++) {
      var c = d[f];
      var j = document.createElement("link");
      j.setAttribute("rel", "stylesheet");
      j.setAttribute("href", c);
      b.appendChild(j);
    }
  }
};
Telerik.Web.UI.RadAjaxControl.IncludeClientScript = function (c) {
  if (!Telerik.Web.UI.RadAjaxControl.ShouldIncludeClientScript(c)) {
    return;
  }
  var a = window.XMLHttpRequest
    ? new XMLHttpRequest()
    : new ActiveXObject("Microsoft.XMLHTTP");
  a.open("GET", c, false);
  a.send(null);
  if (a.status == 200) {
    var b = a.responseText;
    Telerik.Web.UI.RadAjaxControl.EvalScriptCode(b);
  }
};
Telerik.Web.UI.RadAjaxControl.ShouldIncludeClientScript = function (b) {
  var a = $telerik.isScriptRegistered(b);
  if (a == 0 || a > 1) {
    return false;
  }
  return true;
};
Telerik.Web.UI.RadAjaxControl.EvalScriptCode = function (b) {
  if (Telerik.Web.UI.RadAjaxControl.IsSafari()) {
    b = b.replace(/^\s*<!--((.|\n)*)-->\s*$/im, "$1");
  }
  var a = document.createElement("script");
  a.setAttribute("type", "text/javascript");
  if (Telerik.Web.UI.RadAjaxControl.IsSafari()) {
    a.appendChild(document.createTextNode(b));
  } else {
    a.text = b;
  }
  var c = document.getElementsByTagName("head")[0];
  c.appendChild(a);
  if (Telerik.Web.UI.RadAjaxControl.IsSafari()) {
    a.innerHTML = "";
  } else {
    a.parentNode.removeChild(a);
  }
};
Telerik.Web.UI.RadAjaxControl.GetTags = function (b, f) {
  var d = [];
  var a = b;
  while (1) {
    var e = Telerik.Web.UI.RadAjaxControl.GetTag(a, f);
    if (e.index == -1) {
      break;
    }
    d[d.length] = e;
    var c = e.index + e.outer.length;
    a = a.substring(c, a.length);
  }
  return d;
};
Telerik.Web.UI.RadAjaxControl.GetTag = function (b, e, a) {
  if (typeof a == "undefined") {
    a = "";
  }
  var d = new RegExp("<" + e + "[^>]*>((.|\n|\r)*?)</" + e + ">", "i");
  var c = b.match(d);
  if (c != null && c.length >= 2) {
    return { outer: c[0], inner: c[1], index: c.index };
  } else {
    return { outer: a, inner: a, index: -1 };
  }
};
Telerik.Web.UI.RadAjaxControl.GetLinkHrefs = function (c) {
  var b = c;
  var a = [];
  while (1) {
    var e = b.match(
      /<link[^>]*href=('|")?([^'"]*)('|")?([^>]*)>.*?(<\/link>)?/i
    );
    if (e == null || e.length < 3) {
      break;
    }
    var f = e[2];
    a[a.length] = f;
    var d = e.index + f.length;
    b = b.substring(d, b.length);
  }
  return a;
};
Telerik.Web.UI.RadAjaxControl.GetScriptsSrc = function (c) {
  var b = c;
  var a = [];
  while (1) {
    var e = b.match(
      /<script[^>]*src=('|")?([^'"]*)('|")?([^>]*)>.*?(<\/script>)?/i
    );
    if (e == null || e.length < 3) {
      break;
    }
    var f = e[2];
    a[a.length] = f;
    var d = e.index + f.length;
    b = b.substring(d, b.length);
  }
  return a;
};
Telerik.Web.UI.RadAjaxControl.IsSafari = function () {
  return navigator.userAgent.match(/safari/i) != null;
};
Type.registerNamespace("Telerik.Web.UI");
$telerik.findAjaxLoadingPanel = $find;
$telerik.toAjaxLoadingPanel = function (a) {
  return a;
};
Telerik.Web.UI.RadAjaxLoadingPanel = function (a) {
  var b = ["showing", "hiding"];
  this._initializeClientEvents(b);
  Telerik.Web.UI.RadAjaxLoadingPanel.initializeBase(this, [a]);
  this._uniqueID = "";
  this._minDisplayTime = 0;
  this._initialDelayTime = 0;
  this._isSticky = false;
  this._transparency = 0;
  this._manager = null;
  this._zIndex = 90000;
  this.skin = "";
  this._animationDuration = 0;
  this._backgroundTransparency = 0;
  this._enableAriaSupport = false;
  this._modal = false;
  this.UniqueID = this._uniqueID;
  this.MinDisplayTime = this._minDisplayTime;
  this.InitialDelayTime = this._initialDelayTime;
  this.IsSticky = this._isSticky;
  this.Transparency = this._transparency;
  this.ZIndex = this._zIndex;
  this._overlay = false;
  this._overlayIFrame = {};
};
Telerik.Web.UI.RadAjaxLoadingPanel.prototype = {
  initialize: function () {
    Telerik.Web.UI.RadAjaxLoadingPanel.callBaseMethod(this, "initialize");
  },
  dispose: function () {
    Telerik.Web.UI.RadAjaxLoadingPanel.callBaseMethod(this, "dispose");
  },
  get_zIndex: function () {
    return this._zIndex;
  },
  set_zIndex: function (a) {
    if (this._zIndex != a) {
      this._zIndex = a;
    }
  },
  get_uniqueID: function () {
    return this._uniqueID;
  },
  set_uniqueID: function (a) {
    if (this._uniqueID != a) {
      this._uniqueID = a;
      window[
        Sys.WebForms.PageRequestManager.getInstance()._uniqueIDToClientID(
          this._uniqueID
        )
      ] = this;
    }
  },
  get_initialDelayTime: function () {
    return this._initialDelayTime;
  },
  set_initialDelayTime: function (a) {
    if (this._initialDelayTime != a) {
      this._initialDelayTime = a;
    }
  },
  get_isSticky: function () {
    return this._isSticky;
  },
  set_isSticky: function (a) {
    if (this._isSticky != a) {
      this._isSticky = a;
    }
  },
  get_minDisplayTime: function () {
    return this._minDisplayTime;
  },
  set_minDisplayTime: function (a) {
    if (this._minDisplayTime != a) {
      this._minDisplayTime = a;
    }
  },
  get_transparency: function () {
    return this._transparency;
  },
  set_transparency: function (a) {
    if (this._transparency != a) {
      this._transparency = a;
    }
  },
  get_backgroundTransparency: function () {
    return this._backgroundTransparency;
  },
  set_backgroundTransparency: function (a) {
    if (this._backgroundTransparency != a) {
      this._backgroundTransparency = a;
    }
  },
  get_animationDuration: function () {
    return this._animationDuration;
  },
  set_animationDuration: function (a) {
    this._animationDuration = a;
  },
  get_enableAriaSupport: function () {
    return this._enableAriaSupport;
  },
  get_modal: function () {
    return this._modal;
  },
  set_modal: function (a) {
    this._modal = a;
  },
  show: function (f) {
    if (this._manager && this._manager._hideLoadingPanels) {
      return;
    }
    var e = $get(f + "_wrapper");
    if (typeof e == "undefined" || !e) {
      e = $get(f);
    }
    var d = this.get_element();
    if (!(e && d)) {
      return false;
    }
    var b = this._initialDelayTime;
    var c = this;
    var a =
      !this._isSticky || this.get_modal() ? this.cloneLoadingPanel(d, f) : d;
    if (this.get_enableAriaSupport()) {
      this.announceStartLoading(e);
    }
    if (b) {
      window.setTimeout(function () {
        try {
          if (c._manager != null && c._manager._isRequestInProgress) {
            c.displayLoadingElement(a, e);
          }
        } catch (g) {}
      }, b);
    } else {
      this.displayLoadingElement(a, e);
    }
    return true;
  },
  hide: function (n) {
    var f = $get(n);
    var j = String.format("{0}_wrapper", n);
    var i = $get(j);
    if (i) {
      f = i;
    }
    if (this.get_element() == null) {
      var e = $get(
        Sys.WebForms.PageRequestManager.getInstance()._uniqueIDToClientID(
          this._uniqueID
        )
      );
      if (e == null) {
        return;
      }
      this._element = e;
    }
    var c =
      !this._isSticky || this.get_modal()
        ? $get(this.get_element().id + n)
        : this.get_element();
    var k = new Date();
    if (c == null) {
      return;
    }
    var m = k - c._startDisplayTime;
    var h = this._minDisplayTime;
    var g = new Telerik.Web.UI.AjaxLoadingPanelEventArgs(c, f);
    var b = this;
    this.raise_hiding(g);
    if (!g.get_cancelNativeDisplay()) {
      if (this._overlayIFrame && this._overlayIFrame[c.id]) {
        var l = this._overlayIFrame;
        var d = c.id;
        window.setTimeout(
          function () {
            if (l && l[d]) {
              l[d].dispose();
              l[d] = null;
            }
            l = null;
          },
          h > m ? h - m : 0
        );
      }
      var a = this.get_animationDuration();
      if (this._isSticky) {
        if (h > m) {
          window.setTimeout(function () {
            if (!c.parentNode) {
              return;
            }
            if (a > 0) {
              $telerik.$(c).fadeOut(a, function () {
                b.announceFinishedLoading(b, f);
                c.style.display = "none";
              });
            } else {
              b.announceFinishedLoading(b, f);
              c.style.display = "none";
            }
          }, h - m);
        } else {
          if (a > 0) {
            $telerik.$(c).fadeOut(a, function () {
              b.announceFinishedLoading(b, f);
              c.style.display = "none";
            });
          } else {
            this.announceFinishedLoading(b, f);
            c.style.display = "none";
          }
        }
      } else {
        if (h > m) {
          window.setTimeout(function () {
            if (!c.parentNode) {
              return;
            }
            if (a > 0) {
              $telerik.$(c).fadeOut(a, function () {
                b.announceFinishedLoading(b, f);
                c.parentNode.removeChild(c);
              });
            } else {
              b.announceFinishedLoading(b, f);
              c.parentNode.removeChild(c);
            }
          }, h - m);
        } else {
          if (a > 0) {
            $telerik.$(c).fadeOut(a, function () {
              b.announceFinishedLoading(b, f);
              c.parentNode.removeChild(c);
            });
          } else {
            this.announceFinishedLoading(b, f);
            c.parentNode.removeChild(c);
          }
        }
      }
    } else {
      this.announceFinishedLoading(b, f);
    }
    if (!this._isSticky && typeof f != "undefined" && f != null) {
      f.style.visibility = "visible";
    }
  },
  announceSetup: function () {
    var a = this.getStatusDiv();
    a.setAttribute("aria-live", "polite");
    a.setAttribute("aria-atomic", "true");
    a.setAttribute("aria-label", "");
    a.setAttribute("aria-relevant", "text");
    a.innerHTML = "";
    a.style.position = "fixed";
    a.style.overflow = "hidden";
    a.style.left = "-10000px";
    a.style.top = "-10000px";
  },
  announceStartLoading: function (b) {
    this.announceSetup();
    if (b) {
      b.setAttribute("aria-busy", "true");
    }
    var a = this.getStatusDiv();
    a.setAttribute("aria-label", "Loading!");
    a.innerHTML = "Loading!";
    a.focus();
  },
  announceFinishedLoading: function (b, d) {
    if (b.get_enableAriaSupport()) {
      if (window._focusedElement) {
        var a = document.getElementById(window._focusedElement);
        window.setTimeout(function () {
          if (a && a !== document.activeElement) {
            a.focus();
          }
        }, 100);
      }
      b.announceSetup();
      var c = b.getStatusDiv();
      c.setAttribute("aria-label", "Ready!");
      c.innerHTML = "Ready!";
      c.focus();
      if (d) {
        d.setAttribute("aria-busy", "false");
      }
      setTimeout(function () {
        b.destroyStatusDiv();
      }, 1000);
    }
  },
  getStatusDiv: function () {
    var a = document.getElementById("loadingPanelAriaStatusDiv");
    if (a) {
      return a;
    }
    a = document.createElement("div");
    a.id = "loadingPanelAriaStatusDiv";
    document.body.appendChild(a);
    return a;
  },
  destroyStatusDiv: function () {
    var a = document.getElementById("loadingPanelAriaStatusDiv");
    if (!a) {
      return;
    }
    document.body.removeChild(a);
  },
  cloneLoadingPanel: function (b, c) {
    var a = b.cloneNode(false);
    a.innerHTML = b.innerHTML;
    a.id = b.id + c;
    document.body.insertBefore(a, document.body.firstChild);
    return a;
  },
  displayLoadingElement: function (c, h) {
    if (!this._isSticky) {
      var f = this.getElementRectangle(h);
      c.style.position = "absolute";
      c.style.width = f.width + "px";
      c.style.height = f.height + "px";
      c.style.left = f.left + "px";
      c.style.top = f.top + "px";
      c.style.textAlign = "center";
      c.style.zIndex = this._zIndex;
    }
    if (this.get_modal()) {
      c.style.position = "fixed";
      c.style.width = "100%";
      c.style.height = "100%";
      c.style.left = 0;
      c.style.top = 0;
      c.style.zIndex = this._zIndex;
    }
    var e = 100 - parseInt(this._transparency, 10);
    if (e < 100) {
      $telerik.$(c).css("opacity", e / 100);
    }
    var a = 100 - parseInt(this._backgroundTransparency, 10);
    if (a < 100) {
      $telerik
        .$(c)
        .find(".raColor")
        .css("opacity", a / 100);
    }
    var g = this;
    var b = function () {
      if (e == 100 && !g._isSticky) {
        var i = true;
        if (g.skin != "") {
          if (typeof c.style.opacity == "undefined") {
            if (
              $telerik.$(c).css("filter").indexOf("opacity") != -1 ||
              $telerik
                .$(c.firstChild.nextSibling)
                .css("filter")
                .indexOf("opacity") != -1
            ) {
              i = false;
            }
          } else {
            if (
              $telerik.$(c).css("opacity") > 0 ||
              $telerik.$(c.getElementsByClassName("raDiv")[0]).css("opacity") >
                0
            ) {
              i = false;
            }
          }
        }
        if (i) {
          h.style.visibility = "hidden";
        }
      }
    };
    var d = new Telerik.Web.UI.AjaxLoadingPanelEventArgs(c, h);
    this.raise_showing(d);
    if (!d.get_cancelNativeDisplay()) {
      if (this.get_animationDuration() > 0) {
        $telerik.$(c).css("opacity", 0);
        c.style.display = "";
        $telerik
          .$(c)
          .animate({ opacity: e / 100 }, this.get_animationDuration(), b);
      } else {
        c.style.display = "";
        b();
      }
      if (this._overlay) {
        this._overlayIFrame[c.id] = new Telerik.Web.UI.Overlay(c);
        this._overlayIFrame[c.id].initialize();
      }
    }
    c._startDisplayTime = new Date();
  },
  getElementRectangle: function (a) {
    if (!a) {
      a = this;
    }
    var d = $telerik.getLocation(a);
    var c = d.x;
    var e = d.y;
    var f = a.offsetWidth;
    var b = a.offsetHeight;
    return { left: c, top: e, width: f, height: b };
  },
  _initializeClientEvents: function (a) {
    if (a) {
      var e = this;
      for (var b = 0, c = a.length; b < c; b++) {
        var d = a[b];
        this["add_" + d] = (function (f) {
          return function (g) {
            e.get_events().addHandler(f, g);
          };
        })(d);
        this["remove_" + d] = (function (f) {
          return function (g) {
            e.get_events().removeHandler(f, g);
          };
        })(d);
        this["raise_" + d] = (function (f) {
          return function (g) {
            e.raiseEvent(f, g);
          };
        })(d);
      }
    }
  },
};
Telerik.Web.UI.RadAjaxLoadingPanel.registerClass(
  "Telerik.Web.UI.RadAjaxLoadingPanel",
  Telerik.Web.UI.RadWebControl
);
Telerik.Web.UI.AjaxLoadingPanelEventArgs = function (a, b) {
  Telerik.Web.UI.AjaxLoadingPanelEventArgs.initializeBase(this);
  this._loadingElement = a;
  this._updatedElement = b;
  this._cancelNativeDisplay = false;
};
Telerik.Web.UI.AjaxLoadingPanelEventArgs.prototype = {
  get_loadingElement: function () {
    return this._loadingElement;
  },
  get_updatedElement: function () {
    return this._updatedElement;
  },
  get_cancelNativeDisplay: function () {
    return this._cancelNativeDisplay;
  },
  set_cancelNativeDisplay: function (a) {
    this._cancelNativeDisplay = a;
  },
};
Telerik.Web.UI.AjaxLoadingPanelEventArgs.registerClass(
  "Telerik.Web.UI.AjaxLoadingPanelEventArgs",
  Sys.EventArgs
);
Type.registerNamespace("Telerik.Web.UI");
$telerik.findAjaxManager = $find;
$telerik.toAjaxManager = function (a) {
  return a;
};
Telerik.Web.UI.RadAjaxManager = function (a) {
  Telerik.Web.UI.RadAjaxManager.initializeBase(this, [a]);
  this._ajaxSettings = [];
  this._defaultLoadingPanelID = "";
  this._initiators = {};
  this._loadingPanelsToHide = [];
  this._isRequestInProgress = false;
  this.Type = "Telerik.Web.UI.RadAjaxManager";
  this._updatePanelsRenderMode = null;
  this.AjaxSettings = this._ajaxSettings;
  this.DefaultLoadingPanelID = this._defaultLoadingPanelID;
};
Telerik.Web.UI.RadAjaxManager.prototype = {
  initialize: function () {
    Telerik.Web.UI.RadAjaxManager.callBaseMethod(this, "initialize");
    var b = this.get_element();
    if (b != null && b.parentNode != null && b.parentNode.id == b.id + "SU") {
      b.parentNode.style.display = "none";
    }
    var a = this.get_ajaxSettings();
    for (var c = 0, d = a.length; c < d; c++) {
      this._initiators[a[c].InitControlID] = a[c].UpdatedControls;
    }
  },
  dispose: function () {
    Telerik.Web.UI.RadAjaxManager.callBaseMethod(this, "dispose");
  },
  get_ajaxSettings: function () {
    return this._ajaxSettings;
  },
  set_ajaxSettings: function (a) {
    if (this._ajaxSettings != a) {
      this._ajaxSettings = a;
    }
  },
  get_defaultLoadingPanelID: function () {
    return this._defaultLoadingPanelID;
  },
  set_defaultLoadingPanelID: function (a) {
    if (this._defaultLoadingPanelID != a) {
      this._defaultLoadingPanelID = a;
    }
  },
  get_updatePanelsRenderMode: function () {
    return this._updatePanelsRenderMode;
  },
  set_updatePanelsRenderMode: function (a) {
    if (this._updatePanelsRenderMode != a) {
      this._updatePanelsRenderMode = a;
      this._applyUpdatePanelsRenderMode(a);
    }
  },
  _applyUpdatePanelsRenderMode: function (e) {
    var d = Sys.WebForms.PageRequestManager.getInstance();
    var b = d._updatePanelClientIDs;
    for (var a = 0; a < b.length; a++) {
      var c = $get(b[a]);
      if (c) {
        if (c.tagName.toLowerCase() == "span") {
          continue;
        }
        c.style.display = e == 0 ? "block" : "inline";
      }
    }
  },
  showLoadingPanels: function (e, b) {
    for (var d = 0, g = b.length; d < g; d++) {
      if (b[d].InitControlID == e) {
        var a = b[d];
        for (var f = 0, h = a.UpdatedControls.length; f < h; f++) {
          var n = a.UpdatedControls[f];
          var m = n.PanelID;
          if (m == "") {
            m = this._defaultLoadingPanelID;
          }
          var c = n.ControlID;
          if (c == this._uniqueID) {
            continue;
          }
          var l = $find(m);
          if (l != null) {
            l._manager = this;
            if (l.show(c)) {
              var k = { Panel: l, ControlID: c };
              if (!Array.contains(this._loadingPanelsToHide, k)) {
                this._loadingPanelsToHide[this._loadingPanelsToHide.length] = k;
              }
            }
          }
        }
      }
    }
  },
  _showLoadingPanelsForElementsInRequestQueue: function (a) {
    if (this._requestQueue.length == 0) {
      return false;
    } else {
      if (this._requestQueue[this._requestQueue.length - 1][0] != a.id) {
        for (var b = 0; b < this._requestQueue.length; b++) {
          this._showLoadingPanelsForGivenElement(
            $get(this._requestQueue[b][0])
          );
        }
      }
    }
  },
  _showLoadingPanelsForGivenElement: function (c) {
    if (c != null) {
      if (this._initiators[c.id]) {
        this.showLoadingPanels(c.id, this.get_ajaxSettings());
      } else {
        var b = c.parentNode;
        var a = false;
        while (b != null) {
          if (b.id && this._initiators[b.id]) {
            a = true;
            break;
          }
          b = b.parentNode;
        }
        if (a) {
          this.showLoadingPanels(b.id, this.get_ajaxSettings());
        }
      }
    }
  },
  _initializeRequest: function (c, a) {
    Telerik.Web.UI.RadAjaxManager.callBaseMethod(this, "_initializeRequest", [
      c,
      a,
    ]);
    if (!this._isRequestInProgress) {
      return;
    }
    var b = a.get_postBackElement();
    this._showLoadingPanelsForGivenElement(b);
    this._showLoadingPanelsForElementsInRequestQueue(b);
  },
  updateElement: function (b, a) {
    Telerik.Web.UI.RadAjaxControl.UpdateElement(b, a);
  },
};
Telerik.Web.UI.RadAjaxManager.registerClass(
  "Telerik.Web.UI.RadAjaxManager",
  Telerik.Web.UI.RadAjaxControl
);
Telerik.Web.UI.RadAjaxManager.UpdateElement = function (b, a) {
  Telerik.Web.UI.RadAjaxControl.UpdateElement(b, a);
};
Type.registerNamespace("Telerik.Web.UI");
$telerik.findAjaxPanel = $find;
$telerik.toAjaxPanel = function (a) {
  return a;
};
Telerik.Web.UI.RadAjaxPanel = function (a) {
  Telerik.Web.UI.RadAjaxPanel.initializeBase(this, [a]);
  this._loadingPanelID = "";
  this._loadingPanelsToHide = [];
  this.Type = "Telerik.Web.UI.RadAjaxPanel";
  this.LoadingPanelID = this._loadingPanelID;
};
Telerik.Web.UI.RadAjaxPanel.prototype = {
  initialize: function () {
    var a = this.get_element().parentNode;
    if (this.get_element().style.height != "") {
      a.style.height = this.get_element().style.height;
      this.get_element().style.height = "100%";
    }
    if (this.get_element().style.width != "") {
      a.style.width = this.get_element().style.width;
      this.get_element().style.width = "";
    }
    Telerik.Web.UI.RadAjaxPanel.callBaseMethod(this, "initialize");
  },
  dispose: function () {
    Telerik.Web.UI.RadAjaxPanel.callBaseMethod(this, "dispose");
  },
  _initializeRequest: function (e, a) {
    Telerik.Web.UI.RadAjaxPanel.callBaseMethod(this, "_initializeRequest", [
      e,
      a,
    ]);
    if (!this._isRequestInProgress) {
      return;
    }
    var d = a.get_postBackElement();
    if (
      d != null &&
      (d == this.get_element() || this.isChildOf(d, this.get_element()))
    ) {
      var c = $find(this._loadingPanelID);
      if (c != null) {
        c._manager = this;
        if (c.show(this.get_element().id)) {
          var b = { Panel: c, ControlID: this.get_element().id };
          if (!Array.contains(this._loadingPanelsToHide, b)) {
            this._loadingPanelsToHide[this._loadingPanelsToHide.length] = b;
          }
        }
      }
    }
  },
  get_loadingPanelID: function () {
    return this._loadingPanelID;
  },
  set_loadingPanelID: function (a) {
    if (this._loadingPanelID != a) {
      this._loadingPanelID = a;
    }
  },
};
Telerik.Web.UI.RadAjaxPanel.registerClass(
  "Telerik.Web.UI.RadAjaxPanel",
  Telerik.Web.UI.RadAjaxControl
);

/* END Telerik.Web.UI.Ajax.Ajax.js */
/* START Telerik.Web.UI.Common.TouchScrollExtender.js */
(function (a) {
  Type.registerNamespace("Telerik.Web.UI");
  var b = Telerik.Web.UI;
  var c = false;
  Telerik.Web.UI.TouchScrollExtender = function (d) {
    this._containerElements = a(d);
    var e = arguments[1] || {};
    this._autoScan = "autoScan" in e ? e.autoScan : false;
    this._showScrollHints = "showScrollHints" in e ? e.showScrollHints : true;
    this._useRoundedHints = "useRoundedHints" in e ? e.useRoundedHints : true;
    this._hasHorizontalScrollHint = false;
    this._hasVerticalScrollHint = false;
    this._verticalScrollHint = false;
    this._horizontalScrollHint = false;
    this._lastAnimator = false;
    this._dragCanceled = false;
    this._currentTouches = 0;
    this.containers = [];
    this._enableTouchScroll = true;
    this._unbindBeforeDragging = false;
  };
  Telerik.Web.UI.TouchScrollExtender._getNeedsScrollExtender = function () {
    return $telerik.isTouchDevice;
  };
  Telerik.Web.UI.TouchScrollExtender.prototype = {
    initialize: function () {
      if (this._enableTouchScroll) {
        if (this._autoScan) {
          this._containerElements = this._containerElements
            .add(a("*", this._containerElements))
            .filter(function () {
              return (
                a(this).css("overflow") == "scroll" ||
                a(this).css("overflow") == "auto"
              );
            });
        }
        var d = this;
        this._containerElements.each(function () {
          this.style.overflow = "hidden";
          var e = a(this)
            .addClass("RadTouchExtender")
            .css("-webkit-tap-highlight-color", "rgba(0, 0, 0, 0);");
          var f = {
            element: e.stop(),
            horizontalScrollHint: a(
              '<div id="horizontalScrollHint" style="position: absolute; display: none; z-index: 200000; font-size: 0; height: 3px; border: 1px solid #333; background: #777; " />'
            ).appendTo(this.parentNode),
            verticalScrollHint: a(
              '<div id="verticalScrollHint" style="position: absolute; display: none; z-index: 200000; width: 3px; border: 1px solid #333; background: #777; " />'
            ).appendTo(this.parentNode),
          };
          if (d._useRoundedHints) {
            f.horizontalScrollHint.css({
              "-moz-border-radius": "3px",
              "-webkit-border-radius": "3px",
              "border-radius": "3px",
            });
            f.verticalScrollHint.css({
              "-moz-border-radius": "3px",
              "-webkit-border-radius": "3px",
              "border-radius": "3px",
            });
          }
          e.data("dragID", d.containers.push(f) - 1);
        });
        this._startDragProxy = a.proxy(this._startDrag, this);
        if (b.TouchScrollExtender._getNeedsScrollExtender()) {
          this._onGestureStartProxy = a.proxy(this._onGestureStart, this);
          this._onGestureEndProxy = a.proxy(this._onGestureEnd, this);
          this._containerElements.bind("touchstart", this._startDragProxy);
          this._containerElements.bind(
            "gesturestart",
            this._onGestureStartProxy
          );
          this._containerElements.bind("gestureend", this._onGestureEndProxy);
        } else {
          this._containerElements.bind("mousedown", this._startDragProxy);
        }
        this._storeLastLocation = a.throttle(100, function (e) {
          this._lastAnimator.kX = e.x;
          this._lastAnimator.kY = e.y;
        });
        this._alignScrollHints = a.throttle(20, function () {
          var h = 0;
          var i = 0;
          var f = this._lastAnimator.element[0];
          var j = this._lastAnimator.horizontalScrollHint;
          var k = this._lastAnimator.verticalScrollHint;
          var e = this._getBorderBox(f);
          var g = a(f).position();
          if (this._hasHorizontalScrollHint && j) {
            h = Math.abs(f.scrollLeft) * this._widthConstant + g.left + e.left;
            j.css({ left: h });
          }
          if (this._hasVerticalScrollHint && k) {
            i = Math.abs(f.scrollTop) * this._heightConstant + g.top + e.top;
            k.css({ top: i });
          }
        });
        this._throttleScroll = a.throttle(10, function (e) {
          this._lastAnimator.element[0].scrollLeft =
            this._lastAnimator.dragStartX - e.x;
          this._lastAnimator.element[0].scrollTop =
            this._lastAnimator.dragStartY - e.y;
        });
      }
      this._scrollEndedDelegate = Function.createDelegate(
        this,
        this._scrollEnded
      );
    },
    dispose: function () {
      this.disable();
      this._detachInitilalEvents();
      this.containers = null;
      this._containerElements = null;
      this._events = null;
      this._scrollEndedDelegate = null;
    },
    _detachInitilalEvents: function () {
      if (this._containerElements) {
        if (this._startDragProxy) {
          this._containerElements.unbind("mousedown", this._startDragProxy);
        }
        if (this._onGestureStartProxy) {
          this._containerElements.unbind(
            "gesturestart",
            this._onGestureStartProxy
          );
        }
        if (this._onGestureEndProxy) {
          this._containerElements.unbind("gestureend", this._onGestureEndProxy);
        }
      }
    },
    _startDrag: function (g) {
      if (this._preventMultiTouch(g)) {
        this._detachEvents();
        c = false;
        return;
      }
      if (this._dragCanceled) {
        return;
      }
      if (c) {
        return;
      }
      var d = a(g.target);
      var f = d.parents(".RadTouchExtender");
      if (d.hasClass("RadTouchExtender")) {
        f = f.add(d);
      }
      var h = (this._lastAnimator = this.containers[f.data("dragID")]);
      var i = h.element[0];
      this._hasHorizontalScrollHint = i.offsetWidth < i.scrollWidth;
      this._hasVerticalScrollHint = i.offsetHeight < i.scrollHeight;
      h.hasDragged = false;
      if (this._hasHorizontalScrollHint || this._hasVerticalScrollHint) {
        c = true;
        h.element.stop(true);
        h.originalEvent = g.originalEvent;
        if (!b.TouchScrollExtender._getNeedsScrollExtender()) {
          this._cancelEvents(g);
        }
        var k = $telerik.getTouchEventLocation(g);
        h.kX = k.x;
        h.kY = k.y;
        var j = i.scrollLeft || 0;
        var l = i.scrollTop || 0;
        h.dragStartX = (j > 0 ? j : 0) + k.x;
        h.dragStartY = (l > 0 ? l : 0) + k.y;
        if (b.TouchScrollExtender._getNeedsScrollExtender()) {
          if (this._unbindBeforeDragging) {
            a(document.body).unbind({
              touchmove: a.proxy(this._compositeDragger, this),
              touchend: a.proxy(this._endDrag, this),
            });
          }
          a(document.body).bind({
            touchmove: a.proxy(this._compositeDragger, this),
            touchend: a.proxy(this._endDrag, this),
          });
        } else {
          a(document.body).bind({
            mousemove: a.proxy(this._compositeDragger, this),
            mouseup: a.proxy(this._endDrag, this),
          });
        }
      }
    },
    _preventMultiTouch: function (d) {
      if (d.originalEvent.touches && d.originalEvent.touches.length > 1) {
        return true;
      }
    },
    _getBorderBox: function (f) {
      var d = {
        left: 0,
        top: 0,
        right: 0,
        bottom: 0,
        horizontal: 0,
        vertical: 0,
      };
      if (window.getComputedStyle) {
        var e = window.getComputedStyle(f, null);
        d.left = parseInt(e.getPropertyValue("border-left-width"), 10);
        d.right = parseInt(e.getPropertyValue("border-right-width"), 10);
        d.top = parseInt(e.getPropertyValue("border-top-width"), 10);
        d.bottom = parseInt(e.getPropertyValue("border-bottom-width"), 10);
      } else {
        d.left = f.currentStyle.borderLeftWidth;
        d.right = f.currentStyle.borderRightWidth;
        d.top = f.currentStyle.borderTopWidth;
        d.bottom = f.currentStyle.borderBottomWidth;
      }
      d.horizontal = d.left + d.right;
      d.vertical = d.top + d.bottom;
      return d;
    },
    _addScrollHints: function () {
      if (this._showScrollHints) {
        var k = 0;
        var l = 0;
        var i = this._lastAnimator;
        var e = i.element[0];
        var d = this._getBorderBox(e);
        var g = a(e).position();
        if (this._hasHorizontalScrollHint) {
          var h = i.element.innerWidth();
          var m = ~~((h / e.scrollWidth) * h) - 2;
          this._widthConstant = m / h;
          setTimeout(function () {
            k = Math.abs(e.scrollLeft) * (m / h) + g.left + d.left;
            l = e.offsetHeight + g.top + d.top - 7;
            i.horizontalScrollHint.width(m).css({ left: k, top: l });
          }, 0);
          i.horizontalScrollHint.fadeTo(200, 0.5);
        }
        if (this._hasVerticalScrollHint) {
          var f = i.element.innerHeight();
          var j = ~~((f / e.scrollHeight) * f) - 2;
          this._heightConstant = j / f;
          setTimeout(function () {
            l = Math.abs(e.scrollTop) * (j / f) + g.top + d.top;
            k = e.offsetWidth + g.left + d.left - 7;
            i.verticalScrollHint.height(j).css({ left: k, top: l });
          }, 0);
          i.verticalScrollHint.fadeTo(200, 0.5);
        }
      }
    },
    _removeScrollHints: function () {
      if (this._showScrollHints) {
        var d = this._lastAnimator.horizontalScrollHint;
        var e = this._lastAnimator.verticalScrollHint;
        if (this._hasHorizontalScrollHint && d) {
          d.hide();
        }
        if (this._hasVerticalScrollHint && e) {
          e.hide();
        }
      }
    },
    _simpleDragger: function (d) {
      if (this._dragCanceled) {
        return;
      }
      this._cancelEvents(d);
      var f = $telerik.getTouchEventLocation(d);
      if (this._lastAnimator.element.length) {
        this._throttleScroll(f);
        this._alignScrollHints();
      }
      this._storeLastLocation(f);
    },
    _compositeDragger: function (d) {
      if (this._dragCanceled) {
        return;
      }
      var h = $telerik.getTouchEventLocation(d);
      var f = this._lastAnimator;
      var g = f.element[0];
      this._cancelEvents(d, f, h, "compositeDragger");
      if (Math.abs(f.kX - h.x) > 10 || Math.abs(f.kY - h.y) > 10) {
        f.hasDragged = true;
        this._addScrollHints();
        if (b.TouchScrollExtender._getNeedsScrollExtender()) {
          a(document.body)
            .unbind("touchmove", this._compositeDragger)
            .bind("touchmove", a.proxy(this._simpleDragger, this));
        } else {
          a(document.body)
            .unbind("mousemove", this._compositeDragger)
            .bind("mousemove", a.proxy(this._simpleDragger, this));
        }
        if ($telerik.isIE) {
          f.element.bind("click", this._cancelEvents);
          g.setCapture(true);
        } else {
          g.addEventListener("click", this._cancelEvents, true);
        }
      }
    },
    disable: function () {
      this._detachEvents();
      c = false;
      this._dragCanceled = true;
    },
    enable: function () {
      this._dragCanceled = false;
    },
    _onGestureStart: function () {
      this._detachEvents();
      c = false;
      this._dragCanceled = true;
    },
    _onGestureEnd: function () {
      this._dragCanceled = false;
    },
    _endDrag: function (d) {
      if (this._dragCanceled) {
        return;
      }
      c = false;
      this._cancelEvents(d);
      this._detachEvents();
      if (b.TouchScrollExtender._getNeedsScrollExtender()) {
        if (
          this._lastAnimator.originalEvent.touches.length == 1 &&
          !this._lastAnimator.hasDragged
        ) {
          var i = this._lastAnimator.originalEvent;
          var f = document.createEvent("MouseEvents");
          f.initMouseEvent(
            "click",
            i.bubbles,
            i.cancelable,
            i.view,
            i.detail,
            i.screenX,
            i.screenY,
            i.clientX,
            i.clientY,
            false,
            false,
            false,
            false,
            i.button,
            i.relatedTarget
          );
          i.target.dispatchEvent(f);
        }
      }
      var j = this;
      var h = $telerik.getTouchEventLocation(d);
      var g = this._lastAnimator;
      if ($telerik.isIE) {
        setTimeout(function () {
          g.element.unbind("click", j._cancelEvents);
          document.releaseCapture();
        }, 10);
      } else {
        setTimeout(function () {
          g.element[0].removeEventListener("click", j._cancelEvents, true);
        }, 0);
      }
      if (g.hasDragged) {
        if (g.element.length) {
          g.endX = h.x;
          g.endY = h.y;
        }
        this._finishDrag(g);
      }
    },
    _detachEvents: function () {
      if (b.TouchScrollExtender._getNeedsScrollExtender()) {
        a(document.body)
          .unbind("touchmove", this._simpleDragger)
          .unbind("touchmove", this._compositeDragger)
          .unbind("touchend", this._endDrag);
      } else {
        a(document.body)
          .unbind("mousemove", this._simpleDragger)
          .unbind("mousemove", this._compositeDragger)
          .unbind("mouseup", this._endDrag);
      }
    },
    _finishDrag: function (d) {
      var f = d.element[0].scrollLeft + d.kX - d.endX;
      var g = d.element[0].scrollTop + d.kY - d.endY;
      d.kX = 0;
      d.kY = 0;
      var e = this;
      d.element.stop(true).animate(
        { scrollLeft: f, scrollTop: g },
        {
          duration: 500,
          easing: "easeOutQuad",
          complete: function () {
            e._removeScrollHints();
            e._scrollEndedDelegate();
          },
          step: function () {
            e._alignScrollHints();
          },
        }
      );
      if (this._hasHorizontalScrollHint && d.horizontalScrollHint) {
        d.horizontalScrollHint.stop().css("opacity", 0.5).fadeTo(450, 0);
      }
      if (this._hasVerticalScrollHint && d.verticalScrollHint) {
        d.verticalScrollHint.stop().css("opacity", 0.5).fadeTo(450, 0);
      }
    },
    _cancelEvents: function (d) {
      d.stopPropagation();
      d.preventDefault();
    },
    _setUnbindBeforeDragging: function (d) {
      this._unbindBeforeDragging = d;
    },
    get_events: function () {
      if (!this._events) {
        this._events = new Sys.EventHandlerList();
      }
      return this._events;
    },
    _scrollEnded: function () {
      this._raiseEvent("scrollEnded", Sys.EventArgs.Empty);
    },
    add_scrollEnded: function (d) {
      this.get_events().addHandler("scrollEnded", d);
    },
    remove_scrollEnded: function (d) {
      this.get_events().removeHandler("scrollEnded", d);
    },
    _raiseEvent: function (e, d) {
      var f = this.get_events().getHandler(e);
      if (f) {
        if (!d) {
          d = Sys.EventArgs.Empty;
        }
        f(this, d);
      }
    },
  };
  Telerik.Web.UI.TouchScrollExtender.registerClass(
    "Telerik.Web.UI.TouchScrollExtender",
    null,
    Sys.IDisposable
  );
})($telerik.$);

/* END Telerik.Web.UI.Common.TouchScrollExtender.js */
/* START Telerik.Web.UI.Common.Helpers.IETouchActionManager.js */
(function (a, c) {
  Type.registerNamespace("Telerik.Web.UI");
  Type.registerNamespace("Telerik.Web.UI.Helpers");
  var b = Telerik.Web.UI.Helpers;
  b.IETouchActionManager = function (d) {
    this.element = d;
    this.hasPointers = "PointerEvent" in a || "MSPointerEvent" in a;
  };
  b.IETouchActionManager.prototype = {
    allowUserTouch: function () {
      if (this.isPointerEnabled()) {
        var d = this.getStyle();
        this.touchActionProp =
          "touchAction" in d ? "touchAction" : "msTouchAction";
        this.cachedTouchAction = d[this.touchActionProp];
        d[this.touchActionProp] = "none";
      }
    },
    restore: function () {
      if (this.isPointerEnabled()) {
        this.getStyle()[this.touchActionProp] = this.cachedTouchAction;
      }
    },
    getStyle: function () {
      return this.element ? this.element.style : {};
    },
    isPointerEnabled: function () {
      return this.hasPointers;
    },
    dispose: function () {
      this.restore();
      delete this.element;
    },
  };
  b.IETouchActionManager.registerClass(
    "Telerik.Web.UI.Helpers.IETouchActionManager"
  );
})(window);

/* END Telerik.Web.UI.Common.Helpers.IETouchActionManager.js */
/* START Telerik.Web.UI.Common.Widgets.Draggable.js */
Type.registerNamespace("Telerik.Web.UI.Widgets");
(function (a, b, i) {
  var f = function (k) {
    (function () {
      var m = {};
      a.extend(k, {
        trigger: function (p) {
          var q = m[p];
          if (!q) {
            return;
          }
          for (var r = 0; r < q.length; r++) {
            var o = Array.prototype.slice.call(arguments);
            o.shift();
            o.unshift(this);
            q[r].handler.apply(q[r].context, o);
          }
        },
        _bind: function (p, o) {
          a.each(p, function (q, r) {
            l(q, r, o);
          });
        },
        _unbind: function (p, o) {
          a.each(p, function (q, r) {
            n(q, r, o);
          });
        },
        _disposeEvents: function () {
          m = null;
        },
      });
      function l(p, q, o) {
        var r = m[p] || [];
        r.push({ handler: q, context: o });
        m[p] = r;
      }
      function n(p, q, o) {
        var r = m[p];
        if (!r) {
          return;
        }
        var t = -1;
        for (var s = 0; s < r.length; s++) {
          if (r[s].func == q && r[s].context == o) {
            t = s;
            break;
          }
        }
        if (t > -1) {
          r = r.splice(t, 1);
        }
        m[p] = r;
      }
    })();
  };
  var e = b.EventType,
    h = ".telerikDraggableWidget",
    c = e.Down + h,
    j = e.Up + h,
    g = e.Move + h,
    d = "dragstart" + h;
  b.Widgets.Draggable = function (k, l) {
    this._element = k;
    this._options = a.extend(
      {
        useTransformations: false,
        shouldPreventDefault: true,
        enableFrameOverlay: false,
        enableDelay: false,
        validateNestedElementsAsTriggers: false,
        mouseButtonTrigger: b.Widgets.MouseButton.Left,
        touchHoldDelay:
          l && l.touchHoldDelay ? Math.min(1000, l.touchHoldDelay) : 1000,
        touchHoldDelta:
          l && l.touchHoldDelta ? Math.min(20, l.touchHoldDelta) : 20,
        customScrollingEvaluator: null,
        useExternalHandle: !!(l && l.handle),
        cursorType: "move",
        handle: k,
        ownerDocument: document,
        constraints: { minX: null, minY: null, maxX: null, maxY: null },
      },
      l || {}
    );
    this._ieTouchActionManager = new b.Helpers.IETouchActionManager(
      this._options.handle
    );
    this._isScrolling = false;
    f(this);
    this.initialize();
  };
  b.Widgets.Draggable.prototype = {
    initialize: function (k, l) {
      this._initStyleVars(true);
      this._checkTransformationAvailability();
      this._ieTouchActionManager.allowUserTouch();
      this._toggleHandleCursor(true);
      this._attachEventHandlers();
      this._enabled = true;
    },
    dispose: function () {
      this._ieTouchActionManager.dispose();
      this._detachEventHandlers();
      this._initStyleVars(false);
      this._disposeEvents();
      this._toggleHandleCursor(false);
      this._options = null;
      this._element = null;
    },
    get_handle: function () {
      return this._options.handle;
    },
    set_handle: function (k) {
      this._options.handle = k;
    },
    get_useExternalHandle: function () {
      return this._options.useExternalHandle;
    },
    get_position: function () {
      var k = this._element;
      var n = a(k).offset();
      var l = { x: n.left, y: n.top };
      var m = this._options.offsetElement;
      if (m) {
        var o = a(m).offset();
        l.x -= o.left - m.scrollLeft;
        l.y -= o.top - m.scrollTop;
      }
      l.x = Math.round(l.x);
      l.y = Math.round(l.y);
      return l;
    },
    get_handlePosition: function () {
      var k = a(this._options.handle);
      return { x: k.offset().left, y: k.offset().top };
    },
    get_useTransform: function () {
      return this._options.useTransformations;
    },
    set_useTransform: function (k) {
      if (k) {
        this._checkTransformationAvailability();
        if (k && !this._options.useTransformations) {
          alert("The browser does not support CSS3 transformations");
        }
      } else {
        this._options.useTransformations = false;
      }
    },
    get_constraints: function () {
      return this._options.constraints;
    },
    set_constraints: function (k) {
      if (k) {
        if (
          (k.minX && k.maxX && k.minX > k.maxX) ||
          (k.minY && k.maxY && k.minY > k.maxY)
        ) {
          throw Error("Invalid Parameters");
        }
      }
      a.extend(
        this._options.constraints,
        k || { maxX: null, minX: null, maxY: null, minY: null }
      );
    },
    get_minX: function () {
      this._options.constraints.minX;
    },
    set_minX: function (l) {
      var k = this._options.constraints;
      if (
        (isNaN(l) && l !== null && l !== "") ||
        (k.maxX && l !== null && k.maxX < l)
      ) {
        throw Error("Invalid Parameters");
      }
      k.minX = Math.floor(l);
    },
    get_maxX: function () {
      this._options.constraints.maxX;
    },
    set_maxX: function (l) {
      var k = this._options.constraints;
      if (
        (isNaN(l) && l !== null && l !== "") ||
        (k.minX && l !== null && k.minX > l)
      ) {
        throw Error("Invalid Parameters");
      }
      k.maxX = Math.ceil(l);
    },
    get_minY: function () {
      this._options.constraints.minY;
    },
    set_minY: function (l) {
      var k = this._options.constraints;
      if (
        (isNaN(l) && l !== null && l !== "") ||
        (k.maxY && l !== null && k.maxY < l)
      ) {
        throw Error("Invalid Parameters");
      }
      k.minY = Math.floor(l);
    },
    get_maxY: function () {
      this._options.constraints.maxY;
    },
    set_maxY: function (l) {
      var k = this._options.constraints;
      if (
        (isNaN(l) && l !== null && l !== "") ||
        (k.minY && l !== null && k.minY > l)
      ) {
        throw Error("Invalid Parameters");
      }
      k.maxY = Math.ceil(l);
    },
    get_enabled: function () {
      return this._enabled;
    },
    set_enabled: function (k) {
      this._enabled = k;
    },
    moveTo: function (k) {
      this._moveWithDelta(k);
    },
    add_dragStarting: function (k) {
      this._bind({ dragStarting: k });
    },
    remove_dragStarting: function (k) {
      this._unbind({ dragStarting: k });
    },
    add_dragStart: function (k) {
      this._bind({ dragStart: k });
    },
    remove_dragStart: function (k) {
      this._unbind({ dragStart: k });
    },
    add_dragging: function (k) {
      this._bind({ dragging: k });
    },
    remove_dragging: function (k) {
      this._unbind({ dragging: k });
    },
    add_dragEnd: function (k) {
      this._bind({ dragEnd: k });
    },
    remove_dragEnd: function (k) {
      this._unbind({ dragEnd: k });
    },
    updateScroll: function (m) {
      if (!this.startCoords) {
        return;
      }
      this.startCoords.x -= m.x;
      this.startCoords.y -= m.y;
      var l = this._options.constraints;
      var o = this._options.useTransformations;
      var n = o
        ? new b.Point(
            this.startPosition.x + this.transformPos.x,
            this.startPosition.y + this.transformPos.y
          )
        : this.get_position();
      var k = this._calcConstraints(m, n, l);
      if (this._options.useTransformations) {
        this.transformPos.x += k.x;
        this.transformPos.y += k.y;
        this._dragTransform(this.transformPos);
      } else {
        this._dragClassic(k);
      }
      if (this._options.enableFrameOverlay) {
        this._resizeOverlay();
      }
    },
    _initStyleVars: function (l) {
      this._elStyle = l ? this._element.style : null;
      var k = this._getStylePrefix("Transform");
      this._transfPropName = l ? (k ? k + "Transform" : "transform") : null;
    },
    _checkTransformationAvailability: function () {
      this._options.useTransformations =
        this._transfPropName in document.body.style;
    },
    _getStylePrefix: function (o) {
      var k = document.body.style;
      var n = ["webkit", "Moz", "ms", "O", "Khtml", "Icab"];
      for (var l = 0; l < n.length; l++) {
        var m = n[l];
        if (m + o in k) {
          return m;
        }
      }
    },
    _getBounds: function () {
      return $telerik.getBounds(this._element);
    },
    _attachEventHandlers: function () {
      var l = this;
      var k = a(l._options.handle);
      l._mouseDownHandlerProxy = a.proxy(l._mouseDownHandler, this);
      k.onEvent(c, l._mouseDownHandlerProxy);
      k.onEvent(d, l._dragStartHandle);
    },
    _detachEventHandlers: function () {
      var m = this;
      var n = m._options || {};
      var l = a(n.handle);
      var k = a(n.ownerDocument);
      l.offEvent(c, m._mouseDownHandlerProxy);
      l.offEvent(d, m._dragStartHandle);
      k.offEvent(g, m._mouseMoveHandlerProxy);
      k.offEvent(g, m._touchMoveHandlerProxy);
      k.offEvent(j, m._mouseUpOnceProxy);
    },
    _dragStartHandle: function (k) {
      $telerik.cancelRawEvent(k.originalEvent);
    },
    _mouseDownHandler: function (m) {
      var q = this;
      if (!q._enabled) {
        return;
      }
      q._draggingTriggered = false;
      var o = q._isTouchEvent(m);
      var p = q._options;
      if (p.shouldPreventDefault) {
        m.preventDefault();
      }
      if (o) {
        a(p.handle).offEvent(c, q._mouseDownHandlerProxy);
      }
      if (
        (!o && !q._validateButtonTrigger(m)) ||
        (p.validateNestedElementsAsTriggers && !q._validateTargetElemCursor(m))
      ) {
        return;
      }
      var n = q._getEventLocation(m);
      q.startCoords = q.deltaHelper = { x: n.x, y: n.y };
      q.startPosition = q.initialPosition = q.get_position();
      q.transformPos = q.startPosition;
      var l = new b.Widgets.DraggableEventArgs(q.initialPosition, null, m);
      q.trigger("dragStarting", l);
      if (!l._cancel) {
        q._mouseMoveHandlerProxy = a.proxy(q._mouseMoveHandler, q);
        q._mouseUpOnceProxy = a.proxy(q._mouseUpHandlerOnce, q);
        var k = a(p.ownerDocument);
        k.onEvent(g, q._mouseMoveHandlerProxy);
        k.onEvent(j, q._mouseUpOnceProxy);
        if (o && p.enableDelay) {
          q._touchHoldSimulator(m);
        } else {
          q._triggerDragStart(m, q);
          q._cancelDragSelection(m);
        }
        if (p.enableFrameOverlay) {
          q._showOverlay();
        }
      }
    },
    _mouseUpHandlerOnce: function (k) {
      if (!this._options) {
        return;
      }
      a(this._options.ownerDocument).offEvent(j, this._mouseUpOnceProxy);
      this._mouseUpHandler(k);
    },
    _validateTargetElemCursor: function (k) {
      return (
        $telerik.getComputedStyle(k.target || k.srcElement, "cursor") ==
        this._options.cursorType
      );
    },
    _validateButtonTrigger: function (k) {
      var l = !("button" in k) && "originalEvent" in k ? k.originalEvent : k;
      return (
        (this._options.mouseButtonTrigger &
          this._eventButtonToMouseButton(l.button)) !=
        0
      );
    },
    _cancelDragSelection: function (k) {
      $telerik.cancelRawEvent(k);
    },
    _touchHoldSimulator: function (k) {
      this._touchMoveHandlerProxy = a.proxy(this._touchMoveHandler, this);
      a(this._options.ownerDocument).onEvent(g, this._touchMoveHandlerProxy);
      var l = this;
      this.touchHoldTimeout = window.setTimeout(function () {
        if (!l._isScrolling) {
          l._triggerDragStart(k);
        }
      }, this._options.touchHoldDelay);
    },
    _touchMoveHandler: function (l) {
      var m = this._getEventLocation(l);
      var k = { x: this.startCoords.x - m.x, y: this.startCoords.y - m.y };
      if (this._options.customScrollingEvaluator) {
        this._isScrolling = this._options.customScrollingEvaluator(this, l);
      } else {
        this._isScrolling =
          Math.abs(k.x) > this._options.touchHoldDelta ||
          Math.abs(k.y) > this._options.touchHoldDelta;
      }
    },
    _triggerDragStart: function (l) {
      this._clearTouchHoldTimeout();
      var k = new b.Widgets.DraggableEventArgs(
        this.initialPosition,
        null,
        l.originalEvent
      );
      this.trigger("dragStart", k);
      if (!k._cancel) {
        if (this._isTouchEvent(l) && this._touchMoveHandlerProxy) {
          a(this._options.ownerDocument).offEvent(
            g,
            this._touchMoveHandlerProxy
          );
        }
        this._mouseMoveHandlerProxy = a.proxy(this._mouseMoveHandler, this);
        a(this._options.ownerDocument).onEvent(g, this._mouseMoveHandlerProxy);
        this._draggingTriggered = true;
      }
    },
    _clearTouchHoldTimeout: function () {
      window.clearTimeout(this.touchHoldTimeout);
    },
    _mouseUpHandler: function (m) {
      this._isScrolling = false;
      this._clearTouchHoldTimeout();
      var n = this._options;
      if (n.useTransformations) {
        this._applyTransformation();
      }
      var k = a(n.ownerDocument);
      k.offEvent(g, this._mouseMoveHandlerProxy);
      k.offEvent(g, this._touchMoveHandler);
      if (this._isTouchEvent(m)) {
        this.eventTimer = window.setTimeout(
          a.proxy(this._reatachMouseDownHandlers, this),
          500
        );
      }
      if (n.enableFrameOverlay) {
        this._hideOverlay();
      }
      var o = this.get_position();
      var p = this.startPosition;
      var l = new b.Widgets.DraggableEventArgs(
        p,
        { x: o.x - p.x, y: o.y - p.y },
        m.originalEvent
      );
      this.trigger("dragEnd", l);
    },
    _reatachMouseDownHandlers: function () {
      if (this._options) {
        var k = a(this._options.handle);
        k.offEvent(c, this._mouseDownHandlerProxy);
        k.onEvent(c, this._mouseDownHandlerProxy);
      }
    },
    _mouseMoveHandler: function (k) {
      if (this._draggingTriggered) {
        this._drag(k);
        this._cancelDragSelection(k);
      }
    },
    _drag: function (n) {
      var o = this._getEventLocation(n),
        l = this._options.constraints,
        m = this._calcConstraints(
          { x: o.x - this.startCoords.x, y: o.y - this.startCoords.y },
          this.startPosition,
          l
        ),
        k = new b.Widgets.DraggableEventArgs(
          this.startPosition,
          m,
          n.originalEvent
        );
      if (!this._options.useTransformations) {
        this.initialPosition = this.get_position();
        this.deltaHelper = {
          x: o.x - this.deltaHelper.x,
          y: o.y - this.deltaHelper.y,
        };
        this.deltaHelper = this._calcConstraintsClassic(
          this.deltaHelper,
          this.initialPosition,
          o,
          this._options.constraints
        );
      } else {
        this.deltaHelper = m;
        this.transformPos = m;
      }
      this.trigger("dragging", k);
      if (k._cancel == true) {
        return;
      }
      if (this._options.useTransformations) {
        this._dragTransform(this.deltaHelper);
      } else {
        this._dragClassic(this.deltaHelper);
      }
      this.deltaHelper = { x: o.x, y: o.y };
      if (this._options.enableFrameOverlay) {
        this._resizeOverlay();
      }
    },
    _dragTransform: function (k) {
      if (a(this._element).hasClass("rdwDoNotTransfrom")) {
        return;
      }
      this._clearDragTranslation();
      this._elStyle[this._transfPropName] +=
        " translate(" + k.x + "px, " + k.y + "px)";
      a(this._element).addClass("rdwTransformed");
    },
    _dragClassic: function (k) {
      if (a(this._element).hasClass("rdwDoNotTransfrom")) {
        return;
      }
      this._moveWithDelta(k);
    },
    _applyTransformation: function () {
      var o = this._elStyle[this._transfPropName];
      var q = "translate(";
      var n = q.length;
      var m = o.substr(o.lastIndexOf(q));
      var p = m.substr(n, m.indexOf(")") - n);
      var l = p.split(",");
      var k = { x: parseFloat(l[0]), y: parseFloat(l[1]) };
      this._clearDragTranslation();
      this._moveWithDelta(k);
    },
    _clearDragTranslation: function () {
      if (!a(this._element).hasClass("rdwTransformed")) {
        return;
      }
      var k = this._elStyle[this._transfPropName];
      this._elStyle[this._transfPropName] = k.substr(
        0,
        k.lastIndexOf("translate(")
      );
      a(this._element).removeClass("rdwTransformed");
    },
    _getEventLocation: function (k) {
      if (this._isTouchEvent(k)) {
        return this._getTouchEventLocation(k);
      } else {
        if (!("clientX" in k) && "originalEvent" in k) {
          k = k.originalEvent;
        }
        return { x: k.clientX, y: k.clientY };
      }
    },
    _moveWithDelta: function (k) {
      a(this._element).css({
        top: parseFloat(a(this._element).css("top")) + parseFloat(k.y) + "px",
        left: parseFloat(a(this._element).css("left")) + parseFloat(k.x) + "px",
      });
    },
    _calcConstraints: function (l, o, k) {
      var p = l;
      var n = this._element.offsetWidth;
      var m = this._element.offsetHeight;
      if (
        (k.maxX != null && o.x + n > k.maxX) ||
        (k.minX != null && o.x < k.minX) ||
        (k.maxY != null && o.y + m > k.maxY) ||
        (k.minY != null && o.y < k.minY)
      ) {
        return { x: 0, y: 0 };
      }
      if (l.x < 0) {
        p.x =
          k.minX !== null && !isNaN(k.minX) ? Math.max(l.x, k.minX - o.x) : l.x;
      } else {
        p.x =
          k.maxX !== null && !isNaN(k.maxX)
            ? Math.min(l.x, k.maxX - o.x - n)
            : l.x;
      }
      if (l.y < 0) {
        p.y =
          k.minY !== null && !isNaN(k.minY) ? Math.max(l.y, k.minY - o.y) : l.y;
      } else {
        p.y =
          k.maxY !== null && !isNaN(k.maxY)
            ? Math.min(l.y, k.maxY - o.y - m)
            : l.y;
      }
      return p;
    },
    _calcConstraintsClassic: function (l, n, m, k) {
      var o = l;
      if (
        (k.maxX && n.x > k.maxX) ||
        (k.minX && n.x < k.minX) ||
        (k.maxY && n.y > k.maxY) ||
        (k.minY && n.y < k.minY)
      ) {
        return { x: 0, y: 0 };
      }
      if (l.x < 0) {
        o.x =
          n.x + l.x < k.minX ? k.minX - n.x : k.maxX && m.x > k.maxX ? 0 : l.x;
      } else {
        o.x =
          k.maxX && n.x + a(this._element).width() + l.x >= k.maxX
            ? k.maxX - n.x - a(this._element).width()
            : k.minX && m.x < k.minX
            ? 0
            : l.x;
      }
      if (l.y < 0) {
        o.y =
          n.y + this.deltaHelper.y < k.minY
            ? k.minY - n.y
            : k.maxY && m.y > k.maxY
            ? 0
            : l.y;
      } else {
        o.y =
          k.maxY && n.y + a(this._element).height() + l.y >= k.maxY
            ? k.maxY - n.y - a(this._element).height()
            : k.minY && m.y < k.minY
            ? 0
            : l.y;
      }
      return o;
    },
    _showOverlay: function () {
      var k = this._getIFrames(this._options.ownerDocument);
      for (var l = 0; l < k.length; l++) {
        this._createOverlay(k[l]);
      }
    },
    _hideOverlay: function () {
      a(".rrFrameOverlay").remove();
      a(this._options.ownerDocument)
        .find("iframe")
        .removeData("rrFrameOverlayData");
    },
    _resizeOverlay: function () {
      a(this._options.ownerDocument)
        .find("iframe")
        .each(function () {
          var k = a(this);
          a("#" + k.data("rrFrameOverlayData"))
            .width(k.width())
            .height(k.height());
        });
    },
    _createOverlay: function (k) {
      var l = $telerik.getBounds(k),
        m = this._options.ownerDocument.createElement("div");
      m.id = "rrOverlay_" + this._generateString(6) + (+new Date() % 1000000);
      m.className = "rrFrameOverlay";
      m.style.cssText =
        "position:absolute; top:" +
        l.y +
        "px;left:" +
        l.x +
        "px;width:" +
        l.width +
        "px;height:" +
        l.height +
        "px;background-color: white; opacity: 0; filter: alpha(opacity=0)";
      a(k).data("rrFrameOverlayData", m.id);
      this._options.ownerDocument.body.appendChild(m);
    },
    _getIFrames: function (k) {
      return k.getElementsByTagName("iframe");
    },
    _generateString: function (m) {
      var k = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz".split(
        ""
      );
      if (!m) {
        m = Math.floor(Math.random() * k.length);
      }
      var n = "";
      for (var l = 0; l < m; l++) {
        n += k[Math.floor(Math.random() * k.length)];
      }
      return n;
    },
    _toggleHandleCursor: function (l) {
      var k = this.get_handle();
      if (l) {
        this._origCursor = k.style.cursor;
        k.style.cursor = this._options.cursorType;
      } else {
        k.style.cursor = this._origCursor;
        this._origCursor = null;
      }
    },
    _isTouchEvent: function (k) {
      return b.Widgets.Draggable.isTouchEvent(k);
    },
    _getTouchEventLocation: function (l) {
      var n = arguments[1],
        o = n ? [n + "X"] : "pageX",
        p = n ? [n + "Y"] : "pageY",
        m = { x: l[o], y: l[p] },
        k =
          l.changedTouches ||
          (l.originalEvent
            ? l.originalEvent.changedTouches
            : l.rawEvent
            ? l.rawEvent.changedTouches
            : false);
      if (k && k.length < 2) {
        m.x = k[0][o];
        m.y = k[0][p];
      }
      if (m.x === i && l.originalEvent && l.originalEvent[o] != i) {
        m.x = l.originalEvent[o];
        m.y = l.originalEvent[p];
      }
      return m;
    },
    _eventButtonToMouseButton: function (k) {
      var l = Telerik.Web.UI.Widgets.MouseButton;
      if ($telerik.isIE && !$telerik.isIE9Mode) {
        switch (k) {
          case 1:
            return l.Left;
          case 4:
            return l.Middle;
          case 2:
            return l.Right;
          default:
            return l.None;
        }
      } else {
        switch (k) {
          case 0:
            return l.Left;
          case 1:
            return l.Middle;
          case 2:
            return l.Right;
          default:
            return l.None;
        }
      }
    },
  };
  b.Widgets.Draggable.isTouchEvent = function (k) {
    var l = k.originalEvent || k.rawEvent || k;
    var n = l ? l.type : "";
    if (/touch/i.test(n)) {
      return true;
    } else {
      if (/pointer/i.test(n) && "pointerType" in l) {
        var m = l.pointerType;
        return (
          m === "touch" ||
          ("MSPOINTER_TYPE_TOUCH" in l ? m === l.MSPOINTER_TYPE_TOUCH : false)
        );
      }
    }
    return false;
  };
  b.Widgets.DraggableEventArgs = function (m, k, l) {
    this._cancel = false;
    this._position = m;
    this._delta = k || { x: 0, y: 0 };
    this._domEvent = l;
    this._newPosition = {
      x: this._position.x + this._delta.x,
      y: this._position.y + this._delta.y,
    };
  };
  b.Widgets.DraggableEventArgs.prototype = {
    get_position: function () {
      return this._position;
    },
    get_newPosition: function () {
      return this._newPosition;
    },
    get_domEvent: function () {
      return this._domEvent;
    },
    get_cancel: function () {
      return this._cancel;
    },
    set_cancel: function (k) {
      this._cancel = k === true || k === "true";
    },
  };
  a.registerEnum(b.Widgets, "MouseButton", {
    None: 0,
    Left: 1,
    Middle: 2,
    Right: 4,
  });
})($telerik.$, Telerik.Web.UI);

/* END Telerik.Web.UI.Common.Widgets.Draggable.js */
/* START Telerik.Web.UI.Common.Widgets.Resizable.js */
Type.registerNamespace("Telerik.Web.UI.Widgets");
(function (a, b, f) {
  var e = function (g) {
    (function () {
      var i = {};
      a.extend(g, {
        trigger: function (l) {
          var m = i[l];
          if (!m) {
            return;
          }
          for (var n = 0; n < m.length; n++) {
            var k = Array.prototype.slice.call(arguments);
            k.shift();
            k.unshift(this);
            m[n].handler.apply(m[n].context, k);
          }
        },
        _bind: function (l, k) {
          a.each(l, function (m, n) {
            h(m, n, k);
          });
        },
        _unbind: function (l, k) {
          a.each(l, function (m, n) {
            j(m, n, k);
          });
        },
        _disposeEvents: function () {
          i = null;
        },
      });
      function h(l, m, k) {
        var n = i[l] || [];
        n.push({ handler: m, context: k });
        i[l] = n;
      }
      function j(l, m, k) {
        var n = i[l];
        if (!n) {
          return;
        }
        var p = -1;
        for (var o = 0; o < n.length; o++) {
          if (n[o].func == m && n[o].context == k) {
            p = o;
            break;
          }
        }
        if (p > -1) {
          n = n.splice(p, 1);
        }
        i[l] = n;
      }
    })();
  };
  var c = b.Widgets;
  c.Resizable = function (g, h) {
    this._element = g;
    this._handlesCollection = {};
    this.options = a.extend(
      {
        handleSize: 7,
        liveResize: false,
        enableFrameOverlay: false,
        appendHandleToElement: false,
        useTinyHandles: false,
        constraints: {
          minWidth: null,
          minHeight: null,
          maxWidth: null,
          maxHeight: null,
        },
        ownerDocument: document,
        handles: [
          { direction: "W", element: null },
          { direction: "NW", element: null },
          { direction: "N", element: null },
          { direction: "NE", element: null },
          { direction: "E", element: null },
          { direction: "SE", element: null },
          { direction: "S", element: null },
          { direction: "SW", element: null },
        ],
      },
      h || {}
    );
    e(this);
    this.initialize();
  };
  c.Resizable.prototype = {
    initialize: function () {
      this._initHandles();
    },
    add_resizeStart: function (g) {
      this._bind({ resizeStart: g });
    },
    remove_resizeStart: function (g) {
      this._unbind({ resizeStart: g });
    },
    add_resizing: function (g) {
      this._bind({ resizing: g });
    },
    remove_resizing: function (g) {
      this._unbind({ resizing: g });
    },
    add_resize: function (g) {
      this._bind({ resize: g });
    },
    remove_resize: function (g) {
      this._unbind({ resize: g });
    },
    add_resizeEnd: function (g) {
      this._bind({ resizeEnd: g });
    },
    remove_resizeEnd: function (g) {
      this._unbind({ resizeEnd: g });
    },
    add_destroy: function (g) {
      this._bind({ destroy: g });
    },
    remove_destroy: function (g) {
      this._unbind({ destroy: g });
    },
    get_element: function () {
      return this._element;
    },
    get_constraints: function () {
      return this.options.constraints;
    },
    set_constraints: function (g) {
      if (g) {
        if (
          (g.minWidth && g.maxWidth && g.minWidth > g.maxWidth) ||
          (g.minHeight && g.maxHeight && g.minHeight > g.maxHeight)
        ) {
          throw Error("Invalid Parameters");
        }
      }
      a.extend(
        this.options.constraints,
        g || {
          maxWidth: null,
          minWidth: null,
          maxHeight: null,
          minHeight: null,
        }
      );
      for (var h in this._handlesCollection) {
        this._setHandleConstraints(this._handlesCollection[h]);
      }
    },
    get_minWidth: function () {
      return this.options.constraints.minWidth;
    },
    set_minWidth: function (i) {
      var g = this.options.constraints;
      if (
        (isNaN(i) && i !== null && i !== "") ||
        (g.maxWidth && g.maxWidth < i)
      ) {
        throw Error("Invalid Parameters");
      }
      g.minWidth = i;
      for (var h in this._handlesCollection) {
        this._setHandleConstraints(this._handlesCollection[h]);
      }
    },
    get_maxWidth: function () {
      return this.options.constraints.maxWidth;
    },
    set_maxWidth: function (i) {
      var g = this.options.constraints;
      if (
        (isNaN(i) && i !== null && i !== "") ||
        (g.minWidth && g.minWidth > i)
      ) {
        throw Error("Invalid Parameters");
      }
      g.maxWidth = i;
      for (var h in this._handlesCollection) {
        this._setHandleConstraints(this._handlesCollection[h]);
      }
    },
    get_minHeight: function () {
      return this.options.constraints.minHeight;
    },
    set_minHeight: function (i) {
      var g = this.options.constraints;
      if (
        (isNaN(i) && i !== null && i !== "") ||
        (g.maxHeight && g.maxHeight < i)
      ) {
        throw Error("Invalid Parameters");
      }
      g.minHeight = i;
      for (var h in this._handlesCollection) {
        this._setHandleConstraints(this._handlesCollection[h]);
      }
    },
    get_maxHeight: function () {
      return this.options.constraints.maxHeight;
    },
    set_maxHeight: function (i) {
      var g = this.options.constraints;
      if (
        (isNaN(i) && i !== null && i !== "") ||
        (g.minHeight && g.minHeight > i)
      ) {
        throw Error("Invalid Parameters");
      }
      g.maxHeight = i;
      for (var h in this._handlesCollection) {
        this._setHandleConstraints(this._handlesCollection[h]);
      }
    },
    hideHandles: function () {
      for (var g in this._handlesCollection) {
        var h = this._handlesCollection[g];
        h._element.style.display = "none";
      }
    },
    showHandles: function () {
      for (var g in this._handlesCollection) {
        var h = this._handlesCollection[g];
        h._element.style.display = "";
      }
    },
    repositionHandles: function () {
      for (var g in this._handlesCollection) {
        this._positionHandle(this._handlesCollection[g]);
      }
    },
    repaint: function () {
      this._configureHandles();
    },
    _initHandles: function () {
      var h = this.options.handles;
      for (var j = 0; j < h.length; j++) {
        var g = null;
        if (h[j].element) {
          g = this._initExternalHandle(h[j]);
        } else {
          g = this._initHandle(h[j]);
        }
        g.add_dragStart(a.proxy(this._handleDragStart, this));
        g.add_dragging(a.proxy(this._handleDragging, this));
        g.add_dragEnd(a.proxy(this._handleDragEnd, this));
        this._handlesCollection[g._direction] = g;
      }
      this._configureHandles();
    },
    _initExternalHandle: function (h) {
      var g = new c.Handle(h.element, h.direction, {
        handle: h.element,
        cursorType: this._getCursorFromDirection(h.direction),
        enableFrameOverlay: this.options.enableFrameOverlay,
      });
      return g;
    },
    _initHandle: function (i) {
      var h = this._createHandleElement(i);
      var g = new c.Handle(h, i.direction, {
        ownerDocument: this.options.ownerDocument,
        cursorType: this._getCursorFromDirection(i.direction),
        enableFrameOverlay: this.options.enableFrameOverlay,
      });
      return g;
    },
    _createHandleElement: function (h) {
      var g = this.options.ownerDocument.createElement("div");
      g.style.position = "absolute";
      g.setAttribute("unselectable", "on");
      g.className = "rrHandle rr" + h.direction;
      return g;
    },
    _configureHandles: function () {
      for (var g in this._handlesCollection) {
        var h = this._handlesCollection[g];
        if (h.get_useExternalHandle()) {
          this._setHandleConstraints(h);
          continue;
        }
        this._appendHandleToDOM(h);
        this._applyElementsZIndex(h);
        this._sizeHandle(h);
        this._positionHandle(h);
        h._element.style.cssText = h._element.style.cssText;
        this._setHandleConstraints(h);
      }
    },
    _appendHandleToDOM: function (g) {
      if (!this._element.parentNode) {
        throw Error("Resizable element should be part of the DOM tree");
      }
      if (this.options.appendHandleToElement) {
        this._element.appendChild(g._element);
      } else {
        this.options.ownerDocument.body.appendChild(g._element);
      }
    },
    _applyElementsZIndex: function (g) {
      var h =
        this._element.style.zIndex ||
        $telerik.getComputedStyle(this._element, "z-index");
      g._element.style.zIndex = h || "";
    },
    _setHandleConstraints: function (h) {
      var l = !!h.get_useExternalHandle();
      var i = l ? 0 : this.options.handleSize;
      var j = a(h._element);
      var k = j.offset();
      var g;
      if (l) {
        g = {
          minWidth: this.options.constraints.minWidth
            ? this.options.constraints.minWidth -
              Math.ceil(a(this._element).innerWidth())
            : null,
          maxWidth: this.options.constraints.maxWidth
            ? this.options.constraints.maxWidth -
              Math.floor(a(this._element).innerWidth())
            : null,
          minHeight: this.options.constraints.minHeight
            ? this.options.constraints.minHeight -
              Math.ceil(a(this._element).innerHeight())
            : null,
          maxHeight: this.options.constraints.maxHeight
            ? this.options.constraints.maxHeight -
              Math.floor(a(this._element).innerHeight())
            : null,
        };
      } else {
        g = {
          minWidth: this.options.constraints.minWidth
            ? this.options.constraints.minWidth - this._element.offsetWidth
            : null,
          maxWidth: this.options.constraints.maxWidth
            ? this.options.constraints.maxWidth - this._element.offsetWidth
            : null,
          minHeight: this.options.constraints.minHeight
            ? this.options.constraints.minHeight - this._element.offsetHeight
            : null,
          maxHeight: this.options.constraints.maxHeight
            ? this.options.constraints.maxHeight - this._element.offsetHeight
            : null,
        };
      }
      h.set_constraints(null);
      if (h._direction == "E" || h._direction == "W") {
        h.set_minY(k.top);
        h.set_maxY(k.top + j.outerHeight());
      } else {
        if (h._direction == "N" || h._direction == "S") {
          h.set_minX(k.left);
          h.set_maxX(k.left + j.outerWidth());
        }
      }
      if (h._direction.indexOf("W") > -1) {
        if (g.maxWidth !== null) {
          h.set_minX(null);
          h.set_minX(h.get_position().x - g.maxWidth);
        }
        h.set_maxX(null);
        if (g.minWidth !== null) {
          h.set_maxX(h.get_position().x - g.minWidth + i);
        } else {
          h.set_maxX(this._getHandleOpositeConstraints(h._direction, l).x);
        }
      } else {
        if (h._direction.indexOf("E") > -1) {
          if (g.maxWidth !== null) {
            h.set_maxX(null);
            h.set_maxX(h.get_position().x + g.maxWidth + i);
          }
          h.set_minX(null);
          if (g.minWidth !== null) {
            h.set_minX(h.get_position().x + g.minWidth);
          } else {
            h.set_minX(this._getHandleOpositeConstraints(h._direction, l).x);
          }
        }
      }
      if (h._direction.indexOf("N") > -1) {
        if (g.maxHeight !== null) {
          h.set_minY(null);
          h.set_minY(h.get_position().y - g.maxHeight);
        }
        h.set_maxY(null);
        if (g.minHeight !== null) {
          h.set_maxY(h.get_position().y - g.minHeight + i);
        } else {
          h.set_maxY(this._getHandleOpositeConstraints(h._direction, l).y);
        }
      } else {
        if (h._direction.indexOf("S") > -1) {
          if (g.maxHeight !== null) {
            h.set_maxY(null);
            h.set_maxY(h.get_position().y + g.maxHeight + i);
          }
          h.set_minY(null);
          if (g.minHeight !== null) {
            h.set_minY(h.get_position().y + g.minHeight);
          } else {
            h.set_minY(this._getHandleOpositeConstraints(h._direction, l).y);
          }
        }
      }
    },
    _getHandleOpositeConstraints: function (g, i) {
      var j = { x: null, y: null };
      var h = i ? 0 : d(this.options.handleSize);
      if (g.toLowerCase().indexOf("w") > -1) {
        j.x = a(this._element).offset().left + a(this._element).width() + h;
      } else {
        if (g.toLowerCase().indexOf("e") > -1) {
          j.x = a(this._element).offset().left - h;
        }
      }
      if (g.toLowerCase().indexOf("n") > -1) {
        j.y = a(this._element).offset().top + a(this._element).height() + h;
      } else {
        if (g.toLowerCase().indexOf("s") > -1) {
          j.y = a(this._element).offset().top - h;
        }
      }
      return j;
    },
    _sizeHandle: function (h) {
      var g = h.get_direction();
      if (this.options.useTinyHandles) {
        h._element.style.width = h._element.style.height =
          this.options.handleSize + "px";
      } else {
        if (g.indexOf("W") > -1 || g.indexOf("E") > -1) {
          h._element.style.width = this.options.handleSize + "px";
        } else {
          h._element.style.width =
            Math.max(
              this.options.handleSize,
              parseFloat(this._element.clientWidth) - this.options.handleSize
            ) + "px";
        }
        if (g.indexOf("N") > -1 || g.indexOf("S") > -1) {
          h._element.style.height = this.options.handleSize + "px";
        } else {
          h._element.style.height =
            Math.max(
              this.options.handleSize,
              parseFloat(this._element.clientHeight) - this.options.handleSize
            ) + "px";
        }
      }
    },
    _positionHandle: function (p) {
      var t = this;
      var s = t.options;
      var g = s.appendHandleToElement && t._isRootPositioned();
      if (g && s.useTinyHandles) {
        return t._positionHandleStatic(p);
      }
      var l = p.get_direction();
      var m = t._element;
      var h = m.clientHeight;
      var i = m.clientWidth;
      var r = l.indexOf("S") > -1 ? parseFloat(h) : 0;
      var u = l.indexOf("E") > -1 ? parseFloat(i) : 0;
      var q = p._element.style;
      var k =
        parseFloat(h) > s.handleSize / 2 && (l == "E" || l == "W") ? 1 : -1;
      var j =
        parseFloat(i) > s.handleSize / 2 && (l == "N" || l == "S") ? 1 : -1;
      var o = d(s.handleSize);
      var n = g ? { top: 0, left: 0 } : t._getPosition(m);
      q.top = n.top + r + k * o + "px";
      q.left = n.left + u + j * o + "px";
      if (s.useTinyHandles) {
        if (l == "S" || l == "N") {
          q.left = n.left + d(i) - o + "px";
        }
        if (l == "E" || l == "W") {
          q.top = n.top + d(h) - o + "px";
        }
      }
    },
    _positionHandleStatic: function (h) {
      if (h._positioned) {
        return;
      }
      var g = h.get_direction();
      var i = "-" + d(this.options.handleSize) + "px";
      var j = {};
      if (g.indexOf("N") > -1) {
        j.top = 0;
      }
      if (g.indexOf("W") > -1) {
        j.left = 0;
      }
      if (g.indexOf("E") > -1) {
        j.right = 0;
      }
      if (g.indexOf("S") > -1) {
        j.bottom = 0;
      }
      if (g == "N" || g == "S") {
        j.left = "50%";
        j.marginLeft = i;
      }
      if (g == "W" || g == "E") {
        j.top = "50%";
        j.marginTop = i;
      }
      a(h._element).css(j);
      h._positioned = true;
    },
    _isRootPositioned: function () {
      var g =
        this._isRootIndirectlyPositioned() ||
        $telerik.getComputedStyle(this._element, "position") != "static";
      return g;
    },
    _isRootIndirectlyPositioned: function () {
      var g = this._element;
      return (
        $telerik.getComputedStyle(g, "transform") != "none" &&
        $telerik.getComputedStyle(g, "MozTransform") != "none" &&
        $telerik.getComputedStyle(g, "webkitTransform") != "none" &&
        $telerik.getComputedStyle(g, "OTransform") != "none" &&
        $telerik.getComputedStyle(g, "msTransform") != "none"
      );
    },
    _getPosition: function (g) {
      var k = { top: g.offsetTop, left: g.offsetLeft },
        h = g.offsetParent;
      while (h) {
        k.top += h.offsetTop;
        k.left += h.offsetLeft;
        var i = $telerik.getComputedStyle(h, "overflowX");
        var j = $telerik.getComputedStyle(h, "overflowY");
        if (j === "auto" || j === "scroll") {
          k.top -= h.scrollTop;
        }
        if (i === "auto" || i === "scroll") {
          k.left -= h.scrollLeft;
        }
        h = h.offsetParent;
      }
      return k;
    },
    _toggleDocumentCursor: function (g) {
      if (typeof g == "string") {
        this.options.ownerDocument.body.style.cursor = this._getCursorFromDirection(
          g
        );
      } else {
        this.options.ownerDocument.body.style.cursor = "";
      }
    },
    _getCursorFromDirection: function (g) {
      if (g) {
        return g.toLowerCase() + "-resize";
      } else {
        return null;
      }
    },
    _handleDragStart: function (i, g) {
      this._setHandleConstraints(i);
      var k = new c.Resizable.ResizeableEventArgs(
        i.get_direction(),
        null,
        g.get_domEvent()
      );
      this.trigger("resizeStart", k);
      if (!k._cancel) {
        this._toggleDocumentCursor(i.get_direction());
      }
      g.set_cancel(k._cancel);
      var j = this.options;
      if (j.liveResize && !k._cancel) {
        var h = this._element;
        this.resizeHelper = {
          width: h.clientWidth,
          height: h.clientHeight,
          offset: j.appendHandleToElement
            ? { left: h.offsetLeft, top: h.offsetTop }
            : a(h).offset(),
        };
      }
      delete this._positionChangedX;
      delete this._positionChangedY;
    },
    _handleDragging: function (k, g) {
      var h = { x: g._delta.x, y: g._delta.y },
        i = k.get_direction(),
        m = this.options,
        j = this._element,
        l = m.appendHandleToElement;
      if (k.get_useExternalHandle()) {
        if (i == "N" || i == "S") {
          h.x = 0;
          h.y = Math.min(h.y, j.clientHeight);
        }
        if (i == "E" || i == "W") {
          h.x = Math.min(h.x, j.clientWidth);
          h.y = 0;
        }
      }
      var o = new c.Resizable.ResizeableEventArgs(i, h, g.get_domEvent());
      this.trigger("resizing", o);
      g.set_cancel(o._cancel || l);
      if (m.liveResize && !o._cancel) {
        var n;
        if (!l) {
          n = this._getCornerHandesPositions();
        }
        this._applyElementSizing(i, h);
        this.trigger("resize", o);
        if (n) {
          this._validateHandlesPositions(n, g._delta, i);
        }
      }
    },
    _validateHandlesPositions: function (j, g, h) {
      var i = this._getCornerHandesPositions();
      if (h == "E" || h == "W") {
        this._validateDeltaX(g, j, i, h == "E" ? "se" : "sw");
      } else {
        if (h == "S" || h == "N") {
          this._validateDeltaY(g, j, i, h == "S" ? "se" : "ne");
        } else {
          if (h == "SW") {
            this._validateDeltaX(g, j, i, "nw");
            this._validateDeltaY(g, j, i, "se");
          } else {
            if (h == "NW") {
              this._validateDeltaX(g, j, i, "sw");
              this._validateDeltaY(g, j, i, "ne");
            } else {
              if (h == "NE") {
                this._validateDeltaX(g, j, i, "se");
                this._validateDeltaY(g, j, i, "nw");
              } else {
                if (h == "SE") {
                  this._validateDeltaX(g, j, i, "ne");
                  this._validateDeltaY(g, j, i, "sw");
                }
              }
            }
          }
        }
      }
    },
    _validateDeltaX: function (g, j, i, h) {
      var k = "_positionChangedX" in this;
      if (!k && g.x != 0) {
        this._positionChangedX = j[h]["left"] != i[h]["left"];
      }
      if (this._positionChangedX === false) {
        g.x = 0;
      }
    },
    _validateDeltaY: function (g, j, i, h) {
      var k = "_positionChangedY" in this;
      if (!k && g.y != 0) {
        this._positionChangedY = j[h]["top"] != i[h]["top"];
      }
      if (this._positionChangedY === false) {
        g.y = 0;
      }
    },
    _getCornerHandesPositions: function () {
      var i = this._getHandleElement("SE");
      var g = this._getHandleElement("NE");
      var j = this._getHandleElement("SW");
      var h = this._getHandleElement("NW");
      return i && g && j && h
        ? {
            se: { top: i.offsetTop, left: i.offsetLeft },
            ne: { top: g.offsetTop, left: g.offsetLeft },
            sw: { top: j.offsetTop, left: j.offsetLeft },
            nw: { top: h.offsetTop, left: h.offsetLeft },
          }
        : f;
    },
    _getHandleElement: function (g) {
      var h = this._handlesCollection[g];
      return h && h._element ? h._element : f;
    },
    _handleDragEnd: function (j, g) {
      var h = g._delta,
        i = j.get_direction();
      if (j.get_useExternalHandle()) {
        if (i == "N" || i == "S") {
          h.x = 0;
          h.y = Math.min(h.y, this._element.clientHeight);
        }
        if (i == "E" || i == "W") {
          h.x = Math.min(h.x, this._element.clientWidth);
          h.y = 0;
        }
      }
      this._toggleDocumentCursor();
      this._configureHandles();
      var k = new c.Resizable.ResizeableEventArgs(
        j.get_direction(),
        h,
        g.get_domEvent()
      );
      this.trigger("resizeEnd", k);
    },
    _applyElementSizing: function (i, g) {
      var j = 1,
        k = 1;
      if (i.indexOf("W") > -1) {
        k = -1;
        $telerik
          .$(this._element)
          .css("left", parseFloat(this.resizeHelper.offset.left) + g.x);
      }
      if (i.indexOf("N") > -1) {
        j = -1;
        $telerik
          .$(this._element)
          .css("top", parseFloat(this.resizeHelper.offset.top) + g.y);
      }
      a(this._element)
        .innerWidth(parseFloat(this.resizeHelper.width) + k * g.x)
        .innerHeight(parseFloat(this.resizeHelper.height) + j * g.y);
      for (var h in this._handlesCollection) {
        if (h != i) {
          this._positionHandle(this._handlesCollection[h]);
        }
      }
    },
    dispose: function () {
      this.trigger("destroy", Sys.EventArgs.Empty);
      for (var g in this._handlesCollection) {
        var h = this._handlesCollection[g];
        if (!h.get_useExternalHandle()) {
          if (h._element.parentNode) {
            h._element.parentNode.removeChild(h._element);
          }
        }
        h.dispose();
      }
      this._element = null;
      this._handlesCollection = null;
      this.options = null;
    },
  };
  function d(g) {
    return g / 2;
  }
  c.Resizable.ResizeableEventArgs = function (h, g, i) {
    this._cancel = false;
    this._delta = g;
    this._direction = h;
    this._domEvent = i;
  };
  c.Resizable.ResizeableEventArgs.prototype = {
    get_delta: function () {
      return this._delta;
    },
    get_direction: function () {
      return this._direction;
    },
    get_domEvent: function () {
      return this._domEvent;
    },
    get_cancel: function () {
      return this._cancel;
    },
    set_cancel: function (g) {
      this._cancel = g === true || g === "true";
    },
  };
  c.Handle = function (h, g, i) {
    this._direction = g;
    this.options = a.extend(this.options, i || {});
    Telerik.Web.UI.Widgets.Handle.initializeBase(this, [h, i]);
  };
  c.Handle.prototype = {
    get_direction: function () {
      return this._direction;
    },
  };
  Telerik.Web.UI.Widgets.Draggable.registerClass(
    "Telerik.Web.UI.Widgets.Draggable"
  );
  Telerik.Web.UI.Widgets.Handle.registerClass(
    "Telerik.Web.UI.Widgets.Handle",
    Telerik.Web.UI.Widgets.Draggable
  );
})($telerik.$, Telerik.Web.UI);

/* END Telerik.Web.UI.Common.Widgets.Resizable.js */
/* START Telerik.Web.UI.Common.ShortCutManager.ShortCutManagerScripts.js */
(function () {
  Type.registerNamespace("Telerik.Web.UI");
  var a = Telerik.Web.UI;
  a.ShortCut = function (c, d, b) {
    this._name = c;
    this._shortcutString = "";
    this._callBack = b;
    this.CtrlKey = false;
    this.LeftCtrlKey = false;
    this.ShiftKey = false;
    this.LeftShiftKey = false;
    this.AltKey = false;
    this.LeftAltKey = false;
    this.CmdKey = false;
    this.KeyCode = 0;
    this.setShortCut(d);
  };
  a.ShortCut.prototype = {
    get_name: function () {
      return this._name;
    },
    set_name: function (b) {
      this._name = b;
    },
    get_shortCutString: function () {
      return this._shortcutString;
    },
    setShortCut: function (b) {
      this._parseShortcutString(b);
      this._shortcutString = b;
    },
    get_callBack: function () {
      return this._callBack;
    },
    set_callBack: function (b) {
      this._callBack = b;
    },
    _parseShortcutString: function (c) {
      if ("string" == typeof c) {
        this.CtrlKey = false;
        this.LeftCtrlKey = false;
        this.ShiftKey = false;
        this.LeftShiftKey = false;
        this.AltKey = false;
        this.LeftAltKey = false;
        this.CmdKey = false;
        this.KeyCode = 0;
        c = c.replace(/\s*/gi, "");
        c = c.replace(/\+\+/gi, "+PLUS");
        var e = c.split("+");
        var d = "";
        for (var b = 0; b < e.length; b++) {
          d = e[b].toUpperCase();
          switch (d) {
            case "LCTRL":
              this.LeftCtrlKey = true;
            case "CTRL":
              this.CtrlKey = true;
              break;
            case "LSHIFT":
              this.LeftShiftKey = true;
            case "SHIFT":
              this.ShiftKey = true;
              break;
            case "LALT":
              this.LeftAltKey = true;
            case "ALT":
              this.AltKey = true;
              break;
            case "COMMAND":
            case "CMD":
              this.CmdKey = true;
              break;
            case "F1":
              this.KeyCode = 112;
              break;
            case "F2":
              this.KeyCode = 113;
              break;
            case "F3":
              this.KeyCode = 114;
              break;
            case "F4":
              this.KeyCode = 115;
              break;
            case "F5":
              this.KeyCode = 116;
              break;
            case "F6":
              this.KeyCode = 117;
              break;
            case "F7":
              this.KeyCode = 118;
              break;
            case "F8":
              this.KeyCode = 119;
              break;
            case "F9":
              this.KeyCode = 120;
              break;
            case "F10":
              this.KeyCode = 121;
              break;
            case "F11":
              this.KeyCode = 122;
              break;
            case "F12":
              this.KeyCode = 123;
              break;
            case "ENTER":
              this.KeyCode = 13;
              break;
            case "HOME":
              this.KeyCode = 36;
              break;
            case "END":
              this.KeyCode = 35;
              break;
            case "LEFT":
              this.KeyCode = 37;
              break;
            case "RIGHT":
              this.KeyCode = 39;
              break;
            case "UP":
              this.KeyCode = 38;
              break;
            case "DOWN":
              this.KeyCode = 40;
              break;
            case "PAGEUP":
              this.KeyCode = 33;
              break;
            case "PAGEDOWN":
              this.KeyCode = 34;
              break;
            case "SPACE":
              this.KeyCode = 32;
              break;
            case "TAB":
              this.KeyCode = 9;
              break;
            case "BACK":
              this.KeyCode = 8;
              break;
            case "CONTEXT":
              this.KeyCode = 93;
              break;
            case "ESCAPE":
            case "ESC":
              this.KeyCode = 27;
              break;
            case "DELETE":
            case "DEL":
              this.KeyCode = 46;
              break;
            case "INSERT":
            case "INS":
              this.KeyCode = 45;
              break;
            case "PLUS":
              this.KeyCode = "+".charCodeAt(0);
              break;
            default:
              this.KeyCode = d.charCodeAt(0);
              break;
          }
        }
      } else {
        throw { description: "Invalid shortcut string" };
      }
    },
  };
  a.ShortCut.registerClass("Telerik.Web.UI.ShortCut", null);
})();
(function () {
  Type.registerNamespace("Telerik.Web.UI");
  var a = Telerik.Web.UI;
  a.ShortCutManager = function (b) {
    this._shortcuts = [];
    this.addShortCuts(b);
  };
  a.ShortCutManager.prototype = {
    addShortCuts: function (c) {
      if (!c) {
        return;
      }
      if (typeof c == "string") {
        c = Sys.Serialization.JavaScriptSerializer.deserialize(c);
      }
      for (var b = 0; b < c.length; b++) {
        this.addShortCut(c[b][0], c[b][1], c[b][2]);
      }
    },
    addShortCut: function (d, e, b) {
      var c = new a.ShortCut(d, e, b);
      c.HashValue = this._getShortCutHashValue(c);
      this._shortcuts[c.HashValue] = c;
    },
    removeShortCut: function (c) {
      var b = this.findShortCutByName(c);
      if (b) {
        this._shortcuts[b.HashValue] = null;
      }
    },
    setShortCut: function (b, c) {
      this.removeShortCut(b);
      this.addShortCut(b, c);
    },
    isShortCutHit: function (b) {
      var d = null != b.ctrlLeft ? b.ctrlLeft : b.ctrlKey;
      var f = null != b.shiftLeft ? b.shiftLeft : b.shiftKey;
      var c = null != b.altLeft ? b.altLeft : b.altKey;
      return this._hitTest(
        b.keyCode,
        b.ctrlKey,
        d,
        b.shiftKey,
        f,
        b.altKey,
        c,
        !!b.metaKey
      );
    },
    _hitTest: function (f, d, h, j, i, b, g, c) {
      var e = this._getHashValue(f, d, h, j, i, b, g, c);
      return this._shortcuts[e];
    },
    _getHashValue: function (f, d, h, j, i, b, g, c) {
      var k = f & 65535;
      var e = 0;
      e |= d ? 1 << 0 : 0;
      e |= j ? 1 << 2 : 0;
      e |= b ? 1 << 4 : 0;
      e |= c ? 1 << 8 : 0;
      k |= e << 16;
      return k;
    },
    _getShortCutHashValue: function (b) {
      return this._getHashValue(
        b.KeyCode,
        b.CtrlKey,
        b.LeftCtrlKey,
        b.ShiftKey,
        b.LeftShiftKey,
        b.AltKey,
        b.LeftAltKey,
        b.CmdKey
      );
    },
    findShortCutByName: function (d) {
      var b;
      for (var c in this._shortcuts) {
        b = this._shortcuts[c];
        if (null != b && b._name == d) {
          return b;
        }
      }
      return null;
    },
  };
  a.ShortCutManager.registerClass("Telerik.Web.UI.ShortCutManager", null);
})();

/* END Telerik.Web.UI.Common.ShortCutManager.ShortCutManagerScripts.js */
/* START Telerik.Web.UI.Common.AnimationFramework.AnimationFramework.js */
(function (b, a) {
  var e = "cID",
    f = "completeCallback",
    d = "key",
    g = "display",
    p = "random",
    k = 50,
    r = document.createElement("p").style,
    s = "transition" in r,
    v = {
      queue: true,
      specialEasing: true,
      step: true,
      progress: true,
      start: true,
      done: true,
      fail: true,
      always: true,
    },
    u = {
      ease: "easeInQuad",
      easeIn: "easeInQuad",
      easeOut: "easeOutQuad",
      easeInOut: "easeInOutQuad",
    },
    l = [
      "linear",
      "ease",
      "easeIn",
      "easeOut",
      "easeInOut",
      "easeInQuad",
      "easeOutQuad",
      "easeInOutQuad",
      "easeInCubic",
      "easeOutCubic",
      "easeInOutCubic",
      "easeInQuart",
      "easeOutQuart",
      "easeInOutQuart",
      "easeInQuint",
      "easeOutQuint",
      "easeInOutQuint",
      "easeInSine",
      "easeOutSine",
      "easeInOutSine",
      "easeInExpo",
      "easeOutExpo",
      "easeInOutExpo",
      "easeInCirc",
      "easeOutQuad",
      "easeInOutQuad",
      "easeInBack",
      "easeOutBack",
      "easeInOutBack",
    ],
    m = { easeIn: "ease-in", easeOut: "ease-out", easeInOut: "ease-in-out" },
    i = {
      linear: true,
      ease: true,
      "ease-in": true,
      "ease-out": true,
      "ease-in-out": true,
      easeIn: true,
      easeOut: true,
      easeInOut: true,
    },
    h = {
      easeInQuad: [0.55, 0.08500000000000001, 0.6800000000000001, 0.53],
      easeOutQuad: [0.25, 0.46, 0.45, 0.94],
      easeInOutQuad: [0.455, 0.03, 0.515, 0.955],
      easeInCubic: [0.55, 0.055, 0.675, 0.19],
      easeOutCubic: [0.215, 0.61, 0.355, 1],
      easeInOutCubic: [0.645, 0.045, 0.355, 1],
      easeInQuart: [0.895, 0.03, 0.6850000000000001, 0.22],
      easeOutQuart: [0.165, 0.84, 0.44, 1],
      easeInOutQuart: [0.77, 0, 0.175, 1],
      easeInQuint: [0.755, 0.05, 0.855, 0.06],
      easeOutQuint: [0.23, 1, 0.32, 1],
      easeInOutQuint: [0.86, 0, 0.07000000000000001, 1],
      easeInSine: [0.47, 0, 0.745, 0.715],
      easeOutSine: [0.39, 0.575, 0.565, 1],
      easeInOutSine: [0.445, 0.05, 0.55, 0.95],
      easeInExpo: [0.95, 0.05, 0.795, 0.035],
      easeOutExpo: [0.19, 1, 0.22, 1],
      easeInOutExpo: [1, 0, 0, 1],
      easeInCirc: [0.6, 0.04, 0.98, 0.335],
      easeOutCirc: [0.075, 0.82, 0.165, 1],
      easeInOutCirc: [0.785, 0.135, 0.15, 0.86],
      easeInBack: [0.6, -0.28, 0.735, 0.045],
      easeOutBack: [0.175, 0.885, 0.32, 1.275],
      easeInOutBack: [0.6800000000000001, -0.55, 0.265, 1.55],
    },
    t,
    j = { transition: "none" };
  Array.forEach(["Moz", "webkit", "O", "ms"], function (z) {
    var y = z,
      w = y + "Transition" in r ? y : null,
      x;
    if (w) {
      x = w.toLowerCase();
      t = x === "o" || x === "webkit" ? x + "TransitionEnd" : "transitionend";
      return false;
    }
  });
  b.transition = function (A, D, y, z, x) {
    var w, B, C;
    if (z && z.toLowerCase() == p) {
      z = l[Math.round(Math.random() * (l.length - 1))];
    }
    if (s && (i[z] || h[z])) {
      w = a(A);
      if (a.isPlainObject(y)) {
        C = y;
        for (B in v) {
          if (B in C) {
            n(arguments);
            return;
          }
        }
      } else {
        C = { duration: y, easing: z, complete: x };
      }
      c(w, D, C);
    } else {
      n(arguments);
    }
  };
  a.fn.transition = function (z, x, y, w) {
    b.transition(this, z, x, y, w);
  };
  b.stopTransition = function (x, w, y) {
    return q(a(x), w || false, y || false);
  };
  a.fn.stopTransition = function (w, x) {
    return b.stopTransition(this, w || false, x || false);
  };
  function n(y) {
    var w = a(y[0]),
      B = 1,
      C = y.length,
      x = [],
      A = y[3];
    var z = y[4];
    y[3] = u[A] || A;
    for (; B < C - 1; B++) {
      x[B - 1] = y[B];
    }
    w.animate.apply(w, x).promise().done(z);
  }
  function c(w, D, C) {
    var z = m[C.easing] || C.easing || "easeOutQuad",
      E = [],
      y = parseFloat(C.duration),
      B,
      x;
    for (B in D) {
      B = B.replace(/[A-Z]/g, function (F) {
        return "-" + F.toLowerCase();
      });
      E.push(B);
    }
    if (h[z]) {
      z = "cubic-bezier(" + h[z].join(",") + ")";
    }
    w.data(d, E);
    var A = function () {
      var F = w.data(e),
        G = typeof arguments[0] === "boolean" ? arguments[0] : true;
      if (F) {
        clearTimeout(F);
        F = null;
      }
      w.off(t, A).removeData(d).removeData(e).removeData(f).css(j);
      if (C.complete && G) {
        C.complete.call(w.eq(0));
      }
    };
    w.data(f, A);
    w.on(t, A);
    x = setTimeout(A, Math.ceil(y + k));
    w.data(e, x);
    w.css(g);
    w.css(
      a.extend(
        {
          "transition-duration": y / 1000 + "s",
          "transition-timing-function": z,
          "transition-property": E.join(", "),
        },
        D
      )
    );
  }
  function q(w, z, B) {
    var y = w.data(f),
      x = w.data(d),
      D = !B && x,
      C,
      A;
    if (s) {
      if (D) {
        A = getComputedStyle(w[0]);
        C = o(x, A);
      }
      if (y) {
        y.call(w, B);
      }
      if (D) {
        w.css(C);
      }
      return w;
    } else {
      return w.stop(z, B);
    }
  }
  function o(w) {
    var x = {},
      y = arguments[1];
    Array.forEach(w, function (z) {
      x[z] = y[z];
    });
    return x;
  }
})($telerik, $telerik.$);

/* END Telerik.Web.UI.Common.AnimationFramework.AnimationFramework.js */
/* START Telerik.Web.UI.Common.Animation.AnimationScripts.js */
Type.registerNamespace("Telerik.Web.UI.Animations");
(function () {
  var a = $telerik.$;
  var b = Telerik.Web.UI;
  b.Animations.playJQueryAnimation = function (d, f, o, i, n, l, k, e, m) {
    if (!d) {
      return;
    }
    if (!f) {
      f = 2;
    }
    if (!o) {
      o = new Telerik.Web.UI.Bounds(1, 1, 1, 1);
    }
    if (!i) {
      i = new Telerik.Web.UI.Bounds(1, 1, 1, 1);
    }
    var c = e ? e : 500;
    if (!n) {
      n = 32;
    }
    n += "";
    var q = parseInt(n.substr(0, 1), 10);
    var j = parseInt(n.substr(1, 1), 10);
    if (l) {
      l();
    }
    a(d).stopTransition(false, true);
    if (f == 2) {
      a(d).css({ left: i.x, top: i.y }).fadeIn(c, k);
      return;
    }
    if (f == 8) {
      var g = $telerik.getClientBounds();
      var h = $telerik.getClientBounds();
      o.x = h.width / 2;
      o.y = h.height;
      switch (j) {
        case 2:
          o.x = i.x;
          break;
        case 3:
          o.x = g.width;
          break;
        case 1:
          o.x = g.x;
      }
      switch (q) {
        case 2:
          o.y = i.y;
          break;
        case 1:
          o.y = g.y - i.height;
          break;
        case 3:
          o.y = g.height;
      }
    } else {
      if (f == 4) {
        o.x = i.x;
        o.y = i.y;
        o.width = i.width;
        o.height = 1;
        switch (j) {
          case 2:
            o.x = i.x;
            break;
          case 3:
            o.x = i.x;
            break;
          case 1:
            var p = i.x;
            if (2 == q) {
              p += i.width;
            }
            o.x = p;
        }
        switch (q) {
          case 2:
            o.y = i.y;
            o.height = i.height;
            o.width = 1;
            break;
          case 1:
            o.y = i.y + i.height;
            break;
          case 3:
            o.y = i.y;
        }
      }
    }
    a(d)
      .css({
        width: o.width,
        height: o.height,
        left: o.x,
        top: o.y,
        opacity: 0.1,
        filter: "alpha(opacity=10)",
      })
      .show()
      .transition(
        {
          width: i.width,
          height: i.height,
          left: i.x,
          top: i.y,
          opacity: m ? m : 1,
        },
        c,
        null,
        k
      );
  };
  a.fx.prototype.oldstep = a.fx.prototype.step;
  a.fx.prototype.step = function (d) {
    var e = this.prop;
    if (
      e == "left" ||
      e == "top" ||
      e == "telerikCarouselAngle" ||
      e == "telerikCoverFlowIndex"
    ) {
      if (this.elem.getAttribute("paused")) {
        if (!this.elem.getAttribute("elapsedTime")) {
          var c = +new Date() - this.startTime;
          this.elem.setAttribute("elapsedTime", c);
        }
        return true;
      }
      if (this.elem.getAttribute("elapsedTime")) {
        this.startTime = +new Date() - this.elem.getAttribute("elapsedTime");
        this.elem.removeAttribute("elapsedTime");
      }
    }
    return this.oldstep(d);
  };
  b.Animations.jMoveBase = function (f, e, c, d) {
    b.Animations.jMoveBase.initializeBase(this);
    this._owner = f;
    this._element = e;
    this._duration = c;
    this._events = null;
    this._animationEndedDelegate = null;
    this._isPlaying = false;
    this._isPaused = false;
    this._isCyclic = false;
    this._easing = d;
    this._isDisposed = false;
  };
  b.Animations.jMoveBase.prototype = {
    initialize: function () {
      b.Animations.jMoveBase.callBaseMethod(this, "initialize");
      this._animationEndedDelegate = Function.createDelegate(
        this,
        this._animationEnded
      );
    },
    dispose: function () {
      if (this._isDisposed) {
        return;
      }
      this._getAnimationQuery().stopTransition(true, false);
      this._owner = null;
      this._element = null;
      this._animationEndedDelegate = null;
      b.Animations.jMoveBase.callBaseMethod(this, "dispose");
      this._isDisposed = true;
    },
    get_isPlaying: function () {
      return this._isPlaying;
    },
    get_isCyclic: function () {
      return this._isCyclic;
    },
    set_isCyclic: function (c) {
      this._isCyclic = c;
    },
    get_easing: function () {
      return this._easing;
    },
    set_easing: function (c) {
      this._easing = c;
    },
    get_duration: function () {
      return this._duration;
    },
    set_duration: function (c) {
      this._duration = c;
    },
    get_isActive: function () {
      return true;
    },
    play: function (h) {
      var e = this._getAnimationQuery().filter("[paused='true']");
      var d = e.attr("paused");
      e.removeAttr("paused");
      if (d && e.attr("elapsedTime")) {
        this._isPlaying = true;
        this._isPaused = false;
      } else {
        var c = this._owner;
        var g = c.get_frameDuration();
        if (
          this._isPaused &&
          this._isCyclic &&
          g > 0 &&
          !h &&
          c._setAnimationTimeout
        ) {
          c._setAnimationTimeout(g);
        } else {
          var f = this._animationStarted();
          if (f != false) {
            this._playAnimation();
            this._isPlaying = true;
            this._isPaused = false;
          }
        }
      }
    },
    stop: function () {
      this._getAnimationQuery().stopTransition(false, this._isPlaying);
      this._isPlaying = false;
    },
    pause: function () {
      if (this._isPlaying) {
        this._getAnimationQuery().filter(":animated").attr("paused", true);
      }
      this._isPlaying = false;
      this._isPaused = true;
    },
    add_started: function (c) {
      this.get_events().addHandler("started", c);
    },
    remove_started: function (c) {
      this.get_events().removeHandler("started", c);
    },
    add_ended: function (c) {
      this.get_events().addHandler("ended", c);
    },
    remove_ended: function (c) {
      this.get_events().removeHandler("ended", c);
    },
    _getAnimationQuery: function () {
      return a(this._element);
    },
    _playAnimation: function () {},
    _animationStarted: function () {
      var c = new Sys.CancelEventArgs();
      this._raiseEvent("started", c);
      return !c.get_cancel();
    },
    _animationEnded: function () {
      this._isPlaying = false;
      this._raiseEvent("ended", Sys.EventArgs.Empty);
    },
    _raiseEvent: function (d, c) {
      var e = this.get_events().getHandler(d);
      if (e) {
        if (!c) {
          c = Sys.EventArgs.Empty;
        }
        e(this, c);
      }
    },
  };
  b.Animations.jMoveBase.registerClass(
    "Telerik.Web.UI.Animations.jMoveBase",
    Sys.Component
  );
  b.Animations.jMove = function (g, e, c, f, h, d) {
    b.Animations.jMove.initializeBase(this, [g, e, c, d]);
    this._horizontal = typeof f == "undefined" || f == null ? 0 : f;
    this._vertical = typeof h == "undefined" || h == null ? 0 : h;
  };
  b.Animations.jMove.prototype = {
    initialize: function () {
      b.Animations.jMove.callBaseMethod(this, "initialize");
    },
    dispose: function () {
      b.Animations.jMove.callBaseMethod(this, "dispose");
    },
    get_vertical: function () {
      return this._vertical;
    },
    set_vertical: function (c) {
      this._vertical = c;
    },
    get_horizontal: function () {
      return this._horizontal;
    },
    set_horizontal: function (c) {
      this._horizontal = c;
    },
    _getFinalPosition: function () {
      return isNaN(parseInt(this._vertical, 10))
        ? this._horizontal
        : this._vertical;
    },
    _getAnimatedProperty: function () {
      return isNaN(parseInt(this._vertical, 10)) ? "left" : "top";
    },
    _getPosition: function () {
      return this._element.style[this._getAnimatedProperty()];
    },
    _playAnimation: function () {
      var f = this._getFinalPosition();
      var c = this._getAnimationQuery();
      var d = this._getAnimatedProperty();
      var g = { queue: true };
      g[d] = f;
      var e = {};
      e[d] = f;
      c.stopTransition(true, !this._isCyclic).transition(
        e,
        this._duration,
        this._easing || "ease",
        this._animationEndedDelegate
      );
    },
  };
  b.Animations.jMove.registerClass(
    "Telerik.Web.UI.Animations.jMove",
    b.Animations.jMoveBase
  );
  b.Animations.jCarousel = function (i, f, g, d, h, c, e) {
    b.Animations.jCarousel.initializeBase(this, [i, f, d, e]);
    this._items = g;
    this._minScale = h.minScale;
    this._x = h.xO;
    this._y = h.yO;
    this._xRadius = h.xR;
    this._yRadius = h.yR;
    this._customProperties = c;
    this._angle = Math.PI / 2;
    this._query = null;
  };
  b.Animations.jCarousel.prototype = {
    initialize: function () {
      b.Animations.jCarousel.callBaseMethod(this, "initialize");
    },
    dispose: function () {
      b.Animations.jCarousel.callBaseMethod(this, "dispose");
      this._items = null;
      this._customProperties = null;
      this._query = null;
    },
    get_angle: function () {
      return this._angle;
    },
    set_angle: function (c) {
      this._angle = c;
    },
    _getFinalPosition: function () {
      return this._angle;
    },
    _getAnimatedProperty: function () {
      return "telerikCarouselAngle";
    },
    _getAnimationQuery: function () {
      var c = this._query;
      if (!c) {
        a.each(this._items, function (e, f) {
          var d = this.element;
          if (!c) {
            c = a(d);
          } else {
            c = c.add(d);
          }
        });
        this._query = c;
      }
      return c;
    },
    _playAnimation: function () {
      this._getAnimationQuery().stopTransition(true, !this._isCyclic);
      var e = this._items;
      var f = e.length > 0 ? (Math.PI * 2) / e.length : 0;
      var c = this._angle;
      var d = this;
      a.each(e, function (g, h) {
        if (c.toString().indexOf("e") > -1) {
          c = Math.round(c * 10000) / 10000;
        }
        a(this.element).stop(true, false).transition(
          { queue: true, telerikCarouselAngle: c },
          {
            xO: d._x,
            yO: d._y,
            xR: d._xRadius,
            yR: d._yRadius,
            minScale: d._minScale,
            reflection: this.reflection,
            width: this.width,
            height: this.height,
            outerWidth: this.outerWidth,
            outerHeight: this.outerHeight,
            customProperties: d._customProperties,
            duration: d._duration,
            easing: d._easing,
            complete: d._animationEndedDelegate,
          }
        );
        c += f;
      });
    },
  };
  b.Animations.jCarousel.registerClass(
    "Telerik.Web.UI.Animations.jCarousel",
    b.Animations.jMoveBase
  );
  a.fx.step.telerikCarouselAngle = function (e) {
    var c = e.now;
    var g = e.options;
    var j = Math.sin(c);
    var f = g.minScale;
    var i = f + (j + 1) * ((1 - f) / 2);
    var n = g.xO + (Math.cos(c + Math.PI) * g.xR - g.outerWidth / 2) * i;
    var o = g.yO + j * g.yR * i;
    e.elem.telerikCarouselAngle = e.now;
    var d = a.extend({}, g.customProperties);
    if (g.customProperties) {
      var m = /^([\d+-.]+)(.*)$/;
      a.each(d, function (p, r) {
        var q = m.exec(r);
        if (q) {
          d[p] = q ? q[1] * i + q[2] : r;
        }
      });
    }
    var k =
      !a.support.opacity &&
      g.customProperties &&
      g.customProperties.opacity &&
      g.reflection;
    var l = "px";
    var h = a.extend(d, {
      width: g.width * i + l,
      height: g.height * i * (k ? 2 : 1) + l,
      left: n + l,
      top: o + l,
      zIndex: parseInt(i * 100000, 10),
    });
    a(e.elem).css("display", "none").css(h).css("display", "");
  };
  b.Animations.jCoverFlow = function (i, f, g, d, h, c, e) {
    b.Animations.jCoverFlow.initializeBase(this, [i, f, d, e]);
    this._items = g;
    this._minScale = h.minScale;
    this._x = h.xO;
    this._y = h.yO;
    this._xRadius = h.xR;
    this._yRadius = h.yR;
    this._xItemSpacing = h.xItemSpacing;
    this._yItemSpacing = h.yItemSpacing;
    this._selectedItemOffsetX = h.selectedItemOffsetX;
    this._selectedItemOffsetY = h.selectedItemOffsetY;
    this._matrix = h.matrix;
    this._customProperties = c;
    this._index = 0;
    this._query = null;
  };
  b.Animations.jCoverFlow.prototype = {
    initialize: function () {
      b.Animations.jCoverFlow.callBaseMethod(this, "initialize");
    },
    dispose: function () {
      b.Animations.jCoverFlow.callBaseMethod(this, "dispose");
      this._items = null;
      this._customProperties = null;
      this._matrix = null;
      this._query = null;
    },
    get_index: function () {
      return this._index;
    },
    set_index: function (c) {
      this._index = c;
    },
    _getFinalPosition: function () {
      return this._index;
    },
    _getAnimatedProperty: function () {
      return "telerikCoverFlowIndex";
    },
    _getAnimationQuery: function () {
      if (!this._query) {
        var d = this._items;
        var f = a();
        for (var c = 0, e = d.length; c < e; c++) {
          f.add(d[c].element);
        }
        this._query = f;
      }
      return this._query;
    },
    _getTransformProperty: function () {
      var c = "transform";
      if ($telerik.isIE9Mode) {
        c = "msTransform";
      } else {
        if ($telerik.isIE) {
          c = "filter";
        } else {
          if ($telerik.isFirefox) {
            c = "MozTransform";
          } else {
            if ($telerik.isSafari) {
              c = "WebkitTransform";
            } else {
              if ($telerik.isOpera) {
                c = "OTransform";
              }
            }
          }
        }
      }
      return c;
    },
    _playAnimation: function () {
      this._getAnimationQuery().stopTransition(true, !this._isCyclic);
      var g = this._items;
      var h = g.length;
      var f = this._owner.isVertical();
      var e = this._index;
      var i = g[e];
      if (!i) {
        return;
      }
      var j = {
        top: this._y - i.outerHeight / 2,
        right: this._x + i.outerWidth / 2,
        bottom: this._y + i.outerHeight / 2,
        left: this._x - i.outerWidth / 2,
      };
      var d = this._matrix;
      if (d.m11 == 1 && d.m22 == 1 && d.m12 == 0 && d.m21 == 0) {
        d = null;
      }
      var k = this._getTransformProperty();
      var c = this;
      var l = $telerik.getContentSize(this._owner._clipElement);
      a.each(g, function (B, I) {
        var n = B - e;
        var z = n == 0;
        var G = z ? 1 : c._minScale;
        var s = this.element;
        var o = parseInt(s.telerikCoverFlowIndex, 10);
        var u = o == 0;
        var p = u ? 1 : c._minScale;
        var v = n > 0;
        var C = c._x + this.outerWidth / 2;
        var J = f ? C - this.outerWidth * G : j[v ? "right" : "left"];
        var q = f ? C - this.outerWidth * p : j[o > 0 ? "right" : "left"];
        var A = c._y + this.outerHeight / 2;
        var K = f ? j[v ? "bottom" : "top"] : A - this.outerHeight * G;
        var r = f ? j[o > 0 ? "bottom" : "top"] : A - this.outerHeight * p;
        var H = {};
        var m = u || z;
        if (f || m) {
          H.top = { start: r, end: K };
        }
        if (!f || m) {
          H.left = { start: q, end: J };
        }
        for (var t = 0; t < 2; t++) {
          var w = t == 0;
          var D = w ? n : o;
          var E = w ? G : p;
          if (D > 0) {
            if (f) {
              H.top[w ? "end" : "start"] += c._yRadius + --D * c._yItemSpacing;
            } else {
              H.left[w ? "end" : "start"] += c._xRadius + --D * c._xItemSpacing;
            }
          } else {
            if (D < 0) {
              if (f) {
                H.top[w ? "end" : "start"] +=
                  -(c._yRadius + this.outerHeight * E) + ++D * c._yItemSpacing;
              } else {
                H.left[w ? "end" : "start"] +=
                  -(c._xRadius + this.outerWidth * E) + ++D * c._xItemSpacing;
              }
            } else {
              H.left[w ? "end" : "start"] += c._selectedItemOffsetX;
              H.top[w ? "end" : "start"] += c._selectedItemOffsetY;
            }
          }
        }
        if (
          m ||
          ((!H.top ||
            (H.top.start >= -this.outerHeight * p && H.top.start <= l.height) ||
            (H.top.end >= -this.outerHeight * G && H.top.end <= l.height)) &&
            (!H.left ||
              (H.left.start >= -this.outerWidth * p &&
                H.left.start <= l.width) ||
              (H.left.end >= -this.outerWidth * G && H.left.end <= l.width)))
        ) {
          var F = { zIndex: (h - Math.abs(o)) * 100 };
          if (H.top) {
            F.top = H.top.start + "px";
          }
          if (H.left) {
            F.left = H.left.start + "px";
          }
          if (Math.abs(o - n) > 1) {
            F.zIndex = (h - Math.abs(n)) * 100;
          }
          a(s).stop(true, false).css(F).transition(
            { queue: true, telerikCoverFlowIndex: n },
            {
              isVertical: f,
              animateSize: m,
              steps: H,
              minScale: c._minScale,
              width: this.width,
              height: this.height,
              outerWidth: this.outerWidth,
              outerHeight: this.outerHeight,
              matrix: d,
              transformProperty: k,
              reflection: this.reflection,
              itemsCount: h,
              customProperties: c._customProperties,
              duration: c._duration,
              easing: c._easing,
              complete: c._animationEndedDelegate,
            }
          );
        } else {
          a(s).stopTransition(true, false).attr("telerikCoverFlowIndex", n);
        }
      });
    },
  };
  b.Animations.jCoverFlow.registerClass(
    "Telerik.Web.UI.Animations.jCoverFlow",
    b.Animations.jMoveBase
  );
  a.fx.step.telerikCoverFlowIndex = function (f) {
    var d = f.now;
    var m = f.options;
    f.elem.telerikCoverFlowIndex = d;
    var o = Math.abs((d - f.start) / (f.end - f.start));
    var w = "px";
    var n = {};
    if (Math.abs(f.start - f.end) <= 1) {
      n.zIndex = parseInt((m.itemsCount - Math.abs(d)) * 100, 10);
    }
    var s = 0;
    var u = 0;
    var h = m.isVertical;
    var l = m.minScale;
    var p = m.animateSize
      ? f.end == 0
        ? l + (1 - l) * o
        : 1 - (1 - l) * o
      : l;
    if (m.animateSize) {
      if (m.customProperties) {
        var e = a.extend({}, m.customProperties);
        var x = /^([\d+-.]+)(.*)$/;
        a.each(e, function (y, A) {
          var z = x.exec(A);
          e[y] = z ? z[1] * p + z[2] : A;
        });
        n = a.extend(e, n);
      }
      n = a.extend(n, { width: m.width * p + w, height: m.height * p + w });
    }
    if (m.matrix) {
      var i = a.extend({}, m.matrix);
      var k = m.animateSize ? (f.end == 0 ? 1 - o : o) : 1;
      var j = d == 0 ? 0 : d < 0 ? -1 : 1;
      if (f.start * f.end < 0) {
        if ((f.start < 0 && d < 0) || (f.start > 0 && d > 0)) {
          k = 1 - o * Math.abs((f.end - f.start) / f.start);
        } else {
          k =
            o * Math.abs((f.end - f.start) / f.end) - Math.abs(f.start / f.end);
        }
      }
      i = {
        m11: 1 - (1 - i.m11) * k,
        m12: i.m12 * k * j,
        m21: i.m21 * k * j,
        m22: 1 - (1 - i.m22) * k,
      };
      var g = "filter" == m.transformProperty;
      var r =
        "matrix(" +
        i.m11 +
        ", " +
        i.m21 +
        ", " +
        i.m12 +
        ", " +
        i.m22 +
        ", 0, 0)";
      if (g) {
        r =
          "progid:DXImageTransform.Microsoft.Matrix(FilterType='bilinear',M11=" +
          i.m11 +
          ", M12=" +
          i.m12 +
          ", M21=" +
          i.m21 +
          ", M22=" +
          i.m22 +
          ",sizingMethod='auto expand')";
      }
      n[m.transformProperty] = r;
      var t = Math.abs(i.m11) + Math.abs(i.m12);
      var v = Math.abs(i.m21) + Math.abs(i.m22);
      if (!h) {
        s = j * ((1 - t) / 2);
      } else {
        u = j * ((1 - v) / 2);
      }
      if (g) {
        s += (t - 1) / 2;
        u += (v - 1) / 2;
        if (m.matrix.m12 && m.reflection) {
          s *= 2;
        }
      }
    }
    var c = m.animateSize;
    var q = m.steps;
    if ((h || c) && q.top) {
      n.top =
        q.top.start + (q.top.end - q.top.start) * o - u * p * m.outerHeight + w;
    }
    if ((!h || c) && q.left) {
      n.left =
        q.left.start +
        (q.left.end - q.left.start) * o -
        s * p * m.outerWidth +
        w;
    }
    if ("filter" == m.transformProperty && m.matrix && m.reflection) {
      n.height = 2 * (n.height ? parseInt(n.height, 10) : l * m.height) + w;
    }
    a(f.elem).css("display", "none").css(n).css("display", "");
  };
})();

/* END Telerik.Web.UI.Common.Animation.AnimationScripts.js */
/* START Telerik.Web.UI.Common.Popup.PopupScripts.js */
(function (a, c) {
  Type.registerNamespace("Telerik.Web");
  Type.registerNamespace("Telerik.Web.UI");
  var b = Telerik.Web.UI;
  b.ModalExtender = function (d, e) {
    this._windowResizeDelegate = null;
    this._windowScrollDelegate = null;
    this._xCoordinate = -1;
    this._yCoordinate = -1;
    this._backgroundElement = null;
    this._foregroundElement = d;
    this._saveTabIndexes = [];
    this._saveAccessKeys = [];
    this._saveDisabledElements = [];
    this._tagWithTabIndex = new Array(
      "A",
      "AREA",
      "BUTTON",
      "INPUT",
      "OBJECT",
      "SELECT",
      "TEXTAREA",
      "IFRAME",
      "SPAN"
    );
    this._tagWithAcessKey = this._tagWithTabIndex;
    this._elementsToDisable = [];
    if (e && e.enableAriaSupport) {
      this._ariaHiddenStorage = new b.NodeAttributeDataStorage("aria-hidden", {
        getNodes: e.getNodesToHide,
        onStore: function (f) {
          f.setAttribute("aria-hidden", "true");
        },
      });
      if (e.trapTabKey) {
        this._tabKeyTrap = new b.TabKeyTrap(d);
      }
    }
  };
  b.ModalExtender.prototype = {
    dispose: function () {
      this.hide();
      this._backgroundElement = null;
      this._foregroundElement = null;
      this._tabKeyTrap && this._tabKeyTrap.dispose();
      this._tabKeyTrap = c;
    },
    show: function () {
      var e = this._getModalOverlay();
      if ($telerik.getVisible(e)) {
        return;
      }
      this._attachWindowHandlers(true);
      var f = this._foregroundElement;
      f.parentNode.appendChild(e);
      this.updateModalOverlayZIndex();
      e.style.display = "";
      this._disableElements(this._elementsToDisable);
      this._disableTab();
      this._disableAccesskey();
      var d = this._ariaHiddenStorage;
      var g = this._tabKeyTrap;
      d && d.store();
      g && g.trap();
      this._updatePageLayout();
      this._updatePageLayout();
    },
    updateModalOverlayZIndex: function () {
      var d = this._getModalOverlay();
      var e = this._foregroundElement;
      var f = $telerik.getCurrentStyle(e, "zIndex");
      if (!isNaN(parseInt(f, 10)) && parseInt(f, 10) != 0) {
        d.style.zIndex = f - 1;
      }
    },
    hide: function () {
      var d = this._ariaHiddenStorage;
      var f = this._tabKeyTrap;
      d && d.restore();
      f && f.removeTrap();
      this._restoreTab();
      this._restoreAccessKey();
      this._restoreDisabledElements();
      this._attachWindowHandlers(false);
      var e = this._backgroundElement;
      if (e) {
        if (e.parentNode) {
          e.parentNode.removeChild(e);
        }
        this._backgroundElement = null;
      }
    },
    _getModalOverlay: function () {
      if (!this._backgroundElement) {
        var d = document.createElement("div");
        d.style.display = "none";
        d.style.position = "absolute";
        if ($telerik.isRightToLeft(this._foregroundElement)) {
          d.style.right = "0px";
        } else {
          d.style.left = "0px";
        }
        d.style.top = "0px";
        d.style.zIndex = 10000;
        d.style.backgroundColor = "#aaaaaa";
        d.style.filter =
          "progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=50)";
        d.style.opacity = ".5";
        d.style.MozOpacity = ".5";
        d.setAttribute("unselectable", "on");
        d.className = "TelerikModalOverlay";
        this._backgroundElement = d;
      }
      return this._backgroundElement;
    },
    _attachWindowHandlers: function (d) {
      var e = window;
      if (true == d) {
        this._windowResizeDelegate = Function.createDelegate(
          this,
          this._updatePageLayout
        );
        $addHandler(e, "resize", this._windowResizeDelegate);
        this._windowScrollDelegate = Function.createDelegate(
          this,
          this._updatePageLayout
        );
        $addHandler(e, "scroll", this._windowScrollDelegate);
      } else {
        if (this._windowResizeDelegate) {
          $removeHandler(e, "resize", this._windowResizeDelegate);
        }
        this._windowResizeDelegate = null;
        if (this._windowScrollDelegate) {
          $removeHandler(e, "scroll", this._windowScrollDelegate);
        }
        this._windowScrollDelegate = null;
      }
    },
    _updatePageLayout: function () {
      var d = $telerik.getClientBounds();
      var f = d.width;
      var e = d.height;
      var g = this._getModalOverlay();
      g.style.width =
        Math.max(
          Math.max(
            document.documentElement.scrollWidth,
            document.body.scrollWidth
          ),
          f
        ) + "px";
      g.style.height =
        Math.max(
          Math.max(
            document.documentElement.scrollHeight,
            document.body.scrollHeight
          ),
          e
        ) + "px";
    },
    _getElementsWithTabIndexes: function (e, f) {
      var g = this;
      var d = $telerik
        .$(e)
        .find(this._tagWithTabIndex.join(","))
        .filter(function () {
          if (
            this.tabIndex == -1 ||
            this.disabled ||
            this === f ||
            $telerik.$.contains(f, this)
          ) {
            return false;
          }
          if (!$telerik.getVisible(this)) {
            return false;
          }
          if (this.nodeName == "SPAN" && !g._hasTabIndexAttribute(this)) {
            return false;
          }
          return true;
        });
      return $telerik.$.makeArray(d);
    },
    _getElementsWithAccessKey: function (e, f) {
      var d = $telerik
        .$(e)
        .find(this._tagWithAcessKey.join(","))
        .filter(function () {
          if (
            !this.accessKey ||
            this.disabled ||
            this === f ||
            $telerik.$.contains(f, this)
          ) {
            return false;
          }
          if (!$telerik.getVisible(this)) {
            return false;
          }
          return true;
        });
      return $telerik.$.makeArray(d);
    },
    _hasTabIndexAttribute: function (e) {
      if (e.hasAttribute) {
        return e.hasAttribute("tabIndex");
      }
      var d = e.getAttribute("tabIndex");
      if (d == null || d == "undefined" || d === -32768) {
        return false;
      }
      if (typeof d == "number" && d != 0) {
        return true;
      }
      if (d == 0) {
        var g = $telerik.getOuterHtml(e),
          f = g.replace(e.innerHTML);
        return /tabindex=/i.test(f);
      }
      return false;
    },
    _getElementsToDisable: function (f, e, g) {
      var d = $telerik
        .$(e)
        .find(f.join(","))
        .filter(function () {
          if (
            this.disabled ||
            !$telerik.getVisible(this) ||
            this === g ||
            $telerik.$.contains(g, this)
          ) {
            return false;
          }
          return true;
        });
      return $telerik.$.makeArray(d);
    },
    _disableElements: function (e) {
      this._saveDisabledElements = [];
      if (!e || e.length == 0) {
        return;
      }
      var d = this._getElementsToDisable(e, document, this._foregroundElement);
      for (var f = 0; f < d.length; f++) {
        d[f].disabled = true;
        this._saveDisabledElements.push(d[f]);
      }
    },
    _restoreDisabledElements: function () {
      for (var d = 0; d < this._saveDisabledElements.length; d++) {
        this._saveDisabledElements[d].disabled = false;
      }
    },
    _disableTab: function () {
      var e = this._getElementsWithTabIndexes(
        document,
        this._foregroundElement
      );
      this._saveTabIndexes = [];
      var g;
      for (g = 0; g < e.length; g++) {
        var d = e[g],
          h = d.tabIndex,
          f = this._hasTabIndexAttribute(d);
        this._saveTabIndexes.push({ tag: d, index: h, hasAttribute: f });
        d.tabIndex = "-1";
      }
    },
    _restoreTab: function () {
      for (var d = 0; d < this._saveTabIndexes.length; d++) {
        var e = this._saveTabIndexes[d].tag;
        e.tabIndex = this._saveTabIndexes[d].index;
        if (
          !this._saveTabIndexes[d].hasAttribute &&
          this._hasTabIndexAttribute(e)
        ) {
          e.removeAttribute("tabIndex");
        }
      }
    },
    _disableAccesskey: function () {
      this._saveAccessKeys = [];
      var e = this._getElementsWithAccessKey(document, this._foregroundElement);
      for (var g = 0; g < e.length; g++) {
        var f = e[g],
          d = f.accessKey;
        this._saveAccessKeys.push({ element: f, accessKey: d });
        f.accessKey = "";
      }
    },
    _restoreAccessKey: function () {
      for (var d = 0; d < this._saveAccessKeys.length; d++) {
        this._saveAccessKeys[d].element.accessKey = this._saveAccessKeys[
          d
        ].accessKey;
      }
    },
  };
  b.ModalExtender.registerClass("Telerik.Web.UI.ModalExtender", null);
})($telerik.$);
(function (c) {
  Type.registerNamespace("Telerik.Web");
  var a = Telerik.Web;
  var b = "";
  Telerik.Web.PositioningMode = function () {
    throw Error.invalidOperation();
  };
  Telerik.Web.PositioningMode.prototype = {
    Absolute: 0,
    Center: 1,
    BottomLeft: 2,
    BottomRight: 3,
    TopLeft: 4,
    TopRight: 5,
    None: 6,
  };
  Telerik.Web.PositioningMode.registerEnum("Telerik.Web.PositioningMode");
  a.PopupAnimation = function (f, g) {
    var d = this;
    var e = { easing: b, duration: 0, properties: {}, callback: null };
    d._element = f || null;
    d.options = $telerik.$.extend(e, g);
    d._inProgress = false;
  };
  a.PopupAnimation.prototype = {
    get_easing: function () {
      return this.options.easing;
    },
    set_easing: function (d) {
      this.options.easing = d;
    },
    get_duration: function () {
      return this.options.duration;
    },
    set_duration: function (d) {
      this.options.easing = d;
    },
    get_properties: function () {
      return this.options.properties;
    },
    set_properties: function (d) {
      this.options.properties = d;
    },
    get_callback: function () {
      return this.options.callback;
    },
    set_callback: function (d) {
      this.options.callback = d;
    },
    get_element: function () {
      return this._element;
    },
    set_element: function (d) {
      this._element = d;
    },
    get_options: function (d) {
      return this.options;
    },
    set_options: function (d) {
      $telerik.$.extend(this.options, d);
    },
    isInProgress: function () {
      return this._inProgress;
    },
    play: function () {
      var e = this;
      var d = $telerik.$(e.get_element());
      d.stopTransition();
      e._inProgress = true;
      d.transition(
        e.get_properties(),
        e.get_duration(),
        e.get_easing(),
        function (g) {
          var f = e.get_callback();
          e._inProgress = false;
          if ($telerik.$.isFunction(f)) {
            f();
          }
        }
      );
    },
    stop: function () {
      var d = this;
      $telerik.$(d.get_element()).stopTransition();
      d._inProgress = false;
    },
  };
  a.PopupAnimation.registerClass("Telerik.Web.PopupAnimation");
  Telerik.Web.PopupBehavior = function (d) {
    var e = this;
    Telerik.Web.PopupBehavior.initializeBase(this, [d]);
    this._x = 0;
    this._y = 0;
    this._positioningMode = Telerik.Web.PositioningMode.Absolute;
    this._parentElement = null;
    this._parentElementID = null;
    this._moveHandler = null;
    this._firstPopup = true;
    this._originalParent = null;
    this._overlay = false;
    this._keepInScreenBounds = true;
    this._manageVisibility = true;
    e._showAnimation = null;
    e._hideAnimation = null;
    e._useAnimation = false;
  };
  Telerik.Web.PopupBehavior.prototype = {
    initialize: function () {
      var e = this;
      Telerik.Web.PopupBehavior.callBaseMethod(e, "initialize");
      if (e._useAnimation) {
        var d = e.get_elementToShow();
        e._showAnimation = new a.PopupAnimation(d);
        e._hideAnimation = new a.PopupAnimation(d, {
          callback: $telerik.$.proxy(e._hide, e),
        });
        e.hide();
      }
      e.hide();
    },
    getPageOffset: function () {
      var d = {
        x:
          $telerik.getCorrectScrollLeft(document.documentElement) ||
          $telerik.getCorrectScrollLeft(document.body),
        y: document.documentElement.scrollTop || document.body.scrollTop,
      };
      return d;
    },
    pin: function (h) {
      var e = this.get_elementToShow();
      var g = this.getPageOffset();
      var d;
      var f = h ? "fixed" : "absolute";
      if (e.style.position == f) {
        return;
      }
      d = $telerik.getBounds(e);
      if (h && (g.x || g.y)) {
        this._x = d.x - g.x;
        this._y = d.y - g.y;
        $telerik.setLocation(e, { x: this._x, y: this._y });
      }
      e.style.position = f;
    },
    center: function () {
      var e = this.get_elementToShow();
      if (this._manageVisibility) {
        $telerik.setVisible(e, true);
      }
      var g = $telerik.getClientBounds();
      var f = $telerik.getBounds(e);
      var h = parseInt((g.width - f.width) / 2, 10);
      var i = parseInt((g.height - f.height) / 2, 10);
      var d = this.get_parentElement();
      this.set_parentElement(document.documentElement);
      this.set_x(h);
      this.set_y(i);
      this.show();
      this.set_parentElement(d);
    },
    get_parentElement: function () {
      if (!this._parentElement && this._parentElementID) {
        this.set_parentElement($get(this._parentElementID));
        Sys.Debug.assert(
          this._parentElement != null,
          String.format(
            'Couldn\'t find parent element "{0}"',
            this._parentElementID
          )
        );
      }
      return this._parentElement;
    },
    set_parentElement: function (d) {
      this._parentElement = d;
    },
    get_parentElementID: function () {
      if (this._parentElement) {
        return this._parentElement.id;
      }
      return this._parentElementID;
    },
    set_parentElementID: function (d) {
      this._parentElementID = d;
      if (this.get_isInitialized()) {
        this.set_parentElement($get(d));
      }
    },
    get_positioningMode: function () {
      return this._positioningMode;
    },
    set_positioningMode: function (d) {
      this._positioningMode = d;
    },
    get_x: function () {
      return this._x;
    },
    set_x: function (d) {
      if (d != this._x) {
        this._x = d;
        if (
          $telerik.getVisible(this.get_elementToShow()) &&
          this._manageVisibility
        ) {
          this.show();
        }
      }
    },
    get_y: function () {
      return this._y;
    },
    set_y: function (d) {
      if (d != this._y) {
        this._y = d;
        if (
          $telerik.getVisible(this.get_elementToShow()) &&
          this._manageVisibility
        ) {
          this.show();
        }
      }
    },
    get_overlay: function () {
      return this._overlay;
    },
    set_overlay: function (f) {
      this._overlay = f;
      this._attachWindowHandlers(false);
      if (this._overlay) {
        this._attachWindowHandlers(true);
      } else {
        var e = this.get_elementToShow();
        var d = e._hideWindowedElementsIFrame;
        if (d) {
          d.style.display = "none";
        }
      }
    },
    get_manageVisibility: function () {
      return this._manageVisibility;
    },
    set_manageVisibility: function (d) {
      this._manageVisibility = d;
    },
    get_keepInScreenBounds: function () {
      return this._keepInScreenBounds;
    },
    set_keepInScreenBounds: function (d) {
      this._keepInScreenBounds = d;
    },
    get_elementToShow: function () {
      return this._elementToShow ? this._elementToShow : this.get_element();
    },
    set_elementToShow: function (d) {
      if (this._elementToShow) {
        this._detachElementToShow();
      }
      this._elementToShow = d;
    },
    get_showAnimation: function () {
      return this._showAnimation;
    },
    set_showAnimation: function (d) {
      if (this._showAnimation) {
        this._showAnimation.set_options(d);
      }
    },
    get_hideAnimation: function () {
      return this._hideAnimation;
    },
    set_hideAnimation: function (d) {
      if (this._hideAnimation) {
        this._hideAnimation.set_options(d);
      }
    },
    _detachElementToShow: function () {
      var d = this.get_elementToShow();
      if (this._moveHandler) {
        $telerik.removeExternalHandler(d, "move", this._moveHandler);
        this._moveHandler = null;
      }
      var f = d._hideWindowedElementsIFrame;
      if (f) {
        var g = f.parentNode;
        var e = f.nextSibling;
        if (g) {
          g.removeChild(f);
          if (e) {
            g.insertBefore(document.createElement("span"), e);
          } else {
            g.appendChild(document.createElement("span"));
          }
        }
      }
    },
    show: function () {
      var o = this;
      var f = this.get_elementToShow();
      var q = $telerik.getVisible(f);
      if (o.get_positioningMode() !== Telerik.Web.PositioningMode.None) {
        f.style.position = "absolute";
      }
      var e = document.documentElement;
      if ($telerik.isFirefox) {
        var m = $telerik.getCurrentStyle(e, "overflow");
        if ("hidden" == m) {
          f.style.left = e.scrollLeft + "px";
          f.style.top = e.scrollLeft + "px";
        }
      }
      var h = this._manageVisibility;
      if (h && !q) {
        $telerik.setVisible(f, true);
      }
      var j = f.offsetParent || e;
      var k = $telerik.getBounds(j);
      if (h && !q) {
        $telerik.setVisible(f, false);
      }
      var d;
      var n;
      if (this._parentElement) {
        n = $telerik.getBounds(this._parentElement);
        var l = this._getOffsetParentLocation(j);
        d = { x: n.x - l.x, y: n.y - l.y };
      } else {
        n = k;
        d = { x: 0, y: 0 };
      }
      if (h) {
        $telerik.setVisible(f, true);
      }
      if (o._useAnimation) {
        o.get_showAnimation().play();
        return;
      }
      var r = Math.max(
        f.offsetWidth - (f.clientLeft ? f.clientLeft * 2 : 0),
        0
      );
      var g = Math.max(f.offsetHeight - (f.clientTop ? f.clientTop * 2 : 0), 0);
      var p;
      switch (this._positioningMode) {
        case Telerik.Web.PositioningMode.Center:
          p = {
            x: Math.round(n.width / 2 - r / 2),
            y: Math.round(n.height / 2 - g / 2),
          };
          break;
        case Telerik.Web.PositioningMode.BottomLeft:
          p = { x: 0, y: n.height };
          break;
        case Telerik.Web.PositioningMode.BottomRight:
          p = { x: n.width - r, y: n.height };
          break;
        case Telerik.Web.PositioningMode.TopLeft:
          p = { x: 0, y: -f.offsetHeight };
          break;
        case Telerik.Web.PositioningMode.TopRight:
          p = { x: n.width - r, y: -f.offsetHeight };
          break;
        default:
          p = { x: 0, y: 0 };
      }
      p.x += this._x + d.x;
      p.y += this._y + d.y;
      $telerik.setLocation(f, p);
      if (this._firstPopup) {
        f.style.width = r + "px";
      }
      this._firstPopup = false;
      var i = this._fixPositionInBounds();
      this._createOverlay(i);
    },
    hide: function () {
      var d = this;
      var e = d.get_showAnimation();
      if (d._useAnimation) {
        if (!e.isInProgress()) {
          d._hideAnimation.play();
        }
      } else {
        this._hide();
      }
    },
    _hide: function () {
      var e = this.get_elementToShow();
      if (this._manageVisibility) {
        $telerik.setVisible(e, false);
      }
      if (e.originalWidth) {
        e.style.width = e.originalWidth + "px";
        e.originalWidth = null;
      }
      if (Sys.Browser.agent === Sys.Browser.InternetExplorer || this._overlay) {
        var d = e._hideWindowedElementsIFrame;
        if (d) {
          d.style.display = "none";
        }
      }
    },
    _getViewportBounds: function () {
      var e = $telerik.getClientBounds();
      var f = document.documentElement;
      var d = document.body;
      e.scrollLeft = $telerik.isMobileSafari
        ? window.pageXOffset
        : $telerik.getCorrectScrollLeft(f) || $telerik.getCorrectScrollLeft(d);
      e.scrollTop = $telerik.isMobileSafari
        ? window.pageYOffset
        : f.scrollTop || d.scrollTop;
      return e;
    },
    _getOffsetParentLocation: function (d) {
      if (
        d &&
        d.tagName.toUpperCase() != "BODY" &&
        d.tagName.toUpperCase() != "HTML"
      ) {
        var f = $telerik.getLocation(d);
        var e = $telerik.getBorderBox(d);
        f.x += e.top;
        f.y += e.left;
        f.x -= $telerik.getCorrectScrollLeft(d);
        f.y -= d.scrollTop;
        return f;
      }
      return { x: 0, y: 0 };
    },
    _fixPositionInBounds: function () {
      var f = this.get_elementToShow();
      var m = $telerik.getBounds(f);
      if (!this._keepInScreenBounds) {
        return m;
      }
      var e = this._getViewportBounds();
      var p = false;
      var h = e.width > m.width;
      var g = e.height > m.height;
      var o = e.scrollTop;
      var d = e.height + o;
      var j = e.scrollLeft;
      var n = e.width + j;
      if (
        ($telerik.isIE8 || $telerik.isOpera || $telerik.isSafari) &&
        $telerik.isRightToLeft(document.body)
      ) {
        var l = f.style.display;
        if ($telerik.isOpera) {
          f.style.display = "none";
        }
        var i = document.documentElement.scrollWidth;
        n = i ? i : document.body.scrollWidth;
        if ($telerik.isOpera) {
          f.style.display = l;
        }
      }
      if (m.x < j || !h) {
        m.x = j;
        p = true;
      }
      if (m.y < o || !g) {
        m.y = o;
        p = true;
      }
      if (h && m.x + m.width > n) {
        m.x = n - m.width;
        p = true;
      }
      if (g && d < m.y + m.height) {
        m.y = d - m.height;
        p = true;
      }
      if (p) {
        var k = this._getOffsetParentLocation(f.offsetParent);
        m.y -= k.y;
        m.x -= k.x;
        $telerik.setLocation(f, m);
      }
      return m;
    },
    _createOverlay: function (g) {
      if (!this._overlay) {
        return;
      }
      var f = this.get_elementToShow();
      var e = f._hideWindowedElementsIFrame;
      if (!e) {
        e = document.createElement("iframe");
        e.src = "javascript:'<html></html>';";
        e.style.position = "absolute";
        e.style.display = "none";
        e.scrolling = "no";
        e.frameBorder = "0";
        e.tabIndex = "-1";
        e.style.filter =
          "progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=0)";
        f.parentNode.insertBefore(e, f);
        f._hideWindowedElementsIFrame = e;
        this._moveHandler = Function.createDelegate(this, this._onMove);
        $telerik.addExternalHandler(f, "move", this._moveHandler);
      }
      if ($telerik.previousElement(e) === f) {
        f.parentNode.insertBefore(e, f);
      }
      $telerik.setBounds(e, g);
      if ($telerik.isFirefox) {
        var d = this._getViewportBounds();
        e.style.top = parseInt(g.y, 10) - d.scrollTop + "px";
        e.style.left = parseInt(g.x, 10) - d.scrollLeft + "px";
        e.style.position = "fixed";
        if ($telerik.isFirefox3) {
          e.style.backgroundColor = "#fff";
        }
      }
      if ($telerik.quirksMode) {
        return;
      }
      e.style.display = f.style.display;
      var h = $telerik.getCurrentStyle(f, "zIndex");
      if (h) {
        e.style.zIndex = h;
      }
    },
    _setCoordinates: function (e, f) {
      var d = false;
      if (e != this._x) {
        this._x = e;
        d = true;
      }
      if (f != this._y) {
        this._y = f;
        d = true;
      }
      if (
        $telerik.getVisible(this.get_elementToShow()) &&
        d &&
        this._manageVisibility
      ) {
        this.show();
      }
    },
    dispose: function () {
      var d = this.get_elementToShow();
      if (d) {
        this._attachWindowHandlers(false);
        if ($telerik.getVisible(d) && this._manageVisibility) {
          this.hide();
        }
        if (this._originalParent) {
          d.parentNode.removeChild(d);
          this._originalParent.appendChild(d);
          this._originalParent = null;
        }
        this._detachElementToShow();
      }
      this._parentElement = null;
      Telerik.Web.PopupBehavior.callBaseMethod(this, "dispose");
      if (d && d._behaviors && d._behaviors.length == 0) {
        d._behaviors = null;
      }
      d = null;
    },
    _onMove: function () {
      var e = this.get_elementToShow();
      var f = e._hideWindowedElementsIFrame;
      if (f) {
        if (Sys.Browser.agent === Sys.Browser.Firefox) {
          var d = this._getViewportBounds();
          f.style.top = parseInt(e.style.top, 10) - d.scrollTop + "px";
          f.style.left = parseInt(e.style.left, 10) - d.scrollLeft + "px";
          f.style.position = "fixed";
        } else {
          f.style.top = e.style.top;
          f.style.left = e.style.left;
        }
      }
    },
    _handleElementResize: function () {
      var d = this.get_elementToShow();
      var f = d._hideWindowedElementsIFrame;
      if (f) {
        var e = $telerik.getBounds(d);
        $telerik.setBounds(f, e);
      }
    },
    _attachWindowHandlers: function (d) {
      if (Sys.Browser.agent !== Sys.Browser.Firefox) {
        return;
      }
      var e = window;
      if (true == d) {
        this._windowResizeDelegate = Function.createDelegate(
          this,
          this._onMove
        );
        $telerik.addExternalHandler(e, "resize", this._windowResizeDelegate);
        this._windowScrollDelegate = Function.createDelegate(
          this,
          this._onMove
        );
        $telerik.addExternalHandler(e, "scroll", this._windowScrollDelegate);
      } else {
        if (this._windowResizeDelegate) {
          $telerik.removeExternalHandler(
            e,
            "resize",
            this._windowResizeDelegate
          );
        }
        this._windowResizeDelegate = null;
        if (this._windowScrollDelegate) {
          $telerik.removeExternalHandler(
            e,
            "scroll",
            this._windowScrollDelegate
          );
        }
        this._windowScrollDelegate = null;
      }
    },
  };
  Telerik.Web.PopupBehavior.registerClass(
    "Telerik.Web.PopupBehavior",
    Sys.UI.Behavior
  );
})();
Type.registerNamespace("Telerik.Web");
Type.registerNamespace("Telerik.Web.UI");
(function (l) {
  var a = Telerik.Web.UI,
    i = "pageX",
    j = "pageY",
    b = "clientX",
    c = "clientY",
    n = "x",
    o = "y",
    f = Math,
    e = f.floor,
    k = !!window.PointerEvent,
    g = !!window.MSPointerEvent;
  var h = ".telerikResizeExtender";
  var d = "dragstart";
  var m = (function () {
    var p = {};
    p.hasTouch = "ontouchstart" in window;
    p.hasPointer = k || g;
    p.hasPointerTouch = !!navigator.msMaxTouchPoints;
    p.isTouch = p.hasTouch || p.hasPointerTouch;
    p._pointers = [];
    return p;
  })();
  a.ResizeExtender = function (s, r, v, w, q, t, p, u) {
    this._document = q ? q : document;
    this._documentMouseMoveDelegate = null;
    this._documentMouseUpDelegate = null;
    this._jsOwner = null;
    this._element = null;
    this._tableElement = null;
    this._saveDelegates = {};
    this._moveCursorType = "move";
    this._moveToMouseLocation = false;
    this._hideIframes = true;
    this._iframeToSkip = null;
    this._enabled = true;
    this._startX = 0;
    this._startY = 0;
    this._cancelResize = true;
    this._startCursorLocation = null;
    this._autoScrollEnabled = true;
    this._ieTouchActionManager = new a.Helpers.IETouchActionManager(r);
    this._touchEventIdentifier = null;
    this._utils = m;
    this.initialize(s, r, v, w, t, p, u);
  };
  a.ResizeExtender.containsBounds = function (r, p) {
    if (!r || !p) {
      return false;
    }
    var q = $telerik.containsPoint(r, p.x, p.y);
    if (q) {
      var s = p.x + p.width;
      var t = p.y + p.height;
      q = $telerik.containsPoint(r, s, t);
    }
    return q;
  };
  a.ResizeExtender.prototype = {
    initialize: function (q, t, u, v, r, p, s) {
      if (!t) {
        return;
      }
      if (this._element) {
        alert(
          "Element " +
            t.getAttribute("id") +
            " cannot be made resizable, as the resizeExtender already has the element " +
            this._element.getAttribute("id") +
            " associated with it. You must create a new extender resizer object"
        );
        return;
      }
      this._jsOwner = q;
      this._element = t;
      this._tableElement = v;
      this._handles = u;
      this._ieTouchActionManager.allowUserTouch();
      if (r) {
        this._moveCursorType = r;
      }
      if (p != null) {
        this._autoScrollEnabled = p;
      }
      if (s != null) {
        this._moveToMouseLocation = s;
      }
      this._configureHandleElements(true);
    },
    dispose: function () {
      this._ieTouchActionManager.dispose();
      this._attachDocumentHandlers(false);
      this._configureHandleElements(false);
      this._startCursorLocation = null;
      this._iframeToSkip = null;
      this._jsOwner = null;
      this._element = null;
      this._handles = null;
      this._saveDelegates = null;
      this._constraints = null;
    },
    enable: function (p) {
      this._enabled = p;
    },
    set_hideIframes: function (p) {
      this._hideIframes = p;
    },
    get_hideIframes: function () {
      return this._hideIframes;
    },
    set_iframeToSkip: function (p) {
      this._iframeToSkip = p;
    },
    get_iframeToSkip: function () {
      return this._iframeToSkip;
    },
    get_constraints: function () {
      return this._constraints;
    },
    set_constraints: function (p) {
      this._constraints = p;
    },
    get_useCssTransform: function () {
      return this._useCssTransform;
    },
    set_useCssTransform: function (p) {
      this._useCssTransform = p;
    },
    _raiseDragEvent: function (r, q, t) {
      var u = this,
        s = u._jsOwner;
      if (s && s["on" + r]) {
        var p = q;
        if (!p) {
          p = {};
        }
        p.element = u._element;
        p.ownerEvent = t;
        p.eventIdetifier = u._getTouchEventIdentifier(t);
        return s["on" + r](p);
      }
      return true;
    },
    _raiseEvent: function (q, p) {
      var r = this._jsOwner;
      if (r && r["on" + q]) {
        if (!p) {
          p = new Sys.EventArgs();
        } else {
          if (q == "Resize") {
            p = this._resizeDir;
          } else {
            if (q == "Resizing") {
              p = this._getProposedBounds(p);
            }
          }
        }
        return r["on" + q](p);
      }
      return true;
    },
    _getProposedBounds: function (p) {
      var q = $telerik.getBounds(this._element);
      return {
        x: p.x || q.x,
        y: p.y || q.y,
        width: p.width || q.width,
        height: p.height || q.height,
      };
    },
    getPositionedParent: function () {
      var p = this._element.parentNode;
      while (p && p != document) {
        if ("static" != $telerik.getCurrentStyle(p, "position", "static")) {
          return p;
        }
        p = p.parentNode;
      }
      return null;
    },
    _storeStartCoords: function (r) {
      var A = this,
        C = A._utils;
      if (!A._enabled) {
        return;
      }
      A._cancelResize = false;
      var B = A._getTouchEventLocation(r, A._touchEventIdentifier);
      if (C.isTouch && B && B.x && B.y) {
        A._startX = B.x;
        A._startY = B.y;
      } else {
        if (r.originalEvent) {
          A._startX = e(r.originalEvent[b]);
          A._startY = e(r.originalEvent[c]);
        } else {
          A._startX = e(r.clientX);
          A._startY = e(r.clientY);
        }
      }
      var t = A._element;
      var s = $telerik.getBounds(t);
      var u =
        t.id != null && a.RadDock && a.RadDock.isInstanceOfType($find(t.id));
      if ($telerik.isIE && u != true) {
        var y = A.getPositionedParent();
        if (y) {
          s.x += y.scrollLeft;
          s.y += y.scrollTop;
        }
      }
      A._originalBounds = s;
      var z = r.target ? r.target : r.srcElement;
      if (z && z.type == 3) {
        z = z.parentNode;
      }
      A._resizeType = $telerik.getCurrentStyle(z, "cursor");
      if (!A._resizeType && r.currentTarget) {
        A._resizeType = $telerik.getCurrentStyle(r.currentTarget, "cursor");
      }
      A._resizeDir = {
        north: A._resizeType.match(/n.?-/) ? 1 : 0,
        east: A._resizeType.match(/e-/) ? 1 : 0,
        south: A._resizeType.match(/s.?-/) ? 1 : 0,
        west: A._resizeType.match(/w-/) ? 1 : 0,
        move: new RegExp(A._moveCursorType).test(this._resizeType) ? 1 : 0,
      };
      A._leftHandleMouseDelta = 0;
      if (A._resizeDir.west) {
        A._leftHandleMouseDelta = Math.abs(s.x - this._startX);
      }
      var q = A._resizeDir.move
        ? A._raiseDragEvent("DragStart", null, r)
        : A._raiseEvent("ResizeStart");
      A._cancelResize = q == false;
      var x = $telerik.getCurrentStyle(t.parentNode, "position");
      var v = "relative" == x || "absolute" == x;
      A._offsetLocation = v
        ? $telerik.getLocation(t.parentNode)
        : { x: 0, y: 0 };
      if (A._moveToMouseLocation) {
        var w = $telerik.isTouchDevice
          ? { left: A._startX, top: A._startY }
          : $telerik.getDocumentRelativeCursorPosition({
              clientX: this._startX,
              clientY: this._startY,
            });
        if (v) {
          var p = $telerik.getBorderBox(t.parentNode);
          w.left -= p.left;
          w.top -= p.top;
        }
        A._startCursorLocation = {
          x: w.left - Math.floor(s.width / 2),
          y: w.top - Math.floor(s.height / 2),
        };
      }
      if (!A._cancelResize) {
        A._clearSelection();
        A._setIframesVisible(false);
        A._attachDocumentHandlers(false);
        A._attachDocumentHandlers(true);
      }
    },
    _getTouchEventLocation: function (q, x) {
      var w = this,
        u = q.originalEvent ? q.originalEvent : null,
        p =
          q.changedTouches ||
          (u
            ? u.changedTouches
            : q.rawEvent
            ? q.rawEvent.changedTouches
            : false),
        t = null;
      m._pointers = w._getUniquePointerIds();
      var v = m._pointers;
      var s;
      var r;
      if (m.isTouch) {
        if (u) {
          if (m.hasPointer) {
            s = false;
            for (r = 0; r < v.length; r++) {
              if (v[r].pointerId === x) {
                t = { x: v[r][i], y: v[r][j] };
                s = true;
                break;
              }
            }
            if (!s) {
              t = { x: e(u[i]), y: e(u[j]) };
            }
          } else {
            if (p && p[0]) {
              s = false;
              for (r = 0; r < p.length; r++) {
                if (p[r].identifier === x) {
                  t = { x: p[r][i], y: p[r][j] };
                  s = true;
                  break;
                }
              }
              if (!s) {
                t = { x: p[0][i], y: p[0][j] };
              }
            } else {
              t = { x: e(q.clientX), y: e(q.clientY) };
            }
          }
        } else {
          t = { x: e(q.clientX), y: e(q.clientY) };
        }
      }
      return t;
    },
    _getEventClientCoordinates: function (p) {
      if (p.originalEvent) {
        return { x: p.originalEvent[b], y: p.originalEvent[c] };
      } else {
        return { x: p[b], y: p[c] };
      }
    },
    _getIntegerCoordinates: function (p) {
      if (!p || !p.hasOwnProperty(n) || !p.hasOwnProperty(o)) {
        return null;
      } else {
        return { x: e(p.x), y: e(p.y) };
      }
    },
    _getIntegerEventCoordinates: function (q) {
      var s = this,
        p = s._getEventClientCoordinates(q),
        r = s._getIntegerCoordinates(p);
      return r;
    },
    _getTouchEventIdentifier: function (p) {
      var r = this,
        s = r._utils,
        q = p.originalEvent ? p.originalEvent : null;
      if (s.isTouch) {
        if (q) {
          if (q.targetTouches && q.targetTouches[0]) {
            return q.targetTouches[0].identifier;
          } else {
            if (q.pointerId) {
              return q.pointerId;
            }
          }
        } else {
          return null;
        }
      }
      return null;
    },
    _resize: function (s) {
      var C = this,
        D = C._utils;
      if (!C._enabled || C._cancelResize) {
        return false;
      }
      var p = C._originalBounds;
      var y = new Telerik.Web.UI.Bounds(0, 0, 0, 0);
      var u = null;
      if (D.isTouch) {
        u = C._getTouchEventLocation(s, C._touchEventIdentifier);
      } else {
        u = C._getIntegerEventCoordinates(s);
      }
      if (u === null) {
        return false;
      }
      var E = u.x - C._startX;
      var F = u.y - C._startY;
      var r = C._resizeDir;
      var v = r.move;
      if (v) {
        var w = C._startCursorLocation;
        if (w) {
          p.x = w.x;
          p.y = w.y;
          C._originalBounds = p;
          C._startCursorLocation = null;
        }
        y.x = p.x + E;
        y.y = p.y + F;
        var x = C._getMoveConstraints(p);
        if (x) {
          y.x = C._constrainPosition(y.x, x.x, x.width);
          y.y = C._constrainPosition(y.y, x.y, x.height);
        }
      } else {
        if (r.east) {
          y.x = p.x;
          y.width = p.width + E;
        } else {
          if (r.west) {
            y.x = u.x - C._leftHandleMouseDelta;
            y.width = p.width - E;
          }
        }
        if (r.south) {
          y.y = p.y;
          y.height = p.height + F;
        } else {
          if (r.north) {
            y.y = p.y + F;
            y.height = p.height - F;
          }
        }
        var B = C._getSizeConstraints(p);
        if (B) {
          y.x = C._constrainPosition(
            y.x,
            B.x,
            Math.min(y.x + y.width, B.width - y.width)
          );
          y.y = C._constrainPosition(
            y.y,
            B.y,
            Math.min(y.y + y.height, B.height - y.height)
          );
          y.width = C._constrainDimension(y.width, B.width - y.x);
          y.height = C._constrainDimension(y.height, B.height - y.y);
        }
      }
      var z = C._offsetLocation;
      if (z) {
        y.x -= z.x;
        y.y -= z.y;
      }
      var A = v
        ? C._raiseDragEvent("Drag", y, s)
        : C._raiseEvent("Resizing", y);
      if (false == A) {
        return true;
      }
      var t = C._element;
      if (C._useCssTransform && v) {
        C._lastTouchDelta = { x: y.x - p.x + z.x, y: y.y - p.y + z.y };
        var q = {
          x: y.x ? C._lastTouchDelta.x : 0,
          y: y.y ? C._lastTouchDelta.y : 0,
        };
        C._setTranslate(t, q.x, q.y);
      } else {
        if (v || y.x > 0) {
          t.style.left = y.x + "px";
        }
        if (v || y.y > 0) {
          t.style.top = y.y + "px";
        }
      }
      if (y.width > 0) {
        t.style.width = y.width + "px";
      }
      if (y.height > 0) {
        t.style.height = y.height + "px";
      }
      if (!v) {
        C._updateInnerTableSize();
      }
      return true;
    },
    _setTranslate: function (p, r, t) {
      var q = p.style;
      q.webkitTransform = q.mozTransform = q.OTransform =
        "translate(" + r + "px," + t + "px)";
    },
    _updateInnerTableSize: function () {
      var p = this._resizeDir;
      if (p.south || p.north) {
        var q = this._element.style.height;
        var r = this._tableElement;
        if (r) {
          r.style.height = q;
          this._fixIeHeight(r, q);
        }
      }
    },
    _getMoveConstraints: function (p) {
      var q = this._getSizeConstraints();
      if (q) {
        q.width -= p.width;
        q.height -= p.height;
      }
      return q;
    },
    _getSizeConstraints: function (p) {
      var q = this._constraints;
      if (!q) {
        return null;
      }
      var r = q.x + this._offsetLocation.x;
      var s = q.y + this._offsetLocation.y;
      return new Telerik.Web.UI.Bounds(r, s, r + q.width, s + q.height);
    },
    _constrainPosition: function (r, q, p) {
      return Math.max(q, Math.min(p, r));
    },
    _constrainDimension: function (q, p) {
      return this._constrainPosition(q, 0, p);
    },
    _fixIeHeight: function (s, q) {
      if ("CSS1Compat" == document.compatMode) {
        var p = s.offsetHeight - parseInt(q, 10);
        if (p > 0) {
          var r = parseInt(s.style.height, 10) - p;
          if (r > 0) {
            s.style.height = r + "px";
          }
        }
      }
    },
    _setIframesVisible: function (p) {
      if (!this.get_hideIframes()) {
        return;
      }
      var t = this._document.getElementsByTagName("iframe");
      var u = this.get_iframeToSkip();
      for (var s = 0, v = t.length; s < v; s++) {
        var r = t[s];
        if (u && (u === r || u == r)) {
          u = null;
        } else {
          r.style.visibility = p ? "" : "hidden";
          if ($telerik.isIE) {
            try {
              r.contentWindow.document.body.style.visibility = p
                ? ""
                : "hidden";
            } catch (q) {}
          }
        }
      }
    },
    _configureHandleElements: function (p) {
      var r = this._handles;
      var s = [
        "nw",
        "n",
        "ne",
        "w",
        "e",
        "sw",
        "s",
        "se",
        this._moveCursorType,
      ];
      for (var t = 0, v = s.length; t < v; t++) {
        var w = s[t];
        var q = r[w];
        if (q) {
          if (Object.prototype.toString.call(q) === "[object Array]") {
            for (var u = 0; u < q.length; u++) {
              this._configureHandle("id" + t + "_" + u, p, q[u], w);
            }
          } else {
            this._configureHandle("id" + t, p, q, w);
          }
        }
      }
    },
    _configureHandle: function (x, q, t, w) {
      var v = this;
      var p = $telerik.$(t);
      var s = this._saveDelegates;
      var r = s[x] ? s[x].delegate : null;
      if (q) {
        if (!r) {
          var u = $telerik.$.proxy(v._onHandleMouseDown, v);
          p.onEvent(a.EventType.Down + h, u);
          p.on(d + h, function (y) {
            y.preventDefault();
          });
          t.style.cursor = w == this._moveCursorType ? w : w + "-resize";
          s[x] = { element: t, delegate: u };
        }
      } else {
        if (r) {
          p.offEvent(a.EventType.Down + h, v.delegate);
          p.off(d + h);
          t.style.cursor = "";
          delete s[x];
        }
      }
    },
    _attachDocumentHandlers: function (q) {
      var t = this;
      var p = $telerik.$(t._document);
      if (q) {
        t._documentMouseMoveDelegate = $telerik.$.proxy(
          t._onDocumentMouseMove,
          t
        );
        p.onEvent(a.EventType.Move + h, t._documentMouseMoveDelegate);
        t._documentMouseUpDelegate = $telerik.$.proxy(t._onDocumentMouseUp, t);
        p.onEvent(a.EventType.Up + h, t._documentMouseUpDelegate);
      } else {
        var s = t._documentMouseMoveDelegate;
        if (s) {
          p.offEvent(a.EventType.Move + h, s);
        }
        var r = t._documentMouseUpDelegate;
        if (r) {
          p.offEvent(a.EventType.Up + h, r);
        }
        t._documentMouseMoveDelegate = null;
        t._documentMouseUpDelegate = null;
      }
    },
    _canExecuteTouchEvent: function (p) {
      var s = this,
        t = s._utils,
        r = p.originalEvent ? p.originalEvent : null,
        q = null;
      if (t.isTouch) {
        if (r) {
          if (t.hasPointer) {
            if (r.pointerId) {
              q = r.pointerId;
            }
          } else {
            if (r.targetTouches && r.targetTouches[0]) {
              q = r.targetTouches[0].identifier;
            }
          }
          if (s._touchEventIdentifier !== null) {
            if (s._touchEventIdentifier !== q) {
              return false;
            }
          } else {
            s._touchEventIdentifier = q;
          }
          return true;
        } else {
          return true;
        }
      } else {
        return true;
      }
    },
    _cleanUpPointerTracking: function (p) {
      var s = this;
      if (!m.hasPointer) {
        return;
      }
      m._pointers = s._getUniquePointerIds();
      var r = m._pointers;
      var q = p.originalEvent
        ? this._indexOfPointer(p.originalEvent.pointerId)
        : null;
      if (q !== null && q !== -1) {
        r.splice(q, 1);
      }
    },
    _getUniquePointerIds: function () {
      var r = m._pointers,
        s = [],
        q = null,
        p = [];
      s = $telerik.$.grep(r, function (t, u) {
        if (!t.pointerId) {
          return false;
        }
        q = t.pointerId;
        if ($telerik.$.inArray(q, p) === -1) {
          p.push(q);
          return true;
        }
        return false;
      });
      return s;
    },
    _indexOfPointer: function (q) {
      var r = m._pointers,
        s = r.length;
      for (var p = 0; p < s; p++) {
        if (q === r[p].pointerId) {
          return p;
        }
      }
      return -1;
    },
    _updatePointer: function (p) {
      var r = this;
      if (!m.hasPointer) {
        return;
      }
      var q = p.originalEvent
        ? r._indexOfPointer(p.originalEvent.pointerId)
        : null;
      if (q !== null && q !== -1) {
        if (p.originalEvent.pointerId === r._touchEventIdentifier) {
          m._pointers[q].pageX = e(p.originalEvent.pageX);
          m._pointers[q].pageY = e(p.originalEvent.pageY);
        }
      }
    },
    _onHandleMouseDown: function (q) {
      var s = this,
        u = s._utils,
        t = null,
        r = q.originalEvent,
        p = true;
      if (u.isTouch) {
        if (r) {
          t = s._getTouchEventIdentifier(q);
          if (t !== null) {
            m._pointers.push({ pageX: e(r[i]), pageY: e(r[j]), pointerId: t });
          }
          p = s._canExecuteTouchEvent(q);
        } else {
          s._resetTouchIdentifier();
        }
      }
      if (p) {
        s._updatePointer(q);
        s._storeStartCoords(q);
      }
      if (!u.isTouch) {
        return $telerik.cancelRawEvent(q);
      }
      if (u.isTouch && u.hasPointer) {
        s._onDocumentMouseMove(q);
      }
    },
    _onDocumentMouseMove: function (q) {
      var r = this,
        t = r._utils,
        p = true,
        s;
      if (t.isTouch) {
        p = r._canExecuteTouchEvent(q);
        r._updatePointer(q);
      }
      if (p) {
        s = r._resize(q);
      }
      if (r._autoScrollEnabled) {
        r._autoScroll(q);
      }
      if (s) {
        return $telerik.cancelRawEvent(q);
      }
    },
    _onDocumentMouseUp: function (p) {
      var r = this;
      var s = !r._cancelResize;
      r._cancelResize = true;
      r._startCursorLocation = null;
      var q = r._resizeDir && r._resizeDir.move;
      if (r._useCssTransform && q) {
        r._moveBoxBy(r._lastTouchDelta);
      }
      if (s) {
        r._clearSelection();
        r._setIframesVisible(true);
        if (q) {
          r._raiseDragEvent("DragEnd", null, p);
        } else {
          r._raiseEvent("ResizeEnd");
        }
        r._attachDocumentHandlers(false);
        if (r._scroller) {
          r._scroller.set_enabled(false);
        }
      }
      r._touchEventIdentifier = null;
      if (m.isTouch) {
        var t = r._getTouchEventIdentifier(p);
        if (t !== null) {
          r._cleanUpPointerTracking(p);
        }
      }
    },
    _getTouchIdentifier: function () {
      return this._touchEventIdentifier;
    },
    _resetTouchIdentifier: function () {
      var p = this;
      p._touchEventIdentifier = null;
    },
    _moveBoxBy: function (r, p) {
      var q = this._originalBounds;
      var s = this._offsetLocation;
      p = p || this._element;
      this._resetBoxTransform(p);
      p.style.left = q.x + r.x - s.x + "px";
      p.style.top = q.y + r.y - s.y + "px";
    },
    _resetBoxTransform: function (p) {
      var q = p.style;
      q.webkitTransform = q.mozTransform = q.OTransform = q.msTranslate =
        "translate(0,0)";
    },
    _clearSelection: function () {
      if (this._document.selection && this._document.selection.empty) {
        try {
          this._document.selection.empty();
        } catch (p) {}
      }
    },
    _initializeAutoScroll: function () {
      if (this._autoScrollInitialized) {
        return;
      }
      this._scrollEdgeConst = 40;
      this._scrollByConst = 10;
      this._scroller = null;
      this._scrollDeltaX = 0;
      this._scrollDeltaY = 0;
      this._scrollerTickHandler = Function.createDelegate(
        this,
        this._onScrollerTick
      );
      this._scroller = new Telerik.Web.Timer();
      this._scroller.set_interval(10);
      this._scroller.add_tick(this._scrollerTickHandler);
      this._autoScrollInitialized = true;
    },
    _autoScroll: function (q) {
      this._initializeAutoScroll();
      var p = $telerik.getClientBounds();
      if (p.width > 0) {
        this._scrollDeltaX = this._scrollDeltaY = 0;
        if (q.clientX < p.x + this._scrollEdgeConst) {
          this._scrollDeltaX = -this._scrollByConst;
        } else {
          if (q.clientX > p.width - this._scrollEdgeConst) {
            this._scrollDeltaX = this._scrollByConst;
          }
        }
        if (q.clientY < p.y + this._scrollEdgeConst) {
          this._scrollDeltaY = -this._scrollByConst;
        } else {
          if (q.clientY > p.height - this._scrollEdgeConst) {
            this._scrollDeltaY = this._scrollByConst;
          }
        }
        var r = this._scroller;
        if (this._scrollDeltaX != 0 || this._scrollDeltaY != 0) {
          this._originalStartX = this._startX;
          this._originalStartY = this._startY;
          r.set_enabled(true);
        } else {
          if (r.get_enabled()) {
            this._startX = this._originalStartX;
            this._startY = this._originalStartY;
          }
          r.set_enabled(false);
        }
      }
    },
    _onScrollerTick: function () {
      var v = document.documentElement.scrollLeft || document.body.scrollLeft;
      var w = document.documentElement.scrollTop || document.body.scrollTop;
      window.scrollBy(this._scrollDeltaX, this._scrollDeltaY);
      var t = document.documentElement.scrollLeft || document.body.scrollLeft;
      var u = document.documentElement.scrollTop || document.body.scrollTop;
      var p = t - v;
      var q = u - w;
      var r = this._element;
      var x = {
        x: parseInt(r.style.left, 10) + p,
        y: parseInt(r.style.top, 10) + q,
      };
      this._startX -= p;
      this._startY -= q;
      try {
        $telerik.setLocation(r, x);
      } catch (s) {}
    },
  };
  a.ResizeExtender.registerClass(
    "Telerik.Web.UI.ResizeExtender",
    null,
    Sys.IDisposable
  );
})();
(function (a, d) {
  Type.registerNamespace("Telerik.Web.UI");
  var b = Telerik.Web.UI;
  var c =
    "a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex], *[contenteditable]";
  b.TabKeyTrap = function (e) {
    this.element = e;
    this.trapDelegate = Function.createDelegate(this, this._keepInTrap);
  };
  b.TabKeyTrap.prototype = {
    trap: function () {
      $telerik.onEvent(this.element, "keydown", this.trapDelegate);
    },
    removeTrap: function () {
      $telerik.offEvent(this.element, "keydown", this.trapDelegate);
    },
    dispose: function () {
      this.element = d;
    },
    _keepInTrap: function (g) {
      if (g.which !== 9) {
        return;
      }
      var f = a(this.element);
      var l = g.target;
      var h = f.find(c).filter(":visible[tabindex!=-1]");
      var i = h.length;
      var k = i - 1;
      var j = h.index(l);
      if (g.shiftKey) {
        if (j === 0) {
          h.get(k).focus();
          g.preventDefault();
        }
      } else {
        if (j === k) {
          h.get(0).focus();
          g.preventDefault();
        }
      }
    },
  };
  b.TabKeyTrap.registerClass("Telerik.Web.UI.TabKeyTrap");
})($telerik.$);

/* END Telerik.Web.UI.Common.Popup.PopupScripts.js */
/* START Telerik.Web.UI.Window.RadWindowScripts.js */
Type.registerNamespace("Telerik.Web.UI");
(function (a, c, k) {
  $telerik.toWindow = function (m) {
    return m;
  };
  $telerik.findWindow = $find;
  var b = Sys.Serialization.JavaScriptSerializer;
  var l = { top: 0, left: 0, bottom: 0, right: 0, horizontal: 0, vertical: 0 };
  var f = window;
  var h = f.parseInt;
  var e = f.document;
  var g = "html";
  var d = "body";
  var i = "rwPreventPageScrolling";
  var j = Telerik.Web.Browser.scrollBarWidth;
  c.RadWindowControllerClass = function () {
    this._activeWindow = null;
    this._historyStack = [];
  };
  c.RadWindowControllerClass.prototype = {
    getInstance: function () {
      return this;
    },
    hideCurrentWindowIfNonModal: function () {
      if (
        this._activeWindow != null &&
        this._activeWindow.isModal &&
        !this._activeWindow.isModal()
      ) {
        this._activeWindow.close();
      }
      this._activeWindow = null;
    },
    inactivateCurrentWindow: function () {
      if (this._activeWindow != null) {
        this._activeWindow.setActive(false);
      }
      this._activeWindow = null;
    },
    set_activeWindow: function (m) {
      if (m == this._activeWindow) {
        return;
      }
      this.inactivateCurrentWindow();
      this._activeWindow = m;
      Array.remove(this._historyStack, m);
      Array.add(this._historyStack, m);
    },
    notifyWindowClosed: function (m) {
      if (this._activeWindow == m) {
        this._activeWindow = null;
      }
      Array.remove(this._historyStack, m);
      this._activatePreviousWindow();
    },
    _activatePreviousWindow: function () {
      var m = this._historyStack;
      var n = m.length - 1;
      for (; n >= 0; n--) {
        var o = m[n];
        if (!o) {
          return;
        }
        if (o.isCreated() && !o.isClosed() && !o.isMinimized()) {
          o.setActive(true);
          break;
        } else {
          Array.removeAt(m, n);
        }
      }
    },
    get_activeWindow: function () {
      return this._activeWindow;
    },
  };
  c.RadWindowControllerClass.registerClass(
    "Telerik.Web.UI.RadWindowControllerClass",
    null
  );
  if (!c.RadWindowController) {
    c.RadWindowController = new c.RadWindowControllerClass();
  }
  Type.registerNamespace("Telerik.Web.UI");
  Type.registerNamespace("Telerik.Web.UI.RadWindowUtils");
  c.RadWindowUtils.Localization = {
    Close: "Close",
    Minimize: "Minimize",
    Maximize: "Maximize",
    Reload: "Reload",
    PinOn: "Pin on",
    PinOff: "Pin off",
    Restore: "Restore",
    OK: "OK",
    Cancel: "Cancel",
    Yes: "Yes",
    No: "No",
  };
  a.registerEnum(c, "WindowBehaviors", {
    None: 0,
    Resize: 1,
    Minimize: 2,
    Close: 4,
    Pin: 8,
    Maximize: 16,
    Move: 32,
    Reload: 64,
    Default: 1 + 2 + 4 + 8 + 16 + 32 + 64,
  });
  a.registerEnum(c, "WindowAutoSizeBehaviors", {
    Width: 1,
    WidthProportional: 2,
    Height: 4,
    HeightProportional: 8,
    Default: 2 + 8,
  });
  a.registerEnum(c, "WindowAnimation", {
    None: 0,
    Resize: 1,
    Fade: 2,
    Slide: 4,
    FlyIn: 8,
  });
  a.registerEnum(c, "WindowMinimizeMode", {
    SameLocation: 1,
    MinimizeZone: 2,
    Default: 1,
  });
  c.RadWindow = function (m) {
    c.RadWindow.initializeBase(this, [m]);
    this._openerElement = null;
    this._offsetElement = null;
    this._popupElement = null;
    this._tableElement = null;
    this._contentElement = null;
    this._contentCell = null;
    this._titleElement = null;
    this._titleCell = null;
    this._titlebarElement = null;
    this._statusCell = null;
    this._statusMessageElement = null;
    this._iframe = null;
    this._dockMode = false;
    this._isPredefined = false;
    this._buttonsElement = null;
    this._buttonsArray = [];
    this._iconUrl = "";
    this._shortCutManager = null;
    this._tabIndex = null;
    this.isIE = $telerik.isIE;
    this._openerElementID = null;
    this._offsetElementID = null;
    this._behaviors = c.WindowBehaviors.Default;
    this._left = null;
    this._top = null;
    this._title = "";
    this._width = "300px";
    this._minWidth = null;
    this._minHeight = null;
    this._defaultMinWidth = null;
    this._defaultMinHeight = null;
    this._handlesWidth = null;
    this._resizeOverlayElement = null;
    this._height = "300px";
    this._opacity = 100;
    this._visibleTitlebar = true;
    this._visibleStatusbar = true;
    this._modal = false;
    this._overlay = false;
    this._keepInScreenBounds = false;
    this._windowAnimation = null;
    this._onMouseDownDelegate = null;
    this._onClickDelegate = null;
    this._onTitlebarDblclickDelegate = null;
    this._onTitlebarClickDelegate = null;
    this._onWindowResizeDelegate = null;
    this._onIframeLoadDelegate = null;
    this._onChildPageUnloadDelegate = null;
    this._onChildPageClickDelegate = null;
    this._onKeyDownDelegate = null;
    this._onModalShowHandler = null;
    this._onModalCloseHandler = null;
    this._loaded = false;
    this._isCloned = false;
    this._restoreRect = null;
    this._popupBehavior = null;
    this._popupVisible = false;
    this._initialHandlesCursor = [];
    this._dropDownTouchScroll = null;
    this._browserWindow = window;
    this._stylezindex = null;
    this._renderMode = c.RenderMode.Classic;
    var n = navigator.userAgent;
    this._isiPhoneiPadAppleWebkit =
      n.match(/iPhone|iPad/) && n.match(/AppleWebKit/);
    this._iframeWrapper = null;
    this._ariaSettings = null;
    this.GetWindowManager = this.get_windowManager;
    this.BrowserWindow = window;
    this.GetContentFrame = this.get_contentFrame;
    this.GetLeftPosition = function () {
      this.getWindowBounds().x;
    };
    this.GetTopPosition = function () {
      this.getWindowBounds().y;
    };
    this.GetTitlebar = function () {
      return this.ui ? this.ui.titlebar : null;
    };
    this.GetStatusbar = function () {
      return this._statusCell;
    };
    this.SetOpenerElementId = this.set_openerElementID;
    this.SetStatus = this.set_status;
    this.GetStatus = this.get_status;
    this.SetModal = this.set_modal;
    this.SetWidth = this.set_width;
    this.SetHeight = this.set_height;
    this.GetWidth = this.get_width;
    this.GetHeight = this.get_height;
    this.SetOffsetElementId = this.set_offsetElementID;
    this.SetTitle = this.set_title;
    this.MoveTo = this.moveTo;
    this.Center = this.center;
    this.SetVisible = this.setVisible;
    this.SetSize = this.setSize;
    this.Show = this.show;
    this.Hide = this.hide;
    this.GetUrl = this.get_navigateUrl;
    this.SetUrl = this.setUrl;
    this.Reload = this.reload;
    this.SetActive = this.setActive;
    this.Minimize = this.minimize;
    this.Restore = this.restore;
    this.Maximize = this.maximize;
    this.Close = this.close;
    this.TogglePin = this.togglePin;
    this.IsMaximized = this.isMaximized;
    this.IsMinimized = this.isMinimized;
    this.IsModal = this.isModal;
    this.IsClosed = this.isClosed;
    this.IsPinned = this.isPinned;
    this.IsVisible = this.isVisible;
    this.IsActive = this.isActive;
    this.IsBehaviorEnabled = this.isBehaviorEnabled;
  };
  c.RadWindow.prototype = {
    _getLocalization: function () {
      return c.RadWindowUtils.Localization;
    },
    _getLocalizationString: function (o) {
      var n = this.get_localization();
      if (typeof n == "string") {
        n = Sys.Serialization.JavaScriptSerializer.deserialize(n);
        this.set_localization(n);
      }
      var m = this._getLocalization();
      if (!n) {
        return m[o];
      }
      return n[o];
    },
    _registerGlobalBodyEventHandlers: function (n) {
      var m = this.get_shortcuts();
      if (!m) {
        return;
      }
      if (!this._shortCutManager) {
        this._shortCutManager = new c.WindowShortCutManager(m);
      }
      if (n) {
        this._onKeyDownDelegate = Function.createDelegate(
          this,
          this._onKeyDown
        );
        $addHandler(e.documentElement, "keydown", this._onKeyDownDelegate);
      } else {
        if (this._onKeyDownDelegate) {
          $removeHandler(e.documentElement, "keydown", this._onKeyDownDelegate);
          this._onKeyDownDelegate = null;
        }
      }
    },
    _registerIframeLoadHandler: function (m) {
      if (!this._iframe) {
        return;
      }
      if (m) {
        this._onIframeLoadDelegate = Function.createDelegate(
          this,
          this._onIframeLoad
        );
        $addHandler(this._iframe, "load", this._onIframeLoadDelegate);
      } else {
        if (this._onIframeLoadDelegate) {
          $removeHandler(this._iframe, "load", this._onIframeLoadDelegate);
          this._onIframeLoadDelegate = null;
          $clearHandlers(this._iframe);
        }
      }
    },
    _registerWindowResizeHandler: function (m) {
      if (m) {
        this._onWindowResizeDelegate = Function.createDelegate(
          this,
          this._maintainMaximizedSize
        );
        $addHandler(window, "resize", this._onWindowResizeDelegate);
      } else {
        if (this._onWindowResizeDelegate) {
          $removeHandler(window, "resize", this._onWindowResizeDelegate);
          this._onWindowResizeDelegate = null;
        }
      }
    },
    _registerOpenerElementHandler: function (n, m) {
      if (!n) {
        return;
      }
      if (Sys.UI.DomElement.containsCssClass(n, "RadButton")) {
        n.setAttribute("rwOpener", true);
      } else {
        n.removeAttribute("rwOpener");
      }
      if (true == m) {
        this._onClickDelegate = Function.createDelegate(this, this._onClick);
        a(n).on("click", this._onClickDelegate);
      } else {
        a(n).off("click", this._onClickDelegate);
        this._onClickDelegate = null;
      }
    },
    _registerTitlebarHandlers: function (m) {
      var n = this.ui ? this.ui.titleCell || this.ui.titlebar : null;
      if (m) {
        this._onTitlebarDblclickDelegate = Function.createDelegate(
          this,
          function () {
            if (this.isMinimized()) {
              this.restore();
            } else {
              if (this.isBehaviorEnabled(c.WindowBehaviors.Maximize)) {
                if (this.isMaximized()) {
                  this.restore();
                } else {
                  this.maximize();
                }
              }
            }
          }
        );
        this._onTitlebarClickDelegate = Function.createDelegate(
          this,
          function () {
            if (this._getWindowController()._activeWindow === this) {
              this.setActive(true);
            }
          }
        );
        $addHandler(n, "dblclick", this._onTitlebarDblclickDelegate);
        $addHandler(n, "click", this._onTitlebarClickDelegate);
      } else {
        if (n) {
          if (this._onTitlebarDblclickDelegate) {
            $removeHandler(n, "dblclick", this._onTitlebarDblclickDelegate);
            this._onTitlebarDblclickDelegate = null;
          }
          if (this._onTitlebarClickDelegate) {
            $removeHandler(n, "click", this._onTitlebarClickDelegate);
            this._onTitlebarClickDelegate = null;
          }
          $clearHandlers(n);
        }
      }
    },
    _makeModal: function (m) {
      if (this._onModalShowHandler) {
        this.remove_show(this._onModalShowHandler);
        this._onModalShowHandler = null;
      }
      if (this._onModalCloseHandler) {
        this.remove_close(this._onModalCloseHandler);
        this._onModalCloseHandler = null;
      }
      if (this._modalExtender) {
        this._modalExtender.dispose();
        this._modalExtender = null;
      }
      if (!m) {
        return;
      }
      if (
        typeof c.RadWindowManager != "undefined" &&
        c.RadWindowManager.isInstanceOfType(this)
      ) {
        return;
      }
      this._onModalShowHandler = function (r) {
        if (!r._modalExtender) {
          var q = r._popupElement;
          var p = r.get_enableAriaSupport();
          r._modalExtender = new c.ModalExtender(q, {
            enableAriaSupport: p,
            getNodesToHide: function () {
              return a(q).nextAll(":not(script,link)").get();
            },
            trapTabKey: p,
          });
        }
        r._modalExtender.show();
        var o = null;
        try {
          o = e.activeElement;
        } catch (n) {
          e.documentElement.focus();
          o = e.activeElement;
        }
        if (o && o.tagName && o.tagName.toLowerCase() != "body") {
          var s =
            !$telerik.isDescendant(this._contentElement, o) && this._dockMode;
          if (!r._isPredefined || s) {
            r._focusedPageElement = o;
            o.blur();
          }
        }
        if (r.get_centerIfModal()) {
          r.center();
        }
      };
      this.add_show(this._onModalShowHandler);
      this._onModalCloseHandler = function (n) {
        window.setTimeout(function () {
          if (n._modalExtender) {
            n._modalExtender.hide();
          }
          var p = n._focusedPageElement;
          if (p) {
            try {
              p.focus();
            } catch (o) {}
            n._focusedPageElement = null;
          }
        }, 10);
      };
      this.add_close(this._onModalCloseHandler);
    },
    _enableMoveResize: function (n) {
      if (!this.view) {
        return;
      }
      var m = {
        resize: this.isBehaviorEnabled(c.WindowBehaviors.Resize),
        move: this.isBehaviorEnabled(c.WindowBehaviors.Move),
      };
      if (n) {
        this.view.enableMoveResize(m);
      } else {
        this.view.disableMoveResize(m);
      }
    },
    _setResizeOverlayVisible: function (m) {
      if (this._dockMode) {
        return;
      }
      var o = this._resizeOverlayElement;
      if (!o) {
        var p = this._getHandlesWidth();
        var n = this._visibleTitlebar ? this._getTitlebarHeight() : p;
        o = e.createElement("div");
        o.style.position = "absolute";
        o.style.zIndex = "1";
        o.style.top = n + "px";
        o.style.left = Math.round(p / 2) + "px";
        o.style.backgroundColor = "White";
        o.style.filter = "alpha(opacity=0)";
        o.style.opacity = 0;
        this._contentCell.appendChild(o);
        this._resizeOverlayElement = o;
      }
      this._setResizeOverlaySize();
      o.style.display = m ? "" : "none";
    },
    _setResizeOverlaySize: function () {
      var n = this._resizeOverlayElement;
      if (n) {
        var m = this._contentCell;
        n.style.width = m.offsetWidth + "px";
        n.style.height = m.offsetHeight + "px";
      }
    },
    onResizeStart: function () {
      if (this.isMaximized()) {
        return false;
      }
      this.setActive(true);
      this._setResizeOverlayVisible(true);
      this._cachedDragZoneBounds = this._getRestrictionZoneBounds();
      var m = new Sys.CancelEventArgs();
      this.raiseEvent("resizeStart", m);
      if (m.get_cancel()) {
        return false;
      }
    },
    onResizing: function (m) {
      if (
        !this._cachedDragZoneBounds ||
        this._checkRestrictionZoneBounds(this._cachedDragZoneBounds, m)
      ) {
        if (this._dockMode) {
          this.setWidthDockMode(m.width - 1);
          this.setHeightDockMode(m.height - 1);
        } else {
          this._setResizeOverlaySize();
        }
        var o = this._getCurrentBounds();
        var s = this.get_minWidth();
        var q = h(this.get_maxWidth(), 10);
        var r = this.get_minHeight();
        var p = h(this.get_maxHeight(), 10);
        var n = false;
        if (m.width < s || (q && m.width > q)) {
          var u = s;
          if (m.width < s) {
            m.width = s;
          } else {
            m.width = q;
            u = q;
          }
          var t = this._resizeExtender._originalBounds;
          if (this._resizeExtender._resizeDir.west) {
            m.x = t.x + (t.width - u);
            if (this._cachedDragZoneBounds) {
              m.x -= this._cachedDragZoneBounds.x;
            }
          } else {
            m.x = o.x;
          }
          m.y = o.y;
          m.height = o.height;
          n = true;
        }
        if (m.height < r || (p && m.height > p)) {
          m.height = m.height < r ? r : p;
          m.x = o.x;
          m.y = o.y;
          m.width = o.width;
          n = true;
        }
        if (n) {
          this.setSize(m.width, m.height);
          this._setPopupVisible(m.x, m.y);
          return false;
        }
        this._updateTitleWidth();
        return true;
      }
      return false;
    },
    onResizeEnd: function () {
      this._cachedDragWindowBounds = null;
      var m = this._getCurrentBounds();
      if (!this._dockMode) {
        this._setResizeOverlayVisible(false);
      }
      this._setPopupVisible(m.x, m.y);
      this._storeBounds();
      if (this._overlay && $telerik.isFirefox) {
        this._popupBehavior._onMove();
      }
      this.raiseEvent("resizeEnd", new Sys.EventArgs());
    },
    onDragStart: function () {
      this.setActive(true);
      if (this.isPinned() || this.isMaximized()) {
        return false;
      }
      if (this.isMinimized() && this.get_minimizeZoneID()) {
        return false;
      }
      var o = this.get_popupElement();
      this._cachedDragZoneBounds = this._getRestrictionZoneBounds();
      var n = $telerik.getSize(o);
      var m = $telerik.getBorderBox(o);
      n.width -= m.horizontal;
      n.height -= m.vertical;
      this._cachedDragWindowBounds = n;
      this._setResizeOverlayVisible(true);
      this.raiseEvent("dragStart", new Sys.EventArgs());
      return true;
    },
    onDragEnd: function (n) {
      this._cachedDragZoneBounds = null;
      this._cachedDragWindowBounds = null;
      if (this._overlay && $telerik.isFirefox) {
        this._popupBehavior._onMove();
      }
      this._setResizeOverlayVisible(false);
      var m = this._getCurrentBounds();
      this.moveTo(m.x, m.y);
      this.setActive(true);
      if (this.isMinimized()) {
        this._getTitleElement().style.width = "";
      }
      this.raiseEvent("dragEnd", new Sys.EventArgs());
    },
    onDrag: function (m) {
      if (!this._cachedDragZoneBounds) {
        return true;
      }
      var o = this._cachedDragWindowBounds;
      var p = this._cachedDragZoneBounds;
      m.width = o.width;
      m.height = o.height;
      var n = this._checkRestrictionZoneBounds(p, m);
      if (!n) {
        if (m.x <= p.x) {
          m.x = p.x;
        } else {
          if (p.x + p.width <= m.x + o.width) {
            m.x = p.x + p.width - o.width;
          }
        }
        if (m.y <= p.y) {
          m.y = p.y;
        } else {
          if (p.y + p.height <= m.y + o.height) {
            m.y = p.y + p.height - o.height;
          }
        }
        n = true;
      }
      return n;
    },
    initialize: function () {
      c.RadWindow.callBaseMethod(this, "initialize");
      this._positionX = this._left;
      this._positionY = this._top;
      this.initView();
      var n = this.get_element();
      if (
        n.innerHTML
          .toLowerCase()
          .indexOf(
            "thank you for using the trial version of telerikï¿½ ui for asp.net ajax"
          ) > 0
      ) {
        n.style.display = "";
      }
      if (this.get_visibleOnPageLoad()) {
        setTimeout(
          Function.createDelegate(this, function () {
            this.show();
          }),
          0
        );
      }
      this._registerWindowResizeHandler(true);
      var m = this.get_element().className;
      if (m) {
        this.set_cssClass(m.replace(/^ /, ""));
      }
    },
    initView: function () {
      var m = c.Window.UIFactory;
      if (!this.ui || this.ui.window != this) {
        this.ui = m.getRenderer(this._renderMode, this);
      }
      if (!this.view || this.view.window != this) {
        this.view = m.getView(this._renderMode, this);
      }
    },
    dispose: function () {
      var n = this;
      var m = this.get_windowManager();
      if (m) {
        if (m.get_preserveClientState()) {
          m.saveWindowState(this);
        }
        if (this.get_destroyOnClose()) {
          m.removeWindow(this);
        }
      }
      this.disposeUI();
      if (n._keyboardNavigation) {
        n._keyboardNavigation.dispose();
      }
      c.RadWindow.callBaseMethod(this, "dispose");
    },
    disposeUI: function () {
      if (this._windowAnimation) {
        this._windowAnimation.dispose();
      }
      if (!$telerik.isChrome && !$telerik.isSafari) {
        this._removeFromDOM = this.get_destroyOnClose();
      }
      this._enableMoveResize(false);
      this._makeModal(false);
      this._registerTitlebarHandlers(false);
      if (this._titleIconElement) {
        $clearHandlers(this._titleIconElement);
      }
      this._registerWindowResizeHandler(false);
      this._registerIframeLoadHandler(false);
      if (this._openerElement) {
        this._registerOpenerElementHandler(this._openerElement, false);
      }
      this.set_behaviors(c.WindowBehaviors.None);
      if (this.view) {
        this.view.dispose();
      }
      if (this.ui) {
        this.ui.dispose();
      }
      this.view = this.ui = null;
      var n = this._iframe;
      if (n) {
        n.radWindow = null;
        var r = "sandbox" in e.createElement("iframe");
        n.src = r ? "about:blank" : "javascript:'<html></html>';";
        n.name = "";
        n.removeAttribute("name");
        n.removeAttribute("NAME");
      }
      this._createTouchScrollExtender(false);
      if (this._contentElement && this._isPredefined) {
        this._contentElement.innerHTML = "";
      }
      var m = this.get_contentElement();
      if (this._dockMode && m) {
        if (Sys && Sys.WebForms) {
          var q = Sys.WebForms.PageRequestManager.getInstance();
          if (q && q.get_isInAsyncPostBack()) {
            $telerik.disposeElement(m);
          }
        }
      }
      var o = this._popupElement;
      if (o && o.parentNode) {
        o.parentNode.removeChild(o);
      }
      this._popupVisible = false;
      var p = this._popupBehavior;
      if (this.get_destroyOnClose() && p) {
        p.dispose();
        this._popupBehavior = null;
      }
    },
    hide: function () {
      this._hide();
      this._registerGlobalBodyEventHandlers(false);
      return true;
    },
    clone: function (o) {
      var p = e.createElement("span");
      var q;
      if (o) {
        p.setAttribute("id", o);
      }
      var n = this.get_contentElement();
      var m = n ? n.cloneNode(true) : null;
      if (this._renderMode != c.RenderMode.Classic) {
        this._contentElement = m;
      }
      try {
        q = $telerik.cloneControl(this, c.RadWindow, p);
        q._enableRippleEffect = this._enableRippleEffect;
      } finally {
        if (this._renderMode != c.RenderMode.Classic && n) {
          this.set_contentElement(n);
        }
      }
      return q;
    },
    _createTouchScrollExtender: function (o) {
      var m = $get(this.get_id() + "_C");
      if (m) {
        var n = this._dropDownTouchScroll;
        if (n) {
          if (!o) {
            n.dispose();
            this._dropDownTouchScroll = null;
          }
        } else {
          if (o) {
            this._dropDownTouchScroll = new c.TouchScrollExtender(m);
            this._dropDownTouchScroll.initialize();
          }
        }
      }
    },
    set_contentElement: function (m) {
      if (!this._isPredefined && m.getElementsByTagName("iframe").length == 0) {
        this._dockMode = true;
      }
      if (this.view) {
        this.view.setContent(m);
      }
    },
    _setShadowCSSClass: function (m) {
      this.ui.setShadowCssClass(m);
    },
    get_contentElement: function () {
      return this._contentElement || (this.ui ? this.ui.pendingContent : null);
    },
    isCreated: function () {
      return this._popupElement != null;
    },
    show: function () {
      var n = this.isCreated();
      this._createUI();
      var m = new Sys.CancelEventArgs();
      this.setZIndexCss();
      this.raiseEvent("beforeShow", m);
      if (m.get_cancel()) {
        return;
      }
      if (this.get_navigateUrl() && (!n || this.get_reloadOnShow())) {
        this.setUrl(this.get_navigateUrl());
      }
      if (!n && this.get_initialBehaviors() != c.WindowBehaviors.None) {
        this._show();
        this._afterShow();
        if (this.isInitialBehaviorEnabled(c.WindowBehaviors.Minimize)) {
          this.minimize();
        }
        if (this.isInitialBehaviorEnabled(c.WindowBehaviors.Maximize)) {
          this.maximize();
        }
        if (this.isInitialBehaviorEnabled(c.WindowBehaviors.Pin)) {
          this.togglePin();
        }
        return;
      }
      if (this.get_animation() == c.WindowAnimation.None) {
        this._show();
        this._afterShow();
      } else {
        this._playAnimation();
      }
    },
    _show: function () {
      var q = this;
      if (this.get_offsetElementID() && !this._offsetElement) {
        var o = $get(this.get_offsetElementID());
        if (o) {
          this._offsetElement = o;
        }
      }
      var n = this._popupBehavior.get_parentElement();
      if (this._offsetElement && !this._offsetSet) {
        this._popupBehavior.set_parentElement(this._offsetElement);
        this._offsetSet = true;
      }
      this.set_visibleTitlebar(this._visibleTitlebar);
      this.set_visibleStatusbar(this._visibleStatusbar);
      if (q.get_enableShadow()) {
        q._setShadowCSSClass(true);
      } else {
        q._setShadowCSSClass(false);
      }
      this._reSetWindowPosition();
      this._popupVisible = true;
      this.setVisible(true);
      var p = this._getStoredBounds();
      if (this._firstShow && !p) {
        this.set_width(this.get_width());
        this.set_height(this.get_height());
      } else {
        this._restoreBounds();
      }
      if (n != this._popupBehavior.get_parentElement()) {
        this._popupBehavior.set_parentElement(n);
      }
      var m = this.get_contentElement();
      if (!this._isPredefned && m) {
        $telerik.repaintChildren(m);
      }
    },
    _hide: function () {
      if (!this.get_animation() || this.get_animation() == 0) {
        this._afterHide();
      } else {
        if (this._enableShadow && $telerik.isIE) {
          this._setShadowCSSClass(false);
        }
        var n = Function.createDelegate(this, this._afterHide),
          o = this.isMaximized(),
          m = this.get_animationDuration();
        $telerik
          .$(this._popupElement)
          .stopTransition()
          .transition({ opacity: 0 }, m, "linear", function () {
            n(o);
          });
      }
    },
    _afterHide: function (m) {
      if (!this._popupBehavior) {
        return;
      }
      if (m == null) {
        m = this.isMaximized();
      }
      var n = this.isMinimized();
      if (m || n) {
        this.restore();
      }
      if ($telerik.isFirefox) {
        this.setOverflowVisible(false);
      }
      this._popupVisible = false;
      if ($telerik.isIE9 || $telerik.isIE10) {
        this._moveElementToShowOutOfView();
      } else {
        this.setVisible(false);
      }
      this._getWindowController().notifyWindowClosed(this);
      this._isClosing = false;
    },
    _moveElementToShowOutOfView: function () {
      if (!this.view) {
        this.initView();
      }
      this.view.moveOutOfSight();
    },
    get_leftHidingPoint: function () {
      return this._isRightToLeft ? 10000 : -10000;
    },
    _afterShow: function () {
      if ($telerik.isIE9 || $telerik.isIE10) {
        this._restoreElementToShowStyling();
      }
      this._restoreElementToShowOpacity();
      this.setActive(true);
      if ($telerik.isFirefox) {
        this.setOverflowVisible(true);
      }
      this._registerGlobalBodyEventHandlers(true);
      this._storeBounds();
      this.raiseEvent("show", new Sys.EventArgs());
      var m = this.get_animation() != c.WindowAnimation.None;
      if (this.get_autoSize() && (this._dockMode || m)) {
        this.autoSize(m);
      }
      if (
        this.get_enableAriaSupport() &&
        this._popupElement &&
        this.isVisible()
      ) {
        this._popupElement.setAttribute("aria-hidden", "false");
      }
    },
    _restoreElementToShowStyling: function () {
      if (this._popupBehavior) {
        a(this._popupBehavior.get_elementToShow()).css("overflow", "");
      }
    },
    _restoreElementToShowOpacity: function () {
      if (this._popupBehavior) {
        var m = a(this._popupBehavior.get_elementToShow());
        if (m.css("opacity") === "0") {
          m.css("opacity", "");
        }
      }
    },
    _playAnimation: function () {
      var p = Function.createDelegate(this, function () {
        var z = this._getCalculatedPopupBounds();
        this._setPopupVisible(z.x, z.y);
        var v = $telerik.getBounds(this._popupElement);
        var y = this.get_offsetElementID();
        if (y) {
          var w = $get(y);
          if (w) {
            var x = $telerik.getBounds(w);
            v.x = x.x;
            v.y = x.y;
          }
        }
        $telerik.$(this._popupElement).hide();
        return v;
      });
      var m = this._popupElement;
      if (this._enableShadow && $telerik.isIE) {
        this._setShadowCSSClass(false);
      }
      var o = this.get_animation();
      var u = this._openerElement
        ? $telerik.getBounds(this._openerElement)
        : null;
      var q = p();
      var n = this.get_animationDuration();
      var t = "" + this._position;
      var s = null;
      var r = Function.createDelegate(this, function () {
        var v = this.get_popupElement();
        v.style.filter = "";
        if ($telerik.isIE7) {
          v.style.removeAttribute("filter");
        }
        v.style.opacity = "";
        if (this._enableShadow && $telerik.isIE && !$telerik.isIE6) {
          this._setShadowCSSClass(true);
        }
        this._show();
        this._afterShow();
      });
      c.Animations.playJQueryAnimation(m, o, u, q, t, s, r, n);
    },
    _onClick: function (m) {
      this.show();
      return this._cancelEvent(m);
    },
    _onKeyDown: function (m) {
      var n = this._shortCutManager.isShortCutHit(m);
      if (!n) {
        return;
      }
      if (this.isActive()) {
        this.fire(n.get_name());
      }
    },
    _cancelEvent: function (m) {
      if (m) {
        m.returnValue = false;
        m.cancelBubble = true;
        m.preventDefault();
        m.stopPropagation();
      }
      return false;
    },
    _getWindowController: function () {
      return c.RadWindowController.getInstance();
    },
    _getReloadOnShowUrl: function (n) {
      var o = "rwndrnd=" + Math.random();
      if (n.indexOf("?") > -1) {
        o = "&" + o;
      } else {
        o = "?" + o;
      }
      var m = n.indexOf("#");
      n = m > -1 ? n.substr(0, m) + o + n.substr(m) : n + o;
      return n;
    },
    getWindowBounds: function () {
      return this._getCalculatedPopupBounds();
    },
    toString: function () {
      return "[RadWindow id=" + this.get_id() + "]";
    },
    center: function () {
      var m = this._getCentralBounds();
      this.moveTo(m.x, m.y);
    },
    moveTo: function (q, r) {
      var n = this._popupElement;
      if (n) {
        var m = this.ui.getBounds();
        var o = this._getRestrictionZoneBounds();
        if (o) {
          var p = this._checkRestrictionZoneBounds(
            null,
            new Telerik.Web.UI.Bounds(q + o.x, r + o.y, m.width, m.height)
          );
          if (!p) {
            return false;
          }
        }
      }
      q = h(q, 10);
      r = h(r, 10);
      this._createUI();
      this._setPopupVisible(q, r);
      this._storeBounds();
      return true;
    },
    setZIndexCss: function () {
      var p = this.ui,
        m = p.container;
      var o = h(m.style.zIndex, 10);
      if (!this.isMaximized()) {
        var n =
          p.get_initialZIndexCss() ||
          Telerik.Web.UI.RadWindowUtils.get_newZindex(o);
        m.style.zIndex = "" + n;
      }
    },
    setSize: function (n, m) {
      this._firstShow = false;
      this.set_width(n);
      this.set_height(m);
      this._storeBounds();
    },
    _calculateBoundsToFit: function (I, r) {
      var v = this._renderMode == c.RenderMode.Lite;
      var J = this.get_minWidth() - this._getHandlesWidth();
      var H = this._tableElement
        ? h(this._tableElement.offsetHeight, 10) - h(this.get_height(), 10)
        : 0;
      var K = this._getTitleElement();
      if (K) {
        K.style.width = !v ? "1px" : "";
      }
      var p;
      var q;
      var B = I.parentNode;
      var C = B.style.height;
      var D = B.style.width;
      var u = I.nodeName == "IFRAME";
      I.style.height = !v || u ? "1px" : "";
      I.style.width = !v || u ? "1px" : "";
      if (v) {
        B.style.height = "1px";
        B.style.width = "1px";
      }
      if (this._dockMode) {
        var A = I.style.overflow;
        var E = I.style.position;
        a(I).css({ position: "absolute", overflow: "visible" });
        try {
          var F = I.scrollWidth + $telerik.getBorderBox(I).horizontal;
          q = F > J ? F : J;
          p = I.scrollHeight;
          if (this._contentCell) {
            Sys.UI.DomElement.addCssClass(this._contentCell, "rwLoading");
          }
        } finally {
          a(I).css({ position: E, overflow: A });
        }
      } else {
        var m = r.getElementsByTagName("body")[0];
        var o = (m && m.scrollWidth) || 0;
        var n = (m && m.scrollHeight) || 0;
        q = Math.max(r.scrollWidth, o);
        if (q < J) {
          I.style.width = J + "px";
          q = r.scrollWidth;
        }
        p = Math.max(r.scrollHeight, n);
      }
      if (v) {
        B.style.height = C;
        B.style.width = D;
      }
      var G = this._getRestrictionZoneBounds();
      var L = G ? G : this._getViewportBounds();
      var N = this._getHandlesWidth() + q;
      var t = this.get_defaultMinHeight() + p;
      if (
        this._enableShadow &&
        $telerik.isIE &&
        !$telerik.isIE6 &&
        this._tableElement
      ) {
        if (H > 0) {
          t -= H;
        }
      }
      var M = N;
      var s = t;
      if (N > L.width) {
        M = L.width;
        s += j;
      }
      if (t > L.height) {
        s = L.height;
        M += j;
      }
      var z = this.get_minWidth();
      var y = this.get_minHeight();
      var w = h(this.get_maxHeight(), 10);
      var x = h(this.get_maxWidth(), 10);
      if (z > M) {
        M = z;
      }
      if (y > s) {
        s = y;
      }
      if (w && w < s) {
        s = w;
      }
      if (x && x < M) {
        M = x;
      }
      return {
        width: Math.ceil(M),
        height: Math.ceil(s),
        contentPageWidth: q,
        contentPageHeight: p,
      };
    },
    _autoSizeBehaviorBounds: function (s, n) {
      var v = this._getRestrictionZoneBounds();
      var x = v ? v : this._getViewportBounds();
      var m = c.WindowAutoSizeBehaviors;
      var z = this.isAutoSizeBehaviorEnabled(m.WidthProportional);
      var y = this.isAutoSizeBehaviorEnabled(m.Width);
      var u = z || y;
      var q = this.isAutoSizeBehaviorEnabled(m.HeightProportional);
      var p = this.isAutoSizeBehaviorEnabled(m.Height);
      var t = q || p;
      var r = s;
      if (v) {
        r.y -= v.y;
        r.x -= v.x;
      }
      if (z && this._positionX === null) {
        r.x = this.calcPosition(s.x, s.width, n.width, x.width, false);
      }
      if (u) {
        r.width = n.width;
      }
      if (u && !t && this.get_height() < n.height) {
        r.width += j;
      }
      if (q && this._positionY === null) {
        r.y = this.calcPosition(s.y, s.height, n.height, x.height, true);
      }
      if (t) {
        r.height = n.height;
      }
      if (t && !u && this.ui.content) {
        var o = this.get_width() < this.ui.content.scrollWidth;
        r.height += o ? j : 1;
      }
      if (!v) {
        this.set_keepInScreenBounds(true);
      } else {
        if (r.width == v.width) {
          r.x = 0;
        }
        if (r.height == v.height) {
          r.y = 0;
          if (
            this._enableShadow &&
            $telerik.isIE &&
            !$telerik.isIE6 &&
            this._tableElement
          ) {
            var w =
              h(this._tableElement.offsetHeight, 10) - h(this.get_height(), 10);
            r.height -= w;
          }
        }
      }
      return r;
    },
    autoSize: function (y) {
      if (
        this._isClosing ||
        this.isClosed() ||
        this.isMinimized() ||
        this.isMaximized()
      ) {
        return;
      }
      this.setOverflowVisible(true);
      this._autoSizeInProgress = !this.get_autoSize();
      var o = this.get_contentFrame();
      var x = this._getTitleElement();
      var t = this.get_popupElement();
      var u = $telerik.getBounds(t);
      var m = $telerik.getBorderBox(t);
      var v = this.get_contentElement();
      var w = v ? $telerik.getBorderBox(v) : l;
      if (Telerik.Web.Browser.ff) {
        m = this._getBordersFF(t);
        if (v) {
          w = this._getBordersFF(v);
        }
      }
      u.width -= m.horizontal + w.horizontal;
      u.height -= m.vertical + w.vertical;
      var p = null;
      var r = this.get_keepInScreenBounds();
      if (!this._dockMode) {
        try {
          p = o.contentWindow.document.documentElement;
          if (!p) {
            return;
          }
        } catch (q) {
          return false;
        }
        v = o;
      }
      var n = this._calculateBoundsToFit(v, p);
      var s = this._autoSizeBehaviorBounds(u, n);
      s.width += m.horizontal + w.horizontal;
      s.height += m.vertical + w.vertical;
      this.setOverflowVisible(false);
      if (y) {
        this._autoSizeWithAnimation(s);
      } else {
        this._deleteStoredBounds();
        this.setBounds(s);
        this.setOverflowVisible(true);
        if (this._contentCell) {
          Sys.UI.DomElement.removeCssClass(this._contentCell, "rwLoading");
        }
        this.raiseEvent("autoSizeEnd", new Sys.EventArgs());
      }
      if ($telerik.isIE && o) {
        o.style.overflow = "hidden";
        setTimeout(function () {
          o.style.overflow = "";
        }, 0);
      }
      this.set_keepInScreenBounds(r);
      if (o) {
        v.style.width = "100%";
        v.style.height = "100%";
        if ($telerik.isIE9Mode) {
          this.set_height(this.get_height());
        }
      }
      if (x && !this._isRightToLeft && this.get_renderMode() != 1) {
        x.style.width = "";
      }
      return true;
    },
    _getBordersFF: function (o) {
      var r = parseFloat(a(o).css("border-top-width"));
      var q = parseFloat(a(o).css("border-right-width"));
      var n = parseFloat(a(o).css("border-bottom-width"));
      var p = parseFloat(a(o).css("border-left-width"));
      var m = { top: r, right: q, bottom: n, left: p };
      m.horizontal = m.left + m.right;
      m.vertical = m.top + m.bottom;
      return m;
    },
    _autoSizeWithAnimation: function (o) {
      var n = this.get_popupElement();
      if (this._enableShadow && $telerik.isIE) {
        this._setShadowCSSClass(false);
      }
      var p = Function.createDelegate(this, function () {
        if (this.isClosed()) {
          return;
        }
        var r = this.get_popupElement();
        r.style.filter = "";
        if ($telerik.isIE7) {
          r.style.removeAttribute("filter");
        }
        r.style.opacity = "";
        this._deleteStoredBounds();
        this.setBounds(o);
        this.setOverflowVisible(true);
        if (this._contentCell) {
          Sys.UI.DomElement.removeCssClass(this._contentCell, "rwLoading");
        }
        if (this._enableShadow && $telerik.isIE && !$telerik.isIE6) {
          this._setShadowCSSClass(true);
        }
        this.raiseEvent("autoSizeEnd", new Sys.EventArgs());
      });
      if (this._tableElement) {
        this._tableElement.style.height = "100%";
      }
      var m = { width: o.width, height: o.height, x: o.x, y: o.y };
      var q = this._getRestrictionZoneBounds();
      if (q) {
        m.x += q.x;
        m.y += q.y;
      }
      setTimeout(function () {
        $telerik.$(n).transition(
          {
            width: m.width,
            height: m.height,
            left: m.x,
            top: m.y,
            opacity: 1,
          },
          300,
          "easeIn",
          p
        );
      }, 0);
    },
    setBounds: function (m) {
      if (!m) {
        return;
      }
      this._checkRestrictionZoneBounds = function () {
        return true;
      };
      this.moveTo(m.x, m.y);
      this.setSize(m.width, m.height);
      this._checkRestrictionZoneBounds =
        c.RadWindow.prototype._checkRestrictionZoneBounds;
    },
    _substractWrappersBorder: function (o, p) {
      var r = this.get_popupElement();
      var m = this._contentCell;
      if (!r || !m) {
        return o;
      }
      var q = $telerik.getBorderBox(r);
      var n = $telerik.getBorderBox(m);
      o -= p ? q.horizontal + n.hrizontal : q.vertical + n.vertical;
      return o;
    },
    setWidthDockMode: function (m) {
      if (!this._dockMode || !this.get_contentElement()) {
        return;
      }
      this.view.setContentWidth(m);
    },
    setHeightDockMode: function (n) {
      var m = this.get_contentElement();
      if (!this._dockMode || !m) {
        return;
      }
      this.setContentFixedHeight(n, m);
    },
    setContentFixedHeight: function (n, m) {
      if (this.isCreated()) {
        this.view.setContentFixedHeight(n, m);
      }
    },
    calcPosition: function (q, p, o, s, m) {
      var r = q + Math.round((p - o) / 2);
      if (r < 0 || r + p > s) {
        r = Math.round(Math.abs((s - o) / 2));
        if (this.isAutoSizeBehaviorEnabled(c.WindowAutoSizeBehaviors.Default)) {
          var n = this._dockMode ? window : this.BrowserWindow;
          r += m
            ? Math.max(
                n.document.documentElement.scrollTop,
                n.document.body.scrollTop
              )
            : Math.max(
                n.document.documentElement.scrollLeft,
                n.document.body.scrollLeft
              );
        }
      }
      return r;
    },
    _maintainMaximizedSize: function () {
      if (!this.isMaximized()) {
        return;
      }
      if (this.view) {
        this.view.setMaximizeSize();
      }
    },
    _enablePageScrolling: function (m) {
      if (m) {
        a(g).removeClass(i);
        a(d).removeClass(i);
      } else {
        a(g).addClass(i);
        a(d).addClass(i);
      }
    },
    _getRestrictionZoneBounds: function () {
      var m = null;
      var n = this._getRestrictionZoneElement();
      if (n) {
        m = $telerik.getBounds(n);
        m.scrollLeft = 0;
        m.scrollTop = 0;
      }
      return m;
    },
    _getRestrictionZoneElement: function () {
      var m = this.get_restrictionZoneID();
      return m && $get(m);
    },
    _storeBounds: function () {
      if (!this.isCreated()) {
        return;
      }
      var m = this._getCurrentBounds();
      if (this.isMaximized()) {
        return false;
      }
      if (this.isMinimized()) {
        if (this._restoreRect) {
          m.width = this._restoreRect.width;
          m.height = this._restoreRect.height;
        } else {
          m.width = this.get_width();
          m.height = this.get_height();
        }
      }
      if (
        ($telerik.isIE9 || $telerik.isIE10) &&
        this._restoreRect &&
        m.x == this.get_leftHidingPoint() &&
        m.y == -10000
      ) {
        m.x = this._restoreRect.x;
        m.y = this._restoreRect.y;
      }
      this._restoreRect = m;
    },
    _restoreBounds: function () {
      if (!this._restoreRect) {
        return;
      }
      var m = this._restoreRect;
      this.setSize(m.width, m.height);
      this.moveTo(m.x, m.y);
    },
    _getStoredBounds: function () {
      if (this._restoreRect) {
        return this._restoreRect;
      }
    },
    _deleteStoredBounds: function () {
      this._restoreRect = null;
    },
    _getCurrentBounds: function () {
      var m = this.ui.getBounds();
      if (this._firstShow != true) {
        this._updateWindowSize(this._height);
        this._firstShow = true;
      }
      var n = this._getRestrictionZoneBounds();
      if (n) {
        m.x -= n.x;
        m.y -= n.y;
      }
      return m;
    },
    _getCentralBounds: function () {
      var m = this._getCurrentBounds();
      var n = this._getViewportBounds();
      var o = h((n.width - m.width) / 2, 10);
      var p = h((n.height - m.height) / 2, 10);
      m.x = o + n.scrollLeft;
      m.y = p + n.scrollTop;
      return m;
    },
    _getViewportBounds: function () {
      var p = this._getRestrictionZoneBounds();
      if (p) {
        return p;
      }
      var m = $telerik.getClientBounds();
      var n =
        $telerik.getCorrectScrollLeft(e.documentElement) ||
        $telerik.getCorrectScrollLeft(e.body);
      var o = e.documentElement.scrollTop || e.body.scrollTop;
      m.scrollLeft = n;
      m.scrollTop = o;
      if (this.isIE) {
        if (m.width == 0) {
          m.width = e.body.clientWidth;
        }
        if (m.height == 0) {
          m.height = e.body.clientHeight;
        }
      }
      return m;
    },
    _getCalculatedPopupBounds: function () {
      var v = this;
      var o = v.isModal();
      var m = v.isMaximized();
      var n = v.isMinimized();
      var t = this._getStoredBounds();
      if (t && !(m || n)) {
        return t;
      }
      var r = this._getCurrentBounds();
      var q = this._offsetElement;
      if (
        (!o && v._top == null && v._left == null && !q) ||
        (o && v.get_centerIfModal())
      ) {
        r = this._getCentralBounds();
      } else {
        if (q) {
          r.y = 0;
          r.x = 0;
        } else {
          var s = this._getViewportBounds();
          r.x = s.scrollLeft;
          r.y = s.scrollTop;
        }
        if (!m) {
          var p = this._left ? this._left : 0;
          r.x += p;
          var u = this._top ? this._top : 0;
          r.y += u;
        }
      }
      return r;
    },
    _checkRestrictionZoneBounds: function (o, m) {
      var n = o;
      if (!n) {
        n = this._getRestrictionZoneBounds();
        if (!n) {
          return true;
        }
      }
      return c.ResizeExtender.containsBounds(n, m);
    },
    _getTitlebarHeight: function () {
      if (!this.ui) {
        return 0;
      }
      return this.ui.getTitlebarHeight();
    },
    _reSetWindowPosition: function () {
      var m = this._getCalculatedPopupBounds();
      this._setPopupVisible(m.x, m.y);
    },
    _fixIeHeight: function (p, n) {
      if ("CSS1Compat" == e.compatMode) {
        var m = p.offsetHeight - h(n, 10);
        if (m > 0) {
          var o = h(p.style.height, 10) - m;
          if (o > 0) {
            p.style.height = o + "px";
          }
        }
      }
    },
    _setPopupVisible: function (m, n) {
      var o = this._getRestrictionZoneBounds();
      if (o) {
        m += o.x;
        n += o.y;
      }
      if (this.isCreated()) {
        this.view.moveTo(m, n);
      }
    },
    _isWindowRightToLeft: function () {
      var n = this._isRightToLeft;
      if (n == null) {
        var m = this.get_element();
        var o = m.parentNode ? m : this._getDefaultParent();
        n = this._isRightToLeft = $telerik.isRightToLeft(o);
      }
      return n;
    },
    _createStatusbarResizer: function (m) {
      if (this.ui) {
        this.ui.createStatusbarResizer();
      }
    },
    _createUI: function () {
      this.initView();
      this.ui.createUI();
    },
    _getDefaultParent: function () {
      var m = this.get_formID() ? e.getElementById(this.get_formID()) : null;
      if (!m) {
        if (e.forms && e.forms.length > 0) {
          m = e.forms[0];
        } else {
          m = e.body;
        }
      }
      return m;
    },
    _getStatusMessageElement: function () {
      if (this.ui) {
        return this.ui.getStatusMessageNode();
      }
    },
    _getTitleCommandButtonsHolder: function () {
      if (this.ui) {
        return this.ui.getTitleCommandsContainer();
      }
    },
    _getTitleElement: function () {
      if (this.ui) {
        return this.ui.getTitleNode();
      }
    },
    _getTitleIcon: function () {
      if (this.ui) {
        return this.ui.getIconNode();
      }
    },
    _getTitleCommandButton: function (m) {
      if (this.ui) {
        return this.ui.getCommandButton(m);
      }
    },
    getTitleCommandButton: function (m) {
      return this._getTitleCommandButton(m);
    },
    _getHandlesWidth: function () {
      if (!this._handlesWidth && this.ui) {
        this._handlesWidth = this.ui.getHandlesWidth();
      }
      return this._handlesWidth;
    },
    get_defaultMinWidth: function () {
      if (this.ui) {
        return this.ui.get_uiMinWidth();
      }
    },
    get_defaultMinHeight: function () {
      if (this.ui) {
        return this.ui.get_uiMinHeight();
      }
    },
    setOverflowVisible: function (o) {
      if (!o && this._overflowHidden) {
        return;
      }
      var p = "hidden";
      var n = "hidden";
      var s = "hidden";
      var r;
      var m;
      if (!this._dockMode) {
        try {
          var q = this.get_contentFrame();
          if (q) {
            q.style.overflow = o ? "" : "hidden";
          }
          r = q.contentWindow.document.documentElement;
          if (!r) {
            return;
          }
          m = q.contentWindow.document.body;
          if (!o) {
            this._oldBodyOverflow = m.style.overflow;
            this._oldDocOverflow = r.style.overflow;
            this._overflowHidden = true;
          }
        } catch (t) {}
      }
      if (o) {
        n = this._oldBodyOverflow;
        s = this._oldDocOverflow;
        p = "auto";
        this._overflowHidden = false;
      }
      if (this._dockMode) {
        this.get_contentElement().style.overflow = p;
      } else {
        if (r && m) {
          if (s || s == "") {
            r.style.overflow = s;
          }
          if (n || n == "") {
            m.style.overflow = n;
          }
        }
      }
    },
    _updateTitleWidth: function () {
      if (this.ui) {
        this.ui.updateTitleWidth();
      }
    },
    _addWindowToDocument: function () {
      this.view.moveToDefaultParent();
    },
    _createBackReference: function () {
      var o = this;
      if (!o.Argument) {
        o.Argument = {};
      }
      var n = this._iframe;
      try {
        n.radWindow = o;
        if (n.contentWindow != null) {
          n.contentWindow.radWindow = o;
        }
      } catch (m) {}
    },
    _getFullSkinName: function () {
      return (
        "RadWindow RadWindow_" +
        this.get_skin() +
        " rwNormalWindow rwTransparentWindow"
      );
    },
    _configureMinimizeButton: function (m) {
      var o =
        true == m
          ? this._getLocalizationString("Restore")
          : this._getLocalizationString("Minimize");
      var n = true == m ? this.restore : this._minimize;
      var q = this._getTitleCommandButton("Minimize");
      if (!this.isBehaviorEnabled(c.WindowBehaviors.Close) && q) {
        var r = q.parentNode;
        var p = this._isWindowRightToLeft() ? "right" : "left";
        if (true == m) {
          p = p == "right" ? "left" : "right";
        }
        r.style.styleFloat = p;
        r.style.cssFloat = p;
      }
      this._registerTitlebarHandlersButton("Minimize", o, n);
    },
    _configureMaximizeButton: function (m) {
      var o =
        true == m
          ? this._getLocalizationString("Restore")
          : this._getLocalizationString("Maximize");
      var n = true == m ? this.restore : this.maximize;
      this._registerTitlebarHandlersButton("Maximize", o, n);
    },
    _registerTitlebarHandlersButton: function (n, o, m) {
      if (this.ui) {
        this.ui.changeCommandButtonByName(
          n,
          o,
          Function.createDelegate(this, m)
        );
      }
    },
    isCloned: function () {
      return this._isCloned;
    },
    isBehaviorEnabled: function (m) {
      return !!(m & this.get_behaviors());
    },
    isInitialBehaviorEnabled: function (m) {
      return !!(m & this.get_initialBehaviors());
    },
    isAutoSizeBehaviorEnabled: function (m) {
      return !!(m & this.get_autoSizeBehaviors());
    },
    setVisible: function (m) {
      if (!this.view) {
        this.initView();
      }
      if (m) {
        this.view.show();
      } else {
        this.view.hide();
      }
    },
    isVisible: function () {
      return this._popupVisible;
    },
    isModal: function () {
      return this._modal;
    },
    isActive: function () {
      return this.view && this.view.isActive();
    },
    isPinned: function () {
      var m = this._getTitleCommandButton("Pin");
      return m && Sys.UI.DomElement.containsCssClass(m, "on");
    },
    isClosed: function () {
      return !this.isVisible();
    },
    isMinimized: function () {
      return (
        this._popupElement &&
        Sys.UI.DomElement.containsCssClass(
          this._popupElement,
          "rwMinimizedWindow"
        )
      );
    },
    isMaximized: function () {
      return (
        this._popupElement &&
        Sys.UI.DomElement.containsCssClass(
          this._popupElement,
          "rwMaximizedWindow"
        )
      );
    },
    _moveToMinimizeZone: function () {
      var m = $get(this.get_minimizeZoneID());
      if (m) {
        if (this.isPinned()) {
          this._isMinimizePinned = true;
          this.togglePin();
        }
        this.view.minimizeToZone(m);
      }
    },
    _moveToDocument: function () {
      this.view.revertToDefaultParent();
      if (this._isMinimizePinned) {
        this._isMinimizePinned = false;
        this.togglePin();
      }
    },
    minimize: function () {
      this._clearTouchEventIdentifier();
      if (this._minimize() !== false) {
        this.setActive(true);
      }
    },
    _minimize: function () {
      this._clearTouchEventIdentifier();
      if (!this.isCreated()) {
        return false;
      }
      var m = this.onCommand("Minimize");
      if (!m) {
        return false;
      }
      if (this.isMaximized()) {
        this._normalizeWindowRootCss();
        this._restoreBounds();
      }
      if (this.view) {
        this.view.minimize();
      }
    },
    restore: function () {
      var m = this;
      this._clearTouchEventIdentifier();
      if (!m.isCreated() || m.isClosed()) {
        return;
      }
      var n = m.onCommand("Restore");
      if (!n) {
        return;
      }
      m._configureMinimizeButton();
      m._configureMaximizeButton();
      if (m.isMinimized() && m.get_minimizeZoneID()) {
        m._moveToDocument();
      }
      if (m.isMaximized()) {
        m.view.restoreResizeHandlesCursor();
      }
      m._normalizeWindowRootCss();
      m._enablePageScrolling(true);
      m._restoreBounds();
      m.setVisible(true);
      if (m._enableShadow && !$telerik.isIE6) {
        m._setShadowCSSClass(true);
      }
      if (m.get_showOnTopWhenMaximized() && m._restoreZindex) {
        m._popupElement.style.zIndex = m._restoreZindex;
        if (m.get_modal() && m._modalExtender) {
          m._modalExtender.updateModalOverlayZIndex();
        }
        m._restoreZindex = null;
      }
      m.setVisible(true);
      m.setActive(true);
      if (this.isVisible()) {
        m._show();
      }
      m._restoreDocumentScrollPosition();
    },
    _restoreDocumentScrollPosition: function () {
      var r = this;
      var q = r._restoreOptions;
      var m = a(e);
      var n = e.body;
      var p = function (s, t) {
        if (t && t > 0) {
          m["scroll" + s](t);
        }
      };
      var o = function (s, t) {
        if (t && t > 0) {
          n["scroll" + s] = t;
        }
      };
      if (q) {
        p("Top", q.documentScrollTop);
        p("Left", q.documentScrollLeft);
        o("Left", q.bodyScrollLeft);
        o("Top", q.bodyScrollTop);
      }
    },
    maximize: function () {
      var m = this;
      this._clearTouchEventIdentifier();
      if (!this.isCreated()) {
        return;
      }
      var n = this.onCommand("Maximize");
      if (!n) {
        return;
      }
      this._storeBounds();
      if (this.isMinimized() && this.get_minimizeZoneID()) {
        this._moveToDocument();
      }
      if (this.isMinimized()) {
        this._normalizeWindowRootCss();
        this._checkRestrictionZoneBounds = function () {
          return true;
        };
        this._restoreBounds();
        this._checkRestrictionZoneBounds =
          c.RadWindow.prototype._checkRestrictionZoneBounds;
      }
      m._saveDocumentScrollPosition();
      m._removeDocumentBodyScrolling();
      m.view.maximize();
      if (!m.get_restrictionZoneID()) {
        a(m.get_popupElement()).css({ left: 0, top: 0 });
      }
      if (!this.isActive()) {
        this.setActive(true);
      }
    },
    _saveDocumentScrollPosition: function () {
      var o = this;
      var m = a(e);
      var n = e.body;
      o._restoreOptions = {
        documentScrollLeft: m.scrollLeft(),
        documentScrollTop: m.scrollTop(),
        bodyScrollLeft: n.scrollLeft,
        bodyScrollTop: n.scrollTop,
      };
    },
    _removeDocumentBodyScrolling: function () {
      var m = e.body;
      m.scrollLeft = 0;
      m.scrollTop = 0;
    },
    setActive: function (m) {
      if (this.isCreated() && this.view) {
        this.view.setActive(m);
      }
      if (m) {
        this._getWindowController().set_activeWindow(this);
        this.raiseEvent("activate", new Sys.EventArgs());
      }
    },
    togglePin: function () {
      this._clearTouchEventIdentifier();
      if (!this.isCreated()) {
        return;
      }
      var o = this.onCommand("Pin");
      if (!o) {
        return;
      }
      this.setActive(true);
      var n = this.isPinned();
      var m = n
        ? this._getLocalizationString("PinOn")
        : this._getLocalizationString("PinOff");
      this.view.toggleCommand("Pin");
      this._registerTitlebarHandlersButton("Pin", m, this.togglePin);
      c.RadWindowUtils.setPinned(!n, this);
    },
    reload: function () {
      this._clearTouchEventIdentifier();
      if (!this.isCreated()) {
        return;
      }
      var n = this.onCommand("Reload");
      if (!n) {
        return;
      }
      if (!this._iframe) {
        return;
      }
      this._onWindowUrlChanging();
      try {
        this._iframe.contentWindow.location.reload();
        if (
          ($telerik.isChrome || $telerik.isSafari) &&
          this._iframe.contentWindow.document.domain != e.domain
        ) {
          this._onWindowUrlChanged();
        }
      } catch (m) {
        this._onWindowUrlChanged();
      }
    },
    fire: function (m) {
      if (m && typeof this[m] == "function") {
        this[m]();
      } else {
        var n = this.get_windowManager();
        if (!n) {
          return;
        }
        if (m && typeof n[m] == "function") {
          n[m]();
        }
      }
    },
    _normalizeWindowRootCss: function () {
      var n = this._popupElement;
      if (n) {
        $telerik.removeCssClasses(n, [
          "rwMinimizedWindow",
          "rwMaximizedWindow",
          "rwMinimizedWindowShadow",
        ]);
        Sys.UI.DomElement.addCssClass(n, "rwNormalWindow");
        var m = n._hideWindowedElementsIFrame;
        if (m) {
          Sys.UI.DomElement.removeCssClass(m, "rwMinimizedWindowOverlay");
        }
      }
      this._updateTitleWidth();
    },
    close: function (n) {
      if (this.isClosed()) {
        return;
      }
      var o = new Sys.CancelEventArgs();
      var p = typeof n != "undefined" && !this._isDomEventObject(n) ? n : null;
      o._argument = p;
      o.get_argument = function () {
        return this._argument;
      };
      this.raiseEvent("beforeClose", o);
      if (o.get_cancel()) {
        return;
      }
      this._isClosing = true;
      this.hide();
      var m = new Sys.EventArgs();
      m._argument = p;
      m.get_argument = function () {
        return this._argument;
      };
      this.raiseEvent("close", m);
      this._enablePageScrolling(true);
      this._normalizeWindowRootCss();
      if (this._isDomEventObject(n)) {
        n = null;
      }
      this._invokeDialogCallBackFunction(n);
      if (this.get_destroyOnClose() && !this._dockMode) {
        this.dispose();
      }
    },
    _invokeDialogCallBackFunction: function (n) {
      var m = this.get_clientCallBackFunction();
      if (m) {
        if ("string" == typeof m) {
          m = eval(m);
        }
        if ("function" == typeof m) {
          m(this, n);
        }
      }
    },
    _isDomEventObject: function (m) {
      return m instanceof Sys.UI.DomEvent || m instanceof a.Event;
    },
    onCommand: function (n) {
      var m = new Sys.CancelEventArgs();
      m._commandName = n;
      m.get_commandName = function () {
        return this._commandName;
      };
      this.raise_command(m);
      if (m.get_cancel()) {
        return false;
      }
      return true;
    },
    setUrl: function (n) {
      if (this._dockMode) {
        return;
      }
      this._createUI();
      this.set_navigateUrl(n);
      var m = n;
      if (this.get_reloadOnShow()) {
        m = this._getReloadOnShowUrl(m);
      }
      this.view.setUrl(m);
      if (!this._loaded) {
        this._registerIframeLoadHandler(true);
      }
      this._loaded = true;
    },
    _registerChildPageHandlers: function (m) {
      var n = null;
      try {
        n = this._iframe.contentWindow.document;
        if (n.domain != e.domain) {
          return;
        }
      } catch (o) {
        return;
      }
      if (null == n) {
        return;
      }
      if (m) {
        this._onChildPageUnloadDelegate = Function.createDelegate(
          this,
          this._onChildPageUnload
        );
        this._iframe.contentWindow.onunload = this._onChildPageUnloadDelegate;
        this._onChildPageClickDelegate = Function.createDelegate(
          this,
          this._onChildPageClick
        );
        $telerik.addExternalHandler(n, "click", this._onChildPageClickDelegate);
      } else {
        if (this._onChildPageClickDelegate) {
          $telerik.removeExternalHandler(
            n,
            "click",
            this._onChildPageClickDelegate
          );
          this._onChildPageClickDelegate = null;
        }
      }
    },
    _onChildPageUnload: function (m) {
      this._registerChildPageHandlers(false);
      if (this._removeFromDOM && !$telerik.isChrome && !$telerik.isSafari) {
        this._removeFromDOM = false;
        var n = this._popupElement;
        if (n && n.parentNode) {
          n.parentNode.removeChild(n);
        }
      }
    },
    _onChildPageClick: function (m) {
      if (!this.isVisible() || this.isClosed()) {
        return;
      }
      var n = m.target ? m.target : m.srcElement;
      if (n) {
        if (n.tagName == "INPUT" && n.type == "button") {
          return;
        } else {
          if (n.tagName == "BUTTON" || n.tagName == "A") {
            return;
          }
        }
      }
      this.setActive(true);
    },
    _onIframeLoad: function () {
      this._onWindowUrlChanged();
      if ($telerik.isFirefox) {
        this.setOverflowVisible(true);
      }
      this._registerChildPageHandlers(true);
      this.raiseEvent("pageLoad", new Sys.EventArgs());
      if (this.get_autoSize()) {
        var o = this.get_animation() != c.WindowAnimation.None;
        this.autoSize(o);
      }
      var n = null;
      try {
        n = this._iframe.contentWindow;
        n.close = Function.createDelegate(this, function () {
          this.close();
        });
      } catch (m) {
        return false;
      }
    },
    _onWindowUrlChanging: function () {
      if (this.isCreated()) {
        this.view.onUrlChanging();
      }
    },
    _onWindowUrlChanged: function () {
      if (this.isCreated()) {
        this.view.onUrlChanged();
      }
    },
    _updatePopupZindex: function () {
      if (this._popupBehavior) {
        if (this.isVisible()) {
          this._popupBehavior.show();
        }
      }
    },
    _updateOpacity: function () {
      var m = this._dockMode
        ? this.get_contentElement()
        : this.get_contentFrame();
      if (m) {
        if (this._opacity < 100) {
          if (this._contentCell) {
            this._contentCell.style.background = "none transparent";
          }
          var n = m.style;
          n.filter = "alpha(opacity=" + this._opacity + ")";
          n.opacity = this._opacity / 100;
        } else {
          if (this._contentCell) {
            this._contentCell.style.background = "";
          }
          if ($telerik.isIE) {
            if (this._contentCell) {
              this._contentCell.removeAttribute("style");
            }
            m.style.removeAttribute("filter");
            m.style.removeAttribute("opacity");
          } else {
            m.style.filter = "";
            m.style.opacity = "";
          }
        }
      }
    },
    get_zindex: function () {
      return this.ui ? this.ui.get_zIndexCss() : -1;
    },
    get_browserWindow: function () {
      return this._browserWindow;
    },
    get_contentFrame: function () {
      return this._iframe;
    },
    get_offsetElementID: function () {
      return this._offsetElementID;
    },
    set_offsetElementID: function (m) {
      if (this._offsetElementID != m) {
        this._offsetElementID = m;
        this._offsetElement = $get(m);
        this._deleteStoredBounds();
        this._offsetSet = false;
      }
      if (this.isVisible()) {
        this._show();
      }
    },
    get_openerElementID: function () {
      return this._openerElementID;
    },
    set_openerElementID: function (m) {
      if (this._openerElementID != m) {
        if (this._openerElement) {
          this._registerOpenerElementHandler(this._openerElement, false);
          this._openerElement = null;
        }
        this._openerElementID = m;
        if (this._openerElementID) {
          this._openerElement = $get(this._openerElementID);
        }
        if (this._openerElement) {
          this._registerOpenerElementHandler(this._openerElement, true);
        }
      }
    },
    get_left: function () {
      return this._left;
    },
    set_left: function (n) {
      if (this._left != n) {
        var m = h(n, 10);
        this._left = m || m == 0 ? m : null;
        this._positionX = this._left;
      }
    },
    get_top: function () {
      return this._top;
    },
    set_top: function (n) {
      if (this._top != n) {
        var m = h(n, 10);
        this._top = m || m == 0 ? m : null;
        this._positionY = this._top;
      }
    },
    get_stylezindex: function () {
      if (this.ui) {
        return this.ui.get_initialZIndexCss();
      }
    },
    get_title: function () {
      return this._title;
    },
    set_title: function (m) {
      if (this._title != m) {
        this._title = m;
      }
      if (this.isCreated()) {
        this.view.setTitleText(this._title);
      }
    },
    get_tabIndex: function () {
      return this._tabIndex;
    },
    set_tabIndex: function (m) {
      this._tabIndex = m;
      if (this.isCreated()) {
        this.view.setTabIndex(this._tabIndex);
      }
    },
    get_width: function () {
      return h(this._width, 10);
    },
    _fixSizeValue: function (m) {
      m = "" + m;
      if (-1 == m.indexOf("px")) {
        m = h(m, 10);
        if (!isNaN(m)) {
          m = m + "px";
        } else {
          m = "";
        }
      }
      return m;
    },
    set_width: function (r) {
      if (null == r) {
        return false;
      }
      if (this.isMaximized()) {
        return false;
      }
      var o = this.get_minWidth();
      if (o && o > r) {
        r = o;
      }
      var n = h(this.get_maxWidth(), 10);
      if (n && n < r && n > o) {
        r = n;
      }
      r = this._fixSizeValue(r);
      if (this.isCreated()) {
        var p = this.ui.getBounds();
        var m = h(r, 10);
        if (isNaN(m)) {
          m = p.width;
        }
        var q = this._checkRestrictionZoneBounds(
          null,
          new Telerik.Web.UI.Bounds(p.x, p.y, m, p.height)
        );
        if (!q) {
          return false;
        }
      }
      if (this._width != r) {
        this._width = r;
      }
      if (this._dockMode) {
        this.setWidthDockMode(this.get_width());
      }
      if (this.isCreated()) {
        if (!this.popupElementIsOutOfView()) {
          this._deleteStoredBounds();
        }
        this.view.setWidth(this._width);
      }
      this._updateTitleWidth();
      return true;
    },
    popupElementIsOutOfView: function () {
      return !!this.view && this.view.isOutOfSight();
    },
    get_minWidth: function () {
      var n = h(this._minWidth, 10);
      if (!this.isCreated()) {
        return n;
      }
      var m = this.get_defaultMinWidth();
      return n && n > m ? n : m;
    },
    set_minWidth: function (m) {
      if (this._minWidth != m) {
        this._minWidth = m;
      }
    },
    get_minHeight: function () {
      var n = h(this._minHeight, 10);
      if (!this.isCreated()) {
        return n;
      }
      var m = this.get_defaultMinHeight();
      return n && n > m ? n : m;
    },
    set_minHeight: function (m) {
      if (this._minHeight != m) {
        this._minHeight = m;
      }
    },
    get_height: function () {
      return h(this._height, 10);
    },
    set_height: function (r) {
      var n;
      if (null == r) {
        return false;
      }
      if (this.isMaximized()) {
        return false;
      }
      var o = this.get_minHeight();
      if (o && o > r && (!n || (n && n >= o))) {
        r = o;
      }
      n = h(this.get_maxHeight(), 10);
      if (n && n < r) {
        r = n;
      }
      r = this._fixSizeValue(r);
      if (this.isCreated()) {
        this._firstShow = false;
        var m = this.get_contentElement();
        if (this._dockMode && m) {
          m.style.height = "";
        }
        var p = this.ui.getBounds();
        var q = this._checkRestrictionZoneBounds(
          null,
          new Telerik.Web.UI.Bounds(p.x, p.y, p.width, h(r, 10))
        );
        if (!q) {
          return false;
        }
      }
      if (this._height != r) {
        this._height = r;
      }
      if (this._dockMode) {
        this.setHeightDockMode(this.get_height());
      }
      if (this.isCreated()) {
        if (!this.popupElementIsOutOfView()) {
          this._deleteStoredBounds();
        }
        this.view.setHeight(this._height);
        this.view.updatePopupZindex();
      }
      return true;
    },
    _updateWindowSize: function (m, n) {
      if (this.view) {
        this.view.setHeight(m, n);
      }
    },
    get_behaviors: function () {
      return this._behaviors;
    },
    set_behaviors: function (r) {
      if (this._behaviors != r) {
        this._behaviors = r;
      }
      if (null == this._titlebarElement) {
        return;
      }
      this._enableMoveResize(false);
      this._enableMoveResize(true);
      var n = c.WindowBehaviors;
      var m = [
        [
          this.isBehaviorEnabled(n.Pin),
          "rwPinButton",
          this._getLocalizationString("PinOn"),
          Function.createDelegate(this, this.togglePin),
        ],
        [
          this.isBehaviorEnabled(n.Reload),
          "rwReloadButton",
          this._getLocalizationString("Reload"),
          Function.createDelegate(this, this.reload),
        ],
        [
          this.isBehaviorEnabled(n.Minimize),
          "rwMinimizeButton",
          this._getLocalizationString("Minimize"),
          Function.createDelegate(this, this._minimize),
        ],
        [
          this.isBehaviorEnabled(n.Maximize),
          "rwMaximizeButton",
          this._getLocalizationString("Maximize"),
          Function.createDelegate(this, this.maximize),
        ],
        [
          this.isBehaviorEnabled(n.Close),
          "rwCloseButton",
          this._getLocalizationString("Close"),
          Function.createDelegate(this, this.close),
        ],
      ];
      var p = [];
      for (var q = 0; q < m.length; q++) {
        var o = m[q];
        if (o[0]) {
          p.push(o.splice(1, 3));
        }
      }
      if (this.view) {
        this._buttonsArray = this.view.setCommandButtons(p);
      }
    },
    addShortcut: function (m, n) {
      if (this._shortCutManager) {
        this._shortCutManager.addShortCut(m.toLowerCase(), n);
      } else {
        if (!this.get_shortcuts()) {
          this._shortcuts = "[['" + m.toLowerCase() + "', '" + n + "']]";
        }
        this._registerGlobalBodyEventHandlers(true);
      }
    },
    removeShortcut: function (m) {
      if (this._shortCutManager) {
        this._shortCutManager.removeShortCut(m.toLowerCase());
      }
    },
    getShortcutString: function (n) {
      if (!this._shortCutManager) {
        return null;
      }
      var m = this._shortCutManager.findShortCutByName(n.toLowerCase());
      return m && m.get_shortCutString() ? m.get_shortCutString() : null;
    },
    isShortcutAdded: function (m) {
      return this.getShortcutString(m.toLowerCase()) ? true : false;
    },
    removeAllShortcutsCommand: function (m) {
      while (this.isShortcutAdded(m)) {
        this.removeShortcut(m.toLowerCase());
      }
    },
    get_modal: function () {
      return this._modal;
    },
    set_modal: function (m) {
      this._modal = m;
      this._makeModal(this._modal);
      if (this.isVisible() && this._modal) {
        this._onModalShowHandler(this);
      }
    },
    get_visibleTitlebar: function () {
      return this._visibleTitlebar;
    },
    set_visibleTitlebar: function (o) {
      var m = this._visibleTitlebar != o;
      if (m) {
        this._visibleTitlebar = o;
      }
      var n = this.get_popupElement();
      if (n) {
        o
          ? Sys.UI.DomElement.removeCssClass(n, "rwNoTitleBar")
          : Sys.UI.DomElement.addCssClass(n, "rwNoTitleBar");
      }
      if (this.ui && this.ui.titlebar) {
        this.ui.titlebar.style.display = o ? "" : "none";
        if (this.get_enableAriaSupport()) {
          this.ui.titlebar.setAttribute("aria-hidden", !o);
        }
        if (m) {
          this.set_height(this.get_height());
        }
      }
    },
    get_visibleStatusbar: function () {
      return this._visibleStatusbar;
    },
    set_visibleStatusbar: function (m) {
      if (this._visibleStatusbar != m) {
        this._visibleStatusbar = m;
      }
      if (this.view) {
        if (m) {
          this.view.showStatusbar();
        } else {
          this.view.hideStatusbar();
        }
      }
    },
    get_overlay: function () {
      return this._overlay;
    },
    set_overlay: function (m) {
      this._overlay = m;
      if (this._popupBehavior) {
        this._popupBehavior.set_overlay(this._overlay);
      }
      if (this.isVisible()) {
        this._reSetWindowPosition();
      }
    },
    get_opacity: function () {
      return this._opacity;
    },
    set_opacity: function (m) {
      if (this.get_opacity() != m) {
        this._opacity = m > 100 ? 100 : m;
        this._opacity = m < 0 ? 0 : m;
        if (this.isCreated()) {
          this._updateOpacity();
        }
      }
    },
    get_iconUrl: function () {
      return this._iconUrl;
    },
    set_iconUrl: function (m) {
      this._iconUrl = m;
      if (this._titleIconElement) {
        if (!this.get_iconUrl() || this.get_iconUrl() == "") {
          this._titleIconElement.className = "rwIcon";
          this._titleIconElement.style.background = "";
        } else {
          this._titleIconElement.className = "rwIcon rwCustomIcon";
          this._titleIconElement.style.background =
            "transparent url('" + m + "') no-repeat scroll 0px 0px";
        }
      }
    },
    get_renderMode: function () {
      return this._renderMode;
    },
    set_renderMode: function (m) {
      this._renderMode = m;
    },
    get_restrictionZoneID: function () {
      return this._restrictionZoneID;
    },
    set_restrictionZoneID: function (m) {
      this._restrictionZoneID = m;
      if (m && this.isCreated()) {
        this.fitInRestrictionZone();
      }
    },
    fitInRestrictionZone: function () {
      var n = this._getCurrentBounds();
      var p = this._getRestrictionZoneElement();
      var o = this._getRestrictionZoneBounds();
      var m = $telerik.getBorderBox(p);
      var r = {
        x: o.x + m.left,
        y: o.y + m.top,
        width: o.width - m.horizontal,
        height: o.height - m.vertical,
      };
      var q = { width: 0, height: 0 };
      if (n.x < m.left) {
        n.x = m.left;
      }
      if (n.y < m.top) {
        n.y = m.top;
      }
      if (n.x + n.width > r.width) {
        n.x = r.width - n.width + m.left;
        if (n.x < m.left) {
          n.x = m.left;
          q.width = r.width;
        }
      }
      if (n.y + n.height > r.height) {
        n.y = r.height - n.height + m.top;
        if (n.y < m.top) {
          n.y = m.top;
          q.height = r.height;
        }
      }
      if (q.width || q.height) {
        this.setSize(q.width || n.width, q.height || n.height);
      }
      this.moveTo(n.x, n.y);
    },
    get_keepInScreenBounds: function () {
      return this._keepInScreenBounds;
    },
    set_keepInScreenBounds: function (m) {
      this._keepInScreenBounds = m;
      if (this._popupBehavior) {
        this._popupBehavior.set_keepInScreenBounds(this._keepInScreenBounds);
      }
      if (this.isVisible()) {
        this._reSetWindowPosition();
      }
    },
    get_popupElement: function () {
      return this._popupElement;
    },
    set_status: function (n) {
      var m = this._getStatusMessageElement();
      if (m) {
        window.setTimeout(function () {
          m.value = n;
        }, 0);
      }
    },
    get_status: function () {
      var m = this._getStatusMessageElement();
      if (m) {
        return m.value;
      }
    },
    raise_command: function (m) {
      this.raiseEvent("command", m);
    },
    add_resize: function (m) {
      this.get_events().addHandler("resizeEnd", m);
    },
    remove_resize: function (m) {
      this.get_events().removeHandler("resizeEnd", m);
    },
    saveClientState: function () {
      var n = ["position"];
      var o = {};
      for (var m = 0; m < n.length; m++) {
        o[n[m]] = this["get_" + n[m]]();
      }
      return Sys.Serialization.JavaScriptSerializer.serialize(o);
    },
    _applyAriaSupport: function () {
      this._applyAriaForLayoutTables();
      this._applyAriaSettings();
      var m = this.get_popupElement();
      m.setAttribute("aria-hidden", "true");
      if (!m.getAttribute("aria-labelledby") && !m.getAttribute("aria-label")) {
        m.setAttribute("aria-labelledby", this._getTitleElement().id);
      }
      if (this._isPredefined) {
        m.setAttribute("role", "alertdialog");
        if (!m.getAttribute("aria-describedby")) {
          m.setAttribute("aria-describedby", this.get_id() + "_message");
        }
      } else {
        m.setAttribute("role", "dialog");
      }
    },
    _applyAriaForLayoutTables: function () {
      var o = this._tableElement;
      if (o) {
        o.setAttribute("role", "presentation");
        var u = o.getElementsByTagName("tr");
        for (var m = 0; m < u.length; m++) {
          var t = u[m];
          t.setAttribute("role", "presentation");
          var r = t.getElementsByTagName("td");
          for (var n = 0; n < r.length; n++) {
            r[n].setAttribute("role", "presentation");
          }
        }
      }
      var s = this.ui.titlebar;
      if (s) {
        s.setAttribute("role", "presentation");
      }
      var p = this._statusCell;
      if (p) {
        var q = p.getElementsByTagName("table")[0];
        if (q) {
          q.setAttribute("role", "presentation");
        }
      }
    },
    _applyAriaSettings: function () {
      var o = this;
      if (o._ariaSettings) {
        var n = b.deserialize(o._ariaSettings);
        var m = new c.WaiAriaDecorator(o.get_popupElement(), n);
        m.setAttributes();
      }
    },
    _clearTouchEventIdentifier: function () {
      var n = this,
        m = n._resizeExtender;
      if (m && m._touchEventIdentifier) {
        m._touchEventIdentifier = null;
      }
    },
  };
  a.registerControlProperties(c.RadWindow, {
    animation: c.WindowAnimation.None,
    animationDuration: 500,
    ariaSettings: null,
    autoSize: false,
    autoSizeBehaviors: c.WindowAutoSizeBehaviors.Default,
    centerIfModal: true,
    clientCallBackFunction: null,
    cssClass: "",
    destroyOnClose: false,
    enableAriaSupport: false,
    enableShadow: false,
    formID: null,
    initialBehaviors: c.WindowBehaviors.None,
    localization: null,
    maxHeight: null,
    maxWidth: null,
    minimizeIconUrl: null,
    minimizeZoneID: null,
    name: null,
    navigateUrl: null,
    reloadOnShow: false,
    shortcuts: null,
    showContentDuringLoad: true,
    showOnTopWhenMaximized: true,
    skin: "Deafult",
    windowManager: null,
    visibleOnPageLoad: false,
  });
  a.registerControlEvents(c.RadWindow, [
    "command",
    "dragStart",
    "dragEnd",
    "activate",
    "beforeShow",
    "show",
    "pageLoad",
    "close",
    "beforeClose",
    "resizeStart",
    "resizeEnd",
    "autoSizeEnd",
  ]);
  c.RadWindow.registerClass("Telerik.Web.UI.RadWindow", c.RadWebControl);
  c.RadWindowUtils._zIndex = 3000;
  c.RadWindowUtils.get_newZindex = function (m) {
    m = h(m, 10);
    if (null == m || isNaN(m)) {
      m = 0;
    }
    if (c.RadWindowUtils._zIndex < m) {
      c.RadWindowUtils._zIndex = m;
    }
    c.RadWindowUtils._zIndex++;
    return c.RadWindowUtils._zIndex;
  };
  c.RadWindowUtils._pinnedList = {};
  c.RadWindowUtils.setPinned = function (s, q) {
    if (s) {
      var r = q._getViewportBounds();
      var t = q._getCurrentBounds();
      q.LeftOffset = t.x - r.scrollLeft;
      q.TopOffset = t.y - r.scrollTop;
      var n = window.setInterval(function () {
        c.RadWindowUtils._updatePinnedElementPosition(q);
      }, 100);
      c.RadWindowUtils._pinnedList[n] = q;
    } else {
      var m = null;
      var p = c.RadWindowUtils._pinnedList;
      for (var o in p) {
        if (p[o] == q) {
          m = o;
          break;
        }
      }
      if (null != m) {
        window.clearInterval(m);
        c.RadWindowUtils._pinnedList[m] = null;
      }
      q.TopOffset = null;
      q.LeftOffset = null;
    }
  };
  c.RadWindowUtils._updatePinnedElementPosition = function (n) {
    if (n.isMaximized() || !n.isVisible()) {
      return;
    }
    var o = n._getViewportBounds();
    var q = n._getCurrentBounds();
    var m = n.LeftOffset != null ? n.LeftOffset + o.scrollLeft : q.x;
    var p = n.TopOffset != null ? n.TopOffset + o.scrollTop : q.y;
    if (q.x != m || q.y != p) {
      n.moveTo(m, p);
    }
  };
})($telerik.$, Telerik.Web.UI);
Type.registerNamespace("Telerik.Web.UI.Window");
(function (a, b, c) {
  b.IRenderer = function () {};
  b.IRenderer.prototype = {
    createUI: function () {},
    setContent: function (d) {},
    get_container: function () {},
    getHandlesWidth: function () {},
    setShadowCssClass: function (d) {},
    getBounds: function () {},
    updateTitleWidth: function () {},
    getTitleNode: function () {},
    createTitle: function () {},
    getIconNode: function () {},
    createIcon: function () {},
    getTitleCommandsContainer: function () {},
    createTitleCommandsContainer: function () {},
    getStatusbar: function () {},
    createStatusbar: function () {},
    getStatusMessageNode: function () {},
    createStatusMessage: function () {},
    createStatusbarResizer: function () {},
    getCommandButtons: function () {},
    getCommandButton: function () {},
    createCommandButton: function (d) {},
    changeCommandButton: function (d, f, e) {},
    changeCommandButtonByName: function (e, f, d) {},
    clearCommandButtons: function () {},
    geTitlebarHeight: function () {},
    get_zIndexCss: function () {},
    get_initialZIndexCss: function () {},
    get_uiMinWidth: function () {},
    get_uiMinHeight: function () {},
    dispose: function () {},
  };
  b.IRenderer.registerInterface("Telerik.Web.UI.Window.IRenderer");
  b.RendererBase = function (d) {
    this.window = d;
  };
  b.RendererBase.prototype = {};
  b.RendererBase.registerClass(
    "Telerik.Web.UI.Window.RendererBase",
    null,
    b.IRenderer
  );
})($telerik.$, Telerik.Web.UI.Window);
Type.registerNamespace("Telerik.Web.UI.Window");
(function (a, b, c) {
  b.IView = function () {};
  b.IView.prototype = {
    moveTo: function (d, e) {},
    setContent: function (d) {},
    setUrl: function (d) {},
    show: function () {},
    hide: function () {},
    isVisible: function () {},
    maximize: function () {},
    minimize: function () {},
    setWidth: function (d) {},
    setHeight: function () {},
    setMaximizeSize: function () {},
    setContentFixedHeight: function () {},
    setContentWidth: function (d) {},
    setTitleText: function (d) {},
    showShadow: function () {},
    hideShadow: function () {},
    showStatusbar: function () {},
    hideStatusbar: function () {},
    moveOutOfSight: function () {},
    isOutOfSight: function () {},
    enableMoveResize: function (d) {},
    disableMoveResize: function (d) {},
    setCommandButtons: function (d) {},
    toggleCommand: function (d) {},
    minimizeToZone: function (d) {},
    moveToDefaultParent: function () {},
    revertToDefaultParent: function () {},
    setActive: function (d) {},
    isActive: function () {},
    onUrlChanging: function () {},
    onUrlChanged: function () {},
    updatePopupZindex: function () {},
    dispose: function () {},
  };
  b.IView.registerInterface("Telerik.Web.UI.Window.IView");
  b.ViewBase = function (d) {
    this.window = d;
  };
  b.ViewBase.prototype = {};
  b.ViewBase.registerClass("Telerik.Web.UI.Window.ViewBase", null, b.IView);
})($telerik.$, Telerik.Web.UI.Window);
(function (a, c, h) {
  Type.registerNamespace("Telerik.Web.UI.Window");
  var b = Telerik.Web.UI;
  c.ClassicRenderer = function (i) {
    c.ClassicRenderer.initializeBase(this, [i]);
    this.container = this.table = this.titleCell = this.titlebar = this.topResizer = this.commandsContainer = this.title = this.icon = this.statusMessage = this.contentFrame = this.content = this.contentCell = this.bottomResizer = this.statusbar = this.statusCell = null;
  };
  c.ClassicRenderer.prototype = {
    createUI: function () {
      var J = this.window;
      if (!this.container) {
        var I = J.get_id();
        var K = "RadWindowWrapper_" + I;
        var v = J._isWindowRightToLeft();
        var y = document.createElement("div");
        y.id = K;
        y.className = J._getFullSkinName();
        var q = J.get_cssClass();
        if (q) {
          Sys.UI.DomElement.addCssClass(y, q);
        }
        if (v) {
          Sys.UI.DomElement.addCssClass(y, "RadWindow_rtl");
        }
        if (!J._visibleTitlebar) {
          Sys.UI.DomElement.addCssClass(y, "rwNoTitleBar");
        }
        y.style.width = J._width;
        y.style.height = J._height;
        y.setAttribute("unselectable", "on");
        this._setTabIndex(y);
        this.container = J._popupElement = y;
        var B = document.createElement("table");
        B.cellSpacing = 0;
        B.cellPadding = 0;
        Sys.UI.DomElement.addCssClass(B, "rwTable");
        this.table = J._tableElement = B;
        var m = [];
        if (v) {
          m = [
            "rwCorner rwTopRight",
            "rwTitlebar",
            "rwCorner rwTopLeft",
            "rwCorner rwBodyRight",
            "rwWindowContent",
            "rwCorner rwBodyLeft",
            "rwCorner rwBodyRight",
            "rwStatusbar",
            "rwCorner rwBodyLeft",
            "rwCorner rwFooterRight",
            "rwFooterCenter",
            "rwCorner rwFooterLeft",
          ];
        } else {
          m = [
            "rwCorner rwTopLeft",
            "rwTitlebar",
            "rwCorner rwTopRight",
            "rwCorner rwBodyLeft",
            "rwWindowContent",
            "rwCorner rwBodyRight",
            "rwCorner rwBodyLeft",
            "rwStatusbar",
            "rwCorner rwBodyRight",
            "rwCorner rwFooterLeft",
            "rwFooterCenter",
            "rwCorner rwFooterRight",
          ];
        }
        var A = ["rwTitleRow", "rwContentRow", "rwStatusbarRow", "rwFooterRow"];
        var u = 0;
        for (var r = 0; r < 4; r++) {
          var z = B.insertRow(-1);
          z.className = A[r];
          for (var w = 1; w <= 3; w++) {
            var k = z.insertCell(-1);
            k.innerHTML = "&nbsp;";
            k.className = m[u];
            u++;
          }
        }
        var E = B.rows[0].cells[1];
        E.innerHTML = "";
        this.titleCell = J._titleCell = E;
        var G = document.createElement("div");
        G.className = "rwTopResize";
        G.innerHTML = "<!-- / -->";
        this.topResizer = J._topResizer = G;
        this.titleCell.appendChild(J._topResizer);
        var C = d();
        C.className = "rwTitlebarControls";
        this.titlebar = J._titlebarElement = C;
        this.titleCell.appendChild(this.titlebar);
        var H = this.getIconNode();
        var s = this.titlebar.rows[0].insertCell(-1);
        s.appendChild(H);
        J.set_iconUrl(J.get_iconUrl());
        var F = this.getTitleNode();
        var D = this.titlebar.rows[0].insertCell(-1);
        D.appendChild(F);
        J.set_title(J._title);
        var n = this.titlebar.rows[0].insertCell(-1);
        n.noWrap = true;
        n.style.whiteSpace = "nowrap";
        n.appendChild(J._getTitleCommandButtonsHolder());
        var o = B.rows[1].cells[1];
        o.vAlign = "top";
        o.innerHTML = "";
        this.contentCell = J._contentCell = o;
        if (!(J._dockMode || J._isPredefined)) {
          Sys.UI.DomElement.addCssClass(this.contentCell, "rwExternalContent");
        }
        if (J._enableShadow && !$telerik.isIE6) {
          J._setShadowCSSClass(true);
        }
        var x = J.get_name();
        this.createStatusbar(v);
        this.container.appendChild(J._tableElement);
        this.container.style.display = "none";
        this.container.style.position = "absolute";
        J._addWindowToDocument();
        J._registerTitlebarHandlers(true);
        J.set_visibleTitlebar(J._visibleTitlebar);
        J.set_visibleStatusbar(J._visibleStatusbar);
        if (J.get_enableAriaSupport()) {
          J._applyAriaSupport();
        }
        if (J._dockMode) {
          var p = (this.content = $get(J.get_id() + "_C"));
          if (p && p.innerHTML) {
            p.style.display = "";
            p.style.overflow = "auto";
            p.style.border = "0px";
            J.set_contentElement(p);
            J.setWidthDockMode(J.get_width());
            J.setHeightDockMode(J.get_height());
          }
        } else {
          var l =
            $telerik.isIE && !$telerik.isIE9Mode
              ? document.createElement("<iframe name='" + x + "'>")
              : document.createElement("iframe");
          l.name = x;
          l.src = "javascript:'<html></html>';";
          l.style.width = "100%";
          l.style.height = "100%";
          l.style.border = "0px";
          l.frameBorder = "0";
          if ($telerik.isIE8) {
            l.style.display = "block";
          }
          this.contentFrame = J._iframe = l;
          if (
            ($telerik.isMobileSafari || J._isiPhoneiPadAppleWebkit) &&
            !J._isPredefined
          ) {
            var t = document.createElement("div");
            a(t).addClass("rwIframeWrapperIOS");
            t.appendChild(this.contentFrame);
            this.contentCell.appendChild(t);
            if (J._isiOS5Safari) {
              J.setContentFixedHeight(J.get_height(), t);
            }
            J._iframeWrapper = t;
          } else {
            this.contentCell.appendChild(J._iframe);
          }
          J._createBackReference();
        }
        J._updateOpacity();
      }
      if (!$telerik.isTouchDevice) {
        this.container.style.Transform = "none";
        this.container.style.BackfaceVisibility = "visible";
        this.container.style.webkitTransform = "none";
        this.container.style.webkitBackfaceVisibility = "visible";
        this.container.style.OTransform = "none";
        this.container.style.OBackfaceVisibility = "visible";
        this.container.style.MozTransform = "none";
        this.container.style.MozBackfaceVisibility = "visible";
        this.container.style.msTransform = "none";
        this.container.style.msBackfaceVisibility = "visible";
      }
      if (!J._popupBehavior) {
        J.set_behaviors(J._behaviors);
        this.popupBehavior = J._popupBehavior = $create(
          Telerik.Web.PopupBehavior,
          {
            id: new Date() - 100 + "PopupBehavior",
            parentElement: null,
            overlay: J._overlay,
            keepInScreenBounds: J._keepInScreenBounds,
          },
          null,
          null,
          this.container
        );
      }
    },
    setContent: function (i) {
      this.contentCell.appendChild(i);
      i.style.display = "";
      this.content = this.window._contentElement = i;
    },
    get_container: function () {
      return this.container;
    },
    getHandlesWidth: function () {
      if (!this._handlesWidth) {
        var j = this.table;
        if (!j) {
          return 0;
        }
        var i = parseInt(
          $telerik.getCurrentStyle(j.rows[2].cells[0], "width"),
          10
        );
        if (!i) {
          return 0;
        }
        this._handlesWidth = 2 * i;
      }
      return this._handlesWidth;
    },
    setShadowCssClass: function (i) {
      if (i) {
        Sys.UI.DomElement.addCssClass(this.container, "rwShadow");
        Sys.UI.DomElement.addCssClass(this.table, "rwShadow");
      } else {
        Sys.UI.DomElement.removeCssClass(this.container, "rwShadow");
        Sys.UI.DomElement.removeCssClass(this.table, "rwShadow");
      }
    },
    getBounds: function () {
      var j = this.container;
      var k = j.style.display == "none";
      j.style.display = "";
      var i = $telerik.getBounds(j);
      if (k) {
        j.style.display = "none";
      }
      return i;
    },
    updateTitleWidth: function () {
      if (this.window._visibleTitlebar && !this.window.isMinimized()) {
        var p = this.getTitleNode();
        if (!p) {
          return;
        }
        p.style.width = "1px";
        var q = 0;
        var j = this.getTitleCommandsContainer();
        var i = j.offsetWidth;
        if (i > 0) {
          var m = j.getElementsByTagName("LI");
          if (m.length == 0) {
            i = 0;
          } else {
            if (m[0] && m[0].offsetWidth > 0) {
              i = m.length * m[0].offsetWidth;
            }
          }
          j.style.width = i ? i + "px" : "";
          q += i;
        }
        var k = this.getIconNode();
        var l = k.offsetWidth;
        if (l > 0 && k.parentNode.tagName == "TD") {
          k.parentNode.style.width = l + "px";
          q += l;
        }
        q += this.getHandlesWidth();
        var n = 0;
        var o = this.titlebar;
        n = o ? o.offsetWidth - q : q;
        if (n > 0) {
          p.style.width = n + "px";
        }
      }
    },
    getTitleNode: function () {
      if (!this.title) {
        this.createTitle();
      }
      return this.title;
    },
    createTitle: function () {
      var i = document.createElement("em");
      i.setAttribute("unselectable", "on");
      if (this.window.get_enableAriaSupport()) {
        i.id = this.window.get_id() + "_title";
        i.setAttribute("role", "label");
      }
      this.title = this.window._titleElement = i;
      return i;
    },
    getIconNode: function () {
      if (!this.icon) {
        this.createIcon();
      }
      return this.icon;
    },
    createIcon: function () {
      var i = document.createElement("a");
      i.className = "rwIcon";
      $addHandler(i, "mousedown", this.window._cancelEvent);
      this.icon = this.window._titleIconElement = i;
    },
    getTitleCommandsContainer: function () {
      if (!this.commandsContainer) {
        this.createTitleCommandsContainer();
      }
      return this.commandsContainer;
    },
    createTitleCommandsContainer: function () {
      var i = document.createElement("ul");
      i.className = "rwControlButtons";
      if (this.window.get_enableAriaSupport()) {
        i.setAttribute("role", "toolbar");
      }
      this.commandsContainer = this.window._buttonsElement = i;
    },
    getStatusMessageNode: function () {
      if (!this.statusMessage) {
        this.createStatusMessage();
      }
      return this.statusMessage;
    },
    createStatusMessage: function () {
      var i = document.createElement("input");
      i.id = this.window.get_id() + "_status";
      i.readOnly = "readonly";
      i.setAttribute("unselectable", "on");
      i.setAttribute("tabindex", "-1");
      this.statusMessage = this.window._statusMessageElement = i;
    },
    getStatusbar: function () {
      return this.statusCell || this.createStatusbar;
    },
    createStatusbar: function (i) {
      var k = this.table;
      var j = d();
      j.style.width = "100%";
      this.statusCell = this.window._statusCell = k.rows[2].cells[1];
      this.statusbar = this.statusCell.parentNode;
      this.statusCell.innerHTML = "";
      this.statusCell.appendChild(j);
      if (!i) {
        e(j, this.getStatusMessageNode());
      }
      if (this.window.isBehaviorEnabled(b.WindowBehaviors.Resize)) {
        this.createStatusbarResizer(j);
      }
      if (i) {
        e(j, this.getStatusMessageNode());
      }
    },
    createStatusbarResizer: function () {
      if (this.bottomResizer) {
        return;
      }
      var i = this.statusCell.firstChild.rows[0].insertCell(-1);
      i.style.width = "15px";
      var j = document.createElement("div");
      i.appendChild(j);
      this.bottomResizer = this.window._bottomResizer = j;
    },
    getCommandButtons: function () {
      return a(this.commandsContainer).find("a[class$='Button']");
    },
    getCommandButton: function (i) {
      if (!i || !this.commandsContainer) {
        return null;
      }
      var j = i.toLowerCase();
      j = j.charAt(0).toUpperCase() + j.substring(1);
      i = "rw" + j + "Button";
      return a("." + i, this.commandsContainer)[0];
    },
    createCommandButton: function (i) {
      var k = document.createElement("li");
      var j = document.createElement("a");
      j.href = "javascript:void(0);";
      j.className = i[0];
      j.setAttribute("title", i[1]);
      if (this.window.get_enableAriaSupport()) {
        k.setAttribute("role", "presentation");
        j.setAttribute("role", "button");
      }
      this._setTabIndex(j);
      this.attachButtonEvents(j, i[2]);
      var l = document.createElement("span");
      l.innerHTML = i[1];
      j.appendChild(l);
      k.appendChild(j);
      this.commandsContainer.appendChild(k);
      return j;
    },
    changeCommandButton: function (i, k, j) {
      if (!i) {
        return;
      }
      i.setAttribute("title", k);
      i.innerHTML = k;
      this.clearCommandButton(i);
      this.attachButtonEvents(i, j);
    },
    changeCommandButtonByName: function (j, l, k) {
      var i = this.getCommandButton(j);
      if (i) {
        this.changeCommandButton(i, l, k);
      }
    },
    clearCommandButtons: function () {
      var k = a(this.commandsContainer);
      var j = this.getCommandButtons();
      for (var l = 0; l < j.length; l++) {
        this.clearCommandButton(j[l]);
      }
      k.empty();
    },
    attachButtonEvents: function (i, j) {
      $addHandlers(
        i,
        {
          dblclick: this._cancelEvent,
          mousedown: this._cancelEvent,
          keypress: this._keyPressHandler(j),
        },
        this
      );
      $telerik.addHandler(i, "click", j);
      $telerik.addHandler(i, "click", this._cancelEvent);
    },
    clearCommandButton: function (i) {
      $clearHandlers(i);
    },
    getTitlebarHeight: function () {
      if (!this.table) {
        return 0;
      }
      return this.table.rows[0].offsetHeight;
    },
    get_zIndexCss: function () {
      return this.container ? this.container.style.zIndex : -1;
    },
    get_initialZIndexCss: function () {
      var i = this.window.get_element();
      return i
        ? parseInt(i.style.zIndex || $telerik.getComputedStyle(i, "zIndex"), 10)
        : null;
    },
    get_uiMinWidth: function () {
      if (!this._defaultMinWidth) {
        this._defaultMinWidth = this.getHandlesWidth();
        if (this.window._visibleTitlebar) {
          this._defaultMinWidth += this._getTitleBarMinWidth();
        }
      }
      return this._defaultMinWidth;
    },
    _getTitleBarMinWidth: function () {
      var k = this.table,
        l = this.title,
        j = l.style.width,
        n = this.titleCell,
        i = this.content,
        m;
      if (l) {
        l.style.width = "1px";
      }
      if (i) {
        i.style.width = "1px";
      }
      k.style.width = "1px";
      m = n.offsetWidth + n.offsetLeft;
      l.style.width = j;
      k.style.width = "";
      if (i) {
        i.style.width = "";
      }
      return m;
    },
    get_uiMinHeight: function () {
      if (!this._defaultMinHeight) {
        var i = Math.ceil(this.getHandlesWidth() / 2);
        this._defaultMinHeight = i;
        this._defaultMinHeight += this.window._visibleTitlebar
          ? this.titleCell.offsetHeight
          : i;
        this._defaultMinHeight += this.window._visibleStatusbar
          ? this.statusCell.offsetHeight
          : 0;
      }
      return this._defaultMinHeight;
    },
    dispose: function () {
      this.container = this.table = this.titleCell = this.titlebar = this.topResizer = this.commandsContainer = this.title = this.icon = this.statusMessage = this.contentFrame = this.content = this.contentCell = this.bottomResizer = this.statusbar = this.statusCell = null;
    },
    _keyPressHandler: function (i) {
      return function (k) {
        var j = k.target || k.srcElement;
        f(k) && i(k);
        $telerik.stopPropagation(k);
        j.focus();
      };
    },
    _setTabIndex: function (i) {
      var j = this.window.get_tabIndex();
      if (j !== null) {
        i.setAttribute("tabIndex", j);
      }
    },
    _cancelEvent: function (i) {
      var j = this;
      if (j.window) {
        j.window._clearTouchEventIdentifier();
      }
      return $telerik.cancelRawEvent(i);
    },
  };
  c.ClassicRenderer.registerClass(
    "Telerik.Web.UI.Window.ClassicRenderer",
    c.RendererBase,
    c.IRenderer
  );
  function d() {
    var i = document.createElement("table");
    i.align = "left";
    i.cellSpacing = 0;
    i.cellPadding = 0;
    i.insertRow(-1);
    return i;
  }
  function e(k, j) {
    var l = k.rows[0].insertCell(-1);
    l.style.width = "100%";
    l.appendChild(j);
    var i = document.createElement("label");
    i.setAttribute("for", j.id);
    i.innerHTML = "status label";
    i.style.display = "none";
    l.appendChild(i);
  }
  var g = Sys.UI.Key;
  function f(i) {
    return i.charCode === g.space || i.charCode === g.enter;
  }
})($telerik.$, Telerik.Web.UI.Window);
Type.registerNamespace("Telerik.Web.UI.Window");
(function (a, b, e) {
  b.ClassicView = function (f) {
    b.ClassicView.initializeBase(this, [f]);
    this.ui = this.window.ui;
  };
  b.ClassicView.prototype = {
    moveTo: function (f, g) {
      this.ui.popupBehavior._setCoordinates(f, g);
      this.ui.popupBehavior.show();
      this._removeExplicitMSAjaxWidth();
      this.ui.updateTitleWidth();
    },
    show: function () {
      if (this.ui.popupBehavior) {
        this.ui.popupBehavior.show();
      }
      this._isViewVisible = true;
    },
    hide: function () {
      if (this.ui.popupBehavior) {
        this.ui.popupBehavior.hide();
      }
      this._isViewVisible = false;
      this._ariaHide();
    },
    isVisible: function () {
      return this._isViewVisible;
    },
    setContent: function (g) {
      var f = this.ui.content;
      if (f && g != f) {
        $telerik.disposeElement(f);
        f.innerHTML = "";
        f.appendChild(g);
        g = f;
      }
      this.ui.createUI();
      if (this.ui.contentFrame) {
        this.ui.contentFrame.style.display = "none";
      } else {
        if (
          !this.window._dropDownTouchScroll &&
          Telerik.Web.UI.TouchScrollExtender._getNeedsScrollExtender()
        ) {
          this.window._createTouchScrollExtender(true);
        }
      }
      this.ui.setContent(g);
    },
    setUrl: function (g) {
      var f = this.ui.contentFrame;
      if (!f) {
        return;
      }
      f.src = g;
      this.onUrlChanging();
    },
    maximize: function () {
      this.ui.setShadowCssClass(false);
      var f = this.ui.container;
      $telerik.removeCssClasses(f, [
        "rwNormalWindow",
        "rwMinimizedWindow",
        "rwMinimizedWindowShadow",
      ]);
      Sys.UI.DomElement.addCssClass(f, "rwMaximizedWindow");
      this.window._configureMaximizeButton(true);
      this.window._configureMinimizeButton();
      this.window._maintainMaximizedSize();
      this.window._maintainMaximizedSize();
      var g = f._hideWindowedElementsIFrame;
      if (g) {
        Sys.UI.DomElement.removeCssClass(g, "rwMinimizedWindowOverlay");
        this.ui.popupBehavior._handleElementResize();
      }
      if (this.window.get_showOnTopWhenMaximized()) {
        var h = f.style.zIndex;
        if (h) {
          this.window._restoreZindex = h;
        }
        f.style.zIndex = 100000;
      }
      this.ui.updateTitleWidth();
    },
    setMaximizeSize: function () {
      var g = this.ui.container;
      if (!g) {
        return;
      }
      var k = this.window._getViewportBounds();
      g.style.top = k.scrollTop + k.y + "px";
      g.style.left = k.scrollLeft + k.x + "px";
      var i = parseInt(this.window.get_maxWidth(), 10);
      var h = parseInt(this.window.get_maxHeight(), 10);
      if (i) {
        k.width = i;
      }
      if (h) {
        k.height = h;
      }
      $telerik.setSize(g, { width: k.width, height: k.height });
      var n = this.window._getRestrictionZoneBounds();
      if (!n) {
        this.window._enablePageScrolling(false);
      }
      var l = this.window._tableElement;
      k = $telerik.getContentSize(g);
      var f = $telerik.getBorderBox(l);
      var j = $telerik.getPaddingBox(l);
      var m = k.height - f.vertical - j.vertical;
      l.style.height = m + "px";
      this.window._fixIeHeight(l, m);
      if (this.window._dockMode) {
        this.window.setWidthDockMode(k.width);
        this.window.setHeightDockMode(k.height);
      }
      this.ui.updateTitleWidth();
      if (this.window._isiOS5Safari) {
        this.window.setContentFixedHeight(k.height, this.window._iframeWrapper);
      }
    },
    minimize: function () {
      this.window._configureMinimizeButton(true);
      this.window._configureMinimizeButton(true);
      this.window._enablePageScrolling(true);
      var f = this.ui.container;
      $telerik.removeCssClasses(f, ["rwNormalWindow", "rwMaximizedWindow"]);
      Sys.UI.DomElement.addCssClass(f, "rwMinimizedWindow");
      if (this.window._enableShadow && !$telerik.isIE6) {
        this.ui.setShadowCssClass(true);
        Sys.UI.DomElement.addCssClass(f, "rwMinimizedWindowShadow");
      }
      var g = f._hideWindowedElementsIFrame;
      if (g) {
        Sys.UI.DomElement.addCssClass(g, "rwMinimizedWindowOverlay");
      }
      this.ui.getTitleNode().style.width = "";
      this.minimizeToZone(this.window.get_minimizeZoneID());
    },
    setTabIndex: function (h) {
      var g = this.ui.container;
      var f = this.ui.getCommandButtons();
      if (h !== null && h !== e) {
        g.setAttribute("tabIndex", h);
        f.attr("tabIndex", h);
      } else {
        g.removeAttribute("tabIndex");
        f.removeAttr("tabIndex");
      }
    },
    setWidth: function (g) {
      var f = this.ui.container;
      var h = parseInt(g, 10);
      f.style.width = h - $telerik.getBorderBox(f).horizontal + "px";
      this.updatePopupZindex();
    },
    setHeight: function (l, k) {
      var g = this.ui.container;
      var j = this.ui.table;
      var h = parseInt(l ? l : j.style.height, 10);
      if (true == k) {
        h = j.offsetHeight;
      }
      if (parseInt(h, 10) == 0) {
        return;
      }
      var f = $telerik.getBorderBox(g).vertical;
      h = h > f ? h - f : h;
      var i = h + "px";
      j.style.height = i;
      this._fixTableHeightInIE(j, h);
      g.style.height = i;
    },
    setContentFixedHeight: function (h, f) {
      if (!f) {
        return;
      }
      var l = this.ui;
      var i = this._substractWrappersBorder(h);
      var m = this.window.isVisible();
      var g = l.table.rows[3].cells[1];
      var k = l.table.rows[0].cells[1];
      var j = l.table.rows[2].cells[1];
      i -= m
        ? parseInt($telerik.getBounds(g).height, 10)
        : parseInt($telerik.getCurrentStyle(g, "height"), 10);
      if (this.window._visibleTitlebar) {
        i -= m
          ? parseInt($telerik.getBounds(l.titlebar).height, 10)
          : parseInt($telerik.getCurrentStyle(l.titlebar, "height"), 10);
        i -= m
          ? parseInt($telerik.getBounds(l.topResizer).height, 10)
          : parseInt($telerik.getCurrentStyle(l.topResizer, "height"), 10);
      } else {
        i -= m
          ? parseInt($telerik.getBounds(k).height, 10)
          : parseInt($telerik.getCurrentStyle(k, "height"), 10);
      }
      if (this.window._visibleStatusbar) {
        i -= m
          ? parseInt($telerik.getBounds(j).height, 10)
          : parseInt($telerik.getCurrentStyle(j, "height"), 10);
      }
      if (i > 0) {
        f.style.height = i + "px";
      }
    },
    setContentWidth: function (f) {
      if (!this.ui.content) {
        return;
      }
      var g =
        this.window._substractWrappersBorder(f) - this.ui.getHandlesWidth();
      if (g > 0) {
        this.ui.content.style.width = g + "px";
      }
    },
    setTitleText: function (f) {
      if (!this.ui.title) {
        return;
      }
      this.ui.title.innerHTML = f || "&nbsp;";
      this.ui.updateTitleWidth();
    },
    showStatusbar: function () {
      this._displayStatusbar("", true);
    },
    hideStatusbar: function () {
      this._displayStatusbar("none", false);
    },
    _displayStatusbar: function (h, f) {
      var g = this.ui.statusbar;
      d(g, h);
      if (this._hasAriaSupport()) {
        c(g, f);
      }
    },
    showShadow: function () {
      this.ui.setShadowCssClass(true);
    },
    hideShadow: function () {
      this.ui.setShadowCssClass(false);
    },
    moveOutOfSight: function () {
      var g = this.ui.popupBehavior;
      if (g) {
        this.window._storeBounds();
        var f = g.get_elementToShow();
        a(f).css({
          display: "",
          position: "absolute",
          top: "-10000px",
          left: this.window.get_leftHidingPoint() + "px",
          overflow: "hidden",
        });
        if (
          f._hideWindowedElementsIFrame &&
          f._hideWindowedElementsIFrame.style
        ) {
          f._hideWindowedElementsIFrame.style.display = "none";
        }
      }
      this._ariaHide();
    },
    isOutOfSight: function () {
      var f = this.ui.container;
      if (!f) {
        return false;
      }
      var g = parseInt(f.style.left, 10);
      return (
        $telerik.isIE &&
        ($telerik.isIE9 || $telerik.isIE10) &&
        g == this.window.get_leftHidingPoint()
      );
    },
    enableMoveResize: function (f) {
      this.disableMoveResize(f);
      if (!this.ui.container) {
        return;
      }
      var j = this.ui.table.rows;
      var g = {};
      var i = this.window._isWindowRightToLeft();
      if (f.resize) {
        this.ui.createStatusbarResizer();
        this.ui.bottomResizer.style.display = "";
        if (i) {
          g = {
            nw: j[0].cells[2],
            n: this.ui.topResizer,
            ne: j[0].cells[0],
            w: [j[1].cells[2], j[2].cells[2]],
            e: [j[1].cells[0], j[2].cells[0]],
            sw: j[3].cells[2],
            s: j[3].cells[1],
            se: [j[3].cells[0], this.ui.bottomResizer],
          };
        } else {
          g = {
            nw: j[0].cells[0],
            n: this.ui.topResizer,
            ne: j[0].cells[2],
            w: [j[1].cells[0], j[2].cells[0]],
            e: [j[1].cells[2], j[2].cells[2]],
            sw: j[3].cells[0],
            s: j[3].cells[1],
            se: [j[3].cells[2], this.ui.bottomResizer],
          };
        }
      }
      if (f.move) {
        g.move = this.ui.titleCell;
      }
      this.resizeExtender = this.window._resizeExtender = new Telerik.Web.UI.ResizeExtender(
        this.window,
        this.ui.container,
        g,
        this.ui.table
      );
      var h = this.window._dockMode ? null : this.ui.contentFrame;
      this.resizeExtender.set_iframeToSkip(h);
    },
    disableMoveResize: function (f) {
      if (this.resizeExtender) {
        this.resizeExtender.dispose();
        this.resizeExtender = this.window._resizeExtender = null;
      }
      if (f.Resize && this.ui.bottomResizer) {
        this.ui.bottomResizer.style.display = "none";
      }
    },
    setCommandButtons: function (f) {
      var g = [];
      this.ui.clearCommandButtons();
      for (var h = 0; h < f.length; h++) {
        g.push(this.ui.createCommandButton(f[h]));
      }
      this.ui.updateTitleWidth();
      return g;
    },
    toggleCommand: function (g) {
      var f = this.ui.getCommandButton(g);
      if (!f) {
        return;
      }
      Sys.UI.DomElement.toggleCssClass(f, "on");
    },
    minimizeToZone: function (g) {
      if (!g) {
        return;
      }
      if (typeof g == "string") {
        g = $get(g);
      }
      var f = this.ui.container;
      if (f.parentNode != g) {
        f.parentNode.removeChild(f);
        g.appendChild(f);
        this.window.setVisible(true);
        f.style.position = "static";
        if ($telerik.isIE) {
          f.style.display = "inline";
        } else {
          f.style.cssFloat = "left";
        }
      }
    },
    moveToDefaultParent: function () {
      var f = this.window._getDefaultParent();
      f.insertBefore(this.ui.container, f.firstChild);
    },
    revertToDefaultParent: function () {
      var f = this.ui.container;
      f.parentNode.removeChild(f);
      f.style.position = "absolute";
      if ($telerik.isIE) {
        f.style.display = "";
      } else {
        f.style.cssFloat = "";
      }
      this.moveToDefaultParent();
    },
    setActive: function (g) {
      var f = this.ui.container;
      if (g) {
        this.window.setZIndexCss();
        Sys.UI.DomElement.removeCssClass(f, "rwInactiveWindow");
      } else {
        Sys.UI.DomElement.addCssClass(f, "rwInactiveWindow");
      }
    },
    isActive: function () {
      var f = this.ui.container;
      return f && !Sys.UI.DomElement.containsCssClass(f, "rwInactiveWindow");
    },
    onUrlChanging: function () {
      if (!this.ui.contentFrame) {
        return;
      }
      if (this.window.get_showContentDuringLoad()) {
        var g = this.ui.statusMessage;
        if (g) {
          Sys.UI.DomElement.addCssClass(g, "rwLoading");
        }
      } else {
        var f = this.ui.contentFrame;
        var h = f.style;
        h.position = "absolute";
        h.top = "-10000px";
        if ($telerik.isIE9Mode) {
          this.setHeight(this.window._height);
        }
        if (this.window._isWindowRightToLeft() && $telerik.isChrome) {
          h.width = "1px";
        }
        var i = f.parentNode;
        Sys.UI.DomElement.addCssClass(i, "rwLoading");
      }
    },
    onUrlChanged: function () {
      var i = this.ui.statusMessage,
        h = this.ui.contentFrame;
      if (this.window.get_showContentDuringLoad()) {
        if (i) {
          Sys.UI.DomElement.removeCssClass(i, "rwLoading");
        }
      } else {
        h.style.position = "";
        if (this.window._isWindowRightToLeft() && $telerik.isChrome) {
          h.style.width = "100%";
        }
        var k = h.parentNode;
        Sys.UI.DomElement.removeCssClass(k, "rwLoading");
        if ($telerik.isIE9Mode) {
          if (this.window.isMaximized()) {
            this.window._maintainMaximizedSize();
          } else {
            if (!this.window.isMinimized()) {
              this.setHeight(this.window.get_height());
            }
          }
        }
      }
      if (i) {
        this.window.set_status(this.window.get_navigateUrl());
      }
      try {
        var f = h.contentWindow.document;
        var j = f.title;
        if (j && j != this.window.get_title()) {
          this.window.set_title(
            j.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;")
          );
        }
      } catch (g) {}
    },
    updatePopupZindex: function () {
      var f = this.ui.popupBehavior;
      if (f) {
        if (this.window.isVisible()) {
          f.show();
        }
      }
    },
    dispose: function () {},
    _substractWrappersBorder: function (h, i) {
      var k = this.ui.container;
      var f = this.ui.contentCell;
      if (!k || !f) {
        return h;
      }
      var j = $telerik.getBorderBox(k);
      var g = $telerik.getBorderBox(f);
      h -= i ? j.horizontal + g.hrizontal : j.vertical + g.vertical;
      return h;
    },
    _fixTableHeightInIE: function (i, g) {
      if ("CSS1Compat" == document.compatMode) {
        var f = i.offsetHeight - parseInt(g, 10);
        if (f > 0) {
          var h = parseInt(i.style.height, 10) - f;
          if (h > 0) {
            i.style.height = h + "px";
          }
        }
      }
    },
    _removeExplicitMSAjaxWidth: function () {
      if (!this.window.get_width()) {
        this.ui.container.style.width = "";
      }
    },
    _ariaHide: function () {
      if (
        this.window.get_enableAriaSupport() &&
        this.ui.container &&
        !this.window.isVisible()
      ) {
        this.ui.container.setAttribute("aria-hidden", "true");
      }
    },
    _hasAriaSupport: function () {
      return this.window.get_enableAriaSupport();
    },
    restoreResizeHandlesCursor: function () {},
  };
  b.ClassicView.registerClass(
    "Telerik.Web.UI.Window.ClassicView",
    b.ViewBase,
    b.IView
  );
  function d(f, g) {
    f && (f.style.display = g);
  }
  function c(f, g) {
    f && f.setAttribute("aria-hidden", !g);
  }
})($telerik.$, Telerik.Web.UI.Window);
(function (a, c, n) {
  Type.registerNamespace("Telerik.Web.UI.Window");
  var b = Telerik.Web.UI;
  var g = ".rwCommand";
  var l = function (p) {
    return p + g;
  };
  var h = b.EventType;
  var f = l(h.Down);
  var o = l(h.Up);
  var e = l("dblclick");
  var d = $telerik.cancelRawEvent;
  var m = $telerik.preventDefault;
  c.LightweightRenderer = function (p) {
    c.LightweightRenderer.initializeBase(this, [p]);
    this.options = { skin: this.window.get_skin(), minTitleWidth: 30 };
    this.container = null;
    this.titlebar = null;
    this.icon = null;
    this.title = null;
    this.commandsContainer = null;
    this.content = null;
    this.contentFrame = null;
    this.statusbar = null;
    this.statusMessage = null;
    this.topResizer = null;
    this.bottomResizer = null;
  };
  c.LightweightRenderer.prototype = {
    createUI: function () {
      if (this.container) {
        return;
      }
      var C = this.window;
      var x = C._isWindowRightToLeft();
      var p = Sys.UI.DomElement.addCssClass;
      var q = document.createElement("div");
      this._appendToDom(q);
      this.container = C._popupElement = q;
      q.id = "RadWindowWrapper_" + C.get_id();
      q.className = this._getSkinCssClass();
      var u = C.get_cssClass();
      if (u) {
        p(q, u);
      }
      if (x) {
        p(q, "rwRtl");
      }
      if (!C._visibleTitlebar) {
        p(q, "rwNoTitleBar");
      }
      this.setShadowCssClass(C._enableShadow);
      q.setAttribute("unselectable", "on");
      this._setTabIndex(q);
      var r = q.style;
      r.width = C._width;
      r.height = C._height;
      r.position = "absolute";
      var A = (this.titlebar = C._titlebarElement = document.createElement(
        "div"
      ));
      A.className = "rwTitleBar";
      q.appendChild(A);
      var B = document.createElement("div");
      B.className = "rwTitleWrapper";
      A.appendChild(B);
      this._setRolePresentation(B);
      B.appendChild(this.getIconNode());
      B.appendChild(this.getTitleNode());
      C.set_title(C._title);
      B.appendChild(this.getTitleCommandsContainer());
      C._registerTitlebarHandlers(true);
      C.set_iconUrl(C.get_iconUrl());
      var s = (this.content =
        $get(C.get_id() + "_C") ||
        this.pendingContent ||
        document.createElement("div"));
      this._setRolePresentation(s);
      if (s) {
        s.style.display = "none";
        s.className = "rwContent";
        this.setContent(s);
      }
      if (!C._dockMode) {
        var t = s.getElementsByTagName("iframe");
        var y = C.get_name();
        var v =
          t.length > 0
            ? t[0]
            : document.createElement(
                $telerik.isIE && !$telerik.isIE9Mode
                  ? "<iframe name='" + y + "'>"
                  : "iframe"
              );
        v.name = y;
        v.src = "javascript:'<html></html>';";
        v.style.width = "100%";
        v.style.height = "100%";
        v.style.border = "0px";
        v.frameBorder = "0";
        if ($telerik.isIE8) {
          v.style.display = "block";
        }
        this.contentFrame = C._iframe = v;
        if (
          ($telerik.isMobileSafari || C._isiPhoneiPadAppleWebkit) &&
          !C._isPredefined
        ) {
          var w = document.createElement("div");
          a(w).addClass("rwIframeWrapperIOS");
          w.appendChild(this.contentFrame);
          this.content.appendChild(w);
          if (C._isiOS5Safari) {
            C.setContentFixedHeight(C.get_height(), w);
          }
          C._iframeWrapper = w;
        } else {
          this.content.appendChild(this.contentFrame);
        }
        Sys.UI.DomElement.addCssClass(this.content, "rwExternalContent");
        C._createBackReference();
      }
      var z = this.createStatusbar();
      this.container.appendChild(z);
      if (!C._visibleStatusbar) {
        z.style.display = "none";
      }
      C._addWindowToDocument();
      if (!$telerik.isTouchDevice) {
        this.container.style.Transform = "none";
        this.container.style.BackfaceVisibility = "visible";
        this.container.style.webkitTransform = "none";
        this.container.style.webkitBackfaceVisibility = "visible";
        this.container.style.OTransform = "none";
        this.container.style.OBackfaceVisibility = "visible";
        this.container.style.MozTransform = "none";
        this.container.style.MozBackfaceVisibility = "visible";
        this.container.style.msTransform = "none";
        this.container.style.msBackfaceVisibility = "visible";
      }
      if (!C._popupBehavior) {
        C.set_behaviors(C._behaviors);
        this.popupBehavior = C._popupBehavior = $create(
          Telerik.Web.PopupBehavior,
          {
            id: new Date() - 100 + "PopupBehavior",
            parentElement: null,
            overlay: C._overlay,
            keepInScreenBounds: C._keepInScreenBounds,
          },
          null,
          null,
          this.container
        );
      }
      if (C.get_enableAriaSupport()) {
        this.window._applyAriaSupport();
      }
    },
    _appendToDom: function (q) {
      var r = this.window;
      var p = a(r.get_element()).closest("form");
      if (p.length > 0) {
        p.prepend(q);
      } else {
        document.body.appendChild(q);
      }
    },
    _getSkinCssClass: function () {
      return "RadWindow RadWindow_" + this.options.skin;
    },
    setContent: function (p) {
      this._setContent(p);
      this.content = this.window._contentElement = p;
    },
    _setContent: function (q) {
      var p = this.container.children;
      if (p.length == 1) {
        this.container.appendChild(q);
      } else {
        this.container.insertBefore(q, p[1]);
      }
      q.style.display = "";
    },
    get_container: function () {
      return this.container;
    },
    getHandlesWidth: function () {
      var p = a(this.container);
      var q = p.css(["paddingLeft", "paddingRight"]);
      var r = parseFloat(q.paddingLeft, 10) + parseFloat(q.paddingRight, 10);
      return Math.max(r, 12);
    },
    setShadowCssClass: function (q) {
      var p = q
        ? Sys.UI.DomElement.addCssClass
        : Sys.UI.DomElement.removeCssClass;
      p(this.container, "rwShadow");
    },
    getBounds: function () {
      var q = this.container;
      var r = q.style.display == "none";
      q.style.display = "";
      var p = $telerik.getBounds(q);
      if (r) {
        q.style.display = "none";
      }
      return p;
    },
    showContentOverlay: function () {
      var p = this.contentOverlay;
      if (!this.contentOverlay) {
        p = this.createContentOverlay();
      }
      p.style.display = "";
    },
    hideContentOverlay: function () {
      if (!this.contentOverlay) {
        return;
      }
      this.contentOverlay.style.display = "none";
    },
    createContentOverlay: function () {
      var p = this.content;
      var q = (this.contentOverlay = document.createElement("div"));
      var r = q.style;
      r.position = "absolute";
      r.top = 0;
      r.left = 0;
      r.zIndex = "1";
      r.backgroundColor = "white";
      r.filter = "alpha(opacity=0)";
      r.opacity = 0;
      r.width = "100%";
      r.height = "100%";
      p.appendChild(q);
      return q;
    },
    updateTitleWidth: function () {},
    getTitleNode: function () {
      if (!this.title) {
        this.createTitle();
      }
      return this.title;
    },
    createTitle: function () {
      var p = document.createElement("h6");
      p.setAttribute("unselectable", "on");
      p.className = "rwTitle";
      if (this.window.get_enableAriaSupport()) {
        p.id = this.window.get_id() + "_title";
        p.setAttribute("role", "label");
      }
      this.title = this.window._titleElement = p;
    },
    getIconNode: function () {
      if (!this.icon) {
        this.createIcon();
      }
      return this.icon;
    },
    createIcon: function () {
      var p = document.createElement("span");
      p.className = "rwIcon";
      this._setRolePresentation(p);
      this.icon = this.window._titleIconElement = p;
    },
    getTitleCommandsContainer: function () {
      if (!this.commandsContainer) {
        this.createTitleCommandsContainer();
      }
      return this.commandsContainer;
    },
    createTitleCommandsContainer: function () {
      var p = document.createElement("ul");
      p.className = "rwCommands";
      this._setRole(p, "toolbar");
      this.commandsContainer = this.window._buttonsElement = p;
    },
    getStatusbar: function () {
      return this.statusbar || this.createStatusbar();
    },
    createStatusbar: function () {
      var p = (this.statusbar = document.createElement("div"));
      p.className = "rwStatusBar";
      this._setRole(p, "status");
      p.appendChild(this.getStatusMessageNode());
      if (this.window.isBehaviorEnabled(b.WindowBehaviors.Resize)) {
        p.appendChild(this.createStatusbarResizer());
      }
      return p;
    },
    getStatusMessageNode: function () {
      if (!this.statusMessage) {
        this.createStatusMessage();
      }
      return this.statusMessage;
    },
    createStatusMessage: function () {
      var p = document.createElement("input");
      p.id = this.window.get_id() + "_status";
      p.readOnly = "readonly";
      p.setAttribute("unselectable", "on");
      p.setAttribute("tabindex", "-1");
      this.statusMessage = this._statusMessageElement = p;
      this._setRolePresentation(p);
      if (this.window.get_enableAriaSupport()) {
        p.setAttribute("aria-label", "status");
      }
    },
    createStatusbarResizer: function () {
      if (this.bottomResizer) {
        return;
      }
      var p = document.createElement("span");
      p.className = "rwResize";
      this._setRolePresentation(p);
      this.bottomResizer = p;
      return p;
    },
    removeStatusbarResizer: function () {
      var q = this;
      var p = q.bottomResizer;
      if (!p) {
        return;
      }
      p.parentNode.removeChild(p);
      q.bottomResizer = null;
    },
    getCommandButtons: function () {
      return a(this.commandsContainer).find(".rwCommandButton");
    },
    getCommandButton: function (p) {
      if (!p || !this.commandsContainer) {
        return null;
      }
      var q = p.toLowerCase();
      q = q.charAt(0).toUpperCase() + q.substring(1);
      var r = ".rw" + q + "Button, .rw" + q;
      return a(this.commandsContainer).find(r)[0];
    },
    createCommandButton: function (q) {
      var r = document.createElement("li");
      r.className = "rwListItem";
      var p = document.createElement("span");
      p.className = "rwCommandButton " + q[0];
      p.value = p.title = q[1];
      this.attachButtonEvents(p, q[2]);
      r.appendChild(p);
      this.commandsContainer.appendChild(r);
      this._setRolePresentation(r);
      this._setRole(p, "button");
      this._setTabIndex(p);
      this._initializeRipple(p);
      return p;
    },
    _initializeRipple: function (p) {
      if (this.window._enableRippleEffect) {
        var q = b.MaterialRippleManager.getInstance();
        if (q) {
          q.initializeRipple(p, {
            rippleType: b.MaterialRippleType.Icon,
            autoHide: true,
            iconRippleSizeFactor: 0.54,
          });
        }
      }
    },
    changeCommandButton: function (p, r, q) {
      p.value = p.title = r;
      this.clearCommandButton(p);
      this.attachButtonEvents(p, q);
    },
    attachButtonEvents: function (p, q) {
      $telerik.onEvent(p, f, d);
      $telerik.onEvent(p, o, m);
      $telerik.onEvent(p, o, this._upHandler(q));
      $telerik.onEvent(p, e, d);
      $telerik.onEvent(p, "keypress", this._keyPressHandler(q));
    },
    changeCommandButtonByName: function (r, s, q) {
      var p = this.getCommandButton(r);
      if (p) {
        this.changeCommandButton(p, s, q);
      }
    },
    clearCommandButtons: function () {
      var q = a(this.commandsContainer);
      var p = this.getCommandButtons();
      for (var r = 0; r < p.length; r++) {
        this.clearCommandButton(p[r]);
      }
      q.empty();
    },
    clearCommandButton: function (p) {
      $telerik.offEvent(p, f);
      $telerik.offEvent(p, o);
      $telerik.offEvent(p, o);
      $telerik.offEvent(p, e);
      $telerik.offEvent(p, "keypress");
    },
    geTitlebarHeight: function () {
      if (!this.titlebar) {
        return 0;
      }
      return this.titlebar.offsetHeight;
    },
    get_zIndexCss: function () {
      return this.container ? this.container.style.zIndex : -1;
    },
    get_initialZIndexCss: function () {
      var p = this.window.get_element();
      return p
        ? parseInt(p.style.zIndex || $telerik.getComputedStyle(p, "zIndex"), 10)
        : null;
    },
    get_uiMinWidth: function () {
      this._minUIWidth = this.options.minTitleWidth || 0;
      this._minUIWidth += this.getHandlesWidth();
      if (this.commandsContainer) {
        this._minUIWidth += this.commandsContainer.offsetWidth;
      }
      if (this.icon) {
        this._minUIWidth += this.icon.offsetWidth;
      }
      return this._minUIWidth;
    },
    get_uiMinHeight: function () {
      if (!this._minUIHeight) {
        this._minUIHeight = this.getHandlesWidth() / 2 || 0;
        if (this.window._visibleTitlebar) {
          this._minUIHeight += this.titlebar.offsetHeight;
        }
        if (this.window._visibleStatusbar) {
          this._minUIHeight += this.statusbar.offsetHeight;
        }
      }
      return this._minUIHeight;
    },
    dispose: function () {
      this.container = this.titlebar = this.icon = this.title = this.commandsContainer = this.content = this.contentFrame = this.statusbar = this.statusMessage = this.topResizer = this.bottomResizer = null;
    },
    _keyPressHandler: function (p) {
      return function (r) {
        var q = r.target || r.srcElement;
        i(r) && p(r);
        q.focus();
      };
    },
    _upHandler: function (p) {
      return function (q) {
        if (!j(q)) {
          p(q);
        }
      };
    },
    _setRolePresentation: function (p) {
      this._setRole(p, "presentation");
    },
    _setRole: function (q, r) {
      var p = this.window.get_enableAriaSupport();
      if (q && p) {
        q.setAttribute("role", r);
      }
    },
    _setTabIndex: function (p) {
      var q = this.window.get_tabIndex();
      if (q !== null) {
        p.setAttribute("tabindex", q);
      }
    },
    _cancelEvent: function (p) {
      return $telerik.cancelRawEvent(p);
    },
    _preventDefault: function (p) {
      if (p.preventDefault) {
        p.preventDefault();
      }
      p.returnValue = false;
    },
  };
  c.LightweightRenderer.registerClass(
    "Telerik.Web.UI.Window.LightweightRenderer",
    c.RendererBase,
    c.IRenderer
  );
  var k = Sys.UI.Key;
  function i(q) {
    var r = q.key && q.key.length === 1 && q.key.charCodeAt(0);
    var p = r || q.keyCode;
    return p === k.space || p === k.enter;
  }
  function j(p) {
    return p.which === 3;
  }
})($telerik.$, Telerik.Web.UI.Window);
Type.registerNamespace("Telerik.Web.UI.Window");
(function (a, b, l) {
  var f = window;
  var j = f.parseFloat;
  var k = f.parseInt;
  var g = f.Math;
  var h = g.max;
  var i = g.min;
  var m = new Sys.UI.Bounds(0, 0, 0, 0);
  function d(p, n, o) {
    return h(n, i(p, o));
  }
  b.LightweightView = function (n) {
    b.LightweightView.initializeBase(this, [n]);
    this.ui = this.window.ui;
  };
  b.LightweightView.prototype = {
    moveTo: function (p, q) {
      var o = this;
      var n = o.ui;
      n.popupBehavior._setCoordinates(p, q);
      n.popupBehavior.show();
      o._removeExplicitMSAjaxWidth();
      n.updateTitleWidth();
    },
    setContent: function (o) {
      var n = this.ui.content;
      if (n && o != n) {
        $telerik.disposeElement(n);
        n.innerHTML = "";
        n.appendChild(o);
        o = n;
      }
      if (!this.window.isCreated()) {
        this.ui.pendingContent = o;
      }
      this.ui.createUI();
      if (this.window._isPredefined && this.ui.contentFrame) {
        this.ui.contentFrame.style.display = "none";
        this.ui.contentFrame.style.height = "";
      }
      if (this.ui.contentFrame && this.ui.contentFrame.parentNode != o) {
        this.ui.contentFrame.style.display = "none";
      } else {
        if (
          !this.window._dropDownTouchScroll &&
          Telerik.Web.UI.TouchScrollExtender._getNeedsScrollExtender()
        ) {
          this.window._createTouchScrollExtender(true);
        }
      }
      this.ui.setContent(o);
    },
    setUrl: function (o) {
      var n = this.ui.contentFrame;
      if (!n) {
        return;
      }
      n.src = o;
      this.setContentFixedHeight(this.window.get_height(), this.ui.content);
      this.onUrlChanging();
    },
    show: function () {
      if (this.ui.popupBehavior) {
        this.ui.popupBehavior.show();
      }
      this._showResizableHandlers();
      this._repaintResizable();
      this._isViewVisible = true;
    },
    hide: function () {
      if (this.ui.popupBehavior) {
        this.ui.popupBehavior.hide();
      }
      this._hideResizableHandlers();
      this._isViewVisible = false;
    },
    isVisible: function () {
      return this._isViewVisible;
    },
    maximize: function () {
      this.ui.setShadowCssClass(false);
      var n = this.ui.container;
      $telerik.removeCssClasses(n, [
        "rwNormalWindow",
        "rwMinimizedWindow",
        "rwMinimizedWindowShadow",
      ]);
      Sys.UI.DomElement.addCssClass(n, "rwMaximizedWindow");
      this.window._configureMaximizeButton(true);
      this.window._configureMinimizeButton();
      this.window._maintainMaximizedSize();
      this.window._maintainMaximizedSize();
      var r = n._hideWindowedElementsIFrame;
      if (r) {
        Sys.UI.DomElement.removeCssClass(r, "rwMinimizedWindowOverlay");
        this.ui.popupBehavior._handleElementResize();
      }
      if (this.window.get_showOnTopWhenMaximized()) {
        var u = n.style.zIndex;
        var q = 100000;
        if (u) {
          this.window._restoreZindex = u;
          q = k(u, 10) * 2;
        }
        n.style.zIndex = q;
      }
      this.ui.updateTitleWidth();
      if (this.resizable) {
        var t = this.resizable._handlesCollection;
        for (var s in t) {
          var o = t[s].get_handle();
          var p = a(o).css("cursor");
          this.window._initialHandlesCursor.push(p);
          a(o).css("cursor", "default");
        }
      }
    },
    setMaximizeSize: function () {
      var n = this.ui.container;
      if (!n) {
        return;
      }
      var q = this.window._getViewportBounds();
      q.height -= 1;
      n.style.top = q.scrollTop + q.y + "px";
      n.style.left = q.scrollLeft + q.x + "px";
      var p = k(this.window.get_maxWidth(), 10);
      var o = k(this.window.get_maxHeight(), 10);
      if (p) {
        q.width = p;
      }
      if (o) {
        q.height = o;
      }
      $telerik.setSize(n, { width: q.width, height: q.height });
      var r = this.window._getRestrictionZoneBounds();
      if (!r) {
        this.window._enablePageScrolling(false);
      }
      if (this.window._dockMode) {
        this.window.setWidthDockMode(q.width);
        this.window.setHeightDockMode(q.height);
      }
      this.ui.updateTitleWidth();
      if (this.ui.contentFrame) {
        this.setContentFixedHeight(q.height, this.ui.content);
      }
    },
    minimize: function () {
      this.window._configureMinimizeButton(true);
      this.window._configureMinimizeButton(true);
      this.window._enablePageScrolling(true);
      var n = this.ui.container;
      $telerik.removeCssClasses(n, ["rwNormalWindow", "rwMaximizedWindow"]);
      Sys.UI.DomElement.addCssClass(n, "rwMinimizedWindow");
      if (this.window._enableShadow && !$telerik.isIE6) {
        this.ui.setShadowCssClass(true);
        Sys.UI.DomElement.addCssClass(n, "rwMinimizedWindowShadow");
      }
      var o = n._hideWindowedElementsIFrame;
      if (o) {
        Sys.UI.DomElement.addCssClass(o, "rwMinimizedWindowOverlay");
      }
      this.setWidth(200);
      this.setHeight(this.ui.titlebar.offsetHeight);
      this.ui.getTitleNode().style.width = "";
      this.minimizeToZone(this.window.get_minimizeZoneID());
    },
    setTabIndex: function (p) {
      var o = this.ui.container;
      var n = this.ui.getCommandButtons();
      if (p !== null && p !== l) {
        o.setAttribute("tabIndex", p);
        n.attr("tabIndex", p);
      } else {
        o.removeAttribute("tabIndex");
        n.removeAttr("tabIndex");
      }
    },
    setWidth: function (n) {
      this._setWidth(n);
      this._repaintResizable();
    },
    _setWidth: function (p) {
      var o = this.ui.container;
      var n = a(o);
      var q = k(p, 10);
      if (q === 0) {
        return;
      }
      n.outerWidth(q);
    },
    setHeight: function (n) {
      this._setHeight(n);
      this._repaintResizable();
    },
    _setHeight: function (r) {
      var q = this.ui;
      var o = q.container;
      var n = a(o);
      var p = k(r, 10);
      if (p === 0) {
        return;
      }
      this.setContentFixedHeight(p, q.content);
      n.outerHeight(p);
    },
    setContentFixedHeight: function (o, n) {
      if (!n) {
        return;
      }
      var q = this.ui;
      var p = o - (a(q.container).outerHeight() - a(q.container).height());
      if (this.window._visibleTitlebar) {
        p -= a(q.titlebar).outerHeight();
      }
      if (this.window._visibleStatusbar) {
        p -= a(q.statusbar).outerHeight();
      }
      a(n).outerHeight(p);
    },
    setContentWidth: function (n) {
      this.ui.content.style.width = "";
    },
    setTitleText: function (n) {
      if (!this.ui.title) {
        return;
      }
      this._setTitleText(n);
      this.ui.updateTitleWidth();
    },
    _setTitleText: function (n) {
      var o = this;
      var p = n;
      if (o.window.get_enableAriaSupport()) {
        p = n || "<span style='display:none'>empty</span>";
      }
      o.ui.title.innerHTML = p || "&nbsp;";
    },
    showStatusbar: function () {
      this._displayStatusbar("", true);
    },
    hideStatusbar: function () {
      this._displayStatusbar("none", false);
    },
    _displayStatusbar: function (p, n) {
      if (!this.ui.container) {
        return;
      }
      var o = this.ui.getStatusbar();
      e(o, p);
      if (this._hasAriaSupport()) {
        c(o, n);
      }
      this.setHeight(this.window.get_height());
    },
    showShadow: function () {
      this.ui.setShadowCssClass(true);
    },
    hideShadow: function () {
      this.ui.setShadowCssClass(false);
    },
    moveOutOfSight: function () {
      var o = this.ui.popupBehavior;
      if (o) {
        this.window._storeBounds();
        var n = o.get_elementToShow();
        a(n).css({
          display: "",
          position: "absolute",
          top: "-10000px",
          left: this.window.get_leftHidingPoint() + "px",
          overflow: "hidden",
        });
        if (
          n._hideWindowedElementsIFrame &&
          n._hideWindowedElementsIFrame.style
        ) {
          n._hideWindowedElementsIFrame.style.display = "none";
        }
      }
      this._ariaHide();
    },
    isOutOfSight: function () {
      var n = this.ui.container;
      if (!n) {
        return false;
      }
      var o = k(n.style.left, 10);
      return (
        $telerik.isIE &&
        ($telerik.isIE9 || $telerik.isIE10) &&
        o === this.window.get_leftHidingPoint()
      );
    },
    enableMoveResize: function (n) {
      var p = this;
      var q = this.window;
      this.disableMoveResize(n);
      if (n.move && !this.draggable) {
        this.draggable = new Telerik.Web.UI.Widgets.Draggable(
          this.ui.container,
          { handle: this.ui.titlebar, shouldPreventDefault: false }
        );
        this.draggable.add_dragStart(
          Function.createDelegate(this, function (v, r) {
            var A;
            this._cancelDragSelection(r.get_domEvent());
            q.setActive(true);
            var z =
              q.isPinned() ||
              q.isMaximized() ||
              (q.isMinimized() && q.get_minimizeZoneID());
            r.set_cancel(z);
            if (z) {
              return;
            }
            var y = q._getRestrictionZoneElement();
            if (y) {
              this.restrictBounds = q._getRestrictionZoneBounds();
              var t = q._getCurrentBounds();
              var s = $telerik.getBorderBox(y);
              var w = this.restrictBounds;
              var x = {
                x: w.x + s.left,
                y: w.y + s.top,
                width: w.width - s.horizontal,
                height: w.height - s.vertical,
              };
              var u = {
                minX: x.x,
                minY: x.y,
                maxX: x.width + x.x,
                maxY: x.height + x.y,
              };
              A = {
                x: d(t.x + w.x, u.minX, u.maxX),
                y: d(t.y + w.y, u.minY, u.maxY),
              };
              p.moveTo(A.x, A.y);
              v.set_constraints(u);
            }
            q.raiseEvent("dragStart", new Sys.EventArgs());
          })
        );
        this.draggable.add_dragging(
          Function.createDelegate(this, function (s, r) {
            this.ui.showContentOverlay();
            $telerik.cancelRawEvent(r.get_domEvent());
            r.set_cancel(
              q.isPinned() ||
                q.isMaximized() ||
                (q.isMinimized() && q.get_minimizeZoneID())
            );
          })
        );
        this.draggable.add_dragEnd(
          Function.createDelegate(this, function (s, r) {
            var t;
            this.ui.hideContentOverlay();
            q._storeBounds();
            if (!q.isMaximized()) {
              t = q._getStoredBounds();
              q.moveTo(t.x, t.y);
            }
            this._repaintResizable();
            q.raiseEvent("dragEnd", new Sys.EventArgs());
          })
        );
      }
      if (n.resize && !this.resizable) {
        this.resizable = new Telerik.Web.UI.Widgets.Resizable(
          this.ui.container,
          {
            appendHandleToElement: !$telerik.isIE,
            constraints: {
              minWidth: this.ui.get_uiMinWidth(),
              minHeight: this.ui.get_uiMinHeight(),
            },
            handleSize: 12,
            shouldPreventDefault: false,
          }
        );
        this.resizable.add_resizeStart(a.proxy(this._resizeStartHandler, this));
        this.resizable.add_resizing(a.proxy(this._resizingHandler, this));
        this.resizable.add_resizeEnd(a.proxy(this._resizeEndHandler, this));
        if (this.ui.bottomResizer && !this.bottomResizerHandle) {
          var o = new Telerik.Web.UI.Widgets.Handle(
            this.ui.bottomResizer,
            "SE",
            { cursorType: "se-resize" }
          );
          o.add_dragStart(
            a.proxy(this.resizable._handleDragStart, this.resizable)
          );
          o.add_dragging(
            a.proxy(this.resizable._handleDragging, this.resizable)
          );
          o.add_dragEnd(a.proxy(this.resizable._handleDragEnd, this.resizable));
          this.bottomResizerHandle = o;
        }
      }
    },
    _resizeStartHandler: function (q, n) {
      var s = this.window;
      var o = s._getCurrentBounds();
      this.ui.showContentOverlay();
      $telerik.cancelRawEvent(n.get_domEvent());
      s.setActive(true);
      if (s.isMinimized() || s.isMaximized()) {
        n.set_cancel(true);
      }
      q.set_constraints({
        minWidth: this.ui.get_uiMinWidth(),
        minHeight: this.ui.get_uiMinHeight(),
      });
      this.restrictBounds = s._getRestrictionZoneBounds();
      var r = this.restrictBounds || m;
      this.resizeHelper = {
        width: s.get_width(),
        height: s.get_height() || this.ui.container.clientHeight,
        offset: { top: k(o.y + r.y, 10), left: k(o.x + r.x, 10) },
        borders: $telerik.getBorderBox(this.ui.container),
      };
      var p = new Sys.CancelEventArgs();
      this.window.raiseEvent("resizeStart", p);
      n.set_cancel(p.get_cancel());
    },
    touchCount: 0,
    _resizingHandler: function (t, n) {
      $telerik.cancelRawEvent(n.get_domEvent());
      var q = this.restrictBounds,
        p = this._getResizeBounds(n),
        o = this.resizeHelper.borders,
        r = {
          x: p.x - o.left,
          y: p.y - o.top,
          width: p.width + o.horizontal,
          height: p.height + o.vertical,
        };
      var s = this.window._checkRestrictionZoneBounds(q, r);
      p.width = g.max(t.options.constraints.minWidth, p.width);
      p.height = g.max(t.options.constraints.minHeight, p.height);
      n.set_cancel(true);
      if (s && this.touchCount++ > 0) {
        var u = this.ui.container.style;
        u.left = p.x + "px";
        u.top = p.y + "px";
        this._setWidth(p.width);
        this._setHeight(p.height);
        this._currentResizeBounds = p;
      }
    },
    _getResizeBounds: function (n) {
      var p = n.get_direction();
      var r = function (u) {
        return p.indexOf(u) > -1;
      };
      var o = n.get_delta();
      var s = this.resizeHelper;
      var q = r("N") ? -1 : 1;
      var t = r("W") ? -1 : 1;
      return {
        x: s.offset.left + (r("W") ? o.x : 0),
        y: s.offset.top + (r("N") ? o.y : 0),
        width: s.width + t * o.x,
        height: s.height + q * o.y,
      };
    },
    _getMoveBounds: function (n) {
      var o = n.get_newPosition();
      var p = this.resizeHelper;
      return { x: o.x, y: o.y, width: p.width, height: p.height };
    },
    _resizeEndHandler: function (p, n) {
      this.touchCount = 0;
      $telerik.cancelRawEvent(n.get_domEvent());
      this.ui.hideContentOverlay();
      var o = this._currentResizeBounds;
      if (o) {
        this.moveTo(k(o.x, 10), k(o.y, 10));
        this.window.set_width(k(o.width, 10));
        this.window.set_height(k(o.height, 10));
      }
      this.window._storeBounds();
      this.window.raiseEvent("resizeEnd", new Sys.EventArgs());
      this._currentResizeBounds = null;
    },
    _showResizableHandlers: function () {
      if (this.resizable) {
        this.resizable.showHandles();
      }
    },
    _hideResizableHandlers: function () {
      if (this.resizable) {
        this.resizable.hideHandles();
      }
    },
    _repaintResizable: function () {
      if (this.resizable) {
        this.resizable.repaint();
      }
    },
    _isDir: function (n, o) {
      return n.indexOf(o) > -1;
    },
    disableMoveResize: function (n) {
      if (this.draggable) {
        this.draggable.dispose();
        this.draggable = null;
      }
      if (this.resizable) {
        if (this.bottomResizerHandle) {
          this.ui.removeStatusbarResizer();
          this.bottomResizerHandle.dispose();
          this.bottomResizerHandle = null;
        }
        this.resizable.dispose();
        this.resizable = null;
      }
    },
    setCommandButtons: function (n) {
      var o = [];
      this.ui.clearCommandButtons();
      for (var p = 0; p < n.length; p++) {
        o.push(this.ui.createCommandButton(n[p]));
      }
      this.ui.updateTitleWidth();
      return o;
    },
    toggleCommand: function (o) {
      var n = this.ui.getCommandButton(o);
      if (!n) {
        return;
      }
      Sys.UI.DomElement.toggleCssClass(n, "on");
    },
    minimizeToZone: function (o) {
      if (!o) {
        return;
      }
      if (typeof o == "string") {
        o = $get(o);
      }
      var n = this.ui.container;
      if (n.parentNode != o) {
        n.parentNode.removeChild(n);
        o.appendChild(n);
        this.window.setVisible(true);
        n.style.position = "static";
        if ($telerik.isIE) {
          n.style.display = "inline";
        } else {
          n.style.cssFloat = "left";
        }
      }
    },
    moveToDefaultParent: function () {
      var n = this.window._getDefaultParent();
      if (this.ui.container !== n.firstChild) {
        n.insertBefore(this.ui.container, n.firstChild);
      }
    },
    revertToDefaultParent: function () {
      var n = this.window._getDefaultParent();
      if (this.ui.container !== n.firstChild) {
        n.insertBefore(this.ui.container, n.firstChild);
      }
    },
    setActive: function (o) {
      var n = this.ui.container;
      if (o) {
        this.window.setZIndexCss();
        Sys.UI.DomElement.removeCssClass(n, "rwInactiveWindow");
      } else {
        Sys.UI.DomElement.addCssClass(n, "rwInactiveWindow");
      }
      this._repaintResizable();
    },
    isActive: function () {
      var n = this.ui.container;
      return n && !Sys.UI.DomElement.containsCssClass(n, "rwInactiveWindow");
    },
    onUrlChanging: function () {
      if (!this.ui.contentFrame) {
        return;
      }
      if (this.window.get_showContentDuringLoad()) {
        var o = this.ui.statusbar;
        if (o) {
          Sys.UI.DomElement.addCssClass(o, "rwLoading");
        }
      } else {
        var n = this.ui.contentFrame;
        var p = n.style;
        n.originalPosition = p.position;
        n.originalHeight = p.height;
        p.position = "absolute";
        p.top = "-10000px";
        if ($telerik.isIE9Mode) {
          this.setHeight(this.window._height);
        }
        if (this.window._isWindowRightToLeft() && $telerik.isChrome) {
          p.width = "1px";
        }
        Sys.UI.DomElement.addCssClass(this.ui.container, "rwLoading");
      }
    },
    onUrlChanged: function () {
      var r = this.ui.statusbar,
        p = this.ui.contentFrame;
      if (this.window.get_showContentDuringLoad()) {
        if (r) {
          Sys.UI.DomElement.removeCssClass(r, "rwLoading");
        }
      } else {
        p.style.position = "";
        p.style.height = p.originalHeight;
        p.originalHeight = null;
        if (this.window._isWindowRightToLeft() && $telerik.isChrome) {
          p.style.width = "100%";
        }
        Sys.UI.DomElement.removeCssClass(this.ui.container, "rwLoading");
        if ($telerik.isIE9Mode) {
          if (this.window.isMaximized()) {
            this.window._maintainMaximizedSize();
          } else {
            if (!this.window.isMinimized()) {
              this.setHeight(this.window.get_height());
            }
          }
        }
      }
      if (r) {
        this.window.set_status(this.window.get_navigateUrl());
      }
      try {
        var n = p.contentWindow.document;
        var q = n.title;
        if (q && q != this.window.get_title()) {
          this.window.set_title(
            q.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;")
          );
        }
      } catch (o) {}
    },
    updatePopupZindex: function () {
      var n = this.ui.popupBehavior;
      if (n) {
        if (this.window.isVisible()) {
          n.show();
        }
      }
    },
    dispose: function () {},
    _substractWrappersBorder: function (n, o) {
      var q = this.ui.container;
      if (!q) {
        return n;
      }
      var p = $telerik.getBorderBox(q);
      n -= o ? p.horizontal : p.vertical;
      return n;
    },
    _removeExplicitMSAjaxWidth: function () {
      if (!this.window.get_width()) {
        this.ui.container.style.width = "";
      }
    },
    _ariaHide: function () {
      if (
        this.window.get_enableAriaSupport() &&
        this.ui.container &&
        !this.window.isVisible()
      ) {
        this.ui.container.setAttribute("aria-hidden", "true");
      }
    },
    _cancelDragSelection: function (n) {
      if (!$telerik.isTouchDevice) {
        $telerik.cancelRawEvent(n);
      }
    },
    _hasAriaSupport: function () {
      return this.window.get_enableAriaSupport();
    },
    _preventDefault: function (n) {
      if (n.preventDefault) {
        n.preventDefault();
      }
      n.returnValue = false;
    },
    restoreResizeHandlesCursor: function () {
      if (this.resizable) {
        var p = this.resizable._handlesCollection;
        for (var o in p) {
          var n = p[o].get_handle();
          a(n).css("cursor", this.window._initialHandlesCursor.shift());
        }
      }
    },
  };
  b.LightweightView.registerClass(
    "Telerik.Web.UI.Window.LightweightView",
    b.ViewBase,
    b.IView
  );
  function e(n, o) {
    n && (n.style.display = o);
  }
  function c(n, o) {
    n && n.setAttribute("aria-hidden", !o);
  }
})($telerik.$, Telerik.Web.UI.Window);
Type.registerNamespace("Telerik.Web.UI.Window");
(function (a, b, c) {
  b.UIFactory = {
    getRenderer: function (d, f) {
      var e = Telerik.Web.UI.RenderMode;
      if (d == e.Classic) {
        return new b.ClassicRenderer(f);
      } else {
        if (d == e.Lite) {
          return new b.LightweightRenderer(f);
        }
      }
    },
    getView: function (d, f) {
      var e = Telerik.Web.UI.RenderMode;
      if (d == e.Classic) {
        return new b.ClassicView(f);
      } else {
        if (d == e.Lite) {
          return new b.LightweightView(f);
        }
      }
    },
  };
})($telerik.$, Telerik.Web.UI.Window);
(function (a) {
  Type.registerNamespace("Telerik.Web.UI");
  var b = Telerik.Web.UI;
  b.WindowShortCutManager = function (c) {
    b.WindowShortCutManager.initializeBase(this, [c]);
  };
  b.WindowShortCutManager.prototype = {};
  b.WindowShortCutManager.registerClass(
    "Telerik.Web.UI.WindowShortCutManager",
    b.ShortCutManager
  );
  b.WindowShortCut = function (d, e, c) {
    b.WindowShortCut.initializeBase(this, [d, e, c]);
  };
  b.WindowShortCut.prototype = {};
  b.WindowShortCut.registerClass("Telerik.Web.UI.WindowShortCut", b.ShortCut);
})($telerik.$);

/* END Telerik.Web.UI.Window.RadWindowScripts.js */
/* START Telerik.Web.UI.Window.RadWindowManager.js */
Type.registerNamespace("Telerik.Web.UI");
Type.registerNamespace("Telerik.Web.UI.WindowManager");
$telerik.toWindowManager = function (a) {
  return a;
};
$telerik.findWindowManager = $find;
function GetRadWindowManager() {
  return Telerik.Web.UI.WindowManager.Manager;
}
window.radalert = function (f, e, c, d, a, b) {
  var g = GetRadWindowManager();
  return g.radalert(f, e, c, d, a, b);
};
window.radconfirm = function (g, a, f, d, b, e, c) {
  var h = GetRadWindowManager();
  return h.radconfirm(g, a, f, d, b, e, c);
};
window.radprompt = function (h, a, g, d, b, f, c) {
  var e = GetRadWindowManager();
  return e.radprompt(h, a, g, d, b, f, c);
};
window.radopen = function (f, c, g, a, b, e) {
  var d = GetRadWindowManager();
  return d.open(f, c, null, g, a, b, e);
};
window.radopenWithContainer = function (b, d) {
  var c = GetRadWindowManager();
  var a = $get(b);
  if (!a) {
    c.radalert(
      "Content element with such ClientID not found!<br/> Make sure you have provided a correct ClientID!"
    );
    return;
  }
  return c.open(null, d, a);
};
(function (a) {
  var b = Telerik.Web.UI;
  var c = b.WindowManager;
  var d = ".telerikDialogKeyboardNavigation";
  c.DialogKeyboardNavigation = function (e) {
    var f = this;
    f._dialog = e;
    f._shortCuts = [];
  };
  c.DialogKeyboardNavigation.prototype = {
    addShortCut: function (f) {
      var h = this;
      var g = a.extend(
        {
          key: "",
          element: null,
          eventName: "",
          action: null,
          preventDefault: true,
          stopPropagation: true,
        },
        f || {}
      );
      var e = g.action;
      h._shortCuts.push(g);
      a(g.element).on(g.eventName + d, function (i) {
        if (i.keyCode === g.key) {
          if (g.preventDefault) {
            i.preventDefault();
          }
          if (g.stopPropagation) {
            i.stopPropagation();
          }
          if (a.isFunction(e)) {
            e();
          }
        }
      });
    },
    dispose: function () {
      var f = this._shortCuts;
      var g = f ? f.length : 0;
      for (var e = 0; e < g; e++) {
        a(f[e].element).off(d);
      }
    },
  };
  c.DialogKeyboardNavigation.registerClass(
    "Telerik.Web.UI.WindowManager.DialogKeyboardNavigation",
    null
  );
})($telerik.$);
(function (a, h) {
  var b = Telerik.Web.UI.WindowManager;
  var d = b.DialogKeyboardNavigation;
  var e = "keyup";
  var g = ".rwPopupButton,.rwOkBtn,.rwCancelBtn";
  var c = ".rwDialogInput,.rwPromptInput";
  var f = { ENTER: 13, ESCAPE: 27, SPACEBAR: 32 };
  Telerik.Web.UI.RadWindowManager = function (i) {
    Telerik.Web.UI.RadWindowManager.initializeBase(this, [i]);
    this._windowIDs = [];
    this._windows = [];
    this._preserveClientState = false;
    this.Open = this.open;
    this.GetWindowByName = this.getWindowByName;
    this.GetWindowById = this.getWindowById;
    this.GetActiveWindow = this.getActiveWindow;
    this.GetWindowObjects = this.get_windows;
    this.GetWindows = this.get_windows;
    this.Cascade = this.cascade;
    this.Tile = this.tile;
    this.RestoreAll = this.restoreAll;
    this.MaximizeAll = this.maximizeAll;
    this.MinimizeAll = this.minimizeAll;
    this.ShowAll = this.showAll;
    this.CloseAll = this.closeAll;
    this.CloseActiveWindow = this.closeActiveWindow;
    this.MinimizeActiveWindow = this.minimizeActiveWindow;
    this.RestoreActiveWindow = this.restoreActiveWindow;
  };
  Telerik.Web.UI.RadWindowManager.prototype = {
    get_zIndex: function () {
      return Telerik.Web.UI.RadWindowUtils._zIndex;
    },
    set_zIndex: function (i) {
      if (isNaN(i)) {
        return;
      }
      Telerik.Web.UI.RadWindowUtils._zIndex = i;
    },
    initialize: function (j) {
      try {
        var k = this.get_element().style.zIndex;
        if (k) {
          this.set_zIndex(k);
        }
      } catch (i) {}
      this._initialize();
      this._registerAsPageManager();
      if (this.get_preserveClientState()) {
        this.restoreState();
      }
    },
    dispose: function () {
      var i = this.get_preserveClientState();
      if (i) {
        this.saveState();
      }
      this._disposeWindows();
      this._windows = null;
      Telerik.Web.UI.RadWindowManager.callBaseMethod(this, "dispose");
    },
    open: function (s, u, j, t, l, m, q) {
      var i,
        o = this.getWindowByName(u);
      if (!o) {
        if (!u) {
          u = this.get_id() + this._getUniqueId();
        }
        o = this._createWindow(u, j);
        var k = this.get_element().className;
        if (k) {
          o.set_cssClass(k.replace(/^ /, ""));
        }
      } else {
        if (j && this.get_navigateUrl()) {
          o._dockMode = false;
        }
      }
      if (s && !o.get_reloadOnShow() && o._iframe && o._iframe.src != s) {
        o.setUrl(s);
      } else {
        if (s) {
          o._navigateUrl = s;
        }
      }
      if (t || l) {
        o.setSize(t, l);
      }
      var p = o.get_popupElement();
      var n = parseInt(m, 10);
      if (!isNaN(n)) {
        o.set_left(n);
        if (p) {
          i = o.getWindowBounds();
          o.moveTo(n, i.y);
        }
      }
      var r = parseInt(q, 10);
      if (!isNaN(r)) {
        o.set_top(r);
        if (p) {
          i = o.getWindowBounds();
          o.moveTo(i.x, r);
        }
      }
      o.show();
      return o;
    },
    radalert: function (o, n, l, m, i, k) {
      var p = this;
      var j = p._getStandardPopup("alert", o, null, k);
      p._initializeRadAlertKeyboardNavigation(j);
      if (typeof m != "undefined") {
        j.set_title(m);
      }
      j.setSize(n ? n : 280, l ? l : 200);
      j.set_clientCallBackFunction(function (r, q) {
        if (i) {
          i(q);
        }
      });
      j.center();
      j.show();
      return j;
    },
    _initializeKeyboardNavigation: function (j, i) {
      if (!j) {
        return;
      }
      var k = a(j.get_popupElement()).find(g)[0];
      j._keyboardNavigation = new d(j);
      j._keyboardNavigation.addShortCut({
        eventName: e,
        element: k,
        key: f.SPACEBAR,
        action:
          i ||
          function () {
            j.close(true);
          },
      });
      j.addShortcut("Close", "Esc");
    },
    _initializeRadAlertKeyboardNavigation: function (i) {
      this._initializeKeyboardNavigation(i);
    },
    radconfirm: function (p, i, o, m, j, n, l) {
      var q = this;
      var k = q._getStandardPopup("confirm", p, null, l);
      q._initializeRadConfirmKeyboardNavigation(k);
      if (typeof n != "undefined") {
        k.set_title(n);
      }
      k.setSize(o ? o : 280, m ? m : 200);
      k.set_clientCallBackFunction(function (s, r) {
        if (i) {
          i(r);
        }
      });
      k.center();
      k.show();
      return k;
    },
    _initializeRadConfirmKeyboardNavigation: function (l) {
      var j = l;
      if (!j) {
        return;
      }
      var k = a(j.get_popupElement()).find(g);
      var i = k[1];
      this._initializeKeyboardNavigation(j);
      j._keyboardNavigation.addShortCut({
        eventName: e,
        element: i,
        key: f.SPACEBAR,
        action: function () {
          j.close(false);
        },
      });
    },
    radprompt: function (q, i, p, n, j, o, l) {
      var r = this;
      var k = this._getStandardPopup("prompt", q, l);
      r._initializeRadPromptKeyboardNavigation(k);
      if (typeof o != "undefined") {
        k.set_title(o);
      }
      k.setSize(p ? p : 280, n ? n : 200);
      k.set_clientCallBackFunction(function (t, s) {
        if (i) {
          i(s);
        }
      });
      k.center();
      k.show();
      if (l && $telerik.isIE) {
        var m = k.get_popupElement().getElementsByTagName("INPUT")[0];
        if (m) {
          m.value = l;
        }
      }
      return k;
    },
    _initializeRadPromptKeyboardNavigation: function (l) {
      var j = l;
      if (!j) {
        return;
      }
      var k = a(j.get_popupElement()).find(g);
      var i = k[1];
      this._initializeKeyboardNavigation(j, function () {
        var m = a(j.get_popupElement()).find(c)[0];
        j.close(a(m).val());
      });
      j._keyboardNavigation.addShortCut({
        eventName: e,
        element: i,
        key: f.SPACEBAR,
        action: function () {
          j.close(null);
        },
      });
    },
    getActiveWindow: function () {
      return Telerik.Web.UI.RadWindowController.get_activeWindow();
    },
    getWindowById: function (k) {
      var l = this.get_windows();
      for (var j = 0; j < l.length; j++) {
        var m = l[j];
        if (k == m.get_id()) {
          return m;
        }
      }
      return null;
    },
    getWindowByName: function (k) {
      var l = this.get_windows();
      if (!l) {
        return null;
      }
      for (var j = 0; j < l.length; j++) {
        var m = l[j];
        if (k == m.get_name()) {
          return m;
        }
      }
      return null;
    },
    removeWindow: function (i) {
      if (!i) {
        return;
      }
      var j = this.getWindowByName(i.get_name());
      var k = this.get_windows();
      if (j) {
        Array.remove(k, j);
      }
    },
    _getUniqueId: function () {
      return "" + (new Date() - 100);
    },
    _initialize: function () {
      var j = this._windowIDs;
      for (var k = 0; k < j.length; k++) {
        var m = j[k];
        var l = $find(m);
        if (!l) {
          continue;
        }
        l.set_windowManager(this);
        this._windows[this._windows.length] = l;
      }
    },
    _disposeWindows: function () {
      for (var j = 0; j < this._windows.length; j++) {
        var k = this._windows[j];
        if (k.isCloned()) {
          k.dispose();
        }
      }
      this._windows = [];
    },
    clearCloneCache: function () {
      this.__clonedProperties__ = null;
    },
    _createWindow: function (k, i) {
      var j = this.clone(k);
      j.set_modal(j.isModal());
      j.set_centerIfModal(this.get_centerIfModal());
      j.set_name(k);
      this._windows[this._windows.length] = j;
      j.set_windowManager(this);
      if (i) {
        j.set_contentElement(i);
        j._dockMode = true;
        j.set_behaviors(
          j.get_behaviors() & ~Telerik.Web.UI.WindowBehaviors.Reload
        );
      }
      return j;
    },
    _replaceLocalization: function (m, i) {
      var l = /##LOC\[(.*?)\]##/;
      while (m.match(l)) {
        var j = this._getLocalizationString(RegExp.$1);
        var k = j ? j : "";
        m = m.replace(l, k);
      }
      return m;
    },
    _getStandardPopup: function (u, t, p, o) {
      var v = this;
      var s = v._createWindow(u + v._getUniqueId(), false);
      s.set_destroyOnClose(true);
      s.set_restrictionZoneID(null);
      s.set_modal(true);
      s.set_behaviors(
        Telerik.Web.UI.WindowBehaviors.Close +
          Telerik.Web.UI.WindowBehaviors.Move
      );
      s.set_visibleStatusbar(false);
      s._isPredefined = true;
      t = t.replace(/\$/g, "$$$");
      var k = document.getElementById(
        v.get_id() + "_" + u.toLowerCase() + "template"
      );
      var l = $telerik.isIE && !$telerik.isIE9Mode ? "''" : "";
      var m = v._stringFormat(k.innerHTML, s.get_id(), t, p ? p : l);
      m = v._replaceLocalization(m, Telerik.Web.UI.RadWindowUtils.Localization);
      var r = document.createElement("div");
      s.set_contentElement(r);
      r.innerHTML = m;
      r.id = s.get_id() + "_content";
      a(".rwDialogText, .rwDialogMessage", r).attr(
        "id",
        s.get_id() + "_message"
      );
      if (u != "prompt" && o != null && o != "null") {
        var n = $telerik.$(r).find("div.rwDialog,div.rwDialogPopup");
        n.css({ backgroundImage: String.format("url('{0}')", o) });
        a(n).addClass("rwNoIcon");
      }
      var j = s.get_contentElement();
      var i = ["a", "button", "input"];
      var q;
      while (!q && i.length) {
        q = j.getElementsByTagName(i.pop())[0];
      }
      if (v._enableRippleEffect) {
        a("BUTTON", j).each(function (x, w) {
          if (!q) {
            q = w;
          }
          v._initializeRipple(w);
        });
      }
      if (q && q.focus) {
        window.setTimeout(function () {
          var x = true;
          if (q.setActive) {
            try {
              q.setActive();
              x = false;
            } catch (w) {}
          }
          if (x) {
            q.focus();
          }
        }, 0);
      }
      return s;
    },
    _initializeRipple: function (i) {
      var j = this;
      if (!j._materialRippleManager) {
        j._materialRippleManager = Telerik.Web.UI.MaterialRippleManager.getInstance();
      }
      j._materialRippleManager.initializeRipple(i);
    },
    _stringFormat: function (k) {
      for (var j = 1; j < arguments.length; j++) {
        k = k.replace(new RegExp("\\{" + (j - 1) + "\\}", "ig"), arguments[j]);
      }
      return k;
    },
    _registerAsPageManager: function () {
      var i = Telerik.Web.UI.WindowManager.Manager;
      var j = this.get_id();
      if (i && i.get_id() == j) {
        i.dispose();
        Telerik.Web.UI.WindowManager.Manager = null;
      }
      if (i && !i.get_id()) {
        Telerik.Web.UI.WindowManager.Manager = null;
      }
      if (!Telerik.Web.UI.WindowManager.Manager) {
        Telerik.Web.UI.WindowManager.Manager = this;
      }
      if (i) {
        this._ensureFirstManagerIsRegistered();
      }
    },
    _ensureFirstManagerIsRegistered: function () {
      var j = this.get_id(),
        k = this;
      try {
        document.body.innerHTML.replace(
          /\$create\(Telerik.Web.UI.RadWindowManager.*\$get\("([^"]*)"\)/,
          function (m, l) {
            if (j == l) {
              Telerik.Web.UI.WindowManager.Manager = k;
            }
          }
        );
      } catch (i) {}
    },
    saveWindowState: function (k) {
      if (!k || !k.isCreated()) {
        return;
      }
      var i = k.getWindowBounds();
      var j =
        (k.isVisible() || k.isMinimized()) +
        "@" +
        i.width +
        "@" +
        i.height +
        "@" +
        i.x +
        "@" +
        i.y +
        "@" +
        k.isMinimized();
      this._setRadWindowCookie(k.get_id(), j);
    },
    saveState: function () {
      var l = this.get_windows();
      var j;
      for (j = 0; j < l.length; j++) {
        var k = l[j];
        if (k.isCloned()) {
          this.saveWindowState(k);
        }
      }
    },
    restoreState: function () {
      var j;
      function n(p, o) {
        var i = o.split("@");
        if (i.length > 1) {
          if ("true" == i[0] && !p.isVisible()) {
            p.show();
          }
          window.setTimeout(function () {
            if (parseInt(i[1], 10) > 0) {
              p.set_width(i[1]);
            }
            if (parseInt(i[2], 10) > 0) {
              p.set_height(i[2]);
            }
            if ("true" == i[0]) {
              p.moveTo(parseInt(i[3], 10), parseInt(i[4], 10));
            }
            if ("true" == i[5]) {
              p.minimize();
            }
          }, 1);
        }
      }
      var m = this.get_windows();
      for (j = 0; j < m.length; j++) {
        var l = m[j];
        var k = this._getRadWindowCookie(l.get_id());
        if (k) {
          n(l, k);
        }
      }
    },
    _getOnlyCookie: function () {
      var m = "RadWindowCookie";
      var j = document.cookie.split("; ");
      for (var l = 0; l < j.length; l++) {
        var k = j[l].split("=");
        if (m == k[0]) {
          return k[1];
        }
      }
      return null;
    },
    _setRadWindowCookie: function (l, n) {
      l = "[" + l + "]";
      var m = this._getOnlyCookie();
      var j = "";
      var k = "";
      if (m) {
        var i = m.split(l);
        if (i && i.length > 1) {
          j = i[0];
          k = i[1].substr(i[1].indexOf("#") + 1);
        } else {
          k = m;
        }
      }
      var o = new Date();
      o.setFullYear(o.getFullYear() + 10);
      document.cookie =
        "RadWindowCookie=" +
        (j + l + "-" + n + "#" + k) +
        ";path=/;expires=" +
        o.toUTCString() +
        ";";
    },
    _getRadWindowCookie: function (l) {
      var i = this._getOnlyCookie();
      if (!i) {
        return;
      }
      var m = null;
      l = "[" + l + "]";
      var k = i.indexOf(l);
      if (k >= 0) {
        var j = k + l.length + 1;
        m = i.substring(j, i.indexOf("#", j));
      }
      return m;
    },
    cascade: function () {
      var m = 0;
      var l = 0;
      var k = this._getWindowsSortedByZindex();
      for (var j = 0; j < k.length; j++) {
        var n = k[j];
        if (!n.isClosed() && n.isVisible()) {
          n.restore();
          n.moveTo(l, m);
          n.setActive(true);
          m += 25;
          l += 25;
        }
      }
    },
    tile: function () {
      var l = this._getWindowsSortedByZindex();
      var n = 0,
        j;
      for (j = 0; j < l.length; j++) {
        var s = l[j];
        if (!s.isClosed() && s.isVisible()) {
          n++;
        }
      }
      var o = 5;
      var m = 0;
      var p = 1;
      if (n <= o) {
        m = n;
      } else {
        j = 2;
        while (n * j < o * (j + 1)) {
          j++;
          if (j > 6) {
            break;
          }
        }
        p = j;
        m = Math.ceil(n / p);
      }
      var q = $telerik.getClientBounds();
      var u = Math.floor(q.width / m);
      var t = Math.floor(q.height / p);
      var k = document.documentElement.scrollLeft || document.body.scrollLeft;
      var w = document.documentElement.scrollTop || document.body.scrollTop;
      var v = 0;
      for (j = 0; j < l.length; j++) {
        var r = l[j];
        if (!r.isClosed() && r.isVisible()) {
          v++;
          if ((v - 1) % m == 0 && v > m) {
            w += t;
            k = document.documentElement.scrollLeft || document.body.scrollLeft;
          }
          r.restore();
          r.moveTo(k, w);
          r.setSize(u, t);
          k += u;
        }
      }
    },
    closeActiveWindow: function () {
      this._executeActiveWindow("close");
    },
    minimizeActiveWindow: function () {
      this._executeActiveWindow("minimize");
    },
    restoreActiveWindow: function () {
      this._executeActiveWindow("restore");
    },
    closeAll: function () {
      this._executeAll("close");
    },
    showAll: function () {
      this._executeAll("show");
    },
    minimizeAll: function () {
      this._executeAll("minimize");
    },
    maximizeAll: function () {
      this._executeAll("maximize");
    },
    restoreAll: function () {
      this._executeAll("restore");
    },
    _getWindowsSortedByZindex: function () {
      var i = this._windows.concat([]);
      var j = function (k, l) {
        var m = k.get_zindex();
        var n = l.get_zindex();
        if (m == n) {
          return 0;
        }
        return m < n ? -1 : 1;
      };
      return i.sort(j);
    },
    _executeAll: function (j) {
      if (!this._windows) {
        return;
      }
      var l = this._windows.concat([]);
      for (var k = 0; k < l.length; k++) {
        l[k][j]();
      }
    },
    _executeActiveWindow: function (j) {
      var i = this.getActiveWindow();
      if (i && "function" == typeof i[j]) {
        i[j]();
      }
    },
    get_preserveClientState: function () {
      return this._preserveClientState;
    },
    set_preserveClientState: function (i) {
      if (this._preserveClientState != i) {
        this._preserveClientState = i;
      }
    },
    set_windowControls: function (i) {
      this._windowIDs = eval(i);
      this._disposeWindows();
    },
    set_child: function (i) {},
    get_windowControls: function () {},
    get_windows: function () {
      return this._windows;
    },
  };
  Telerik.Web.UI.RadWindowManager.registerClass(
    "Telerik.Web.UI.RadWindowManager",
    Telerik.Web.UI.RadWindow
  );
})($telerik.$);

/* END Telerik.Web.UI.Window.RadWindowManager.js */
/* START Telerik.Web.UI.TabStrip.MultiPage.RadMultiPageScripts.js */
(function (a, c) {
  $telerik.findMultiPage = $find;
  $telerik.toMultiPage = function (d) {
    return d;
  };
  Type.registerNamespace("Telerik.Web.UI");
  var b = Telerik.Web.UI;
  b.RadPageViewCollection = function (d) {
    this._owner = d;
    this._data = [];
  };
  b.RadPageViewCollection._createIframe = function (e) {
    var d = document.createElement("iframe");
    if (e._contentUrl) {
      d.src = e._contentUrl;
    }
    e.get_element().appendChild(d);
    a(e.get_element()).find("iframe").attr("src", e._contentUrl);
  };
  b.RadPageViewCollection.prototype = {
    get_count: function () {
      return this._data.length;
    },
    _add: function (d) {
      this._insert(this.get_count(), d);
    },
    _insert: function (d, e) {
      Array.insert(this._data, d, e);
      e._multiPage = this._owner;
    },
    insert: function (d, e) {
      this._insert(d, e);
      this._owner._onPageViewInserted(d, e);
    },
    add: function (d) {
      this.insert(this.get_count(), d);
    },
    getPageView: function (d) {
      return this._data[d] || null;
    },
    removeAt: function (d) {
      var e = this.getPageView(d);
      if (e) {
        this.remove(e);
      }
    },
    remove: function (d) {
      this._owner._onPageViewRemoving(d);
      d.unselect();
      Array.remove(this._data, d);
      this._owner._onPageViewRemoved(d);
    },
  };
  b.RadPageViewCollection.registerClass("Telerik.Web.UI.RadPageViewCollection");
  b.RadPageView = function (d) {
    this._element = d;
    this._defaultButton = "";
    this._contentUrl;
  };
  b.RadPageView.prototype = {
    initialize: function () {
      if (this.get_defaultButton()) {
        this._onKeyPressDelegate = Function.createDelegate(
          this,
          this._onKeyPress
        );
        $telerik.$(this._element).on("keypress", this._onKeyPressDelegate);
      }
    },
    dispose: function () {
      if (this._onKeyPressDelegate) {
        $telerik.$(this._element).off("keypress", this._onKeyPressDelegate);
      }
    },
    _onKeyPress: function (d) {
      return WebForm_FireDefaultButton(d, this.get_defaultButton());
    },
    _select: function (e) {
      var d = this.get_multiPage();
      if (!d) {
        this._cachedSelected = true;
        return;
      }
      d._selectPageViewByIndex(this.get_index(), e);
    },
    hide: function () {
      var d = this.get_element();
      if (!d) {
        return;
      }
      Sys.UI.DomElement.addCssClass(d, "rmpHidden");
    },
    show: function () {
      var d = this.get_element();
      if (!d) {
        return;
      }
      Sys.UI.DomElement.removeCssClass(d, "rmpHidden");
      if (this._repaintCalled) {
        return;
      }
      $telerik.repaintChildren(this);
      this._repaintCalled = true;
      if (this._contentUrl) {
        var e = a("iframe", d);
        if (!e.attr("src")) {
          e.attr("src", this._contentUrl);
        }
      }
    },
    get_element: function () {
      return this._element;
    },
    get_index: function () {
      return Array.indexOf(this.get_multiPage().get_pageViews()._data, this);
    },
    get_id: function () {
      return this._id;
    },
    set_id: function (d) {
      this._id = d;
      if (this.get_element()) {
        this.get_element().id = d;
      }
    },
    get_multiPage: function () {
      return this._multiPage || null;
    },
    get_selected: function () {
      return this.get_multiPage().get_selectedPageView() == this;
    },
    set_selected: function (d) {
      if (d) {
        this.select();
      } else {
        this.unselect();
      }
    },
    get_defaultButton: function () {
      return this._defaultButton;
    },
    set_defaultButton: function (d) {
      this._defaultButton = d;
    },
    select: function () {
      this._select();
    },
    unselect: function () {
      if (this.get_selected()) {
        this.get_multiPage().set_selectedIndex(-1);
      }
    },
    get_contentUrl: function () {
      return this._contentUrl;
    },
    set_contentUrl: function (f) {
      this._contentUrl = f;
      var e = this.get_element(),
        d = a(e).find("iframe");
      if (e && d.length === 0) {
        b.RadPageViewCollection._createIframe(this);
      }
      d.attr("src", f);
    },
  };
  b.RadPageView.registerClass("Telerik.Web.UI.RadPageView");
  b.RadMultiPage = function (d) {
    Telerik.Web.UI.RadMultiPage.initializeBase(this, [d]);
    this._pageViews = new b.RadPageViewCollection(this);
    this._selectedIndex = -1;
    this._pageViewData = null;
    this._changeLog = [];
    this._enableAriaSupport = false;
  };
  b.RadMultiPage.prototype = {
    _logInsert: function (e) {
      if (!this._trackingChanges) {
        return;
      }
      var d = {};
      if (e.get_id()) {
        d.id = e.get_id();
      }
      Array.add(this._changeLog, { type: 1, index: e.get_index(), data: d });
    },
    _logRemove: function (d) {
      if (!this._trackingChanges) {
        return;
      }
      Array.add(this._changeLog, { type: 2, index: d.get_index() });
    },
    _onPageViewRemoving: function (d) {
      this._logRemove(d);
    },
    _onPageViewInserted: function (e, h) {
      var d = h.get_element();
      if (!d) {
        d = h._element = document.createElement("div");
        d.className = "rmpView";
      }
      Sys.UI.DomElement.addCssClass(d, "rmpHidden");
      if (h.get_id()) {
        d.id = h.get_id();
      }
      if (h._contentUrl) {
        b.RadPageViewCollection._createIframe(h);
      }
      var g = this.get_pageViews().getPageView(e + 1);
      var f = $get(this.get_clientStateFieldID());
      if (g) {
        f = g.get_element();
      }
      this.get_element().insertBefore(d, f);
      if (h._cachedSelected) {
        h._cachedSelected = false;
        h.select();
      }
      this._logInsert(h);
    },
    _onPageViewRemoved: function (d) {
      if (d.get_element()) {
        this.get_element().removeChild(d.get_element());
      }
    },
    _selectPageViewByIndex: function (f, h) {
      var i = this;
      var g;
      var e;
      var d = function (j) {
        if (i.get_enableAriaSupport()) {
          a(j.get_element()).attr({
            "aria-expanded": j.get_selected(),
            "aria-hidden": !j.get_selected(),
          });
        }
      };
      if (this._selectedIndex == f) {
        return;
      }
      if (!this.get_isInitialized()) {
        this._selectedIndex = f;
        return;
      }
      if (f < -1 || f >= this.get_pageViews().get_count()) {
        return;
      }
      g = this.get_selectedPageView();
      this._selectedIndex = f;
      e = this.get_selectedPageView();
      if (!h) {
        if (g) {
          g.hide();
          d(g);
        }
        if (e) {
          e.show();
          d(e);
        }
      }
      this.updateClientState();
    },
    _applyWaiAria: function () {
      var g = this.get_pageViews();
      var f;
      for (var d = 0, e = g.get_count(); d < e; d++) {
        f = g.getPageView(d);
        a(f.get_element()).attr({
          role: "tabpanel",
          "aria-expanded": f.get_selected(),
          "aria-hidden": !f.get_selected(),
        });
      }
    },
    trackChanges: function () {
      this._trackingChanges = true;
    },
    commitChanges: function () {
      this.updateClientState();
      this._trackingChanges = false;
    },
    get_pageViewData: function () {
      return this._pageViewData;
    },
    set_pageViewData: function (d) {
      this._pageViewData = d;
    },
    initialize: function () {
      b.RadMultiPage.callBaseMethod(this, "initialize");
      var f = this.get_pageViewData();
      for (var d = 0; d < f.length; d++) {
        var e = new b.RadPageView($get(f[d].id));
        e._id = f[d].id;
        e.set_defaultButton(f[d].defaultButton);
        e._contentUrl = f[d].contentUrl;
        this._pageViews._add(e);
        e.initialize();
      }
      if (this.get_enableAriaSupport()) {
        this._applyWaiAria();
      }
    },
    dispose: function () {
      b.RadMultiPage.callBaseMethod(this, "dispose");
      for (var d = 0; d < this.get_pageViews().get_count(); d++) {
        var e = this.get_pageViews().getPageView(d);
        e.dispose();
      }
    },
    findPageViewByID: function (e) {
      for (var d = 0; d < this.get_pageViews().get_count(); d++) {
        var f = this.get_pageViews().getPageView(d);
        if (f.get_id() == e) {
          return f;
        }
      }
      return null;
    },
    get_pageViews: function () {
      return this._pageViews;
    },
    get_selectedIndex: function () {
      return this._selectedIndex;
    },
    set_selectedIndex: function (d) {
      this._selectPageViewByIndex(d);
    },
    get_selectedPageView: function () {
      return this.get_pageViews().getPageView(this.get_selectedIndex());
    },
    get_enableAriaSupport: function () {
      return this._enableAriaSupport;
    },
    set_enableAriaSupport: function (d) {
      this._enableAriaSupport = d;
    },
    saveClientState: function () {
      var d = {};
      d.selectedIndex = this.get_selectedIndex();
      d.changeLog = this._changeLog;
      return Sys.Serialization.JavaScriptSerializer.serialize(d);
    },
  };
  b.RadMultiPage.registerClass(
    "Telerik.Web.UI.RadMultiPage",
    Telerik.Web.UI.RadWebControl
  );
})($telerik.$);

/* END Telerik.Web.UI.TabStrip.MultiPage.RadMultiPageScripts.js */
/* START Telerik.Web.UI.Common.Navigation.OData.OData.js */
(function (b, a) {
  var c = "Telerik.OData.ItemsUrl",
    e = "$callback",
    d = "application/json",
    f = { 0: "json", 1: "jsonp" };
  b.NavigationControlODataSettings = function (h) {
    b.NavigationControlODataSettings.initializeBase(this, [h]);
    var g = h.ODataSettings;
    this._path = h.Path;
    this._odata = true;
    this._responseType = g.ResponseType;
    if (!this.get_isEmpty()) {
      this._tree = new b.ODataBinderTree(
        g.InitialContainerName,
        g.Entities,
        g.EntityContainer
      );
    }
  };
  b.NavigationControlODataSettings.prototype = {
    get_path: function () {
      return this._path;
    },
    get_responseType: function () {
      return this._responseType;
    },
    get_tree: function () {
      return this._tree;
    },
    get_isEmpty: function () {
      var g = this._odata;
      return this._path == "" || g.InitialContainerName == "" || g.Entities > 0;
    },
  };
  b.NavigationControlODataSettings.registerClass(
    "Telerik.Web.UI.NavigationControlODataSettings",
    b.WebServiceSettings
  );
  b.ODataBinderTree = function (h, g, i) {
    this._entities = g;
    this._map = i;
    this._loaded = false;
    this._tree = this._buildTree(h);
  };
  b.ODataBinderTree.prototype = {
    get_settingsByDepth: function (g) {
      function h(i, j) {
        if (i == g) {
          return j;
        }
        return h(++i, j.child);
      }
      return h(0, this._tree);
    },
    _buildTree: function (g) {
      var h = !!g ? this._getEntitySetByName(g) : this._map[0];
      return this._buildNode(h, this._findChildCallback);
    },
    _findChildCallback: function (g) {
      if (!g) {
        return;
      }
      var h = this._getEntitySetByName(g);
      return this._buildNode(h, this._findChildCallback);
    },
    _buildNode: function (j, g) {
      var h = this._getEntityByName(j.Name),
        i = this,
        k = {
          name: j.Name,
          type: j.EntityType,
          entity: h,
          child: g.apply(i, [h.NavigationProperty]),
        };
      return k;
    },
    _getByName: function (g, k) {
      for (var h = 0; h < g.length; h++) {
        var j = g[h];
        if (j.Name === k) {
          return j;
        }
      }
    },
    _getEntityByName: function (g) {
      return this._getByName(
        this._entities,
        this._getEntitySetByName(g).EntityType
      );
    },
    _getEntitySetByName: function (g) {
      return this._getByName(this._map, g);
    },
  };
  b.NavigationControlODataLoader = function (h, g) {
    b.NavigationControlODataLoader.initializeBase(this, [h]);
    if (g) {
      this._expandCallback = g;
    } else {
      this._expandCallback = function () {
        return -1;
      };
    }
  };
  b.NavigationControlODataLoader.prototype = {
    _createRootUrl: function (h, g) {
      if (h[h.length - 1] == "/") {
        h = h.slice(0, h.length - 1);
      }
      return h + "/" + g;
    },
    _getDefferedItemsUrl: function (h) {
      var g = h.get_attributes();
      var i = g.getAttribute(c);
      g.removeAttribute(c);
      return i;
    },
    _appendQueryStringParameters: function (g) {
      return g + "/?$format=json";
    },
    _getAjaxSettings: function (h) {
      h = this._appendQueryStringParameters(h);
      var g = this.get_webServiceSettings();
      return {
        url: h,
        headers: { Accepts: d },
        dataType: f[g.get_responseType()],
        jsonp: e,
      };
    },
    get_expandCallback: function () {
      return this._expandCallback;
    },
    loadData: function (k, h) {
      var n = this.get_webServiceSettings(),
        j,
        g,
        i,
        l = false,
        m = n.get_tree();
      if (n.get_isEmpty()) {
        return;
      }
      if (k.isRootLevel) {
        j = m.get_settingsByDepth(0);
        g = this._getAjaxSettings(this._createRootUrl(n.get_path(), j.name));
      } else {
        (g = this._getAjaxSettings(this._getDefferedItemsUrl(h))),
          (i = h.get_level() + 1),
          (j = n.get_tree().get_settingsByDepth(i));
        l = true;
      }
      this._sendAjaxRequest(g, h, j.entity, this._onWebServiceSuccess);
      if (l) {
        this._raiseEvent(
          "loadingStarted",
          new Telerik.Web.UI.WebServiceLoaderEventArgs(h)
        );
      }
    },
    _sendAjaxRequest: function (k, g, h, l) {
      var j = this,
        i = a.ajax(k);
      i.fail(function (n) {
        var m = {
          get_message: function () {
            return n.statusText;
          },
        };
        j._onWebServiceError(m, g);
      }).done(function (m) {
        var n = [],
          o = j._sanitize(m);
        a.each(o, function (q, p) {
          n[n.length] = {
            Text: p[h.DataTextField],
            Value: p[h.DataValueField],
            ExpandMode: j.get_expandCallback()(h.NavigationProperty),
            Attributes: (function () {
              if (h.NavigationProperty && p[h.NavigationProperty]) {
                return {
                  "Telerik.OData.ItemsUrl":
                    p[h.NavigationProperty].__deferred.uri,
                };
              } else {
                return {};
              }
            })(),
          };
        });
        l.apply(j, [n, g]);
      });
    },
    _sanitize: function (g) {
      var h = g.d.results ? g.d.results : g.d;
      if (!(h instanceof Array)) {
        h = a.makeArray(h);
      }
      return h;
    },
  };
  b.NavigationControlODataLoader.registerClass(
    "Telerik.Web.UI.NavigationControlODataLoader",
    b.WebServiceLoader
  );
})(Telerik.Web.UI, $telerik.$);

/* END Telerik.Web.UI.Common.Navigation.OData.OData.js */
/* START Telerik.Web.UI.ComboBox.RadComboBoxScripts.js */
Type.registerNamespace("Telerik.Web.UI");
(function () {
  var a = Telerik.Web.UI;
  a.RadComboBoxItem = function () {
    a.RadComboBoxItem.initializeBase(this);
  };
  a.RadComboBoxItem._regExEscape = function (b) {
    return b.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
  };
})();
(function () {
  var a = $telerik.$,
    c = Telerik.Web.UI,
    b = c.RadComboBoxItem;
  c.RadComboBoxItem.prototype = {
    _shouldInitializeChild: function (d) {
      return false;
    },
    get_text: function () {
      var e = this.get_comboBox();
      var d = e ? e._checkBoxes : false;
      if (this._text !== null) {
        return this._removeEmTags(this._text);
      }
      if ((this._text = this._properties.getValue("text", null)) !== null) {
        return this._removeEmTags(this._text);
      }
      var f = this.get_textElement();
      if (!f) {
        return "";
      }
      if (typeof f.innerText != "undefined") {
        if (d && Telerik.Web.Browser.chrome) {
          this._text = a(f).find("label")[0].innerText;
        } else {
          this._text = f.innerText;
        }
      } else {
        this._text = f.textContent;
      }
      return this._removeEmTags(this._text);
    },
    get_baseText: function () {
      return c.RadComboBoxItem.callBaseMethod(this, "get_text");
    },
    set_text: function (k) {
      var g = this.get_element(),
        d = a(g),
        i = this.get_imageElement(),
        f = this.get_comboBox(),
        h = f ? f._checkBoxes : false;
      if (g && !d.hasClass("rcbTemplate")) {
        if (!i && !h) {
          g.innerHTML = k;
        } else {
          var e = d,
            j;
          if (h) {
            e = d.find("label");
          }
          j = e.children(":last").get(0);
          if (j && j.nextSibling) {
            j.nextSibling.nodeValue = k;
          } else {
            e.append(k);
          }
        }
      }
      this._text = k;
      this._properties.setValue("text", k, true);
      if (f) {
        if (this.get_checked()) {
          f._updateComboBoxText();
        }
        f._resizeDropDown();
      }
    },
    _removeEmTags: function (f) {
      var d = f.indexOf("<em>");
      var e = f.indexOf("</em>");
      if (d >= 0 && e > d) {
        f = String.format(
          "{0}{1}{2}",
          f.substr(0, d),
          f.substr(d + 4, e - d - 4),
          f.substr(e + 5)
        );
      }
      return f;
    },
    set_visible: function (e) {
      var f = this.get_visible() != e,
        d = this.get_element();
      if (!f) {
        return;
      }
      c.RadComboBoxItem.callBaseMethod(this, "set_visible", [e]);
      if (e) {
        d.style.display = "";
      } else {
        d.style.display = "none";
      }
    },
    clearEmTags: function () {
      var d = this;
      a(this.get_element())
        .find("em")
        .contents()
        .unwrap()
        .parent()
        .each(function () {
          if ($telerik.isIE || Telerik.Web.Browser.edge) {
            d._normalize(this);
          } else {
            this.normalize();
          }
        });
    },
    _normalize: function (f) {
      var d = f.firstChild,
        e;
      while (d) {
        if (d.nodeType == 3) {
          while ((e = d.nextSibling) && e.nodeType == 3) {
            d.appendData(e.data);
            f.removeChild(e);
          }
        } else {
          this._normalize(d);
        }
        d = d.nextSibling;
      }
    },
    _highlight: function (g, d) {
      var e = this,
        h = function (i) {
          return b.STRING_EM_START + i + b.STRING_EM_END;
        },
        f = false;
      a(d)
        .contents()
        .each(function () {
          if (this.nodeType != 1) {
            var j = a(this).text();
            if (g.test(j)) {
              var i = j.replace(g, h);
              i = c.RadComboBox.htmlEncode(i);
              i = i
                .replace(b.REGEX_EM_START_HTML_ENCODED, b.STRING_EM_START)
                .replace(b.REGEX_EM_END_HTML_ENCODED, b.STRING_EM_END);
              if (!a(this).siblings()) {
                parent.innerHTML = i;
              } else {
                a(this).replaceWith(i);
              }
              f = true;
            }
          } else {
            if (e._highlight(g, this)) {
              f = true;
            }
          }
        });
      return f;
    },
    highlightText: function (e, h) {
      this.clearEmTags();
      if (h === "") {
        return true;
      }
      var d = b._regExEscape(h),
        g = null;
      if (e == c.RadComboBoxFilter.StartsWith) {
        g = new RegExp("^\\s*" + d, "im");
      } else {
        if (e == c.RadComboBoxFilter.Contains) {
          g = new RegExp(d, "gim");
        }
      }
      var f = this._highlight(g, this.get_element());
      return f;
    },
    _createDomElement: function () {
      var e = this.get_comboBox().get_simpleRendering(),
        f = e ? document.createElement("div") : document.createElement("ul"),
        d = [];
      if (e) {
        d[d.length] = "<select>";
      }
      this._render(d);
      if (e) {
        d[d.length] = "</select>";
      }
      f.innerHTML = d.join("");
      if (e) {
        return f.firstChild.firstChild;
      } else {
        return f.firstChild;
      }
    },
    _render: function (d) {
      if (this.get_comboBox().get_simpleRendering()) {
        this._renderOptionElement(d);
      } else {
        this._renderLiElement(d);
      }
    },
    _renderOptionElement: function (d) {
      d[d.length] = "<option";
      if (this.get_value()) {
        d[d.length] = " value='" + this.get_value() + "'";
      }
      if (!this.get_enabled()) {
        d[d.length] = " disabled='disabled'";
      }
      if (this.get_selected()) {
        d[d.length] = " selected='selected'";
      }
      d[d.length] = ">";
      d[d.length] = this.get_text();
      d[d.length] = "</option>";
    },
    _renderLiElement: function (e) {
      var d = this._renderedClientTemplate;
      e[e.length] = "<li class='";
      if (this.get_enabled()) {
        e[e.length] = "rcbItem";
        if (this.get_isSeparator()) {
          e[e.length] = " rcbSeparator";
        }
      } else {
        e[e.length] = "rcbDisabled";
      }
      if (d) {
        e[e.length] = " rcbTemplate";
      }
      e[e.length] = "' ";
      if (this.get_comboBox().get_enableAriaSupport()) {
        e[e.length] = "role='option' tabindex='-1' ";
      }
      e[e.length] = ">";
      if (d) {
        this._renderTemplatedItem(e);
      } else {
        this._renderItem(e);
      }
      e[e.length] = "</li>";
    },
    _renderItem: function (d) {
      if (this.get_comboBox()._checkBoxes) {
        d[d.length] = "<label>";
        this._renderCheckBox(d);
        this._renderItemContent(d);
        d[d.length] = "</label>";
      } else {
        this._renderItemContent(d);
      }
    },
    _renderTemplatedItem: function (d) {
      if (this.get_comboBox()._checkBoxes) {
        d[d.length] = "<label>";
        this._renderCheckBox(d);
        d[d.length] = "</label>";
      }
      d[d.length] = this._renderedClientTemplate;
    },
    _renderItemContent: function (d) {
      if (this.get_imageUrl()) {
        this._renderImage(d);
      }
      d[d.length] = this.get_text();
    },
    _renderCheckBox: function (d) {
      d[d.length] = "<input type='checkbox' class='rcbCheckBox'";
      if (this.get_checked()) {
        d[d.length] = " checked='checked'";
      }
      if (!this.get_enabled()) {
        d[d.length] = " disabled='disabled'";
      }
      d[d.length] = " />";
    },
    _renderImage: function (d) {
      d[d.length] =
        "<img alt='' src='" + this.get_imageUrl() + "' class='rcbImage'";
      if (!this.get_enabled()) {
        d[d.length] = " disabled='disabled'";
      }
      d[d.length] = "/>";
      return d;
    },
    _updateImageSrc: function () {
      var f = this.get_imageUrl(),
        d = this.get_disabledImageUrl();
      if (!this.get_enabled() && d) {
        f = d;
      }
      if (f && this.get_element()) {
        var e = this.get_imageElement();
        if (!e) {
          e = this._createImageElement();
        }
        f = f.replace(/&amp;/gi, "&");
        if (f != e.src) {
          e.src = f;
        }
      }
    },
    _createImageElement: function () {
      var f = this.get_element(),
        e = this.get_checkBoxElement(),
        d = a("<img class='rcbImage' alt='' />");
      this._imageElement = d.get(0);
      if (e) {
        d.insertAfter(e);
      } else {
        if (f.firstChild) {
          f.insertBefore(this._imageElement, f.firstChild);
        } else {
          f.appendChild(this._imageElement);
        }
      }
      return this._imageElement;
    },
    get_checkBoxElement: function () {
      if (!this._checkBoxElement) {
        this._checkBoxElement =
          a(this.get_element()).find("label > input[type='checkbox']").get(0) ||
          null;
      }
      return this._checkBoxElement;
    },
    get_imageElement: function () {
      if (!this._imageElement) {
        var d = a(this.get_element());
        this._imageElement = d.find("img.rcbImage").get(0);
      }
      return this._imageElement;
    },
    get_disabledImageUrl: function () {
      return this._properties.getValue("disabledImageUrl", null);
    },
    set_disabledImageUrl: function (d) {
      this._properties.setValue("disabledImageUrl", d, true);
      this._updateImageSrc();
    },
    get_imageUrl: function () {
      this._imageUrl = this._properties.getValue("imageUrl", null);
      if (this._imageUrl) {
        return this._imageUrl;
      }
      if (!this._imageUrl) {
        var d = this.get_imageElement();
        if (d) {
          this._imageUrl = d.src;
        }
      }
      return this._imageUrl;
    },
    set_imageUrl: function (d) {
      this._imageUrl = d;
      this._properties.setValue("imageUrl", d, true);
      this._updateImageSrc();
    },
    get_value: function () {
      return this._properties.getValue("value", "");
    },
    select: function () {
      this._select(null);
    },
    hide: function () {
      this.set_visible(false);
    },
    show: function () {
      this.set_visible(true);
    },
    check: function () {
      this.set_checked(true);
    },
    uncheck: function () {
      this.set_checked(false);
    },
    get_checked: function () {
      return this._properties.getValue("checked", false) === true;
    },
    set_checked: function (f) {
      if (!this.get_enabled()) {
        return;
      }
      this._setChecked(f);
      var d = this.get_comboBox(),
        e = this.get_index();
      if (d) {
        if (f) {
          d._registerCheckedIndex(e);
        } else {
          d._unregisterCheckedIndex(e);
        }
        d._updateComboBoxText();
        if (d._checkAllElement) {
          d._updateCheckAllState();
        }
      }
    },
    _setChecked: function (e) {
      var d = this.get_comboBox();
      if (d && d._checkBoxes) {
        this._element.setAttribute("aria-checked", e);
      }
      this._properties.setValue("checked", e);
      this._updateCheckBoxCheckedState(e);
    },
    _updateCheckBoxCheckedState: function (e) {
      var d = a(this.get_checkBoxElement());
      if (d[0]) {
        if (e) {
          d.prop("checked", true);
        } else {
          d.prop("checked", false);
        }
      }
    },
    _select: function (g) {
      if (!this.get_isEnabled() || this.get_isSeparator()) {
        return;
      }
      var d = this.get_comboBox();
      if (
        !d.get_simpleRendering() &&
        d.raise_selectedIndexChanging(this, g) === true
      ) {
        return;
      }
      var j = d.get_text();
      var h = d._getLastSeparatorIndex(j);
      var k = j.substring(0, h + 1) + this.get_text();
      var i = d.get_selectedItem();
      if (i) {
        i.set_selected(false);
      }
      d.set_text(k);
      d.set_originalText(k);
      d.set_value(this.get_value());
      d.set_selectedItem(this);
      d.set_selectedIndex(this.get_index());
      if (d.get_simpleRendering()) {
        this.get_element().selected = "selected";
      }
      this.set_selected(true);
      this.highlight();
      d.raise_selectedIndexChanged(this, g);
      var f = { Command: "Select", Index: this.get_index() };
      d.postback(f);
    },
    _createChildControls: function () {},
    unHighlight: function () {
      var d = this.get_comboBox(),
        e;
      if (d) {
        if (!d.get_isTemplated() || d.get_highlightTemplatedItems()) {
          e = this.get_element();
          var f = /\brcbHovered\b/;
          this._replaceCssClass(e, f, "rcbItem");
          if (d.get_enableAriaSupport()) {
            c.RadComboBox._toggleActiveDescendantAttributes(
              e,
              d.get_id(),
              false
            );
          }
        }
        d.set_highlightedItem(null);
      }
    },
    highlight: function () {
      if (!this.get_isEnabled() || this.get_isSeparator()) {
        return;
      }
      var d = this.get_comboBox();
      if (!d.get_isTemplated() || d.get_highlightTemplatedItems()) {
        var f = d.get_highlightedItem();
        if (f) {
          f.unHighlight();
        }
        var e = this.get_element();
        if (e) {
          var g = /\brcbItem\b/;
          this._replaceCssClass(e, g, "rcbHovered");
          if (d.get_enableAriaSupport()) {
            c.RadComboBox._toggleActiveDescendantAttributes(
              e,
              d.get_id(),
              true
            );
          }
        }
      }
      d.set_highlightedItem(this);
    },
    scrollOnTop: function () {
      var d = this.get_comboBox();
      if (d && d.get_simpleRendering()) {
        return;
      }
      var f = this.get_element().offsetTop,
        e = d._getHeaderElement();
      if (e) {
        f = f - e.offsetHeight;
      }
      d.get_childListElementWrapper().scrollTop = f;
    },
    scrollIntoView: function () {
      var e = this.get_comboBox(),
        i = this.get_element();
      if (e && e.get_simpleRendering()) {
        return;
      }
      var l = i.offsetTop;
      var k = i.offsetHeight;
      var h = e.get_childListElementWrapper();
      var f = h.scrollTop;
      var g = h.offsetHeight;
      var d = e.get_checkAllCheckBoxDivElement();
      if (d) {
        l += d.offsetHeight;
      }
      if (l + k > f + g) {
        h.scrollTop = l + k - g;
        if (h.clientWidth < h.scrollWidth) {
          var j = c.RadComboBox._getScrollBarWidth();
          h.scrollTop += j;
        }
      } else {
        if (l <= f) {
          h.scrollTop = l;
        }
      }
    },
    nextItem: function () {
      return this.get_comboBox()
        .get_items()
        .getItem(this.get_index() + 1);
    },
    _replaceCssClass: function (d, f, e) {
      d.className = d.className.replace(f, e);
    },
    _createChildListElement: function () {
      var d = document.createElement("ul");
      this.get_combobox().get_dropDownElement().appendChild(d);
    },
    set_selected: function (d) {
      this._properties.setValue("selected", d);
    },
    get_selected: function () {
      return this._properties.getValue("selected", false);
    },
    get_highlighted: function () {
      var d = this.get_comboBox();
      if (!d) {
        return false;
      }
      return d.get_highlightedItem() == this;
    },
    disable: function () {
      this._changeEnabledState(false);
    },
    enable: function () {
      this._changeEnabledState(true);
    },
    _changeEnabledState: function (h) {
      this.set_enabled(h);
      var d = this.get_comboBox(),
        f = this.get_element(),
        g = "rcbItem",
        e = "rcbDisabled";
      if (d && d.get_simpleRendering()) {
        if (h) {
          f.removeAttribute("disabled");
        } else {
          f.disabled = "disabled";
        }
      } else {
        if (h) {
          a(f).removeClass(e);
          a(f).addClass(g);
        } else {
          a(f).addClass(e);
          a(f).removeClass(g);
        }
      }
    },
    set_enabled: function (e) {
      this._properties.setValue("enabled", e, true);
      var d = a(this.get_checkBoxElement());
      if (d[0]) {
        if (!e) {
          d.attr("disabled", "disabled");
        } else {
          d.removeAttr("disabled");
        }
      }
      this._updateImageSrc();
    },
    get_textElement: function () {
      return this.get_element();
    },
    get_comboBox: function () {
      return this._parent;
    },
    _getHierarchicalIndex: function () {
      return this.get_index();
    },
    get_isSeparator: function () {
      return this._properties.getValue("isSeparator", false);
    },
    set_isSeparator: function (e) {
      this._properties.setValue("isSeparator", e, true);
      var d = this.get_element();
      if (d) {
        Sys.UI.DomElement.toggleCssClass(d, "rcbSeparator");
      }
    },
    get_clientTemplate: function () {
      var e = this.get_comboBox(),
        d = this._clientTemplate;
      if (d) {
        return d;
      } else {
        if (e) {
          return e.get_clientTemplate();
        }
      }
      return d;
    },
    set_clientTemplate: function (d) {
      this._clientTemplate = d;
    },
    bindTemplate: function (d) {
      if (!d) {
        d = this._extractDataItem();
      }
      this._renderedClientTemplate = c.TemplateRenderer.renderTemplate(
        d,
        this.get_comboBox(),
        this
      );
      if (this.get_element()) {
        this._applyTemplate();
      }
    },
    _extractDataItem: function () {
      return {
        Text: this.get_text(),
        Value: this.get_value(),
        ImageUrl: this.get_imageUrl(),
        DisabledImageUrl: this.get_disabledImageUrl(),
        Attributes: this.get_attributes()._data,
      };
    },
    _applyTemplate: function () {
      if (!this._renderedClientTemplate) {
        return;
      }
      var e = this.get_textElement(),
        d = a(this.get_element()).children("input[type='checkbox']").get(0),
        f = "";
      if (d) {
        f = d.outerHTML;
      }
      f += this._renderedClientTemplate;
      e.innerHTML = f;
      a(e).addClass("rcbTemplate");
    },
    _applyCssClass: function (d, e) {
      this._removeClassFromElement(e);
      this._addClassToElement(d);
    },
    _removeClassFromElement: function (d) {
      a(this.get_element()).removeClass(d);
    },
    _addClassToElement: function (d) {
      a(this.get_element()).addClass(d);
    },
    _dispose: function () {
      c.RadComboBoxItem.callBaseMethod(this, "_dispose");
      this._parent = null;
    },
  };
  c.RadComboBoxItem.registerClass(
    "Telerik.Web.UI.RadComboBoxItem",
    c.ControlItem
  );
})();
(function () {
  var a = Telerik.Web.UI;
  Telerik.Web.UI.RadComboBoxItemCollection = function (b) {
    Telerik.Web.UI.RadComboBoxItemCollection.initializeBase(this, [b]);
  };
  a.RadComboBoxItemCollection.prototype = {
    clear: function () {
      var b = this._parent._getControl();
      if (b._checkBoxes) {
        b._checkedIndicesJson = "[]";
        b._checkedIndices = [];
        var e = b.get_items();
        for (var c = 0, f = e.get_count(); c < f; c++) {
          var d = b.get_items().getItem(c);
          d.set_checked(false);
        }
        b.updateClientState();
      }
      a.RadComboBoxItemCollection.callBaseMethod(this, "clear");
    },
    add: function (b) {
      a.RadComboBoxItemCollection.callBaseMethod(this, "add", [b]);
      this._resizeDropDown();
    },
    remove: function (b) {
      a.RadComboBoxItemCollection.callBaseMethod(this, "remove", [b]);
      this._resizeDropDown();
    },
    removeAt: function (b) {
      a.RadComboBoxItemCollection.callBaseMethod(this, "removeAt", [b]);
      this._resizeDropDown();
    },
    _resizeDropDown: function () {
      if (this._control) {
        this._control._resizeDropDown();
      }
    },
  };
  a.RadComboBoxItemCollection.registerClass(
    "Telerik.Web.UI.RadComboBoxItemCollection",
    a.ControlItemCollection
  );
})();
(function () {
  var a = Telerik.Web.UI;
  a.RadComboBoxEventArgs = function (b) {
    a.RadComboBoxEventArgs.initializeBase(this);
    this._domEvent = b;
  };
  a.RadComboBoxEventArgs.prototype = {
    get_domEvent: function () {
      return this._domEvent;
    },
  };
  a.RadComboBoxEventArgs.registerClass(
    "Telerik.Web.UI.RadComboBoxEventArgs",
    Sys.EventArgs
  );
  a.RadComboBoxCancelEventArgs = function (b) {
    a.RadComboBoxCancelEventArgs.initializeBase(this);
    this._domEvent = b;
  };
  a.RadComboBoxCancelEventArgs.prototype = {
    get_domEvent: function () {
      return this._domEvent;
    },
  };
  a.RadComboBoxCancelEventArgs.registerClass(
    "Telerik.Web.UI.RadComboBoxCancelEventArgs",
    Sys.CancelEventArgs
  );
  a.RadComboBoxItemEventArgs = function (c, b) {
    a.RadComboBoxItemEventArgs.initializeBase(this);
    this._item = c;
    this._domEvent = b;
  };
  a.RadComboBoxItemEventArgs.prototype = {
    get_item: function () {
      return this._item;
    },
    get_domEvent: function () {
      return this._domEvent;
    },
  };
  a.RadComboBoxItemEventArgs.registerClass(
    "Telerik.Web.UI.RadComboBoxItemEventArgs",
    Sys.EventArgs
  );
  a.RadComboBoxItemCancelEventArgs = function (c, b) {
    Telerik.Web.UI.RadComboBoxItemCancelEventArgs.initializeBase(this);
    this._item = c;
    this._domEvent = b;
  };
  a.RadComboBoxItemCancelEventArgs.prototype = {
    get_item: function () {
      return this._item;
    },
    get_domEvent: function () {
      return this._domEvent;
    },
  };
  a.RadComboBoxItemCancelEventArgs.registerClass(
    "Telerik.Web.UI.RadComboBoxItemCancelEventArgs",
    Sys.CancelEventArgs
  );
  a.RadComboBoxRequestEventArgs = function (c, b) {
    Telerik.Web.UI.RadComboBoxRequestEventArgs.initializeBase(this);
    this._text = c;
    this._domEvent = b;
  };
  a.RadComboBoxRequestEventArgs.prototype = {
    get_text: function () {
      return this._text;
    },
    get_domEvent: function () {
      return this._domEvent;
    },
  };
  a.RadComboBoxRequestEventArgs.registerClass(
    "Telerik.Web.UI.RadComboBoxRequestEventArgs",
    Sys.EventArgs
  );
  a.RadComboBoxRequestCancelEventArgs = function (d, b, c) {
    a.RadComboBoxRequestCancelEventArgs.initializeBase(this);
    this._text = d;
    this._context = b;
    this._domEvent = c;
  };
  a.RadComboBoxRequestCancelEventArgs.prototype = {
    get_text: function () {
      return this._text;
    },
    get_context: function () {
      return this._context;
    },
    get_domEvent: function () {
      return this._domEvent;
    },
  };
  a.RadComboBoxRequestCancelEventArgs.registerClass(
    "Telerik.Web.UI.RadComboBoxRequestCancelEventArgs",
    Sys.CancelEventArgs
  );
  a.RadComboBoxItemsRequestFailedEventArgs = function (d, c, b) {
    a.RadComboBoxItemsRequestFailedEventArgs.initializeBase(this);
    this._text = d;
    this._errorMessage = c;
    this._domEvent = b;
  };
  a.RadComboBoxItemsRequestFailedEventArgs.prototype = {
    get_text: function () {
      return this._text;
    },
    get_errorMessage: function () {
      return this._errorMessage;
    },
    get_domEvent: function () {
      return this._domEvent;
    },
  };
  a.RadComboBoxItemsRequestFailedEventArgs.registerClass(
    "Telerik.Web.UI.RadComboBoxItemsRequestFailedEventArgs",
    a.RadComboBoxCancelEventArgs
  );
  a.RadComboBoxItemDataBoundEventArgs = function (c, b) {
    a.RadComboBoxItemDataBoundEventArgs.initializeBase(this, [c]);
    this._dataItem = b;
  };
  a.RadComboBoxItemDataBoundEventArgs.prototype = {
    get_dataItem: function () {
      return this._dataItem;
    },
  };
  a.RadComboBoxItemDataBoundEventArgs.registerClass(
    "Telerik.Web.UI.RadComboBoxItemDataBoundEventArgs",
    a.RadComboBoxItemEventArgs
  );
})();
(function () {
  var a = $telerik.$;
  var b = Telerik.Web.UI;
  a.registerEnum(b, "Keys", {
    Tab: 9,
    Enter: 13,
    Shift: 16,
    Escape: 27,
    Space: 32,
    PageUp: 33,
    PageDown: 34,
    End: 35,
    Home: 36,
    Left: 37,
    Up: 38,
    Right: 39,
    Down: 40,
    Insert: 45,
    Del: 46,
    Zero: 48,
    Numpad0: 96,
    Numpad9: 105,
    F1: 112,
    F12: 123,
    Delete: 127,
  });
  a.registerEnum(b, "RadComboBoxFilter", {
    None: 0,
    Contains: 1,
    StartsWith: 2,
  });
  a.registerEnum(b, "RadComboBoxExpandDirection", { Up: 1, Down: 2 });
  a.registerEnum(b, "RadComboBoxCheckedItemsTexts", {
    FitInInput: 0,
    DisplayAllInInput: 1,
  });
  a.registerEnum(b, "RadComboBoxDropDownAutoWidth", {
    Disabled: 0,
    Enabled: 1,
  });
})();
(function (a) {
  $telerik.findComboBox = $find;
  $telerik.toComboBox = function (h) {
    return h;
  };
  Type.registerNamespace("Telerik.Web.UI");
  var c = Telerik.Web.UI,
    b = Sys.Serialization.JavaScriptSerializer,
    d = Sys.UI.DomElement.addCssClass,
    g = Sys.UI.DomElement.removeCssClass,
    f = "rcbInput",
    e = "rcbEmptyMessage";
  c.RadComboBox = function (h) {
    c.RadComboBox.initializeBase(this, [h]);
    this._callbackText = "";
    this._filterText = "";
    this._children = null;
    this._virtualScroll = false;
    this._itemData = null;
    this._selectedItem = null;
    this._selectedIndex = null;
    this._setSelectedItem = false;
    this._enableItemCaching = false;
    this._openDropDownOnLoad = false;
    this._allowCustomText = false;
    this._markFirstMatch = false;
    if (this.get_simpleRendering()) {
      this._originalText = this.get_selectElementText();
    } else {
      this._originalText = this.get_inputDomElement().value;
    }
    var i = this.get_inputDomElement() || this.get_selectElement();
    i.setAttribute("autocomplete", "off");
    this._cachedText = this._originalText;
    this._cachedOffsetHeight = "";
    this._text = "";
    this._value = "";
    this._postBackReference = null;
    this._dropDownElement = null;
    this._inputDomElement = null;
    this._imageDomElement = null;
    this._isTemplated = false;
    this._requestTimeoutID = 0;
    this._filterDuration = 200;
    this._highlightTemplatedItems = false;
    this._clientState = {
      value: "",
      text: "",
      enabled: true,
      logEntries: [],
      checkedIndices: [],
      checkedItemsTextOverflows: false,
    };
    this._uniqueId = null;
    this._rightToLeft = false;
    this._isDetached = false;
    this._overlay = null;
    this._enableScreenBoundaryDetection = true;
    this._suppressChange = false;
    this._lastKeyCode = null;
    this._loadingDiv = null;
    this._showMoreResultsBox = false;
    this._focused = false;
    this._causesValidation = true;
    this._webServiceSettings = new c.WebServiceSettings({});
    this._webServiceLoader = null;
    this._enabled = true;
    this._fireEvents = this._enabled;
    this._slide = null;
    this._expandAnimation = new c.AnimationSettings({});
    this._collapseAnimation = new c.AnimationSettings({});
    this._expandDirection = c.jSlideDirection.Down;
    this._animationEndedDelegate = null;
    this._animationStartedDelegate = null;
    this._showDropDownOnTextboxClick = true;
    this._dropDownWidth = "";
    this._height = "";
    this._maxHeight = "";
    this._childListElementWrapper = null;
    this._skin = "";
    this._skipLoadingItems = false;
    this._ajaxRequest = false;
    this._pendingAjaxRequestsCount = 0;
    this._emptyMessage = null;
    this._disposed = false;
    this._disposeChildElements = true;
    this._firstOpeningOfDropDown = true;
    this._lodIsAutomatic = false;
    this._enableOverlay = true;
    this._minFilterLength = 0;
    this._clientTemplate = null;
    this._itemsPerRequest = -1;
    this.lodHashTable = {};
    this._checkBoxes = false;
    this._checkedIndices = [];
    this._checkedIndicesJson = "[]";
    this._postBackOnCheck = false;
    this._postBackOnCheckAllCheck = false;
    this._checkedItemsTextOverflows = false;
    this._enableCheckAllItemsCheckBox = false;
    this._checkAllElement = null;
    this._checkedItemsTexts = c.RadComboBoxCheckedItemsTexts.FitInInput;
    this._allChecked = false;
    this._escKeyPressed = false;
    this._defaultItem = null;
    this._defaultValue = null;
    this._defaultText = null;
    this._view = null;
    this._dropDownAutoWidth = c.RadComboBoxDropDownAutoWidth.Disabled;
    this._clientDataSource = null;
    this._clientDataSourcePageIndex = -1;
    this._shouldFocus = false;
    this._addEmptyMessageToClientState = false;
    this._ariaSettings = null;
  };
  c.RadComboBox.prototype = {
    initialize: function () {
      c.ControlItemContainer.callBaseMethod(this, "initialize");
      Array.add(c.RadComboBox.ComboBoxes, this);
      this._view = new c.RadComboBox.ViewFactory.GetView(this);
      this._clientState.value = this._value;
      this._clientState.text = this._text;
      if (this._defaultValue !== null && this._text == this._defaultText) {
        this.get_element().value = this._defaultValue;
      } else {
        this.get_element().value = this._text;
      }
      this._log.initialize();
      this._initializeEventMap();
      if (this.get_simpleRendering()) {
        this._initializeSelect();
      } else {
        this._initializeAnimation();
        this._initializeDropDown();
        this._initializeInputEvents();
        this._initializeViewEvents();
        if (this._virtualScroll) {
          this._initializeVirtualScroll();
        }
        if (this.get_moreResultsBoxElement()) {
          this._initializeMoreResultsBox();
        }
        if (this._checkBoxes) {
          this._initializeCheckBoxes();
        }
        this._initializeDocumentEvents();
        this._initializeWindowEvents();
        if (c.RadComboBox._getNeedsFakeInput()) {
          this._deployFakeInput();
        }
        this.repaint();
        this._view.initialize();
        if ($telerik.isRightToLeft(this.get_element())) {
          this._initRightToLeft();
        }
        if (this.get_enableAriaSupport()) {
          this._applyWaiAria();
        }
      }
      if (this._openDropDownOnLoad && !this.get_dropDownVisible()) {
        this.showDropDown();
      }
      if (this.get_isUsingODataSource()) {
        this._initializeODataSourceBinder();
      }
      this._cdInitDelegate = a.proxy(this._initializeClientDataSource, this);
      Sys.Application.add_load(this._cdInitDelegate);
      if (
        this.get_checkBoxes() &&
        this._checkedItemsTexts == c.RadComboBoxCheckedItemsTexts.FitInInput
      ) {
        this._setOriginalTextWithCheckBoxes();
      }
      if (this._shouldFocus) {
        var h = a(this.get_inputDomElement());
        h.focus();
        if (this.get_enableTextSelection() && this.get_markFirstMatch()) {
          h.select();
        } else {
          this._selectText(h.val().length, 0);
        }
      }
      if (this._navigationSettings) {
        this._applyKeyboardNavigationSettings();
        this._keyboardNavigationSettings.set_element(
          this.get_inputDomElement()
        );
      }
      if (this._fireEvents) {
        this.raiseEvent("load", null);
      }
    },
    _initializeViewEvents: function () {
      this.get_view().observe(
        { inputClick: this._onInputCellClick, buttonClick: this._onImageClick },
        this
      );
    },
    get_rippleZonesConfiguration: function () {
      var h = this.get_allowCustomText() ? ".rcbActionButton" : ".rcbInner";
      return [
        {
          initializeRipples: true,
          element: this.get_element(),
          rippleConfigurations: [
            { containerSelector: h, disabledClass: "rcbDisabled" },
          ],
        },
        {
          element: this.get_dropDownElement(),
          rippleConfigurations: [
            {
              containerSelector:
                ".rcbHovered,.rcbCheckAllItemsHovered label,.rcbMoreResults",
            },
          ],
        },
      ];
    },
    _initializeInputEvents: function () {
      var h = this.get_inputDomElement();
      var i = this;
      if (
        i._markFirstMatch &&
        i.get_filter() == c.RadComboBoxFilter.None &&
        !i.get_enableLoadOnDemand()
      ) {
        a(h).bind("keypress", function (j) {
          i._onKeyPressCheckSelection(j);
        });
      }
      if ($telerik.isIE) {
        a(h)
          .bind("keyup", function (j) {
            i._onKeyUpIE(j);
          })
          .bind("paste", function () {
            setTimeout(function () {
              i._updateFilterText = true;
              i._onChangeHelper(null);
            }, 1);
          });
      }
      a(h).on("blur", function () {
        if (!i._postBackReference) {
          i.get_view().blur();
          if (i._focused) {
            i._focused = false;
          }
        }
      });
      this._onFocusDelegate = Function.createDelegate(this, this._onFocus);
      $telerik.addHandler(h, "focus", this._onFocusDelegate);
      this._eventMap.addHandlerForClassName(
        "keydown",
        "rcbInput",
        this._onKeyDown
      );
      this._eventMap.addHandlerForClassName(
        "keypress",
        "rcbInput",
        this._onKeyPress
      );
      if (!$telerik.isIE) {
        this._eventMap.addHandlerForClassName(
          "input",
          "rcbInput",
          this._onInputChange
        );
      }
    },
    _initializeWindowEvents: function () {
      this._onWindowUnloadDelegate = Function.createDelegate(
        this,
        this._onWindowUnload
      );
      $telerik.addHandler(window, "unload", this._onWindowUnloadDelegate);
      if (this._openDropDownOnLoad) {
        this._onOpenOnLoad = Function.createDelegate(this, this.showDropDown);
        $telerik.addHandler(window, "load", this._onOpenOnLoad);
      }
    },
    _initializeDocumentEvents: function () {
      this._onDocumentClickDelegate = Function.createDelegate(
        this,
        this._onDocumentClick
      );
      $telerik.addHandler(document, "mousedown", this._onDocumentClickDelegate);
      $telerik.addHandler(
        document,
        "contextmenu",
        this._onDocumentClickDelegate
      );
    },
    _detachInputEvents: function () {
      var h = this.get_inputDomElement();
      a(h).unbind();
      $telerik.removeHandler(h, "focus", this._onFocusDelegate);
      this._onFocusDelegate = null;
    },
    _detachWindowEvents: function () {
      if (this._openDropDownOnLoad) {
        $telerik.removeHandler(window, "load", this._onOpenOnLoad);
        this._onOpenOnLoad = null;
      }
      $telerik.removeHandler(window, "unload", this._onWindowUnloadDelegate);
      this._onWindowUnloadDelegate = null;
    },
    _detachDocumentEvents: function () {
      $telerik.removeHandler(
        document,
        "mousedown",
        this._onDocumentClickDelegate
      );
      $telerik.removeHandler(
        document,
        "contextmenu",
        this._onDocumentClickDelegate
      );
      this._onDocumentClickDelegate = null;
    },
    dispose: function () {
      if (this._disposed) {
        return;
      }
      Array.remove(c.RadComboBox.ComboBoxes, this);
      if (this.get_simpleRendering()) {
        this._disposeSelect();
      } else {
        var h = Sys.WebForms
          ? Sys.WebForms.PageRequestManager.getInstance().get_isInAsyncPostBack()
          : false;
        this._disposeChildElements = h && this._isDetached;
        this._disposeAnimation();
        if (this._checkBoxes) {
          this._diposeCheckBoxes();
        }
        this._detachWindowEvents();
        this._detachInputEvents();
        this._detachDocumentEvents();
        this._detachDropDownEvents();
        this._view.dispose();
        if (this.get_moreResultsBoxElement()) {
          this._detachMoreResultsBoxEvents();
        }
        if (this._virtualScroll && this._onDropDownScrollDelegate) {
          this._detachVirtualScrollEvents();
        }
        this._animatedElement = null;
        this._animatedContainer = null;
        this._animationContainer = null;
      }
      if (this._highlightedItem) {
        this._highlightedItem = null;
      }
      if (this._selectedItem) {
        this._selectedItem = null;
      }
      this._disposed = true;
      this._expandAnimation = null;
      this._collapseAnimation = null;
      this._webServiceSettings = null;
      c.RadComboBox.callBaseMethod(this, "dispose");
      if (this._children) {
        this._children = null;
      }
      if (this._fakeInput) {
        this._fakeInput = null;
      }
      if (!this.get_simpleRendering()) {
        this._nullifyEventExpandos();
      }
    },
    _nullifyEventExpandos: function () {
      if (this._childListElement) {
        this._childListElement._events = null;
        this._childListElement = null;
      }
      this._childListElementWrapper._events = null;
      this._childListElementWrapper = null;
    },
    _applyWaiAria: function () {
      this._applyInputElementAttributes();
      this._applyToggleElementAttributes();
      this._applyChildListElementAttributes();
      this._applyAriaAttributesToChildren();
      if (this._ariaSettings) {
        var i = b.deserialize(this._ariaSettings);
        var h = new c.WaiAriaDecorator(this.get_inputDomElement(), i);
        h.setAttributes();
      }
    },
    _applyInputElementAttributes: function () {
      var k = this;
      var j = k.get_inputDomElement();
      var i = k.get_id();
      var h = i + "_listbox";
      if (this._checkAllElement && this.get_enableAriaSupport()) {
        h += " " + i + "_checkAll";
      }
      a(j).attr({
        role: "combobox",
        "aria-haspopup": true,
        "aria-expanded": false,
        "aria-readonly": false,
        "aria-disabled": !k.get_enabled(),
        "aria-busy": false,
        "aria-owns": h,
      });
      j.setAttribute(
        "aria-autocomplete",
        k.get_markFirstMatch() ? "both" : "none"
      );
    },
    _applyToggleElementAttributes: function () {
      var h = this,
        i =
          h.get_imageDomElement() ||
          $telerik.getFirstChildByTagName(h.get_wrapper(), "button", 0);
      a(i).attr({
        role: "button",
        "aria-controls": h.get_id() + "_listbox",
        tabindex: h.get_inputDomElement().tabIndex,
      });
    },
    _applyChildListElementAttributes: function () {
      var h = this;
      a(h.get_childListElement()).attr({
        id: h.get_id() + "_listbox",
        role: "listbox",
        "aria-live": "polite",
        "aria-hidden": true,
        tabindex: 0,
      });
    },
    _applyAriaAttributesToChildren: function () {
      var j = this.get_items()._array,
        k = j.length;
      for (var h = 0; h < k; h++) {
        this._applyItemElementAttributes(j[h]._element);
      }
    },
    _applyItemElementAttributes: function (h) {
      if (this._checkBoxes) {
        h.setAttribute("role", "checkbox");
      } else {
        h.setAttribute("role", "option");
      }
      h.setAttribute("tabindex", "-1");
    },
    _applyEmptyMessage: function () {
      var h = this,
        j = h.get_inputDomElement(),
        i = h.get_emptyMessage();
      if (i && this.get_text() === "") {
        this._suppressChange = true;
        j.value = i;
        d(j, e);
        this._suppressChange = false;
      }
    },
    _checkIsThisPartOfWord: function (j, i) {
      var k = "";
      if (this.get_selectedItem()) {
        k = this.get_selectedItem().get_text();
      }
      var h = k.lastIndexOf(i);
      if (h > -1 && h == j) {
        return true;
      }
      return false;
    },
    _childInserted: function (h, i, j) {
      c.RadComboBox.callBaseMethod(this, "_childInserted", [h, i, j]);
      if (!this._childControlsCreated) {
        return;
      }
      if (this._checkBoxes) {
        if (i.get_checked()) {
          this._registerCheckedIndex(h);
        }
        if (h != this.get_items().get_count() - 1) {
          this._updateCheckedIndices();
        }
        this._updateComboBoxText();
        if (this._checkAllElement) {
          this._updateCheckAllState();
        }
      }
    },
    _childRemoved: function (i, k) {
      var h = i.get_element();
      if (
        k.get_items().get_count() === 0 &&
        !this.get_simpleRendering() &&
        !this._getHeaderElement() &&
        !this._getFooterElement() &&
        !this._loadingDiv
      ) {
        h = k._childListElement;
        k._childListElement = null;
      }
      if (h) {
        h.innerHTML = "";
        if (h.parentNode) {
          h.parentNode.removeChild(h);
        }
        h = null;
      }
      if (i == this.get_selectedItem()) {
        this.set_selectedItem(null);
        this.set_highlightedItem(null);
        this.set_text("");
        if (this.get_simpleRendering()) {
          var j = this.get_selectedOption();
          if (j) {
            j._item.select();
          }
        }
      } else {
        if (i == this.get_highlightedItem()) {
          this.set_highlightedItem(null);
        }
      }
      if (this._checkBoxes) {
        this._updateCheckedIndices();
        this._updateComboBoxText();
      }
      c.RadComboBox.callBaseMethod(this, "_childRemoved", [i, k]);
    },
    _childRemoving: function (h) {
      var i = h.get_index();
      if (this._itemData) {
        Array.remove(this._itemData, this._itemData[i]);
      }
      c.RadComboBox.callBaseMethod(this, "_childRemoving", [h]);
    },
    _childrenCleared: function (l) {
      this.set_selectedItem(null);
      this.set_highlightedItem(null);
      var h = l.get_childListElement();
      var k = l.get_items().get_count();
      var j;
      if (h && !this._getHeaderElement() && !this._getFooterElement()) {
        for (j = 0; j < k; j++) {
          l.get_items().getItem(j)._dispose();
        }
        h.innerHTML = "";
        h = null;
      } else {
        if (h) {
          for (j = 0; j < k; j++) {
            this._childRemoved(l.get_items().getItem(j), l);
          }
        }
      }
      if (this._checkBoxes) {
        this._updateCheckedIndices();
        this._updateComboBoxText();
      }
    },
    _createChildControls: function () {
      this._children = new c.RadComboBoxItemCollection(this);
      c.RadComboBox._createChildControls(this, this._children);
    },
    _ensureChildControls: function () {
      if (!this._childControlsCreated) {
        this._createChildControls();
        this._childControlsCreated = true;
        if (!this._setSelectedItem) {
          this._setSelectedItem = true;
          this._setFirstSelectedItem();
        }
      }
    },
    _findItemToSelect: function (i) {
      var h = this.findItemByValue(this.get_value());
      if (!h) {
        var j = i !== undefined ? i : this.get_text();
        h = this.findItemByText(j);
      }
      return h;
    },
    _findNearestItem: function (h) {
      while (h.nodeType !== 9) {
        if (h._item && c.RadComboBoxItem.isInstanceOfType(h._item)) {
          return h._item;
        }
        h = h.parentNode;
      }
      return null;
    },
    _getFooterElement: function () {
      if (this.get_dropDownElement()) {
        return $telerik.getChildByClassName(
          this.get_dropDownElement(),
          "rcbFooter",
          0
        );
      }
      return null;
    },
    _getHeaderElement: function () {
      if (this.get_dropDownElement()) {
        return $telerik.getChildByClassName(
          this.get_dropDownElement(),
          "rcbHeader",
          0
        );
      }
      return null;
    },
    _getInputCursorPosition: function () {
      var j = this.get_inputDomElement();
      var h = j.selectionStart;
      if ($telerik.isIE && document.selection) {
        try {
          var k = document.selection.createRange().duplicate();
          k.moveStart("sentence", -100000);
          h = k.text.length;
        } catch (i) {}
      }
      return h;
    },
    _getInputSelectionRange: function () {
      var i = this.get_inputDomElement();
      var k = {};
      if ($telerik.isIE && document.selection) {
        try {
          var j = document.selection.createRange();
          k.start = i.value.lastIndexOf(j.text);
          k.end = k.start + j.text.length;
        } catch (h) {}
      } else {
        k.start = i.selectionStart;
        k.end = i.selectionEnd;
      }
      return k;
    },
    _getInputSelection: function (h) {
      var o = 0,
        i = 0,
        m,
        n,
        p,
        l,
        j;
      if (
        typeof h.selectionStart == "number" &&
        typeof h.selectionEnd == "number"
      ) {
        o = h.selectionStart;
        i = h.selectionEnd;
      } else {
        try {
          n = document.selection.createRange();
          if (n && n.parentElement() == h) {
            l = h.value.length;
            m = h.value.replace(/\r\n/g, "\n");
            p = h.createTextRange();
            p.moveToBookmark(n.getBookmark());
            j = h.createTextRange();
            j.collapse(false);
            if (p.compareEndPoints("StartToEnd", j) > -1) {
              o = i = l;
            } else {
              o = -p.moveStart("character", -l);
              o += m.slice(0, o).split("\n").length - 1;
              if (p.compareEndPoints("EndToEnd", j) > -1) {
                i = l;
              } else {
                i = -p.moveEnd("character", -l);
                i += m.slice(0, i).split("\n").length - 1;
              }
            }
          }
        } catch (k) {}
      }
      return { selectionStart: o, selectionEnd: i };
    },
    _getInputTargetSelection: function (h) {
      var m = this.get_text();
      var l = { startIndex: 0, length: 0 };
      if (!this.get_autoCompleteSeparator()) {
        l.length = m.length;
        return l;
      }
      if (h === 0) {
        return l;
      }
      if (h == m.length) {
        l.startIndex = m.length;
        return l;
      }
      var i = this._getSurroundingSeparatorIndices(h);
      var k = i.before;
      var j = i.after;
      if (j == h + 1) {
        l.startIndex = j - 1;
        return l;
      }
      if (k == h) {
        l.startIndex = h;
        return l;
      }
      l.startIndex = k;
      l.length = j - k;
      if (i.last == j) {
        l.length--;
      }
      return l;
    },
    _getSurroundingSeparatorIndices: function (j) {
      var m = this.get_text();
      var h = this.get_autoCompleteSeparator();
      var l = new RegExp("\\s*[" + h + "]\\s*", "gi");
      var k = 0;
      var i = 0;
      while (l.exec(m) && l.lastIndex <= j) {
        k = l.lastIndex;
      }
      i = l.lastIndex > 0 ? l.lastIndex : m.length;
      return { before: k, after: i, last: l.lastIndex };
    },
    _getTrimStartingSpaces: function () {
      return (
        this._lodIsAutomatic ||
        (this.get_autoCompleteSeparator() !== null &&
          !this.get_enableLoadOnDemand())
      );
    },
    _getRelatedTarget: function (i) {
      var k = i.toElement || i.relatedTarget || i.fromElement;
      if (!k) {
        return null;
      }
      try {
        var h = k.tagName;
      } catch (j) {
        k = null;
      }
      return k;
    },
    _getLastSeparator: function (i) {
      if (!this.get_autoCompleteSeparator()) {
        return null;
      }
      var h = this._getLastSeparatorIndex(i);
      return i.charAt(h);
    },
    _getLastSeparatorIndex: function (n) {
      var l = -1;
      if (!this.get_autoCompleteSeparator()) {
        return l;
      }
      for (var k = 0, m = this.get_autoCompleteSeparator().length; k < m; k++) {
        var j = this.get_autoCompleteSeparator().charAt(k);
        var h = n.lastIndexOf(j);
        if (h > l && !this._checkIsThisPartOfWord(h, j)) {
          l = h;
        }
      }
      return l;
    },
    _highlightFirstMatch: function () {
      var h = this._findItemToSelect();
      if (h && h.get_enabled() && !h.get_isSeparator()) {
        h.highlight();
      }
    },
    _toggleExpandedState: function (i) {
      var h = a(this.get_wrapper());
      h.toggleClass("rcbExpanded", i);
    },
    _initRightToLeft: function () {
      var i = this,
        h = a(i.get_element());
      this._rightToLeft = true;
      if (this._skin) {
        this.get_element().className = String.format(
          "{0} RadComboBox_rtl RadComboBox_{1}_rtl",
          this.get_element().className,
          this._skin
        );
        this.get_dropDownElement().className = String.format(
          "{0} RadComboBoxDropDown_rtl RadComboBoxDropDown_{1}_rtl",
          this.get_dropDownElement().className,
          this._skin
        );
      }
      if (h.find(".rcbInner").length !== 0) {
        return;
      }
      if (this.get_imageDomElement()) {
        if (
          Sys.UI.DomElement.containsCssClass(
            this.get_imageDomElement().parentNode,
            "rcbArrowCellRight"
          )
        ) {
          this._replaceCssClass(
            this.get_imageDomElement().parentNode,
            "rcbArrowCellRight",
            "rcbArrowCellLeft"
          );
          this.get_inputDomElement().parentNode.className =
            "rcbInputCell rcbInputCellRight";
        } else {
          this._replaceCssClass(
            this.get_imageDomElement().parentNode,
            "rcbArrowCellLeft",
            "rcbArrowCellRight"
          );
          this.get_inputDomElement().parentNode.className =
            "rcbInputCell rcbInputCellLeft";
        }
      }
    },
    _logInserted: function (h) {
      if (
        !h.get_parent()._childControlsCreated ||
        !this._enableClientStatePersistence
      ) {
        return;
      }
      this._log.logInsert(h);
    },
    _onDocumentClick: function (i) {
      if (!i) {
        i = event;
      }
      var j = i.target || i.srcElement;
      while (j.nodeType !== 9) {
        if (
          !j.parentNode ||
          j == this.get_element() ||
          j == this.get_dropDownElement()
        ) {
          return;
        }
        j = j.parentNode;
      }
      if (this._focused) {
        this._raiseClientBlur(i);
        this._selectItemOnBlur(i);
        if (this._shouldPostbackOnChange() && this._checkBoxes) {
          if (this.raise_textChange(this, i) === true) {
            return;
          }
          var h = { Command: "TextChanged" };
          this.postback(h);
        }
        this._applyEmptyMessage();
        this._focused = false;
      }
      if (this.get_dropDownVisible() && this.get_closeDropDownOnBlur()) {
        this._hideDropDown(i);
      }
    },
    _onFocus: function (h) {
      if (this._focused) {
        return;
      }
      if (
        this.get_allowCustomText() ||
        (this.get_markFirstMatch() && !this.get_enableLoadOnDemand())
      ) {
        this._ensureChildControls();
      }
      var i = this.get_emptyMessage(),
        j = this.get_inputDomElement();
      if (i && i == this.get_text()) {
        this._suppressChange = true;
        if (document.documentMode === 8) {
          j.getClientRects();
        }
        j.value = this._text;
        if (document.documentMode !== 8) {
          j.getClientRects();
        }
        g(j, e);
        d(j, f);
        this._suppressChange = false;
      }
      if (this.get_enableAriaSupport() && this.get_selectedItem()) {
        j.select();
      }
      this._view.focus(h);
      if (!h && typeof event != "undefined") {
        h = event;
      }
      this._focused = true;
      this._clickedAfterFocus = false;
      this.raise_onClientFocus(h);
      return true;
    },
    _onImageClick: function (h) {
      if (this.get_dropDownVisible()) {
        this.get_inputDomElement().focus();
      }
      if (this._enabled && $telerik.isIE && this._lastTextSelectionParams) {
        this.selectText(
          this._lastTextSelectionParams.startIndex,
          this._lastTextSelectionParams.length
        );
      }
      if (this._enabled) {
        this._toggleDropDown(h);
      }
    },
    _onInputCellClick: function (i) {
      if (!this._enabled) {
        return;
      }
      if (this.get_text() !== this.get_emptyMessage()) {
        var h = this._getInputCursorPosition();
        var k = this._getInputTargetSelection(h);
        var j = false;
        if (this.get_autoCompleteSeparator()) {
          var l = this._getInputSelectionRange();
          if (l.start == l.end) {
            j = true;
          }
        } else {
          if (!this._clickedAfterFocus) {
            j = true;
          }
        }
        if (!this._clickedAfterFocus) {
          this._clickedAfterFocus = true;
        }
        if ($telerik.isIE && this._clickedAfterFocus) {
          this._lastTextSelectionParams = null;
        }
        if ($telerik.isIE && j) {
          this._lastTextSelectionParams = {
            startIndex: k.startIndex,
            length: k.length,
          };
        }
        if (j) {
          this.selectText(k.startIndex, k.length);
        }
      }
      if (!this.get_dropDownVisible() && this._showDropDownOnTextboxClick) {
        this._showDropDown(i);
      }
      return true;
    },
    _onInputChange: function (h) {
      var j = this.get_inputDomElement(),
        k = this._text,
        o,
        i;
      if (this._escKeyPressed) {
        if (this.get_enableLoadOnDemand()) {
          var n = this.get_selectedItem();
          if (n === null && this.findItemByText(this._filterText)) {
            k = this._filterText;
          }
        }
        j.value = k;
        this._escKeyPressed = false;
        return;
      }
      (o = this.get_text()),
        (i = this._lodIsAutomatic
          ? this.getLastWord(o, this._getTrimStartingSpaces())
          : o);
      if (!$telerik.isIE || this._updateFilterText) {
        this._filterText = i;
      }
      if ($telerik.isIE) {
        this._updateFilterText = false;
      }
      if (!this.get_emptyMessage() || o != this.get_emptyMessage()) {
        this._ensureChildControls();
        this._text = o;
      }
      this.set_value("");
      if (!this._suppressChange) {
        g(j, e);
        d(j, f);
      }
      this.get_element().value = this._text;
      this.updateClientState();
      if (!this._suppressChange) {
        var m = this;
        if (
          this.get_enableLoadOnDemand() &&
          this._filterText.length >= this._minFilterLength
        ) {
          if (this._requestTimeoutID > 0) {
            window.clearTimeout(this._requestTimeoutID);
            this._requestTimeoutID = 0;
          }
          if (!this.get_dropDownVisible()) {
            this._skipLoadingItems = true;
            this.showDropDown();
          }
          if ($telerik.isIE && h) {
            var l = h.keyCode || h.which;
            if (l != c.Keys.Down && l != c.Keys.Up) {
              this._requestTimeoutID = window.setTimeout(function () {
                if (m._disposed) {
                  return;
                }
                m.requestItems(m._filterText, false);
              }, m.get_itemRequestTimeout());
            }
          } else {
            this._requestTimeoutID = window.setTimeout(function () {
              if (m._disposed) {
                return;
              }
              m.requestItems(m._filterText, false);
            }, m.get_itemRequestTimeout());
          }
          return;
        }
        if (
          this.get_filter() == c.RadComboBoxFilter.None &&
          (this._shouldHighlight() || m._filterText === "")
        ) {
          if ($telerik.isSafari) {
            setTimeout(function () {
              m.highlightMatches();
            }, 0);
          } else {
            this.highlightMatches();
          }
        } else {
          this.highlightAllMatches(this.get_text());
        }
      }
    },
    _onChangeHelper: function (h) {
      if (!this._disposed) {
        var i = this.get_text();
        clearTimeout(this._keyUpTimeOutID);
        if (this._cachedText != i) {
          this._cachedText = i;
          this._onInputChange(h);
        }
      }
    },
    _onWindowUnload: function () {
      this._disposeChildElements = false;
    },
    _appendTextAfterLastSeparator: function (j) {
      var h = this.get_text();
      var i = this._getLastSeparatorIndex(h);
      var k = h.substring(0, i + 1) + j;
      this.set_text(k);
    },
    _raiseClientBlur: function (h) {
      if (this._focused) {
        this._view.blur();
        this.raise_onClientBlur(h);
      }
    },
    _replaceCssClass: function (h, j, i) {
      h.className = h.className.replace(j, i);
    },
    _setFirstSelectedItem: function () {
      var h = this._findItemToSelect();
      if (h && !h.get_isSeparator()) {
        this.set_selectedItem(h);
      }
    },
    _shouldPostbackOnChange: function () {
      var h = this.get_originalText(),
        i;
      if (h == this.get_emptyMessage()) {
        h = "";
      }
      if (
        this.get_checkBoxes() &&
        this._checkedItemsTexts == c.RadComboBoxCheckedItemsTexts.FitInInput
      ) {
        i = h != this._getTextWithCheckBoxes();
      } else {
        i = h != this.get_text();
      }
      return i;
    },
    add_onClientKeyPressing: function (h) {
      this.get_events().addHandler("keyPressing", h);
    },
    clearItems: function () {
      this.get_items().clear();
      this._itemData = null;
    },
    disable: function () {
      this._view.disable();
      this.set_enabled(false);
      var j;
      if (this.get_simpleRendering()) {
        j = this.get_selectElement();
      } else {
        j = this.get_inputDomElement();
      }
      j.setAttribute("disabled", "disabled");
      this.disableEvents();
      var k = this.get_items().get_count();
      if (this.get_enableAriaSupport()) {
        c.RadComboBox._toggleAttribute(
          this.get_inputDomElement(),
          "aria-disabled",
          true,
          true
        );
      }
      for (var h = 0; h < k; h++) {
        this._children.getItem(h).disable();
      }
    },
    disableEvents: function () {
      this._fireEvents = false;
    },
    enable: function () {
      var j;
      if (this.get_simpleRendering()) {
        j = this.get_selectElement();
      } else {
        j = this.get_inputDomElement();
      }
      j.removeAttribute("disabled");
      this._view.enable();
      if (this.get_checkAllCheckBox()) {
        this.enableCheckAllCheckBox();
      }
      this.set_enabled(true);
      this.enableEvents();
      var k = this.get_items().get_count();
      if (this.get_enableAriaSupport()) {
        c.RadComboBox._toggleAttribute(
          this.get_inputDomElement(),
          "aria-disabled",
          false,
          true
        );
      }
      for (var h = 0; h < k; h++) {
        this._children.getItem(h).enable();
      }
    },
    enableEvents: function () {
      this._fireEvents = true;
    },
    findItemByText: function (l) {
      var j = this.get_items();
      var k = j.get_count();
      for (var h = 0; h < k; h++) {
        if (j.getItem(h).get_text() == l) {
          return j.getItem(h);
        }
      }
      return null;
    },
    findItemByValue: function (l) {
      if (l !== 0 && !l) {
        return null;
      }
      var j = this.get_items();
      var k = j.get_count();
      for (var h = 0; h < k; h++) {
        if (j.getItem(h).get_value() == l) {
          return j.getItem(h);
        }
      }
      return null;
    },
    get_allowCustomText: function () {
      return this._allowCustomText;
    },
    get_causesValidation: function () {
      return this._causesValidation;
    },
    get_emptyMessage: function () {
      return this._emptyMessage;
    },
    get_enabled: function () {
      return this._enabled;
    },
    get_highlightTemplatedItems: function () {
      return this._highlightTemplatedItems;
    },
    get_imageDomElement: function () {
      if (!this._imageDomElement) {
        this._imageDomElement = this._getChildElement("Arrow");
      }
      return this._imageDomElement;
    },
    get_inputDomElement: function () {
      if (!this._inputDomElement) {
        this._inputDomElement = this._getChildElement("Input");
      }
      return this._inputDomElement;
    },
    get_isTemplated: function () {
      return this._isTemplated;
    },
    get_items: function () {
      return this._getChildren();
    },
    get_lastWord: function () {
      var h = this.getLastWord(this.get_text());
      return h;
    },
    get_originalText: function () {
      return this._originalText;
    },
    get_readOnly: function () {
      return (
        !(
          this.get_allowCustomText() ||
          this.get_markFirstMatch() ||
          this.get_enableLoadOnDemand()
        ) && this.get_filter() == c.RadComboBoxFilter.None
      );
    },
    get_text: function () {
      if (this.get_simpleRendering()) {
        return this._text;
      } else {
        return this.get_inputDomElement().value;
      }
    },
    get_textWithoutEmptyMessage: function () {
      var h = this.get_inputDomElement();
      if (h.value === this.get_emptyMessage() && a(h).hasClass(e)) {
        return "";
      }
      return h.value;
    },
    get_value: function () {
      return this._value;
    },
    get_visibleItems: function () {
      var l = [];
      var h = this._getChildren().get_count();
      for (var j = 0; j < h; j++) {
        var k = this._getChildren().getItem(j);
        if (k.get_visible()) {
          Array.add(l, k);
        }
      }
      return l;
    },
    getLastWord: function (j, k) {
      var h = -1;
      if (this.get_autoCompleteSeparator() !== null) {
        h = this._getLastSeparatorIndex(j);
      }
      var i = j.substring(h + 1, j.length);
      if (k) {
        i = i.replace(/^ +/, "");
      }
      return i;
    },
    get_checkBoxes: function () {
      return this._checkBoxes;
    },
    postback: function (h) {
      if (this._checkBoxes && h.Command == "Select") {
        return;
      }
      if (!this._postBackReference) {
        return;
      }
      var i = this._postBackReference.replace("arguments", b.serialize(h));
      if (c.RadComboBox.isIEDocumentMode8() || $telerik.isIE9Mode) {
        this.get_element().focus();
      }
      eval(i);
    },
    repaint: function () {
      var h = this.get_view();
      if (h) {
        h.repaint();
      }
    },
    saveClientState: function () {
      var i = this._log._logEntries;
      var h = {
        logEntries: i,
        value: this._value,
        text: this._text,
        enabled: this._enabled,
        checkedIndices: this._checkedIndices,
        checkedItemsTextOverflows: this._checkedItemsTextOverflows,
      };
      if (this._addEmptyMessageToClientState) {
        h.emptyMessage = this.get_emptyMessage();
        this._addEmptyMessageToClientState = false;
      }
      return b.serialize(h);
    },
    selectText: function (i, h) {
      if (!this.get_enableTextSelection()) {
        return;
      }
      this._selectText(i, h);
    },
    _selectText: function (j, i) {
      if (!this.get_enableLoadOnDemand() && this.get_readOnly()) {
        return;
      }
      if (this.get_inputDomElement().setSelectionRange) {
        this.get_inputDomElement().setSelectionRange(j, j + i);
      } else {
        var k = this.get_inputDomElement().createTextRange();
        k.moveEnd("sentence", -100000);
        if (j === 0 && i === 0) {
          k.collapse(true);
          return;
        }
        k.moveStart("character", j);
        k.moveEnd("character", i);
        try {
          k.select();
        } catch (h) {}
      }
    },
    set_allowCustomText: function (h) {
      this._allowCustomText = h;
      this.repaint();
    },
    set_causesValidation: function (h) {
      this._causesValidation = h;
    },
    set_emptyMessage: function (h) {
      if (this._emptyMessage !== h) {
        this._emptyMessage = h;
      }
      if (this._enableClientStatePersistence) {
        this._addEmptyMessageToClientState = true;
      }
      this._applyEmptyMessage();
    },
    set_enabled: function (h) {
      this._enabled = h;
      this.updateClientState();
    },
    set_highlightTemplatedItems: function (h) {
      this._highlightTemplatedItems = h;
    },
    set_isTemplated: function (h) {
      this._isTemplated = h;
    },
    get_clientTemplate: function () {
      return this._clientTemplate;
    },
    set_clientTemplate: function (h) {
      this._clientTemplate = h;
    },
    set_itemData: function (h) {
      this._itemData = h;
    },
    set_items: function (h) {
      this._children = h;
    },
    set_originalText: function (h) {
      this._originalText = h;
    },
    set_text: function (k) {
      k = c.RadComboBox.htmlDecode(k);
      this.get_element().value = k;
      this._suppressChange = true;
      if (!this.get_simpleRendering()) {
        var j = this.get_inputDomElement();
        j.value = k;
        g(j, e);
        d(j, f);
        this.set_value("");
        var i;
        if (j.fireEvent && document.createEventObject) {
          i = document.createEventObject();
          j.fireEvent("onchange", i);
        } else {
          if (j.dispatchEvent) {
            var h = true;
            i = document.createEvent("HTMLEvents");
            i.initEvent("change", h, true);
            j.dispatchEvent(i);
          }
        }
      }
      this._suppressChange = false;
      this._ensureChildControls();
      this._text = k;
      this._cachedText = k;
      this.updateClientState();
    },
    set_value: function (h) {
      this._value = h;
      this.updateClientState();
    },
    get_expandDirection: function () {
      return this._expandDirection;
    },
    set_expandDirection: function (h) {
      this._expandDirection = h;
      if (this._dropDown) {
        this._dropDown.set_direction(h);
      }
    },
    get_localization: function () {
      return this._localization;
    },
    set_localization: function (h) {
      this._localization = b.deserialize(h);
    },
    set_clientDataSource: function (h) {
      this._reinitializeClientDataSource(h);
    },
    get_tableElement: function () {
      return this.get_wrapper();
    },
    get_view: function () {
      return this._view;
    },
    get_wrapper: function () {
      return this.get_view().get_wrapper();
    },
  };
  a.registerControlProperties(c.RadComboBox, {
    autoCompleteSeparator: null,
    appendItems: false,
    endOfItems: false,
    enableLoadOnDemand: false,
    closeDropDownOnBlur: true,
    changeText: true,
    enableTextSelection: true,
    dropDownVisible: false,
    highlightedItem: null,
    filter: 0,
    clientDataString: null,
    isCaseSensitive: false,
    itemRequestTimeout: 300,
    showMoreMessage: "",
    errorMessage: "CallBack Error!",
    loadingMessage: "Loading...",
    offsetX: 0,
    offsetY: 0,
    enableAriaSupport: false,
    collapseDelay: 0,
    expandDelay: 0,
  });
  a.registerControlEvents(c.RadComboBox, [
    "load",
    "keyPressing",
    "textChange",
    "itemsRequestFailed",
    "selectedIndexChanging",
    "selectedIndexChanged",
    "itemsRequesting",
    "itemsRequested",
    "itemDataBound",
    "dropDownOpening",
    "dropDownOpened",
    "dropDownClosing",
    "dropDownClosed",
    "templateDataBound",
    "onClientFocus",
    "onClientBlur",
    "itemChecking",
    "itemChecked",
    "checkAllChecking",
    "checkAllChecked",
  ]);
  c.RadComboBox._preInitialize = function (j) {
    var i = $get(j);
    var h = "inline-block";
    if ($telerik.isIE7) {
      h = "inline";
    }
    i.style.display = h;
  };
  c.RadComboBox.registerClass(
    "Telerik.Web.UI.RadComboBox",
    c.ControlItemContainer
  );
  c.RadComboBox.ViewFactory = {
    GetView: function (i) {
      var j = i._renderMode,
        h = c.RadComboBox.Views;
      if (j === c.RenderMode.Classic) {
        return new h.Classic(i);
      } else {
        if (j === c.RenderMode.Lite) {
          return new h.Lite(i);
        } else {
          if (j === c.RenderMode.Native) {
            return new h.Native(i);
          }
        }
      }
    },
  };
  c.RadComboBox.makeEventHandler = function (h) {
    (function () {
      var j = {};
      a.extend(h, {
        observe: function (l, k) {
          a.each(l, function (m, n) {
            i(m, n, k);
          });
        },
        trigger: function () {
          var k = Array.prototype.slice.call(arguments),
            l = k.shift(),
            m = j[l];
          if (a.type(m) === "array") {
            for (var n = 0; n < m.length; n++) {
              m[n].func.apply(m[n].context, k);
            }
          }
        },
        disposeEvents: function () {
          for (var k in j) {
            delete j[k];
          }
        },
      });
      function i(l, m, k) {
        var n = j[l] || [];
        n.push({ func: m, context: k });
        j[l] = n;
      }
    })();
  };
})($telerik.$);
(function () {
  var a = $telerik.$;
  var b = Telerik.Web.UI;
  b.RadComboBox._toggleAttribute = function (f, d, e, g) {
    var c = a(f);
    if (g) {
      c.attr(d, e);
    } else {
      c.removeAttr(d);
    }
  };
  b.RadComboBox._toggleActiveDescendantAttributes = function (c, d, e) {
    var f = a("#" + d + "_Input").get(0);
    d += "_selected_item";
    b.RadComboBox._toggleAttribute(f, "aria-activedescendant", d, false);
    b.RadComboBox._toggleAttribute(c, "aria-selected", e, e);
    b.RadComboBox._toggleAttribute(c, "id", d, e);
    b.RadComboBox._toggleAttribute(f, "aria-activedescendant", d, true);
  };
  b.RadComboBox._cancelEvent = function (c) {
    c.preventDefault();
    return false;
  };
  b.RadComboBox._createChildControls = function (e, j) {
    var h = e.get_itemData();
    if (!h) {
      return;
    }
    var c;
    var k;
    var m = 0;
    if (e.get_simpleRendering()) {
      c = a(e.get_selectElement()).find("option").toArray();
      k = c.length;
    } else {
      var d = e.get_childListElement();
      if (!d) {
        return;
      }
      c = $telerik.getChildrenByTagName(e.get_childListElement(), "li");
      k = c.length;
      if (k > 0 && c[0].className == "rcbLoading") {
        k = k - 1;
        m = 1;
      }
    }
    for (var f = m, l = c.length; f < l; f++) {
      var g;
      if (a(c[f]).hasClass("rcbDefaultItem")) {
        g = new b.RadComboBoxDefaultItem();
        g.set_parent(e);
        g._initialize(h[f - m], c[f]);
        e._defaultItem = g;
        continue;
      } else {
        g = new b.RadComboBoxItem();
        j.add(g);
        g._initialize(h[f - m], c[f]);
      }
    }
  };
  b.RadComboBox._fireValuePropertyChangeEvent = function (c) {
    var d = document.createEventObject();
    d.propertyName = "value";
    c.fireEvent("onpropertychange", d);
  };
  b.RadComboBox._getIsInIFrame = function () {
    return window.top != window;
  };
  b.RadComboBox._getLocation = function (c) {
    var f = $telerik.getLocation(c);
    if (
      ($telerik.isOpera && Sys.Browser.version < 9.800000000000001) ||
      $telerik.isSafari
    ) {
      var d = c.parentNode;
      while (
        d &&
        d.tagName.toUpperCase() != "BODY" &&
        d.tagName.toUpperCase() != "HTML"
      ) {
        var e = a(d).css("position");
        if (e == "relative" || e == "absolute") {
          f.x += $telerik.getCorrectScrollLeft(d);
          f.y += d.scrollTop;
        }
        d = d.parentNode;
      }
    }
    return f;
  };
  b.RadComboBox._getNeedsFakeInput = function () {
    return $telerik.isIE8 && b.RadComboBox._getIsInIFrame();
  };
  b.RadComboBox._getScrollBarWidth = function () {
    if (b.RadComboBox._scrollbarWidth) {
      return b.RadComboBox._scrollbarWidth;
    }
    var e,
      c = 0;
    var f = document.createElement("div");
    f.style.position = "absolute";
    f.style.top = "-1000px";
    f.style.left = "-1000px";
    f.style.width = "100px";
    f.style.height = "50px";
    f.style.overflow = "hidden";
    var d = document.createElement("div");
    d.style.width = "100%";
    d.style.height = "200px";
    f.appendChild(d);
    document.body.appendChild(f);
    var g = d.offsetWidth;
    f.style.overflow = "auto";
    var h = d.offsetWidth;
    b.RadComboBox._scrollbarWidth = g - h;
    if (b.RadComboBox._scrollbarWidth <= 0) {
      d.style.width = "300px";
      e = f.offsetWidth;
      c = f.clientWidth;
      b.RadComboBox._scrollbarWidth = e - c;
    }
    if (b.RadComboBox._scrollbarWidth <= 0) {
      b.RadComboBox._scrollbarWidth = 16;
    }
    document.body.removeChild(document.body.lastChild);
    return b.RadComboBox._scrollbarWidth;
  };
  b.RadComboBox.htmlDecode = function (c) {
    return b.RadComboBox.replace(c, {
      "&lt;": "<",
      "&gt;": ">",
      "&quot;": '"',
      "&amp;": "&",
    });
  };
  b.RadComboBox.htmlEncode = function (c) {
    return b.RadComboBox.replace(c, { "&": "&amp;", "<": "&lt;", ">": "&gt;" });
  };
  b.RadComboBox.isIEDocumentMode8 = function () {
    return document.documentMode && document.documentMode == 8;
  };
  b.RadComboBox.replace = function (e, d) {
    for (var c in d) {
      e = e.replace(new RegExp(c, "g"), d[c]);
    }
    return e;
  };
  b.RadComboBox.ComboBoxes = [];
  b.RadComboBox._initializeItemConstants = function () {
    var c = b.RadComboBoxItem;
    (c.STRING_EM_START = "<em>"),
      (c.STRING_EM_START_HTML_ENCODED = b.RadComboBox.htmlEncode(
        c.STRING_EM_START
      )),
      (c.REGEX_EM_START_HTML_ENCODED = new RegExp(
        c.STRING_EM_START_HTML_ENCODED,
        "g"
      )),
      (c.STRING_EM_END = "</em>"),
      (c.STRING_EM_END_HTML_ENCODED = b.RadComboBox.htmlEncode(
        c.STRING_EM_END
      )),
      (c.STRING_EM_END_HTML_ENCODED_REGEX_ESCAPED = c._regExEscape(
        c.STRING_EM_END_HTML_ENCODED
      )),
      (c.REGEX_EM_END_HTML_ENCODED = new RegExp(
        c.STRING_EM_END_HTML_ENCODED_REGEX_ESCAPED,
        "g"
      ));
  };
  b.RadComboBox._initializeItemConstants();
})();
(function () {
  var b = Telerik.Web.UI,
    a = $telerik.$;
  b.RadComboBox.prototype.raise_itemsRequested = function (f, c) {
    var d = new b.RadComboBoxRequestEventArgs(f, c);
    this.raiseEvent("itemsRequested", d);
  };
  b.RadComboBox.prototype.raise_itemsRequestFailed = function (g, d, c) {
    var f = new b.RadComboBoxItemsRequestFailedEventArgs(g, d, c);
    this.raiseEvent("itemsRequestFailed", f);
    return f.get_cancel();
  };
  b.RadComboBox.prototype.raise_dropDownClosed = function (c) {
    var d = new b.RadComboBoxEventArgs(c);
    this.raiseEvent("dropDownClosed", d);
  };
  b.RadComboBox.prototype.raise_dropDownClosing = function (c) {
    var d = new b.RadComboBoxCancelEventArgs(c);
    this.raiseEvent("dropDownClosing", d);
    return d.get_cancel();
  };
  b.RadComboBox.prototype.raise_dropDownOpened = function (c) {
    var d = new b.RadComboBoxEventArgs(c);
    this.raiseEvent("dropDownOpened", d);
  };
  b.RadComboBox.prototype.raise_dropDownOpening = function (c) {
    var d = new b.RadComboBoxCancelEventArgs(c);
    this.raiseEvent("dropDownOpening", d);
    return d.get_cancel();
  };
  b.RadComboBox.prototype.raise_keyPressing = function (c) {
    this.raiseEvent("keyPressing", c);
  };
  b.RadComboBox.prototype.raise_onClientBlur = function (c) {
    var d = new b.RadComboBoxEventArgs(c);
    this.raiseEvent("onClientBlur", d);
  };
  b.RadComboBox.prototype.raise_onClientFocus = function (c) {
    var d = new b.RadComboBoxEventArgs(c);
    this.raiseEvent("onClientFocus", d);
  };
  b.RadComboBox.prototype.raise_onClientKeyPressing = function (c) {
    var d = new b.RadComboBoxEventArgs(c);
    this.raiseEvent("keyPressing", d);
  };
  b.RadComboBox.prototype.raise_onItemChecking = function (f, c) {
    var d = new b.RadComboBoxItemCancelEventArgs(f, c);
    this.raiseEvent("itemChecking", d);
    return d.get_cancel();
  };
  b.RadComboBox.prototype.raise_onItemChecked = function (f, c) {
    var d = new b.RadComboBoxItemEventArgs(f, c);
    this.raiseEvent("itemChecked", d);
  };
  b.RadComboBox.prototype.raise_onCheckAllChecking = function (c) {
    var d = a.extendEventArgs(new Sys.CancelEventArgs(), c);
    return a.raiseCancellableControlEvent(this, "checkAllChecking", d);
  };
  b.RadComboBox.prototype.raise_onCheckAllChecked = function (c) {
    var d = a.extendEventArgs(new Sys.EventArgs(), c);
    a.raiseControlEvent(this, "checkAllChecked", d);
  };
  b.RadComboBox.prototype.raise_selectedIndexChanged = function (f, c) {
    var d = new b.RadComboBoxItemEventArgs(f, c);
    if (this.get_enableLoadOnDemand() && $telerik.isIE && f) {
      this._cachedText = f.get_text();
    }
    this.raiseEvent("selectedIndexChanged", d);
  };
  b.RadComboBox.prototype.raise_selectedIndexChanging = function (f, c) {
    var d = new b.RadComboBoxItemCancelEventArgs(f, c);
    this.raiseEvent("selectedIndexChanging", d);
    return d.get_cancel();
  };
  b.RadComboBox.prototype.raise_textChange = function (c, d) {
    var f = new b.RadComboBoxCancelEventArgs(d);
    this.raiseEvent("textChange", f);
    return f.get_cancel();
  };
  b.RadComboBox.prototype.remove_onClientKeyPressing = function (c) {
    this.get_events().removeHandler("keyPressing", c);
  };
})();
(function () {
  var a = $telerik.$,
    c = Telerik.Web.UI,
    b = Sys.Serialization.JavaScriptSerializer;
  c.RadComboBox.prototype.get_checkedIndices = function () {
    return this._checkedIndices;
  };
  c.RadComboBox.prototype.get_checkedItems = function () {
    var h = [],
      e,
      f = this.get_items();
    for (var d = 0, g = f.get_count(); d < g; d++) {
      e = this.get_items().getItem(d);
      if (e !== null && e.get_checked()) {
        Array.add(h, e);
      }
    }
    return h;
  };
  c.RadComboBox.prototype.get_checkAllCheckBoxDivElement = function () {
    if (!this._checkAllElement) {
      this._checkAllElement = a(this.get_dropDownElement())
        .find(".rcbCheckAllItems")
        .get(0);
    }
    return this._checkAllElement;
  };
  c.RadComboBox.prototype.get_checkAllCheckBox = function () {
    if (!this._checkAllCheckBoxElement) {
      this._checkAllCheckBoxElement = a(this.get_checkAllCheckBoxDivElement())
        .find(".rcbCheckAllItemsCheckBox")
        .get(0);
    }
    return this._checkAllCheckBoxElement;
  };
  c.RadComboBox.prototype.enableCheckAllCheckBox = function () {
    a(this.get_checkAllCheckBox()).prop("disabled", false);
  };
  c.RadComboBox.prototype._initializeCheckBoxes = function () {
    this._updateCheckedIndices(true);
    var e = this,
      d = a(this.get_checkAllCheckBoxDivElement());
    if (!this.get_isTemplated()) {
      a(this.get_childListElement()).on("click", "label", function (g) {
        g.stopPropagation();
        e._onCheckBoxCheck(g);
      });
    }
    a(this.get_dropDownElement()).delegate(".rcbCheckBox", "click", function (
      g
    ) {
      e._onCheckBoxCheck(g);
    });
    d.bind("click", function (g) {
      e._onCheckAllItemsCheck(g);
    })
      .bind("mouseover", function (g) {
        e._onCheckAllHover(g);
      })
      .bind("mouseout", function (g) {
        e._onCheckAllOut(g);
      });
    this._allChecked =
      this.get_checkedItems().length == this.get_items().get_count();
    if (this._checkedItemsTexts == c.RadComboBoxCheckedItemsTexts.FitInInput) {
      this._cachedInputWidth = this.get_inputDomElement().offsetWidth;
      var f = this.get_text();
      if (f && f != this._emptyMessage) {
        this._updateComboBoxText();
      }
    }
    if (this._checkAllElement && this.get_enableAriaSupport()) {
      d.find(".rcbCheckAllItemsCheckBox")[0].setAttribute("role", "checkbox");
      d.attr("id", this.get_id() + "_checkAll");
      d.attr("role", "listbox");
    }
  };
  c.RadComboBox.prototype._performCheck = function (g, f) {
    if (this.raise_onItemChecking(g, f)) {
      f.preventDefault();
      return;
    }
    g.set_checked(!g.get_checked());
    this.raise_onItemChecked(g, f);
    if (this._checkAllElement) {
      this._updateCheckAllState();
    }
    if (this._postBackOnCheck) {
      var d = { Command: "Check", Index: g.get_index() };
      this.postback(d);
    }
  };
  c.RadComboBox.prototype._onCheckBoxCheck = function (d) {
    var g = $telerik.getTouchTarget(d),
      h = this._findNearestItem(g),
      f = h || this._extractItemFromDomElement(g);
    if (g.nodeName == "LABEL") {
      d.preventDefault();
    }
    this._performCheck(f, d);
  };
  c.RadComboBox.prototype._onCheckAllItemsCheck = function (h) {
    var m = $telerik.getTouchTarget(h),
      k = this.get_items(),
      d = { checked: this._allChecked, domEvent: h };
    if (m.nodeName == "LABEL") {
      h.preventDefault();
    }
    if (this.raise_onCheckAllChecking(d)) {
      h.preventDefault();
      return;
    }
    this._checkedIndices = [];
    this._allChecked = !this._allChecked;
    for (var j = 0, l = k.get_count(); j < l; j++) {
      var g = this.get_items().getItem(j);
      if (g.get_enabled()) {
        g._setChecked(this._allChecked);
      }
    }
    this._updateCheckAllState();
    this._updateCheckedIndices();
    this._updateComboBoxText();
    d.checked = this._allChecked;
    this.raise_onCheckAllChecked(d);
    if (this._postBackOnCheckAllCheck) {
      var f = { Command: "CheckAll", CheckAllChecked: this._allChecked };
      this.postback(f);
    }
  };
  c.RadComboBox.prototype._onCheckAllHover = function (d) {
    if (!this._enabled) {
      return;
    }
    var f = this.get_highlightedItem();
    if (f !== null) {
      f.unHighlight();
    }
    this._checkAllElement.className = "rcbCheckAllItemsHovered";
  };
  c.RadComboBox.prototype._onCheckAllOut = function (d) {
    this._checkAllElement.className = "rcbCheckAllItems";
  };
  c.RadComboBox.prototype._diposeCheckBoxes = function () {
    a(this.get_dropDownElement()).undelegate(".rcbCheckBox", "click");
    a(this.get_childListElement()).off();
    a(this.get_checkAllCheckBoxDivElement())
      .unbind("click")
      .unbind("mouseover")
      .unbind("mouseout");
    this._checkAllCheckBoxElement = null;
    this._checkAllElement = null;
  };
  c.RadComboBox.prototype._updateCheckAllState = function () {
    var e = this.get_items(),
      f = e.get_count(),
      k = true,
      h = 0,
      d = a(this.get_checkAllCheckBox());
    for (var j = 0; j < f; j++) {
      var g = e.getItem(j);
      if (g.get_enabled()) {
        if (!g.get_checked()) {
          k = false;
          break;
        }
        h++;
      }
    }
    if (h > 0 && k) {
      d.prop("checked", true);
      this._allChecked = true;
    } else {
      d.prop("checked", false);
      this._allChecked = false;
    }
  };
  c.RadComboBox.prototype._checkedItemsTextsFitInputWidth = function (d) {
    var e = document.createElement("div"),
      f;
    e.id = "checkedItemTextsDiv";
    e.style.position = "absolute";
    e.style.font = "12px Segoe UI,Arial,sans-serif";
    e.style.top = "-1000px";
    e.style.left = "-1000px";
    e.innerHTML = "";
    e.innerHTML = d;
    document.body.appendChild(e);
    f = this._cachedInputWidth > e.offsetWidth;
    document.body.removeChild(e);
    return f;
  };
  c.RadComboBox.prototype._updateComboBoxText = function () {
    if (!this._checkBoxes) {
      return;
    }
    var l = "",
      g = this.get_items(),
      h = g.get_count(),
      k = this.get_localization();
    for (var e = 0, j = this.get_checkedIndices().length; e < j; e++) {
      var f = this._children.getItem(this._checkedIndices[e]);
      l += f.get_text() + ", ";
    }
    var d = l.replace(/,$/, "");
    d = d.substring(0, d.length - 2);
    if (
      this._checkedIndices.length == h &&
      h > 0 &&
      this._checkedItemsTexts == c.RadComboBoxCheckedItemsTexts.FitInInput
    ) {
      this.set_text(k.AllItemsCheckedString);
    } else {
      if (
        this._checkedItemsTexts == c.RadComboBoxCheckedItemsTexts.FitInInput &&
        this._checkedIndices.length > 1 &&
        !this._checkedItemsTextsFitInputWidth(d)
      ) {
        this._checkedItemsTextOverflows = true;
        this.set_text(this._checkedIndices.length + " " + k.ItemsCheckedString);
      } else {
        if (h === 0 || this._checkedIndices.length === 0) {
          this.set_text("");
          this._applyEmptyMessage();
        } else {
          this._checkedItemsTextOverflows = false;
          this.set_text(d);
        }
      }
    }
  };
  c.RadComboBox.prototype._updateCheckedIndices = function (e) {
    var g = this.get_items();
    this._checkedIndices = [];
    for (var d = 0, h = g.get_count(); d < h; d++) {
      var f = this.get_items().getItem(d);
      if (f !== null && f.get_checked()) {
        this._checkedIndices[this._checkedIndices.length] = f.get_index();
      }
    }
    if (!(e && this._checkedIndices.length === 0)) {
      this._updateCheckedIndicesJson();
    }
  };
  c.RadComboBox.prototype._updateCheckedIndicesJson = function () {
    this._checkedIndicesJson = b.serialize(this._checkedIndices);
    this.updateClientState();
  };
  c.RadComboBox.prototype._registerCheckedIndex = function (d) {
    if (Array.indexOf(this._checkedIndices, d) == -1) {
      Array.add(this._checkedIndices, d);
      this._updateCheckedIndicesJson();
    }
  };
  c.RadComboBox.prototype._unregisterCheckedIndex = function (d) {
    Array.remove(this._checkedIndices, d);
    this._updateCheckedIndicesJson();
  };
  c.RadComboBox.prototype._setOriginalTextWithCheckBoxes = function () {
    if (this.get_checkBoxes()) {
      this._originalText = this._getTextWithCheckBoxes();
    }
  };
  c.RadComboBox.prototype._getTextWithCheckBoxes = function () {
    var g = "";
    if (this.get_checkBoxes()) {
      var f = this.get_checkedItems(),
        d = f.length;
      for (var e = 0; e < d; e++) {
        g += f[e].get_text() + ", ";
      }
      g = g.replace(/,$/, "");
      g = g.substring(0, g.length - 2);
    }
    return g;
  };
})();
(function () {
  var a = $telerik.$;
  var b = Telerik.Web.UI;
  b.RadComboBox.prototype.get_dropDownElement = function () {
    if (!this._dropDownElement) {
      this._dropDownElement = this._getChildElement("DropDown");
    }
    return this._dropDownElement;
  };
  b.RadComboBox.prototype.attachDropDown = function () {
    var c = this.get_dropDownElement().parentNode;
    c.parentNode.removeChild(c);
    this._view.get_wrapper().parentNode.appendChild(c);
  };
  b.RadComboBox.prototype.showDropDown = function () {
    if (this._enabled) {
      this._showDropDown(null);
    }
  };
  b.RadComboBox.prototype.hideDropDown = function () {
    this._hideDropDown(null);
  };
  b.RadComboBox.prototype.toggleDropDown = function () {
    if (this._enabled) {
      this._toggleDropDown(null);
    }
  };
  b.RadComboBox.prototype.get_childListElement = function () {
    if (!this._childListElement) {
      if (this.get_simpleRendering()) {
        this._childListElement = this.get_selectElement();
      }
      if (!this._childListElement) {
        var c = this.get_childListElementWrapper();
        this._childListElement = $telerik.getFirstChildByTagName(c, "ul", 0);
      }
    }
    return this._childListElement;
  };
  b.RadComboBox.prototype.get_childListElementWrapper = function () {
    if (!this._childListElementWrapper) {
      var d = this.get_dropDownElement();
      var c = this._getHeaderElement() ? 1 : 0;
      this._childListElementWrapper = $telerik.getFirstChildByTagName(
        d,
        "div",
        c
      );
    }
    return this._childListElementWrapper;
  };
  b.RadComboBox.prototype._initializeDropDown = function () {
    var c = this.get_childListElement();
    if (c) {
      this._onDropDownClickDelegate = Function.createDelegate(
        this,
        this._onDropDownClick
      );
      $telerik.addHandler(c, "click", this._onDropDownClickDelegate);
      this._onDropDownHoverDelegate = Function.createDelegate(
        this,
        this._onDropDownHover
      );
      $telerik.addHandler(c, "mouseover", this._onDropDownHoverDelegate);
      this._cancelDelegate = Function.createDelegate(
        this,
        b.RadComboBox._cancelEvent
      );
      $telerik.addHandler(c, "selectstart", this._cancelDelegate);
      $telerik.addHandler(c, "dragstart", this._cancelDelegate);
      this._onDropDownOutDelegate = Function.createDelegate(
        this,
        this._onDropDownOut
      );
      $telerik.addHandler(c, "mouseout", this._onDropDownOutDelegate);
      if ($telerik.isIE8 && $telerik.standardsMode) {
        c.style.position = "absolute";
        c.style.width = "100%";
      }
    }
    this._dummyHandlerDelegate = Function.createDelegate(
      this,
      this._dummyHandler
    );
    a(this.get_childListElementWrapper()).click(this._dummyHandlerDelegate);
    this._initializeDropDownAutoWidth();
  };
  b.RadComboBox.prototype._onDropDownClick = function (c) {
    if (this._checkBoxes) {
      if (a(c.target).attr("type") != "checkbox") {
        return;
      }
    }
    if (this._skipItemSelection(c, null)) {
      return;
    }
    if (!this._enabled) {
      return;
    }
    var f = this._findNearestItem(c.target);
    if (!f || !f.get_enabled() || f.get_isSeparator()) {
      return;
    }
    try {
      this.get_inputDomElement().focus();
    } catch (d) {}
    this._performSelect(f, c);
    this._hideDropDown(c);
    if (
      !this.get_isTemplated() &&
      this.get_filter() != b.RadComboBoxFilter.None &&
      c.stopPropagation
    ) {
      c.stopPropagation();
    }
  };
  b.RadComboBox.prototype._onDropDownHover = function (c) {
    if (!this._enabled || this._ajaxRequest || this._collapsing) {
      return;
    }
    var d = this._findNearestItem(c.target);
    if (!d || !d.get_enabled() || d.get_isSeparator()) {
      return;
    }
    d.highlight();
  };
  b.RadComboBox.prototype._onDropDownOut = function (c) {
    if (!this._enabled) {
      return;
    }
    if (!c) {
      c = event;
    }
    var f = this._getRelatedTarget(c);
    if (!f) {
      return;
    }
    while (f && f.nodeType !== 9) {
      if (f.parentNode == this.get_dropDownElement()) {
        return;
      }
      f = f.parentNode;
    }
    var d = this.get_highlightedItem();
    if (d) {
      d.unHighlight();
    }
  };
  b.RadComboBox.prototype._dummyHandler = function () {};
  b.RadComboBox.prototype._detachDropDownEvents = function () {
    var c = this.get_childListElement();
    if (c) {
      if (this._onDropDownClickDelegate) {
        $telerik.removeHandler(c, "click", this._onDropDownClickDelegate);
      }
      if (this._onDropDownHoverDelegate) {
        $telerik.removeHandler(c, "mouseover", this._onDropDownHoverDelegate);
      }
      if (this._onDropDownOutDelegate) {
        $telerik.removeHandler(c, "mouseout", this._onDropDownOutDelegate);
      }
      if (this._cancelDelegate) {
        $telerik.removeHandler(c, "selectstart", this._cancelDelegate);
      }
      if (this._cancelDelegate) {
        $telerik.removeHandler(c, "dragstart", this._cancelDelegate);
      }
      this._onDropDownClickDelegate = null;
      this._onDropDownHoverDelegate = null;
      this._onDropDownOutDelegate = null;
      this._cancelDelegate = null;
    }
    a(this.get_childListElementWrapper()).unbind(
      "click",
      this._dummyHandlerDelegate
    );
    this._dummyHandlerDelegate = null;
  };
  b.RadComboBox.prototype._applyZIndex = function () {
    if (this.get_simpleRendering()) {
      return;
    }
    var d = this.get_element().style.zIndex;
    var c = this.get_dropDownElement().parentNode.style.zIndex;
    if (!d) {
      d = c;
    }
    this.get_dropDownElement().parentNode.style.zIndex = d;
  };
  b.RadComboBox.prototype._resizeDropDown = function () {
    if (this._isDropDownManualResizeRequired()) {
      var f = 30;
      var c = a(this._dropDownElement);
      var d = c.find(".rcbList");
      if (d.length) {
        if (($telerik.isIE7 && !$telerik.isIE9Mode) || $telerik.isIE8) {
          f = 18;
        }
        c.css("width", "");
        if ($telerik.isIE8) {
          d.css("width", "");
        }
        if ($telerik.isIE7) {
          d.css({ width: "", position: "absolute" });
        }
        var e = d[0].offsetWidth;
        if ($telerik.isIE7) {
          d.css({ zoom: "1", position: "relative" });
        }
        c.css("width", e + f + "px");
      }
    }
  };
  b.RadComboBox.prototype._initializeDropDownAutoWidth = function () {
    if (this._dropDownAutoWidth == b.RadComboBoxDropDownAutoWidth.Enabled) {
      a(this._dropDownElement).addClass("rcbAutoWidth");
      if (!this._isDropDownManualResizeRequired()) {
        a(this._dropDownElement).addClass("rcbAutoWidthResizer");
      }
    }
  };
  b.RadComboBox.prototype._isDropDownManualResizeRequired = function () {
    if (
      this._dropDownAutoWidth == b.RadComboBoxDropDownAutoWidth.Enabled &&
      ($telerik.isIE7 || $telerik.isIE8 || $telerik.isOpera)
    ) {
      return true;
    } else {
      return false;
    }
  };
  b.RadComboBox.prototype._showDropDown = function (f) {
    var j = this;
    var d = this.get_items().get_count();
    if (this.get_enableAriaSupport()) {
      b.RadComboBox._toggleAttribute(
        this.get_inputDomElement(),
        "aria-expanded",
        true,
        true
      );
      b.RadComboBox._toggleAttribute(
        this.get_childListElement(),
        "aria-hidden",
        false,
        true
      );
    }
    if (this._firstOpeningOfDropDown) {
      this._applyZIndex();
      if (
        b.TouchScrollExtender._getNeedsScrollExtender() &&
        !this._dropDownTouchScroll &&
        this.get_childListElementWrapper()
      ) {
        this._dropDownTouchScroll = new Telerik.Web.UI.TouchScrollExtender(
          this.get_childListElementWrapper()
        );
        this._dropDownTouchScroll.initialize();
      }
      this._firstOpeningOfDropDown = false;
    }
    this._toggleExpandedState(true);
    this._highlightFirstMatch();
    if (this.raise_dropDownOpening(f) === true) {
      return;
    }
    var c = this._getAnimationContainer();
    if (!c) {
      return;
    }
    var i = this.get_text();
    if (this.get_emptyMessage() == this.get_text()) {
      i = "";
    }
    if (this.get_enableLoadOnDemand() && d === 0 && !this._skipLoadingItems) {
      if (this._lodIsAutomatic) {
        i = this.getLastWord(i, this._getTrimStartingSpaces());
      }
      if (i.length >= this._minFilterLength) {
        this.requestItems(i, false);
      }
    } else {
      if (this.get_isUsingODataSource() && d === 0) {
        this.requestItems("", true);
      }
    }
    this._skipLoadingItems = false;
    try {
      this.get_inputDomElement().focus();
    } catch (g) {}
    this._onFocus(f);
    this.set_dropDownVisible(true);
    this._dropDown.set_enableDirectionDetection(
      this.get_childListElement() ? this._enableScreenBoundaryDetection : false
    );
    var h;
    if (this.get_items().get_count() === 0) {
      h = new b.RadComboBoxItem();
      h.set_text("measuring item");
      this.get_items().add(h);
    }
    if (j._dropDown.isVisible()) {
      j._dropDown.reflow();
    } else {
      j._setTimeout(function () {
        j._dropDown.show();
      }, j.get_expandDelay());
    }
    this._resizeDropDown();
    if (h) {
      this.get_items().remove(h);
    }
    this.raise_dropDownOpened(f);
  };
  b.RadComboBox.prototype._onOpened = function () {
    if ($telerik.isIE8 && $telerik.standardsMode) {
      a(this.get_childListElement()).css("position", "relative");
    }
    this._adjustChildListElementHeight();
    if ($telerik.isIE8 && $telerik.standardsMode) {
      a(this.get_childListElement()).css("position", "absolute");
    }
    this._resizeDropDown();
  };
  b.RadComboBox.prototype._onClosed = function () {
    this.set_dropDownVisible(false);
  };
  b.RadComboBox.prototype._onReflowing = function () {
    this._dropDownScrollTop = a(this.get_childListElementWrapper()).scrollTop();
    a(this.get_childListElementWrapper()).height("");
    if ($telerik.isIE8 && $telerik.standardsMode) {
      a(this.get_childListElement()).css("position", "relative");
    }
  };
  b.RadComboBox.prototype._onReflowed = function () {
    var c = a(this._dropDown._animationContainer);
    this._adjustChildListElementHeight();
    if (!this._rightToLeft && this._enableScreenBoundaryDetection) {
      var d = this._dropDown._getAvailableSpace();
      var j = a(this.get_tableElement()).outerWidth();
      var e = c.outerWidth();
      var h = this.get_offsetX();
      var i = e - (j + d.right);
      if (i > 0) {
        var f = parseInt(c.css("left"), 10);
        var g = Math.max(f - i, f - h - (e - j));
        c.css("left", g);
      }
    }
    if ($telerik.isIE8 && $telerik.standardsMode) {
      a(this.get_childListElement()).css("position", "absolute");
    }
    a(this.get_childListElementWrapper()).scrollTop(this._dropDownScrollTop);
    this._resizeDropDown();
  };
  (b.RadComboBox.prototype._adjustChildListElementHeight = function () {
    var c = a(this._dropDownElement);
    var d = c.height(),
      f = c.find(".rcbHeader").outerHeight(true) || 0,
      e = c.find(".rcbFooter").outerHeight(true) || 0,
      g = c.find(".rcbMoreResults").outerHeight(true) || 0,
      h;
    if (d > 0) {
      h = d - (f + e + g);
      a(this.get_childListElementWrapper()).outerHeight(h);
    }
  }),
    (b.RadComboBox.prototype._hideDropDown = function (c) {
      var d = this;
      if (!this.get_dropDownVisible()) {
        return;
      }
      if (this.get_enableAriaSupport()) {
        b.RadComboBox._toggleAttribute(
          this.get_inputDomElement(),
          "aria-expanded",
          false,
          true
        );
        b.RadComboBox._toggleAttribute(
          this.get_childListElement(),
          "aria-hidden",
          true,
          true
        );
      }
      this._toggleExpandedState(false);
      if (this.raise_dropDownClosing(c) === true) {
        return;
      }
      this._collapsing = true;
      if (!this._getAnimationContainer()) {
        return;
      }
      this.set_dropDownVisible(false);
      this._setTimeout(function () {
        d._dropDown.hide();
      }, this.get_collapseDelay());
      if (this.get_filter() != b.RadComboBoxFilter.None) {
        this._removeEmTagsFromAllItems();
      }
      this.raise_dropDownClosed(c);
    });
  b.RadComboBox.prototype._toggleDropDown = function (c) {
    if (this.get_dropDownVisible()) {
      this._hideDropDown(c);
    } else {
      this._showDropDown(c);
    }
  };
  b.RadComboBox.prototype._detachDropDown = function () {
    var c = $telerik.isIE
      ? document.readyState == "complete" ||
        document.readyState == "interactive"
      : true;
    if (c && !this._isDetached) {
      var e = this._findParentForm() || document.body,
        d = this.get_dropDownElement(),
        f = d.parentNode;
      f.parentNode.removeChild(f);
      f.style.marginLeft = "0";
      e.insertBefore(f, e.firstChild);
      this._isDetached = true;
    }
  };
  b.RadComboBox.prototype._findParentForm = function () {
    var c = this.get_element();
    while (c && c.tagName && c.tagName.toLowerCase() != "form") {
      c = c.parentNode;
    }
    if (!c.tagName) {
      c = null;
    }
    return c;
  };
  (b.RadComboBox.prototype._setTimeout = function (c, d) {
    clearTimeout(this._timeoutRef);
    if (d === 0) {
      c();
    } else {
      this._timeoutRef = setTimeout(c, d);
    }
  }),
    (b.RadComboBox.prototype._skipItemSelection = function (d, f) {
      var h = d.target;
      if (h.nodeType == 3) {
        return false;
      }
      var g = h.tagName.toLowerCase();
      var c = h.className;
      if (g == "select") {
        return true;
      }
      if (g == "option") {
        return true;
      }
      if (g == "a" && (!f || c.indexOf(f) < 0)) {
        return true;
      }
      if (g == "input") {
        return true;
      }
      if (g == "textarea") {
        return true;
      }
      if (g == "button") {
        return true;
      }
      return false;
    });
})();
(function (a) {
  var b = Telerik.Web.UI;
  b.RadComboBox.prototype.get_expandAnimation = function () {
    return this._expandAnimation;
  };
  b.RadComboBox.prototype.set_expandAnimation = function (d) {
    var c = Sys.Serialization.JavaScriptSerializer.deserialize(d);
    this._expandAnimation = new b.AnimationSettings(c);
  };
  b.RadComboBox.prototype.get_collapseAnimation = function () {
    return this._collapseAnimation;
  };
  b.RadComboBox.prototype.set_collapseAnimation = function (d) {
    var c = Sys.Serialization.JavaScriptSerializer.deserialize(d);
    this._collapseAnimation = new b.AnimationSettings(c);
  };
  b.RadComboBox.prototype.get_slideDirection = function () {
    return this.get_expandDirection();
  };
  b.RadComboBox.prototype.set_slideDirection = function (c) {
    this.set_expandDirection(c);
  };
  b.RadComboBox.prototype._initializeAnimation = function () {
    this._dropDown = new b.DropDown(this._getAnimatedElement().parentNode, {
      direction: this.get_expandDirection(),
      expandAnimation: this.get_expandAnimation(),
      collapseAnimation: this.get_collapseAnimation(),
      enableOverlay: this._enableOverlay,
      enableScreenBoundaryDetection: this._enableScreenBoundaryDetection,
      anchor: this.get_tableElement(),
      width:
        this._dropDownWidth ||
        (this._dropDownAutoWidth === b.RadComboBoxDropDownAutoWidth.Enabled
          ? ""
          : "auto"),
      height: this._height || "",
      maxHeight: this._maxHeight,
      rtl: $telerik.isRightToLeft(this.get_element()),
      offsetX: this.get_offsetX(),
      offsetY: this.get_offsetY(),
    });
    this._dropDown.on(
      {
        expandAnimationStarted: this._onAnimationStarted,
        collapseAnimationStarted: this._onAnimationStarted,
        expandAnimationEnded: this._onAnimationEnded,
        collapseAnimationEnded: this._onAnimationEnded,
        opened: this._onOpened,
        closed: this._onClosed,
        reflowing: this._onReflowing,
        reflowed: this._onReflowed,
      },
      this
    );
    this._dropDown.initialize();
    this._dropDown.updateSize();
  };
  b.RadComboBox.prototype._getAnimatedElement = function () {
    if (!this._animatedElement) {
      this._animatedElement = this.get_dropDownElement();
    }
    return this._animatedElement;
  };
  b.RadComboBox.prototype._getAnimationContainer = function () {
    if (!this._animationContainer) {
      if (this.get_dropDownElement()) {
        this._animationContainer = this.get_dropDownElement().parentNode;
      }
    }
    return this._animationContainer;
  };
  b.RadComboBox.prototype._resetAnimatedElementPosition = function () {
    var c = this._getAnimatedElement();
    c.style.top = "0px";
    c.style.left = "0px";
  };
  b.RadComboBox.prototype._onAnimationEnded = function (d, c) {
    this._collapsing = false;
    if (window.netscape && !window.opera) {
      this.get_childListElementWrapper().style.overflow = "auto";
    }
    if ($telerik.isChrome) {
      a(this.get_dropDownElement())
        .css("-webkit-transform", "translatez(0)")
        .css("-webkit-transform", "");
    }
  };
  b.RadComboBox.prototype._onAnimationStarted = function (f, c) {
    if (window.netscape && !window.opera) {
      this.get_childListElementWrapper().style.overflow = "hidden";
    }
    if (this.get_dropDownVisible()) {
      var d = this.get_highlightedItem();
      if (d) {
        d.scrollOnTop();
      }
    }
  };
  b.RadComboBox.prototype._disposeAnimation = function () {
    if (this._dropDown) {
      this._dropDown.dispose();
      this._dropDown = null;
    }
  };
})($telerik.$);
(function () {
  var a = $telerik.$;
  var b = Telerik.Web.UI;
  b.RadComboBox.prototype._createFakeInput = function () {
    var c = a(
      "<input class='rcbFakeInput radPreventDecorate' tabindex='-1' />"
    ).css({
      border: 0,
      padding: 0,
      margin: 0,
      position: "absolute",
      zIndex: 1,
      backgroundColor: "transparent",
    })[0];
    return c;
  };
  b.RadComboBox.prototype._deployFakeInput = function () {
    if (this.get_element().currentStyle.position == "static") {
      this.get_element().style.position = "relative";
    }
    this._fakeInput = this._createFakeInput();
    var c = this.get_inputDomElement();
    a(this._fakeInput).appendTo(c.parentNode);
  };
  b.RadComboBox.prototype._repaintFakeInput = function () {
    var d = this.get_element();
    var g = 0;
    var f = 0;
    var h = 0;
    var e = 0;
    if (d.style.width.indexOf("%") == -1) {
      var m = this.get_inputDomElement();
      var n = a(m).position();
      if (m.offsetWidth > 0) {
        f = m.offsetHeight;
        h = n.top;
        e = n.left;
        g = m.offsetWidth;
      } else {
        var o = d.cloneNode(false);
        o.style.position = "absolute";
        o.style.top = "-1000px";
        o.style.left = "-1000px";
        var c = d.cloneNode(true).childNodes;
        for (var j = 0; j < c.length; j++) {
          if (c[j].tagName) {
            if (c[j].tagName.toUpperCase() == "LABEL") {
              o.appendChild(c[j]);
            }
            if (c[j].tagName.toUpperCase() == "TABLE") {
              o.appendChild(c[j]);
            }
          }
        }
        document.body.appendChild(o);
        var k = a(o).find(".rcbInput").get(0);
        var l = a(o).find("label").get(0);
        g = k.offsetWidth;
        f = k.offsetHeight;
        h = k.offsetTop;
        if (l) {
          e = k.offsetLeft + l.offsetWidth;
        } else {
          e = k.offsetLeft;
        }
        document.body.removeChild(o);
      }
    }
    a(this._fakeInput).css({ width: g, height: f, top: h, left: e });
  };
})();
(function () {
  var a = Telerik.Web.UI;
  a.RadComboBox.prototype.highlightAllMatches = function (f) {
    if (this.get_filter() == a.RadComboBoxFilter.None) {
      return;
    }
    if (this.get_highlightedItem()) {
      this.get_highlightedItem().unHighlight();
    }
    var d = this.getLastWord(f, this._getTrimStartingSpaces());
    if (this._getLastSeparator(f) == f.charAt(f.length - 1)) {
      this._removeEmTagsFromAllItems();
      this.setAllItemsVisible(true);
      return;
    }
    var c = this.get_filter(),
      b = function (h, g, i) {
        var j = h.highlightText(g, i);
        h.set_visible(j);
      },
      e = function () {
        if (this.get_markFirstMatch()) {
          this.highlightFirstVisibleEnabledItem();
        }
        this._resizeDropDown();
      };
    this._process(0, c, d, b, e);
  };
  a.RadComboBox.prototype.setAllItemsVisible = function (b) {
    var c = b;
    this.get_items().forEach(function (d) {
      d.set_visible(c);
    });
  };
  a.RadComboBox.prototype._removeEmTagsFromAllItems = function () {
    this.get_items().forEach(function (b) {
      b.clearEmTags();
    });
  };
  a.RadComboBox.prototype._process = function (g, d, f, b, h) {
    var i = this,
      e = this.get_items(),
      c = e.get_count();
    clearTimeout(this._filterTimer);
    this._filterTimer = setTimeout(function () {
      var j = g,
        l = new Date().getTime(),
        k;
      while (j < c && new Date().getTime() - l < i._filterDuration) {
        k = e._array[j];
        b.apply(i, [k, d, f]);
        j++;
      }
      if (j < c) {
        i._process(j, d, f, b, h);
      } else {
        h.apply(i);
      }
    }, 10);
  };
})();
(function () {
  var b = Telerik.Web.UI;
  var e = 1;
  var c = "rcbCheckAllItems";
  var d = "rcbCheckAllItemsHovered";
  var a = $telerik.$;
  b.RadComboBox.prototype.highlightItem = function (h, k) {
    var j = this.get_highlightedItem(),
      n = this.get_visibleItems(),
      p = n.length,
      q = 0,
      g,
      o,
      r,
      m = this.get_checkBoxes() && this._enableCheckAllItemsCheckBox,
      f;
    if (m) {
      f = a(this._checkAllElement);
    }
    if (!j) {
      if (m && !f.hasClass(d)) {
        this._toggleCheckAllHighlight(true);
        return;
      }
      if (m && f.hasClass(d) && !k) {
        return;
      } else {
        if (this._checkAllElement) {
          this._toggleCheckAllHighlight(false);
        }
      }
      j = this.get_selectedItem();
    }
    if (j) {
      for (var l = 0; l < p; l++) {
        if (n[l] == j) {
          q = k ? l + 1 : l - 1;
          break;
        }
      }
    }
    g = h.call(this, q, p, arguments[2]);
    if (m && g == -1 && !f.hasClass(d)) {
      j.unHighlight();
      this._toggleCheckAllHighlight(true);
      return;
    }
    if (g >= 0 && g < p) {
      n[g].highlight();
      n[g].scrollIntoView();
      o = this._getLastSeparatorIndex(this.get_text());
      r = this.get_text().substring(0, o + 1) + n[g].get_text();
      if (this.get_changeText() && !this._checkBoxes) {
        this.set_text(r);
        this.set_value(n[g].get_value());
      }
    }
  };
  b.RadComboBox.prototype._toggleCheckAllHighlight = function (f) {
    if (f) {
      this._applyCheckAllHighlight(f, d, c);
    } else {
      this._applyCheckAllHighlight(f, c, d);
    }
  };
  b.RadComboBox.prototype._applyCheckAllHighlight = function (h, g, i) {
    var f = a(this._checkAllElement);
    f.addClass(g);
    f.removeClass(i);
    if (this.get_enableAriaSupport()) {
      b.RadComboBox._toggleActiveDescendantAttributes(
        f.find(".rcbCheckAllItemsCheckBox")[0],
        this.get_id(),
        h
      );
    }
  };
  b.RadComboBox.prototype.highlightNextItem = function (g) {
    var h = this;
    var f = function (l, j, k) {
      var i = h._findNextAvailableIndex(l, j, k);
      if (k && i == j) {
        i = h._findNextAvailableIndex(0, j, k);
      }
      return i;
    };
    h.highlightItem(f, true, g);
  };
  b.RadComboBox.prototype.highlightPreviousItem = function () {
    var g = this;
    var f = function (h) {
      return g._findPrevAvailableIndex(h);
    };
    g.highlightItem(f, false);
  };
  b.RadComboBox.prototype.highlightLastItem = function () {
    var g = this;
    var f = function (j, h, i) {
      return g.get_items().get_count() - 1;
    };
    g.highlightItem(f, true);
  };
  b.RadComboBox.prototype.highlightFirstItem = function () {
    var f = function (g) {
      return 0;
    };
    this.highlightItem(f, false);
  };
  b.RadComboBox.prototype.highlightLastVisibleItem = function () {
    var l = a(this.get_dropDownElement()).find("div.rcbScroll");
    var j = this.get_items();
    var h = -1;
    for (var g = j.get_count() - 1; g >= 0; g--) {
      var k = a(j.getItem(g).get_element()).position().top;
      if (k < l.scrollTop() + l.height()) {
        h = j.getItem(g).get_index();
        break;
      }
    }
    if (h >= 0) {
      var f = function (n, i, m) {
        return h;
      };
      this.highlightItem(f, true);
    }
  };
  b.RadComboBox.prototype.highlightFirstVisibleItem = function () {
    var l = a(this.get_dropDownElement()).find("div.rcbScroll");
    var j = this.get_items();
    var h = -1;
    for (var g = 0; g < j.get_count(); g++) {
      var k = a(j.getItem(g).get_element()).position().top;
      if (k > l.scrollTop()) {
        h = j.getItem(g).get_index();
        break;
      }
    }
    if (h >= 0) {
      var f = function (n, i, m) {
        return h - 1;
      };
      this.highlightItem(f, true);
    }
  };
  b.RadComboBox.prototype._needsItemCompletion = function () {
    var g = this._getInputSelectionRange();
    var f = this._getSurroundingSeparatorIndices(g.start).before;
    var h = f;
    var i = this.get_text();
    var j = i.substring(h, i.length);
    if (this.findItemByText(j) === null) {
      return false;
    }
    return true;
  };
  b.RadComboBox.prototype._isCommandKey = function (f) {
    for (var g in Telerik.Web.UI.Keys) {
      if (
        g != "Numpad0" &&
        g != "Numpad9" &&
        g != "Zero" &&
        g != "Del" &&
        g != "Space"
      ) {
        if (f == Telerik.Web.UI.Keys[g]) {
          return true;
        }
      }
    }
    return false;
  };
  b.RadComboBox.prototype._onKeyUpIE = function (f) {
    var g = f.keyCode || f.which;
    if (!this._isCommandKey(g) && !this.get_readOnly()) {
      this._onChangeHelper(f);
    }
  };
  b.RadComboBox.prototype._onKeyDown = function (h) {
    var j = h.keyCode || h.which,
      i,
      k,
      f = 8;
    if (($telerik.isIE || $telerik.isChrome) && this.get_readOnly() && j == f) {
      h.preventDefault();
    }
    if ($telerik.isIE && j != b.Keys.Down && j != b.Keys.Up) {
      this._updateFilterText = true;
    }
    if (j == b.Keys.Escape) {
      h.preventDefault();
    }
    if (!this._fireEvents || this._ajaxRequest) {
      return;
    }
    this.raise_onClientKeyPressing(h);
    this._lastKeyCode = j;
    switch (j) {
      case b.Keys.Left:
      case b.Keys.Righ:
        return;
      case b.Keys.Escape:
        this._hideDropDown(h);
        if ($telerik.isFirefox) {
          this._escKeyPressed = true;
        }
        return;
      case b.Keys.Enter:
        this._hideDropDown(h);
        h.returnValue = true;
        if (h.preventDefault) {
          h.preventDefault();
        }
        this._onEnterKey(h);
        return;
      case b.Keys.Down:
        h.returnValue = false;
        if (h.altKey) {
          this._toggleDropDown(h);
          return;
        }
        this.highlightNextItem(null);
        if (h.preventDefault) {
          h.preventDefault();
        }
        return;
      case b.Keys.Up:
        h.returnValue = false;
        if (h.altKey) {
          this._toggleDropDown(h);
          return;
        }
        this.highlightPreviousItem();
        if (h.preventDefault) {
          h.preventDefault();
        }
        return;
      case b.Keys.Home:
        h.returnValue = false;
        if (h.altKey) {
          this._toggleDropDown(h);
          return;
        }
        if (this.get_inputDomElement().readOnly) {
          this.highlightFirstItem();
          if (h.preventDefault) {
            h.preventDefault();
          }
        }
        return;
      case b.Keys.End:
        h.returnValue = false;
        if (h.altKey) {
          this._toggleDropDown(h);
          return;
        }
        if (this.get_inputDomElement().readOnly) {
          this.highlightLastItem();
          if (h.preventDefault) {
            h.preventDefault();
          }
        }
        return;
      case b.Keys.PageDown:
        h.returnValue = false;
        if (h.altKey) {
          this._toggleDropDown(h);
          return;
        }
        var l = a(this.get_dropDownElement()).find("div.rcbScroll");
        l.scrollTop(l.scrollTop() + l.height());
        this.highlightLastVisibleItem();
        if (h.preventDefault) {
          h.preventDefault();
        }
        return;
      case b.Keys.PageUp:
        h.returnValue = false;
        if (h.altKey) {
          this._toggleDropDown(h);
          return;
        }
        var l = a(this.get_dropDownElement()).find("div.rcbScroll");
        l.scrollTop(l.scrollTop() - l.height());
        this.highlightFirstVisibleItem();
        if (h.preventDefault) {
          h.preventDefault();
        }
        return;
      case b.Keys.Tab:
        this._hideDropDown(h);
        this._raiseClientBlur(h);
        this._selectItemOnBlur(h);
        this._applyEmptyMessage();
        this._focused = false;
        return;
      case b.Keys.Space:
        if (this.get_dropDownVisible()) {
          i = this.get_highlightedItem();
          if (this._checkBoxes && i) {
            if (h.preventDefault) {
              h.preventDefault();
            }
            this._performCheck(i, h);
          } else {
            if (
              this._checkBoxes &&
              !i &&
              this._checkAllElement &&
              a(this._checkAllElement).hasClass(d)
            ) {
              a(this._checkAllElement).click();
            }
          }
        }
        return;
    }
    if (j >= b.Keys.Numpad0 && j <= b.Keys.Numpad9) {
      j -= b.Keys.Numpad0 - b.Keys.Zero;
    }
    k = String.fromCharCode(j);
    if (
      k &&
      !h.altKey &&
      !(this.get_enableLoadOnDemand() || !this.get_readOnly())
    ) {
      if (this.get_readOnly() && this._dropDown.isVisible() == false) {
        this._inputDomElement.setAttribute("aria-live", "polite");
      }
      this.highlightNextItem(k);
      if (this.get_readOnly() && this._dropDown.isVisible() == false) {
        var g = this;
        setTimeout(function () {
          g._inputDomElement.setAttribute("aria-live", "off");
        }, 50);
      }
      return;
    }
  };
  b.RadComboBox.prototype._onEnterKey = function (g) {
    var i = this.findItemByText(this.get_text()),
      j = this.get_selectedItem(),
      h = this.get_highlightedItem();
    if (!this._checkBoxes) {
      if (this.get_allowCustomText() && !this.get_markFirstMatch() && !i) {
        if (this.raise_selectedIndexChanging(null, g) === false) {
          if (j) {
            j.set_selected(false);
          }
          if (h) {
            h.unHighlight();
          }
          this.set_selectedItem(null);
          this.set_selectedIndex(null);
          this.set_highlightedItem(null);
          this.raise_selectedIndexChanged(null, g);
          var f = { Command: "Select", Index: -1 };
          this.postback(f);
        }
      } else {
        this._performSelect(h, g);
      }
      if (this.get_markFirstMatch()) {
        var k = this.get_text().length;
        this.selectText(k, k);
      }
    } else {
      if (h && !h.get_checked()) {
        this._performCheck(h, g);
      }
    }
  };
  b.RadComboBox.prototype._onKeyPressCheckSelection = function (f) {
    var i = this.get_inputDomElement(),
      l = this._getInputSelection(i),
      m = this.get_text(),
      j,
      h;
    if (l.selectionStart != l.selectionEnd && this.get_highlightedItem()) {
      if (!this.get_isCaseSensitive()) {
        j =
          i.value.charAt(l.selectionStart).toLowerCase() ==
          String.fromCharCode(f.keyCode).toLowerCase();
      } else {
        j =
          i.value.charAt(l.selectionStart).toString() ==
          String.fromCharCode(f.keyCode).toString();
      }
      if (j) {
        h = this.findFirstMatch(
          m.substring(0, l.selectionStart) +
            String.fromCharCode(f.keyCode).toString()
        );
        if (h && h.get_text() === this.get_highlightedItem().get_text()) {
          if (this.get_inputDomElement().setSelectionRange) {
            this.get_inputDomElement().setSelectionRange(
              l.selectionStart + e,
              l.selectionEnd
            );
          } else {
            var k = i.createTextRange();
            k.moveStart("character", l.selectionStart + e);
            try {
              k.select();
            } catch (g) {}
          }
          f.preventDefault();
        }
      }
    }
  };
  b.RadComboBox.prototype._onKeyPress = function (g) {
    if (!this._fireEvents) {
      return;
    }
    var f = g.charCode || g.keyCode;
    if (this._ajaxRequest) {
      if (f === b.Keys.Enter) {
        g.returnValue = false;
        if (g.preventDefault) {
          g.preventDefault();
        }
      }
      return;
    }
    var j = [
      b.Keys.PageUp,
      b.Keys.PageDown,
      b.Keys.End,
      b.Keys.Home,
      b.Keys.Insert,
      b.Keys.Delete,
    ];
    for (var h = 0; h < j.length; h++) {
      if (this._lastKeyCode == j[h]) {
        return;
      }
    }
    if (
      this.get_markFirstMatch() &&
      this.get_autoCompleteSeparator() &&
      this.get_autoCompleteSeparator() === String.fromCharCode(f) &&
      this._needsItemCompletion()
    ) {
      this._performSelect(this.get_highlightedItem(), g);
      if (this.get_highlightedItem()) {
        this.get_highlightedItem().unHighlight();
      }
      var k = this.get_text().length;
      this.selectText(k, k);
    }
  };
  b.RadComboBox.prototype._findNextAvailableIndex = function (k, f, j) {
    var h = this.get_visibleItems();
    for (var g = k; g < f; g++) {
      if (h[g].get_enabled() && !h[g].get_isSeparator()) {
        if (j === null) {
          return g;
        }
        if (j && !h[g].get_text().toLowerCase().indexOf(j.toLowerCase())) {
          return g;
        }
      }
    }
    return h.length;
  };
  b.RadComboBox.prototype._findPrevAvailableIndex = function (g) {
    var h = this.get_visibleItems();
    if (h.length < 1) {
      return -1;
    }
    for (var f = g; f >= 0; f--) {
      if (h[f].get_enabled() && !h[f].get_isSeparator()) {
        return f;
      }
    }
    return -1;
  };
})();
(function () {
  var b = Telerik.Web.UI,
    a = Sys.Serialization.JavaScriptSerializer,
    c = { 0: "contains", 1: "contains", 2: "startswith" };
  b.RadComboBox.prototype.get_itemData = function () {
    return this._itemData;
  };
  b.RadComboBox.prototype.get_webServiceSettings = function () {
    return this._webServiceSettings;
  };
  b.RadComboBox.prototype.set_webServiceSettings = function (e) {
    var d = a.deserialize(e);
    if (d.ODataSettings) {
      this._webServiceSettings = new b.NavigationControlODataSettings(d);
    } else {
      this._webServiceSettings = new b.WebServiceSettings(d);
    }
  };
  b.RadComboBox.prototype.get_enableItemCaching = function () {
    return this._enableItemCaching;
  };
  b.RadComboBox.prototype.set_enableItemCaching = function (d) {
    this._enableItemCaching = d;
  };
  b.RadComboBox.prototype.get_moreResultsBoxElement = function () {
    var d = this._getChildElement("MoreResultsBox");
    return d;
  };
  b.RadComboBox.prototype.get_moreResultsBoxMessageElement = function () {
    var d = this.get_moreResultsBoxElement();
    var e = $telerik.getFirstChildByTagName(d, "span", 0);
    return e;
  };
  (b.RadComboBox.prototype.clearCache = function () {
    this.lodHashTable = {};
  }),
    (b.RadComboBox.prototype.requestItems = function (g, d) {
      if (this._disposed) {
        return;
      }
      var h = {},
        f;
      if (d) {
        if (this._pendingAjaxRequestsCount > 0 || this.get_endOfItems()) {
          return;
        }
      } else {
        this._filterText = g;
      }
      this._ensureChildControls();
      this._ajaxRequest = true;
      this.set_appendItems(d);
      h.Text = g;
      h.NumberOfItems = 0;
      if (this.get_appendItems()) {
        h.NumberOfItems = this.get_items().get_count();
      }
      f = new b.RadComboBoxRequestCancelEventArgs(g, h);
      this.raiseEvent("itemsRequesting", f);
      if (f.get_cancel()) {
        this._ajaxRequest = false;
        return;
      }
      if (this.get_highlightedItem()) {
        this.get_highlightedItem().unHighlight();
      }
      if (!this._loadingDiv) {
        this._loadingDiv = document.createElement("li");
        this._loadingDiv.className = "rcbLoading";
        this._loadingDiv.id = this.get_id() + "_LoadingDiv";
        this._loadingDiv.innerHTML = this.get_loadingMessage();
        if (!this.get_childListElement()) {
          this._createChildListElement();
        }
        this.get_childListElement().insertBefore(
          this._loadingDiv,
          this.get_childListElement().firstChild
        );
      }
      g = encodeURIComponent(g);
      this._callbackText = g;
      this._pendingAjaxRequestsCount++;
      var e =
        this.get_isUsingODataSource() ||
        this.get_webServiceSettings().get_isOData();
      if (this.get_webServiceSettings().get_method() || e) {
        this._doLoadOnDemandFromWebService(g, h);
      } else {
        if (this._clientDataSource) {
          this._doLoadOnDemandFromClientDataSource(h);
        } else {
          this._doLoadOnDemand(g, h);
        }
      }
    });
  b.RadComboBox.prototype._createChildListElement = function () {
    var d = document.createElement("ul");
    d.className = "rcbList";
    this.get_childListElementWrapper().appendChild(d);
    this._onDropDownClickDelegate = Function.createDelegate(
      this,
      this._onDropDownClick
    );
    $telerik.addHandler(
      this.get_childListElement(),
      "click",
      this._onDropDownClickDelegate
    );
    this._onDropDownHoverDelegate = Function.createDelegate(
      this,
      this._onDropDownHover
    );
    $telerik.addHandler(
      this.get_childListElement(),
      "mouseover",
      this._onDropDownHoverDelegate
    );
    this._cancelDelegate = Function.createDelegate(
      this,
      b.RadComboBox._cancelEvent
    );
    $telerik.addHandler(
      this.get_childListElement(),
      "selectstart",
      this._cancelDelegate
    );
    $telerik.addHandler(
      this.get_childListElement(),
      "dragstart",
      this._cancelDelegate
    );
    this._onDropDownOutDelegate = Function.createDelegate(
      this,
      this._onDropDownOut
    );
    $telerik.addHandler(
      this.get_childListElement(),
      "mouseout",
      this._onDropDownOutDelegate
    );
    if ($telerik.isIE8 && $telerik.standardsMode) {
      d.style.position = "absolute";
      d.style.width = "100%";
    }
    if (this.get_enableAriaSupport()) {
      this._applyChildListElementAttributes();
    }
    return d;
  };
  b.RadComboBox.prototype._initializeVirtualScroll = function () {
    this._onDropDownScrollDelegate = Function.createDelegate(
      this,
      this._onDropDownScroll
    );
    $telerik.addHandler(
      this.get_childListElementWrapper(),
      "scroll",
      this._onDropDownScrollDelegate
    );
  };
  b.RadComboBox.prototype._onDropDownScroll = function (f) {
    if (!this._virtualScroll || this._ajaxRequest || this.get_endOfItems()) {
      return;
    }
    var d = this.get_childListElement(),
      g = $telerik.getFirstChildByTagName(d, "div", 0);
    if (g) {
      var h = g.offsetHeight;
      if (
        this.get_childListElementWrapper().scrollTop + h >=
        d.offsetHeight - h
      ) {
        this.requestItems(this._filterText, true);
      }
    }
  };
  b.RadComboBox.prototype._detachVirtualScrollEvents = function () {
    $telerik.removeHandler(
      this.get_childListElementWrapper(),
      "scroll",
      this._onDropDownScrollDelegate
    );
  };
  b.RadComboBox.prototype._initializeMoreResultsBox = function () {
    var d = this.get_moreResultsBoxElement();
    this._onMoreResultsBoxClickDelegate = Function.createDelegate(
      this,
      this._onMoreResultsBoxClick
    );
    $telerik.addHandler(d, "click", this._onMoreResultsBoxClickDelegate);
    this._onMoreResultsBoxOverDelegate = Function.createDelegate(
      this,
      this._onMoreResultsBoxOver
    );
    $telerik.addHandler(d, "mouseover", this._onMoreResultsBoxOverDelegate);
    this._onMoreResultsBoxOutDelegate = Function.createDelegate(
      this,
      this._onMoreResultsBoxOut
    );
    $telerik.addHandler(d, "mouseout", this._onMoreResultsBoxOutDelegate);
  };
  b.RadComboBox.prototype._onMoreResultsBoxClick = function (d) {
    this.requestItems(this._filterText, true);
  };
  b.RadComboBox.prototype._onMoreResultsBoxOver = function (d) {
    this.get_moreResultsBoxElement().style.cursor = "pointer";
  };
  b.RadComboBox.prototype._onMoreResultsBoxOut = function (d) {
    this.get_moreResultsBoxElement().style.cursor = "default";
  };
  b.RadComboBox.prototype._detachMoreResultsBoxEvents = function () {
    var d = this.get_moreResultsBoxElement();
    $telerik.removeHandler(d, "click", this._onMoreResultsBoxClickDelegate);
    $telerik.removeHandler(d, "mouseover", this._onMoreResultsBoxOverDelegate);
    $telerik.removeHandler(d, "mouseout", this._onMoreResultsBoxOutDelegate);
  };
  b.RadComboBox.prototype._initializeWebServiceLoader = function () {
    var d = this.get_webServiceSettings();
    if (d.get_isOData()) {
      this._webServiceLoader = new b.NavigationControlODataLoader(
        this.get_webServiceSettings()
      );
    } else {
      this._webServiceLoader = new b.WebServiceLoader(
        this.get_webServiceSettings()
      );
    }
    this._webServiceLoader.add_loadingSuccess(
      Function.createDelegate(this, this._onWebServiceResponse)
    );
    this._webServiceLoader.add_loadingError(
      Function.createDelegate(this, this._onWebServiceError)
    );
  };
  b.RadComboBox.prototype._initializeODataSourceBinder = function () {
    var e = this.get_odataClientSettings().ODataSourceID,
      d = $find(e);
    if (!d) {
      var f = String.format(
        "DataSource with id {0} was not found on the page",
        e
      );
      alert(f);
    } else {
      this._flatBinder = new b.RadODataDataSource.Binder.Flat(d, this);
      this._flatBinder.initialize();
    }
  };
  b.RadComboBox.prototype._initializeClientDataSource = function () {
    if (this._clientDataSourceID) {
      var d = $find(this._clientDataSourceID);
      this._reinitializeClientDataSource(d);
    }
    Sys.Application.remove_load(this._cdInitDelegate);
  };
  b.RadComboBox.prototype._reinitializeClientDataSource = function (d) {
    this._clientDataSource = d;
  };
  b.RadComboBox.prototype._disposeODataSourceBinder = function () {
    if (this._flatBinder) {
      this._flatBinder.dispose();
    }
  };
  b.RadComboBox.prototype._onDataNeeded = function (k) {
    var l = this,
      e = l.get_items().get_count(),
      h = l.get_filter(),
      g = l.get_odataClientSettings().DataTextField,
      f = c[h],
      i = l._itemsPerRequest,
      d = l.get_appendItems(),
      j = {
        events: {
          requesting: function (m) {
            var n = m.get_options();
            n.context = { filterText: k, itemsCount: e, shouldAppendItem: d };
            if (k) {
              m.set_filterExpressions({ field: g, operator: f, value: k });
            }
            if (i != -1) {
              n.data.take = i;
            }
            if (d) {
              n.data.skip = e;
            }
          },
          success: function (m, o, n) {
            var p = m,
              q = p.length,
              r = n.shouldAppendItem ? n.itemsCount + q : q,
              u = o,
              s = new b.WebServiceLoaderSuccessEventArgs(p, n.filterText);
            l.set_endOfItems(r == u);
            l._onWebServiceResponse(l, s);
            if (l._showMoreResultsBox) {
              var t = l._getShowMoreMessage(1, r, u);
              l.set_showMoreMessage(t);
              l._updateMoreResultsBox();
            }
          },
          fail: function (m) {
            var n = new b.WebServiceLoaderErrorEventArgs(m.get_message());
            l._onWebServiceError(l, n);
          },
        },
      };
    l._flatBinder.fetch(j);
  };
  (b.RadComboBox.prototype._getShowMoreMessage = function (d, e, f) {
    return String.format(
      "Items <b>{0}</b>-<b>{1}</b> out of <b>{2}</b>",
      d,
      e,
      f
    );
  }),
    (b.RadComboBox.prototype.get_flatModel = function () {
      var d = this.get_odataClientSettings();
      return b.RadODataDataSource.Binder.Flat.Model(d);
    }),
    (b.RadComboBox.prototype._doLoadOnDemand = function (j, k) {
      var g = 0;
      if (this.get_appendItems()) {
        g = this.get_items().get_count();
      }
      var f = {
        Command: "LOD",
        Text: j,
        ClientState: this._clientState,
        Context: k,
        NumberOfItems: g,
      };
      var h = Function.createDelegate(this, this._onCallbackResponse);
      var i = Function.createDelegate(this, this._onErrorReceived);
      if (
        this.get_enableItemCaching() &&
        this.lodHashTable[j + "$" + g] !== undefined
      ) {
        this._onCallbackResponse(this.lodHashTable[j + "$" + g]);
      } else {
        var e = new b.CallbackSettings({
          id: this._uniqueId,
          arguments: a.serialize(f),
          onCallbackSuccess: h,
          context: j,
          onCallbackError: i,
          isAsync: true,
        });
        var d = new b.CallbackLoader(e);
        d.invokeCallbackMethod();
      }
    });
  b.RadComboBox.prototype._doLoadOnDemandFromWebService = function (g, h) {
    if (!this._webServiceLoader) {
      this._initializeWebServiceLoader();
    }
    var e = { context: h },
      f = this.get_webServiceSettings();
    if (f.get_isOData()) {
      e.isRootLevel = true;
    }
    if (f.get_isWcf()) {
      e.context = this._webServiceLoader._serializeDictionaryAsKeyValuePairs(
        e.context
      );
    }
    var d = h.NumberOfItems;
    if (
      this.get_enableItemCaching() &&
      this.lodHashTable[g + "$" + d] !== undefined
    ) {
      this._pendingAjaxRequestsCount--;
      this._addNewItems(g, this.lodHashTable[g + "$" + d]);
    } else {
      if (this.get_isUsingODataSource()) {
        this._onDataNeeded(g);
      } else {
        this._webServiceLoader.loadData(e, g);
      }
    }
  };
  b.RadComboBox.prototype._doLoadOnDemandFromClientDataSource = function (g) {
    var e = this._clientDataSource,
      f = this;
    if (this.get_enableItemCaching()) {
      var d = this.lodHashTable[g.Text + "$" + g.NumberOfItems];
      if (d !== undefined) {
        this._pendingAjaxRequestsCount--;
        this._addNewItems(g.Text, d);
        return;
      }
    }
    if (e.get_data().length === 0) {
      e.fetch(function (h) {
        f._loadItemsFromClientDataSource(g);
      });
    } else {
      f._loadItemsFromClientDataSource(g);
    }
  };
  b.RadComboBox.prototype._loadItemsFromClientDataSource = function (l) {
    this._pendingAjaxRequestsCount--;
    var e = this._clientDataSource,
      g = this,
      j = this._itemsPerRequest,
      i = true,
      k;
    if (l.Text) {
      var f,
        d = Telerik.Web.UI.ClientDataSource.FilterOperator;
      if (this.get_filter() == Telerik.Web.UI.RadComboBoxFilter.Contains) {
        f = d.Contains;
      } else {
        f = d.StartsWith;
      }
      e.get_filterExpressions().clear();
      e.get_filterExpressions().add([
        { fieldName: this._dataTextField, value: l.Text, operator: f },
      ]);
    } else {
      e.get_filterExpressions().clear();
    }
    if (j != -1) {
      e.set_allowPaging(true);
      e.set_pageSize(j);
      var h = l.NumberOfItems / j;
      e.set_currentPageIndex(h);
    }
    e.fetch(function () {
      k = e.view();
      i = e._kendoDataSource.totalPages() == h + 1;
      g.set_endOfItems(i);
      g._addNewItems(l.Text, { Items: k, EndOfItems: i });
    });
  };
  b.RadComboBox.prototype._onCallbackResponse = function (q) {
    if (this._disposed) {
      return;
    }
    this._pendingAjaxRequestsCount--;
    this.set_selectedItem(null);
    this.set_highlightedItem(null);
    var m = this._children.get_count();
    var l = 0;
    var o = q.split("_$$_")[4];
    var g = window.encodeURI(this._callbackText);
    function p(u, i, t) {
      return u.replace(new RegExp(i, "g"), t);
    }
    g = p(g, "'", window.escape("'"));
    g = p(g, "~", window.escape("~"));
    o = p(o, "%7e", window.escape("~"));
    if (this._pendingAjaxRequestsCount === 0 && o != g) {
      this.requestItems(this._callbackText, this.get_appendItems());
      return;
    }
    if (this.get_appendItems()) {
      l = this.get_items().get_count();
    }
    if (
      this.get_enableItemCaching() &&
      this.lodHashTable[o + "$" + l] === undefined
    ) {
      this.lodHashTable[o + "$" + l] = q;
    }
    var r = q.split("_$$_");
    var n;
    if (r[0] == "[]") {
      n = null;
    } else {
      n = eval(r[0]);
    }
    if (r[3] == "True") {
      this.set_endOfItems(true);
    } else {
      this.set_endOfItems(false);
    }
    if (this.get_appendItems() && this._itemData && n) {
      Array.addRange(this._itemData, n);
    } else {
      this._itemData = n;
    }
    if (this._loadingDiv) {
      if (this._loadingDiv.parentNode) {
        this._loadingDiv.parentNode.removeChild(this._loadingDiv);
      }
      this._loadingDiv = null;
    }
    var e = this.get_childListElement();
    if (!e) {
      e = this._createChildListElement();
    }
    this._childControlsCreated = true;
    var f = $telerik.getFirstChildByTagName(e, "div", 0);
    if (f) {
      f.parentNode.removeChild(f);
    }
    if (this.get_appendItems()) {
      var s = document.createElement("ul");
      s.innerHTML = r[1];
      var d = $telerik.getChildrenByTagName(s, "li");
      var k = d.length;
      for (var h = 0; h < k; h++) {
        e.appendChild(d[h]);
        this._childControlsCreated = false;
        var j = new b.RadComboBoxItem();
        this._children.add(j);
        j._initialize(n[h], d[h]);
      }
    } else {
      this._children.clear();
      e.innerHTML = r[1];
      this._childControlsCreated = false;
      this._createChildControls();
    }
    this._childControlsCreated = true;
    this._restoreSelectionAfterRequest();
    this.set_showMoreMessage(r[2]);
    this._setUpDropDownAfterRequest(this.get_text(), e, m);
  };
  b.RadComboBox.prototype._onWebServiceResponse = function (g, d) {
    this._pendingAjaxRequestsCount--;
    var f = d.get_data();
    var h = d.get_context();
    var e = 0;
    if (this.get_appendItems()) {
      e = this.get_items().get_count();
    }
    if (this._pendingAjaxRequestsCount === 0 && h != this._callbackText) {
      this.requestItems(this._callbackText, this.get_appendItems());
      return;
    }
    if (this.get_enableItemCaching()) {
      this.lodHashTable[h + "$" + e] = f;
    }
    this._addNewItems(h, f);
  };
  b.RadComboBox.prototype._addNewItems = function (s, r) {
    this.set_selectedItem(null);
    this.set_highlightedItem(null);
    this._childControlsCreated = true;
    var p = this.get_items().get_count();
    if (this._loadingDiv) {
      if (this._loadingDiv.parentNode) {
        this._loadingDiv.parentNode.removeChild(this._loadingDiv);
      }
      this._loadingDiv = null;
    }
    if (!this.get_appendItems()) {
      this.clearItems();
    }
    var e = this.get_childListElement();
    if (!e) {
      e = this._createChildListElement();
    }
    if (this._virtualScroll) {
      this._setUpScroll(true, e);
    }
    var n = null;
    if (Array.prototype.isPrototypeOf(r)) {
      n = r;
    } else {
      n = r.Items;
      this.set_endOfItems(r.EndOfItems);
      this.set_showMoreMessage(r.Message);
    }
    n = n || [];
    this._childControlsCreated = false;
    var t = this.get_webServiceSettings().get_isWcf();
    var j = [];
    var l;
    var k, o;
    for (k = 0, o = n.length; k < o; k++) {
      l = new b.RadComboBoxItem();
      var f = n[k];
      if (this._clientDataSource) {
        l._loadFromCustomDictionary(f, {
          dataTextField: this._dataTextField,
          dataValueField: this._dataValueField,
        });
      } else {
        l._loadFromDictionary(f, t);
      }
      l._renderedClientTemplate = b.TemplateRenderer.renderTemplate(f, this, l);
      this._children.add(l);
      l._render(j);
    }
    this._childControlsCreated = true;
    if (this.get_appendItems()) {
      e.innerHTML = e.innerHTML + j.join("");
    } else {
      e.innerHTML = j.join("");
    }
    var q = this.get_events().getHandler("itemDataBound");
    var d = $telerik.getChildrenByTagName(e, "li");
    for (k = 0, o = this._children.get_count(); k < o; k++) {
      l = this._children.getItem(k);
      l.set_element(d[k]);
      var h = o - n.length;
      if (k >= h && q) {
        var g = k - h;
        var m = new b.RadComboBoxItemDataBoundEventArgs(l, n[g]);
        this.raiseEvent("itemDataBound", m);
      }
    }
    this._restoreSelectionAfterRequest();
    this._setUpDropDownAfterRequest(s, e, p);
  };
  b.RadComboBox.prototype._scrollToTheNextPortionOfItems = function (d) {
    if (this.get_appendItems() && this.get_items().getItem(d + 1)) {
      this.get_items()
        .getItem(d + 1)
        .scrollIntoView();
    }
  };
  b.RadComboBox.prototype._setUpDropDownAfterRequest = function (h, e, g) {
    if (this._virtualScroll) {
      this._setUpScroll(this.get_endOfItems(), e);
    }
    this._scrollToTheNextPortionOfItems(g);
    this._updateMoreResultsBox();
    var d = $telerik.$(e);
    if (!this._height && !this._maxHeight && !$telerik.isIE8) {
      d.parents(".rcbScroll")[0].style.height = "";
    }
    this.raise_itemsRequested(h, null);
    if (this.get_filter() == b.RadComboBoxFilter.None) {
      this.highlightMatches();
    } else {
      var f = this.get_highlightedItem();
      this.highlightAllMatches(this._filterText);
      if (f) {
        f.highlight();
      }
    }
    if (this.get_dropDownVisible()) {
      this._skipDropDownPositioning = true;
      if (this._slide) {
        this._slide.updateSize();
      }
      this._skipDropDownPositioning = null;
      this._dropDown.reflow();
      this._adjustChildListElementHeight();
    }
    this._resizeDropDown();
    if (this._maxHeight) {
      this._scrollToTheNextPortionOfItems(g);
    }
    this._ajaxRequest = false;
  };
  (b.RadComboBox.prototype._updateMoreResultsBox = function () {
    if (this._showMoreResultsBox && this.get_moreResultsBoxMessageElement()) {
      this.get_moreResultsBoxMessageElement().innerHTML = this.get_showMoreMessage();
    }
  }),
    (b.RadComboBox.prototype._setUpScroll = function (f, d) {
      var e;
      if (f) {
        e = $telerik.getFirstChildByTagName(d, "div", 0);
        if (e) {
          e.parentNode.removeChild(e);
        }
      } else {
        e = document.createElement("div");
        if (!this._height && this._maxHeight) {
          e.style.height = this._maxHeight + "px";
        } else {
          e.style.height = this._height + "px";
        }
        d.appendChild(e);
      }
    });
  b.RadComboBox.prototype._onErrorReceived = function (d, f) {
    if (this._requestTimeoutID > 0) {
      window.clearTimeout(this._requestTimeoutID);
      this._requestTimeoutID = 0;
    }
    var e = this._extractErrorMessage(d);
    if (this.raise_itemsRequestFailed(f, e, null)) {
      return;
    }
    alert(e);
  };
  b.RadComboBox.prototype._onWebServiceError = function (f, e) {
    var d = e.get_message(),
      g = e.get_context();
    this._onErrorReceived(d, g);
  };
  b.RadComboBox.prototype._restoreSelectionAfterRequest = function () {
    var d = this.findItemByValue(this.get_value());
    if (d && d.get_enabled() && !d.get_isSeparator()) {
      d.set_selected(true);
      d.highlight();
      this.set_selectedItem(d);
    }
  };
})();
(function () {
  var a = Telerik.Web.UI;
  a.RadComboBox.prototype.get_markFirstMatch = function () {
    return this._markFirstMatch;
  };
  a.RadComboBox.prototype.set_markFirstMatch = function (b) {
    this._markFirstMatch = b;
    this.repaint();
  };
  a.RadComboBox.prototype.findFirstMatch = function (f) {
    if (!f) {
      return null;
    }
    var c = this.get_items(),
      d = c.get_count();
    for (var b = 0; b < d; b++) {
      if (c.getItem(b).get_text().length < f.length) {
        continue;
      }
      if (
        c.getItem(b).get_enabled() === false ||
        c.getItem(b).get_isSeparator()
      ) {
        continue;
      }
      var e = c.getItem(b).get_text().substring(0, f.length);
      if (!this.get_isCaseSensitive()) {
        if (e.toLowerCase() == f.toLowerCase()) {
          return c.getItem(b);
        }
      } else {
        if (e == f) {
          return c.getItem(b);
        }
      }
    }
    return null;
  };
  a.RadComboBox.prototype.highlightMatches = function () {
    if (!this.get_markFirstMatch()) {
      return;
    }
    var j = this.get_text();
    var d = this.getLastWord(j, this._getTrimStartingSpaces());
    var c;
    if (this._getLastSeparator(j) == j.charAt(j.length - 1)) {
      return;
    }
    var e = this.findFirstMatch(d);
    if (this.get_highlightedItem()) {
      this.get_highlightedItem().unHighlight();
    }
    if (!e) {
      if (j && !this.get_allowCustomText() && !this.get_enableLoadOnDemand()) {
        c = this._getLastSeparatorIndex(j);
        if (c < j.length - 1) {
          var h = j.substring(0, j.length - 1);
          if (h === "" && $telerik.isSafari) {
            var f = this;
            window.setTimeout(function () {
              f.set_text(h);
            }, 0);
          } else {
            this.set_text(h);
            this.highlightMatches();
          }
        }
      }
      return;
    }
    e.highlight();
    e.scrollOnTop();
    this.set_value(e.get_value());
    var i;
    var b;
    var g;
    c = this._getLastSeparatorIndex(j);
    g = j.substring(0, c + 1) + e.get_text();
    if (j != g) {
      this.set_text(g);
      i = c + d.length + 1;
      b = g.length - i;
    } else {
      if (this._callbackText.length > 0) {
        i = c + this._callbackText.length + 1;
        b = j.length - i;
      }
    }
    if (i && b) {
      this.selectText(i, b);
    }
  };
  a.RadComboBox.prototype.highlightFirstVisibleEnabledItem = function () {
    if (this.get_text().length > 0) {
      var d = this.get_visibleItems();
      var e = d.length;
      for (var c = 0; c < e; c++) {
        var b = d[c];
        if (b.get_enabled() === true) {
          b.highlight();
          return;
        }
      }
    }
  };
  a.RadComboBox.prototype._shouldHighlight = function () {
    if (this._lastKeyCode < a.Keys.Space) {
      return false;
    }
    if (this._lastKeyCode >= a.Keys.PageUp && this._lastKeyCode <= a.Keys.Del) {
      return false;
    }
    if (this._lastKeyCode >= a.Keys.F1 && this._lastKeyCode <= a.Keys.F12) {
      return false;
    }
    if (this._lastKeyCode == a.Keys.Delete) {
      return false;
    }
    return true;
  };
})();
(function () {
  var a = Telerik.Web.UI;
  a.RadComboBox.prototype.get_selectedIndex = function () {
    var b = this.get_selectedItem();
    if (b) {
      return b.get_index();
    }
    return this._selectedIndex;
  };
  a.RadComboBox.prototype.set_selectedIndex = function (b) {
    this._selectedIndex = b;
  };
  a.RadComboBox.prototype.get_selectedItem = function () {
    if (!this._setSelectedItem) {
      this._setSelectedItem = true;
      this._setFirstSelectedItem();
    }
    return this._selectedItem;
  };
  a.RadComboBox.prototype.set_selectedItem = function (b) {
    this._selectedItem = b;
  };
  a.RadComboBox.prototype.clearSelection = function () {
    this.set_text("");
    this.set_value("");
    this.set_selectedItem(null);
    var b = this.get_highlightedItem();
    if (b) {
      b.unHighlight();
    }
    this._applyEmptyMessage();
  };
  a.RadComboBox.prototype._performSelect = function (d, c) {
    if (d && d != this.get_selectedItem() && !this.get_enableLoadOnDemand()) {
      d._select(c);
      return;
    }
    if (
      d &&
      d == this.get_selectedItem() &&
      this.getLastWord(this.get_text()) != d.get_text() &&
      !this.get_readOnly()
    ) {
      this._appendTextAfterLastSeparator(d.get_text());
      return;
    }
    if (d && d == this.get_selectedItem()) {
      if (this.get_markFirstMatch()) {
        if (
          d.get_text() != this.get_text() ||
          d.get_value() != this.get_value()
        ) {
          d._select(c);
        }
      }
      return;
    }
    if (d && this.get_originalText() != d.get_text()) {
      d._select(c);
      return;
    }
    if (
      d &&
      (!this.get_selectedItem() ||
        this.get_selectedItem().get_value() != d.get_value())
    ) {
      d._select(c);
      return;
    }
    if (
      (this.get_allowCustomText() || this.get_enableLoadOnDemand()) &&
      this._shouldPostbackOnChange() &&
      !this._checkBoxes
    ) {
      if (this.get_highlightedItem()) {
        this.get_highlightedItem().unHighlight();
      }
      if (this.raise_textChange(this, c) === true) {
        return;
      }
      var b = { Command: "TextChanged" };
      this.postback(b);
    }
  };
  a.RadComboBox.prototype._selectItemOnBlur = function (c) {
    if (this.get_emptyMessage() && this.get_text() == this.get_emptyMessage()) {
      return;
    }
    var h,
      f = null;
    if (
      this.get_markFirstMatch() === true &&
      this.get_filter() == a.RadComboBoxFilter.None &&
      this.get_allowCustomText() === false &&
      this.get_enableLoadOnDemand() === false &&
      this.get_emptyMessage() &&
      this.get_autoCompleteSeparator()
    ) {
      h = this.get_lastWord();
    }
    if (this._checkBoxes) {
      if (this.get_filter() != a.RadComboBoxFilter.None) {
        this.setAllItemsVisible(true);
      }
      return;
    }
    f = this._findItemToSelect(h);
    if (
      f === null &&
      this._defaultItem !== null &&
      (this.get_text() === "" ||
        this.get_text() == this._defaultItem.get_text())
    ) {
      f = this._defaultItem;
    }
    var d = !this.get_enableLoadOnDemand() && !this.get_allowCustomText();
    if (!f && d && this.get_items().get_count() > 0) {
      if (this.get_filter() != a.RadComboBoxFilter.None) {
        f = this.get_selectedItem();
        if (!f) {
          this.set_text("");
        } else {
          this.set_text(f.get_text());
          this.set_value(f.get_value());
        }
      } else {
        if (this.get_markFirstMatch() && !this.get_emptyMessage()) {
          if (this.get_text() === "") {
            this.set_text(this._originalText);
          }
          this.highlightMatches();
          this.selectText(0, 0);
          f = this.get_highlightedItem();
        }
      }
    }
    if (this.get_filter() != a.RadComboBoxFilter.None) {
      this.setAllItemsVisible(true);
    }
    if (!f) {
      var g = this.get_selectedItem();
      if (g && !d) {
        if (this.raise_selectedIndexChanging(null, c) === true) {
          this.set_text(g.get_text());
          return;
        }
        g.set_selected(false);
        this.set_selectedItem(null);
        this.set_selectedIndex(null);
        this.raise_selectedIndexChanged(null, c);
        var b = { Command: "Select", Index: -1 };
        this.postback(b);
        return;
      }
      if (g && d) {
        f = g;
      }
    }
    this._performSelect(f, c);
  };
})();
(function () {
  var a = $telerik.$;
  var b = Telerik.Web.UI;
  b.RadComboBox.prototype.get_selectElement = function () {
    return a(this.get_element()).find("select").get(0);
  };
  b.RadComboBox.prototype.get_selectElementText = function () {
    var c = this.get_selectElement();
    var d = "";
    if (c.options.length && c.selectedIndex > -1) {
      d = c.options[c.selectedIndex].text;
    }
    return d;
  };
  b.RadComboBox.prototype.get_selectedOption = function () {
    var c = this.get_selectElement();
    if (c.options.length && c.selectedIndex > -1) {
      return c.options[c.selectedIndex];
    }
    return null;
  };
  b.RadComboBox.prototype.get_simpleRendering = function () {
    if (!this._simpleRendering) {
      this._simpleRendering = false;
    } else {
      return this._simpleRendering;
    }
    if (
      a(this.get_element()).find("select").length > 0 &&
      this.get_inputDomElement() === null
    ) {
      this._simpleRendering = true;
    }
    return this._simpleRendering;
  };
  b.RadComboBox.prototype._initializeSelect = function () {
    var c = this;
    a(this.get_selectElement()).bind("change", function (d) {
      c._onSelectChange(d, c);
    });
  };
  b.RadComboBox.prototype._onSelectChange = function (c, d) {
    var f = c.target.options[c.target.selectedIndex];
    d._ensureChildControls();
    d._performSelect(f._item, c);
  };
  b.RadComboBox.prototype._disposeSelect = function () {
    a(this.get_selectElement()).unbind("change");
  };
})();
(function (b, a) {
  b.RadComboBoxDefaultItem = function () {
    b.RadComboBoxDefaultItem.initializeBase(this);
  };
  b.RadComboBoxDefaultItem.prototype = {
    _select: function (d) {
      if (!this.get_isEnabled() || this.get_isSeparator()) {
        return;
      }
      var c = this.get_comboBox();
      var h = c.get_text(),
        f = c._getLastSeparatorIndex(h),
        i = h.substring(0, f + 1) + this.get_text(),
        g = c.get_selectedItem();
      if (g) {
        g.set_selected(false);
      }
      c.clearSelection();
      c.get_inputDomElement().value = i;
      c._element.value = this.get_value();
      c.set_value(this.get_value());
      this.set_selected(true);
      this.highlight();
    },
  };
  b.RadComboBoxDefaultItem.registerClass(
    "Telerik.Web.UI.RadComboBoxDefaultItem",
    b.RadComboBoxItem
  );
})(Telerik.Web.UI, $telerik.$);

/* END Telerik.Web.UI.ComboBox.RadComboBoxScripts.js */
/* START Telerik.Web.UI.ComboBox.Views.ClassicView.js */
(function (a, b) {
  if (!b.RadComboBox.Views) {
    b.RadComboBox.Views = {};
  }
  b.RadComboBox.Views.Classic = function (c) {
    b.RadComboBox.makeEventHandler(this);
    this._owner = c;
    (this._enabled = c.get_enabled()),
      (this._wrapper = $telerik.getFirstChildByTagName(
        c.get_element(),
        "table",
        0
      ));
    a(c.get_element()).find("caption").hide();
  };
  b.RadComboBox.Views.Classic.prototype = {
    initialize: function () {
      this.get_wrapper().style.display = "";
      this.initDomEvents();
    },
    initDomEvents: function () {
      var f = this.get_wrapper(),
        e = this._owner,
        d = e.get_inputDomElement(),
        c = e.get_imageDomElement();
      this._onTableHoverDelegate = Function.createDelegate(
        this,
        this._onTableHover
      );
      $telerik.addExternalHandler(f, "mouseover", this._onTableHoverDelegate);
      this._onTableOutDelegate = Function.createDelegate(
        this,
        this._onTableOut
      );
      $telerik.addExternalHandler(f, "mouseout", this._onTableOutDelegate);
      this._onInputCellMouseUpDelegate = Function.createDelegate(
        this,
        this._onInputCellClick
      );
      $telerik.addExternalHandler(
        d.parentNode,
        "mouseup",
        this._onInputCellMouseUpDelegate
      );
      this._onImageClickDelegate = Function.createDelegate(
        this,
        this._onImageClick
      );
      $telerik.addHandler(c, "click", this._onImageClickDelegate);
    },
    dispose: function () {
      this.disposeEvents();
      this.disposeDomEvents();
      this._nulifyEventExpandos();
    },
    disposeDomEvents: function () {
      var f = this.get_wrapper(),
        e = this._owner,
        d = e.get_inputDomElement(),
        c = e.get_imageDomElement();
      $telerik.removeExternalHandler(
        f,
        "mouseover",
        this._onTableHoverDelegate
      );
      $telerik.removeExternalHandler(f, "mouseout", this._onTableOutDelegate);
      this._onTableHoverDelegate = null;
      this._onTableOutDelegate = null;
      if (d.parentNode) {
        $telerik.removeExternalHandler(
          d.parentNode,
          "mouseup",
          this._onInputCellMouseUpDelegate
        );
        this._onInputCellMouseUpDelegate = null;
      }
      if (c) {
        $telerik.removeHandler(c, "click", this._onImageClickDelegate);
        this._onImageClickDelegate = null;
      }
    },
    disable: function () {
      this.withWrapper(function (c) {
        a(c).attr("class", "rcbDisabled");
      });
    },
    enable: function () {
      this.withWrapper(function (c) {
        c.removeAttribute("class");
      });
    },
    repaint: function () {
      var i = this._owner,
        f = i.get_element(),
        g = a(f).find(".rcbLabel").get(0),
        k = this.get_wrapper(),
        j = k.getElementsByTagName("tr")[0];
      a(j).toggleClass("rcbReadOnly", i.get_readOnly());
      if (g) {
        var e = f.offsetWidth;
        var h = g.offsetWidth;
        var m = e - h;
        if (m === 0) {
          var c = f,
            d = c.style.width;
          if (d.indexOf("%", 0) == -1) {
            m = this._measureTableWidthWithLabel();
          }
        }
        if (m > 0) {
          var l = $telerik.getMargin(k, Telerik.Web.BoxSide.Right);
          if (m - l >= 0) {
            m -= l;
          }
        }
        k.style.width = m + "px";
      }
      k.style.display = "";
      if (i._fakeInput) {
        i._repaintFakeInput();
      }
    },
    focus: function (c) {
      this.withWrapper(function (d) {
        setTimeout(function () {
          a(d).attr("class", "rcbFocused");
        }, 0);
      });
    },
    blur: function (c) {
      this.withWrapper(function (d) {
        d.removeAttribute("class");
        if ($telerik.isIE) {
          a(d).removeAttr("class");
        }
      });
    },
    withWrapper: function (c) {
      var d = this.get_wrapper();
      if (d !== null) {
        c.apply(this, [d]);
      }
    },
    _nulifyEventExpandos: function () {
      var c = this._owner;
      c._inputDomElement._events = null;
      c._inputDomElement = null;
      c._imageDomElement._events = null;
      c._imageDomElement = null;
      if (this._wrapper) {
        this._wrapper.events = null;
        this._wrapper = null;
      }
    },
    _measureTableWidthWithLabel: function () {
      var i = this._owner,
        f = i.get_element(),
        g = a(f).find("label").get(0).cloneNode(false),
        d = this.get_wrapper().cloneNode(false),
        c = f.cloneNode(false);
      c.style.position = "absolute";
      c.style.top = "-1000px";
      c.style.left = "-1000px";
      c.appendChild(g);
      c.appendChild(d);
      document.body.appendChild(c);
      var l = document.createElement("td"),
        m = document.createElement("tr");
      m.appendChild(l);
      var k = document.createElement("tbody");
      k.appendChild(m);
      d.appendChild(k);
      var e = c.offsetWidth,
        h = g.offsetWidth,
        j = e - h;
      document.body.removeChild(c);
      return j;
    },
    _onTableHover: function (c) {
      if (!this._owner.get_enabled()) {
        return;
      }
      var d = this.get_wrapper();
      if (d !== null && d.className != "rcbFocused") {
        d.className = "rcbHovered";
      }
    },
    _onTableOut: function (c) {
      if (!this._owner.get_enabled()) {
        return;
      }
      var f = this._wrapper;
      var d = this._owner._getRelatedTarget(c);
      if (!d) {
        return;
      }
      while (d && d.nodeType !== 9) {
        if (d.parentNode && d.parentNode == f) {
          return;
        }
        d = d.parentNode;
      }
      if (f !== null && f.className == "rcbHovered") {
        f.className = "";
      }
    },
    _onInputCellClick: function (c) {
      this.trigger("inputClick", c);
    },
    _onImageClick: function (c) {
      this.trigger("buttonClick", c);
    },
    get_wrapper: function () {
      return this._wrapper;
    },
  };
})($telerik.$, Telerik.Web.UI);

/* END Telerik.Web.UI.ComboBox.Views.ClassicView.js */
/* START Telerik.Web.UI.Menu.RadMenuScripts.js */
(function (a, k) {
  Type.registerNamespace("Telerik.Web.UI");
  var b = Telerik.Web.UI,
    j = "rmLink",
    d = "rmDisabled",
    e = "rmExpanded",
    f = "rmFocused",
    h = "rmSelected",
    c = "rmClicked",
    g = "",
    i = ".";
  a.registerEnum(b, "RadMenuItemState", {
    Closed: 0,
    Open: 1,
    AboutToClose: 2,
    AboutToOpen: 3,
  });
  a.registerEnum(b, "MenuItemExpandMode", { ClientSide: 0, WebService: 1 });
  b.BaseMenuItem = function () {
    b.BaseMenuItem.initializeBase(this);
    this._zIndexStep = 1000;
    this._defaultScrollSize = 16;
    this._menu = null;
    this._groupSettings = new b.RadMenuItemGroupSettings({});
    this._imageUrl = null;
    this._enableImageSprite = null;
    this._flow = null;
    this._openedItem = null;
    this._timeoutRef = null;
    this._focused = false;
    this._clicked = false;
    this._hovered = false;
    this._isImageOnly = null;
    this._itemsLoaded = false;
    this._itemsLoading = false;
    this._adjustSiblingsWidthOnShow = false;
    this._state = b.RadMenuItemState.Closed;
    this._linkElement = null;
    this._templateElement = null;
    this._imageElement = null;
    this._childListElement = null;
    this._scrollWrapElement = null;
    this._slideWrapElement = null;
    this._animatedElement = null;
    this._animationContainer = null;
    this._childrenDetached = false;
    this._autoScrollActive = false;
    this._animationContainerOriginalSize = null;
    this._collapseAnimationEndedDelegate = null;
    this._expandAnimationEndedDelegate = null;
    this._slide = null;
    this._scroller = null;
    this._styleCssText = null;
    this._hasItems = null;
    this._view = null;
  };
  b.BaseMenuItem.prototype = {
    _disposeDomElement: function () {
      var l = this._slideWrapElement,
        m = this._parentItemElement;
      if (l) {
        l._item = null;
        l._itemTypeName = null;
      }
      if (m) {
        m._item = null;
        m._itemTypeName = null;
      }
      this._childListElement = null;
      this._contentTemplateContainer = null;
      this._linkElement = null;
      this._imageElement = null;
      this._textElement = null;
      this._toggleButtonElement = null;
      this._slideWrapElement = null;
      this._parentItemElement = null;
      this._scrollWrapElement = null;
      this._animatedElement = null;
    },
    get_linkElement: function () {
      if (!this._linkElement) {
        this._linkElement = a(this.get_element())
          .children(i + j)
          .get(0);
      }
      return this._linkElement;
    },
    get_templateElement: function () {
      return null;
    },
    get_imageElement: function () {
      return null;
    },
    get_menu: function () {
      return this._getControl();
    },
    get_items: function () {
      return this._getChildren();
    },
    get_navigateUrl: function () {
      var l = this.get_linkElement();
      if (!this.get_enabled() && l) {
        return a(l).data("href");
      } else {
        return this._getNavigateUrl();
      }
    },
    get_target: function () {
      return this._properties.getValue("target", null);
    },
    set_target: function (l) {
      this._properties.setValue("target", l);
      if (this.get_linkElement()) {
        this.get_linkElement().target = l;
      }
    },
    get_groupSettings: function () {
      return null;
    },
    set_groupSettings: function (l) {},
    get_isOpen: function () {
      if (this.get_parent()) {
        return this.get_parent().get_openedItem() == this;
      }
      return false;
    },
    get_nextItem: function () {
      return this.get_nextSibling();
    },
    get_previousItem: function () {
      return this.get_previousSibling();
    },
    get_focusedItem: function () {
      return this._focusedItem;
    },
    get_isSeparator: function () {
      return this._properties.getValue("isSeparator", false);
    },
    set_isSeparator: function (l) {
      this._properties.setValue("isSeparator", l, true);
    },
    get_openedItem: function () {
      return this._openedItem;
    },
    get_templated: function () {
      return this._properties.getValue("templated", false) == true;
    },
    get_hasContentTemplate: function () {
      return this._properties.getValue("hasContentTemplate", false) == true;
    },
    get_focused: function () {
      return this._focused;
    },
    set_focused: function (l) {
      this._setFocused(l);
    },
    get_selected: function () {
      return this._properties.getValue("selected", false) == true;
    },
    set_selected: function (m) {
      if (!this.get_enabled() && m) {
        return;
      }
      if (this.get_selected() == m) {
        return;
      }
      this._properties.setValue("selected", m);
      var l = this.get_menu();
      if (!l) {
        return;
      }
      if (m) {
        l._clearSelectedItem();
        l._registerSelectedItem(this);
      } else {
        l._unregisterSelectedItem(this);
      }
      this._updateImageSrc();
      this._updateLinkClass();
    },
    get_hoveredImageUrl: function () {
      return this._properties.getValue("hoveredImageUrl", null);
    },
    set_hoveredImageUrl: function (l) {
      this._properties.setValue("hoveredImageUrl", l, true);
    },
    get_clickedImageUrl: function () {
      return this._properties.getValue("clickedImageUrl", null);
    },
    set_clickedImageUrl: function (l) {
      this._properties.setValue("clickedImageUrl", l, true);
    },
    get_selectedImageUrl: function () {
      return this._properties.getValue("selectedImageUrl", null);
    },
    set_selectedImageUrl: function (l) {
      this._properties.setValue("selectedImageUrl", l, true);
    },
    get_imageUrl: function () {
      return this._properties.getValue("imageUrl", null);
    },
    set_imageUrl: function (l) {
      this._properties.setValue("imageUrl", l, true);
    },
    get_expandedImageUrl: function () {
      return this._properties.getValue("expandedImageUrl", null);
    },
    set_expandedImageUrl: function (l) {
      this._properties.setValue("expandedImageUrl", l, true);
    },
    get_disabledImageUrl: function () {
      return this._properties.getValue("disabledImageUrl", null);
    },
    set_disabledImageUrl: function (l) {
      this._properties.setValue("disabledImageUrl", l, true);
    },
    get_disabledCssClass: function () {
      return this._properties.getValue("disabledCssClass", d);
    },
    set_disabledCssClass: function (l) {
      this._properties.setValue("disabledCssClass", l, true);
      this._updateLinkClass();
    },
    get_expandedCssClass: function () {
      return this._properties.getValue("expandedCssClass", e);
    },
    set_expandedCssClass: function (l) {
      this._properties.setValue("expandedCssClass", l, true);
      this._updateLinkClass();
    },
    get_focusedCssClass: function () {
      return this._properties.getValue("focusedCssClass", f);
    },
    set_focusedCssClass: function (l) {
      this._properties.setValue("focusedCssClass", l, true);
      this._updateLinkClass();
    },
    get_selectedCssClass: function () {
      return this._properties.getValue("selectedCssClass", h);
    },
    set_selectedCssClass: function (l) {
      this._properties.setValue("selectedCssClass", l, true);
      this._updateLinkClass();
    },
    get_clickedCssClass: function () {
      return this._properties.getValue("clickedCssClass", c);
    },
    set_clickedCssClass: function (l) {
      this._properties.setValue("clickedCssClass", l, true);
      this._updateLinkClass();
    },
    get_outerCssClass: function () {
      return this._properties.getValue("outerCssClass", g);
    },
    set_outerCssClass: function (m) {
      var l = this.get_outerCssClass();
      this._properties.setValue("outerCssClass", m, true);
      this._updateItemClass(l, m);
    },
    get_postBack: function () {
      return this._properties.getValue("postBack", true) == true;
    },
    set_postBack: function (l) {
      this._properties.setValue("postBack", l);
    },
    get_expandMode: function () {
      return this._properties.getValue(
        "expandMode",
        b.MenuItemExpandMode.ClientSide
      );
    },
    set_expandMode: function (l) {
      this._properties.setValue("expandMode", l, true);
    },
    set_enabled: function (l) {
      b.BaseMenuItem.callBaseMethod(this, "set_enabled", [l]);
      this._updateLinkClass();
      this._updateImageSrc();
      if (this.get_menu() && this.get_menu().get_enableAriaSupport()) {
        a(this.get_element()).attr("aria-disabled", l);
      }
      if (l) {
        this._restoreNavigateUrl();
      } else {
        this._clearNavigateUrl();
      }
    },
    set_enableImageSprite: function (l) {
      this._properties.setValue("enableImageSprite", l);
      this._enableImageSprite = l;
    },
    get_enableImageSprite: function () {
      if (this._enableImageSprite === null) {
        var m = this.get_menu(),
          l = this._properties.getValue("enableImageSprite", null);
        if (m != null && l === null) {
          this._enableImageSprite = m._enableImageSprites;
        } else {
          this._enableImageSprite = l || false;
        }
      }
      return this._enableImageSprite;
    },
    get_level: function () {
      var m = this.get_parent();
      var l = 0;
      while (m) {
        if (
          b.ControlItemContainer.isInstanceOfType(m) ||
          b.RadMenu.isInstanceOfType(m)
        ) {
          return l;
        }
        l++;
        m = m.get_parent();
      }
      return l;
    },
    get_clientTemplate: function () {
      if (this._clientTemplate) {
        return this._clientTemplate;
      } else {
        if (this.get_menu()) {
          return this.get_menu().get_clientTemplate();
        } else {
          return null;
        }
      }
    },
    set_clientTemplate: function (l) {
      this._clientTemplate = l;
    },
    open: function () {
      this._open(null);
    },
    close: function () {
      this._close(null);
    },
    hide: function () {
      this.set_visible(false);
    },
    show: function () {
      this.set_visible(true);
    },
    focus: function (l) {
      this._setFocused(true, l);
    },
    blur: function (l) {
      this._setFocused(false, l);
    },
    focusFirstChild: function (l) {},
    focusLastChild: function (l) {},
    focusNextItem: function (l) {},
    focusPreviousItem: function (l) {},
    select: function () {
      this.set_selected(true);
      this.click();
    },
    unselect: function () {
      this.set_selected(false);
    },
    disable: function () {
      this.set_enabled(false);
    },
    enable: function () {
      this.set_enabled(true);
    },
    click: function () {
      this._click(null);
    },
    bindTemplate: function (l) {
      if (!l) {
        l = this._extractDataItem();
      }
      this._renderedClientTemplate = b.TemplateRenderer.renderTemplate(
        l,
        this.get_menu(),
        this
      );
      if (this.get_element()) {
        this._applyTemplate();
      }
    },
    _extractDataItem: function () {
      return {
        Text: this.get_text(),
        Value: this.get_value(),
        ImageUrl: this.get_imageUrl(),
        SelectedImageUrl: this.get_selectedImageUrl(),
        ClickedImageUrl: this.get_clickedImageUrl(),
        DisabledImageUrl: this.get_disabledImageUrl(),
        ExpandedImageUrl: this.get_expandedImageUrl(),
        HoveredImageUrl: this.get_hoveredImageUrl(),
        Attributes: this.get_attributes()._data,
      };
    },
    _shouldInitializeChild: function () {
      return true;
    },
    _removeToggleButton: function () {
      var m = this._getToggleButtonElement(),
        l = m.parentNode;
      l.removeChild(m);
      this._toggleButtonElement = null;
    },
    _createItemCollection: function () {
      var l = new b.RadMenuItemCollection(this);
      b.RadMenu._createChildControls(this, l);
      return l;
    },
    _getHasItems: function () {
      if (this._hasItems === null) {
        this._hasItems = this.get_itemData() && this.get_itemData().length > 0;
      }
      return this._hasItems;
    },
    _setHasItems: function (l) {
      this._hasItems = l;
    },
    _hasMultipleColumns: function () {
      return false;
    },
    _clearNavigateUrl: function () {
      var l = this.get_linkElement();
      if (!l) {
        return;
      }
      if (!this.get_enabled() && l.href) {
        a(l).data("href", this._getNavigateUrl());
        if ($telerik.isSafari && !$telerik.isChrome) {
          a(l).attr("href", "#");
        } else {
          a(l).removeAttr("href");
        }
      }
    },
    _restoreNavigateUrl: function () {
      var m = this.get_linkElement();
      if (!m) {
        return;
      }
      var l = a(m).data("href");
      if (this.get_enabled() && l) {
        m.href = l;
      }
    },
    _getData: function () {
      var l = b.BaseMenuItem.callBaseMethod(this, "_getData");
      var m = this.get_navigateUrl();
      if (m && m != "#" && location.href + "#" !== m) {
        l.navigateUrl = m;
      }
      if (this.get_imageUrl() !== null) {
        l.imageUrl = this.get_imageUrl();
      }
      return l;
    },
    _loadFromDictionary: function (l, q) {
      var o = {};
      for (var m in l) {
        if (m === "__type" || m === "Attributes") {
          continue;
        }
        var n = m.charAt(0).toLowerCase() + m.substr(1);
        var p = l[m];
        if (p === null || p === "") {
          continue;
        }
        o[n] = p;
      }
      this._properties.load(o);
      if (l.Attributes) {
        this.get_attributes()._load(l.Attributes, q);
      }
    },
    _replaceCssClass: function (l, n, m) {
      l.className = l.className.replace(n, m);
    },
    _cacheDomProperties: function () {
      this.get_disabledImageUrl();
      this.get_expandedImageUrl();
      this.get_hoveredImageUrl();
      this.get_selectedImageUrl();
      this.get_imageUrl();
      this.get_text();
      this.get_navigateUrl();
      this.get_target();
      for (var l = 0; l < this.get_items().get_count(); l++) {
        this.get_items().getItem(l)._cacheDomProperties();
      }
    },
    _closeChildren: function (n) {
      var m = this.get_items();
      for (var o = 0; o < m.get_count(); o++) {
        var l = m.getItem(o);
        l._stopAnimation();
        l._close(n);
      }
    },
    _preventClose: function () {
      var l = this.get_parent();
      if (this._state == b.RadMenuItemState.AboutToClose) {
        this._clearTimeout();
        this._state = b.RadMenuItemState.Open;
        l._openedItem = this;
      }
      if (l._preventClose) {
        l._preventClose();
      }
    },
    _setTimeout: function (l, m) {
      this._timeoutRef = setTimeout(l, m);
    },
    _clearTimeout: function () {
      if (this._timeoutRef) {
        clearTimeout(this._timeoutRef);
        this._timeoutRef = null;
      }
    },
    _updateItemClass: function (n, m) {
      var l = a(this.get_element());
      if (l.length) {
        if (n && l.hasClass(n)) {
          l.removeClass(n);
        }
        if (m) {
          l.addClass(m);
        }
      }
    },
    _updateImageSrc: function () {},
    _updateTextElementClass: function () {},
    _open: function (l) {
      var m = this.get_menu(),
        n = new b.RadMenuItemOpeningEventArgs(this, l);
      if (!this.get_enabled()) {
        return;
      }
      m._raiseEvent("itemOpening", n);
      if (n.get_cancel()) {
        return;
      }
      if (this._isWebServiceCallNeeded()) {
        this._loadChildrenFromWebService();
        return;
      }
      if (!this._shouldOpen()) {
        return;
      }
      this._doOpen(l);
    },
    _close: function (m) {
      if (this.get_isSeparator() || this._state == b.RadMenuItemState.Closed) {
        return;
      }
      var n = this.get_menu(),
        l = new b.RadMenuItemClosingEventArgs(this, m);
      n._raiseEvent("itemClosing", l);
      if (l.get_cancel()) {
        return;
      }
      this._doClose(m);
    },
    _shouldOpen: function () {
      return (
        this.get_items().get_count() > 0 ||
        this.get_hasContentTemplate() ||
        this._isWebServiceCallNeeded()
      );
    },
    _shouldPostBack: function () {
      if (!this.get_menu()) {
        return false;
      }
      return this.get_postBack() && this.get_menu()._postBackReference;
    },
    _canFocus: function () {
      return !this.get_isSeparator() && this.get_visible();
    },
    _isWebServiceCallNeeded: function () {
      if (this._itemsLoading) {
        return false;
      }
      return (
        !this._itemsLoaded &&
        this.get_expandMode() == b.MenuItemExpandMode.WebService
      );
    },
    _loadChildrenFromWebService: function () {
      var l = this.get_menu();
      if (l._clientDataSourceID) {
        l._loadChildrenFromClientDataSource(this);
      } else {
        l._loadChildrenFromWebService(this);
      }
    },
  };
  b.BaseMenuItem.registerClass("Telerik.Web.UI.BaseMenuItem", b.ControlItem);
})($telerik.$);
(function (a, b) {
  a.RadMenuItemCollection = function (c) {
    a.RadMenuItemCollection.initializeBase(this, [c]);
  };
  a.RadMenuItemCollection.prototype = {};
  a.RadMenuItemCollection.registerClass(
    "Telerik.Web.UI.RadMenuItemCollection",
    a.ControlItemCollection
  );
})(Telerik.Web.UI);
(function (a) {
  a.RadMenuItemEventArgs = function (c, b) {
    a.RadMenuItemEventArgs.initializeBase(this);
    this._item = c;
    this._domEvent = b || null;
  };
  a.RadMenuItemEventArgs.prototype = {
    get_item: function () {
      return this._item;
    },
    get_domEvent: function () {
      return this._domEvent;
    },
  };
  a.RadMenuItemEventArgs.registerClass(
    "Telerik.Web.UI.RadMenuItemEventArgs",
    Sys.EventArgs
  );
  a.RadMenuItemCancelEventArgs = function (c, b) {
    a.RadMenuItemCancelEventArgs.initializeBase(this);
    this._item = c;
    this._domEvent = b || null;
  };
  a.RadMenuItemCancelEventArgs.prototype = {
    get_item: function () {
      return this._item;
    },
    get_domEvent: function () {
      return this._domEvent;
    },
  };
  a.RadMenuItemCancelEventArgs.registerClass(
    "Telerik.Web.UI.RadMenuItemCancelEventArgs",
    Sys.CancelEventArgs
  );
  a.RadMenuMouseOverEventArgs = function (c, b) {
    a.RadMenuMouseOverEventArgs.initializeBase(this, [c, b || null]);
  };
  a.RadMenuMouseOverEventArgs.registerClass(
    "Telerik.Web.UI.RadMenuMouseOverEventArgs",
    a.RadMenuItemEventArgs
  );
  a.RadMenuMouseOutEventArgs = function (c, b) {
    a.RadMenuMouseOutEventArgs.initializeBase(this, [c, b || null]);
  };
  a.RadMenuMouseOutEventArgs.registerClass(
    "Telerik.Web.UI.RadMenuMouseOutEventArgs",
    a.RadMenuItemEventArgs
  );
  a.RadMenuItemFocusEventArgs = function (c, b) {
    a.RadMenuItemFocusEventArgs.initializeBase(this, [c, b || null]);
  };
  a.RadMenuItemFocusEventArgs.registerClass(
    "Telerik.Web.UI.RadMenuItemFocusEventArgs",
    a.RadMenuItemEventArgs
  );
  a.RadMenuItemBlurEventArgs = function (c, b) {
    a.RadMenuItemBlurEventArgs.initializeBase(this, [c, b || null]);
  };
  a.RadMenuItemBlurEventArgs.registerClass(
    "Telerik.Web.UI.RadMenuItemBlurEventArgs",
    a.RadMenuItemEventArgs
  );
  a.RadMenuItemClickingEventArgs = function (c, b) {
    a.RadMenuItemClickingEventArgs.initializeBase(this, [c, b || null]);
  };
  a.RadMenuItemClickingEventArgs.registerClass(
    "Telerik.Web.UI.RadMenuItemClickingEventArgs",
    a.RadMenuItemCancelEventArgs
  );
  a.RadMenuItemClickedEventArgs = function (c, b) {
    a.RadMenuItemClickedEventArgs.initializeBase(this, [c, b || null]);
  };
  a.RadMenuItemClickedEventArgs.registerClass(
    "Telerik.Web.UI.RadMenuItemClickedEventArgs",
    a.RadMenuItemEventArgs
  );
  a.RadMenuItemOpeningEventArgs = function (c, b) {
    a.RadMenuItemOpeningEventArgs.initializeBase(this, [c, b || null]);
  };
  a.RadMenuItemOpeningEventArgs.registerClass(
    "Telerik.Web.UI.RadMenuItemOpeningEventArgs",
    a.RadMenuItemCancelEventArgs
  );
  a.RadMenuItemOpenedEventArgs = function (c, b) {
    a.RadMenuItemOpenedEventArgs.initializeBase(this, [c, b || null]);
  };
  a.RadMenuItemOpenedEventArgs.registerClass(
    "Telerik.Web.UI.RadMenuItemOpenedEventArgs",
    a.RadMenuItemEventArgs
  );
  a.RadMenuItemClosingEventArgs = function (c, b) {
    a.RadMenuItemClosingEventArgs.initializeBase(this, [c, b || null]);
  };
  a.RadMenuItemClosingEventArgs.registerClass(
    "Telerik.Web.UI.RadMenuItemClosingEventArgs",
    a.RadMenuItemCancelEventArgs
  );
  a.RadMenuItemClosedEventArgs = function (c, b) {
    a.RadMenuItemClosedEventArgs.initializeBase(this, [c, b || null]);
  };
  a.RadMenuItemClosedEventArgs.registerClass(
    "Telerik.Web.UI.RadMenuItemClosedEventArgs",
    a.RadMenuItemEventArgs
  );
  a.RadMenuItemPopulatingEventArgs = function (c, b) {
    a.RadMenuItemPopulatingEventArgs.initializeBase(this, [c]);
    this._context = b;
  };
  a.RadMenuItemPopulatingEventArgs.prototype = {
    get_context: function () {
      return this._context;
    },
  };
  a.RadMenuItemPopulatingEventArgs.registerClass(
    "Telerik.Web.UI.RadMenuItemPopulatingEventArgs",
    a.RadMenuItemCancelEventArgs
  );
  a.RadMenuItemPopulatedEventArgs = function (b) {
    a.RadMenuItemPopulatedEventArgs.initializeBase(this, [b]);
  };
  a.RadMenuItemPopulatedEventArgs.registerClass(
    "Telerik.Web.UI.RadMenuItemPopulatedEventArgs",
    a.RadMenuItemEventArgs
  );
  a.RadMenuItemPopulationFailedEventArgs = function (c, b) {
    a.RadMenuItemPopulationFailedEventArgs.initializeBase(this, [c]);
    this._errorMessage = b;
  };
  a.RadMenuItemPopulationFailedEventArgs.prototype = {
    get_errorMessage: function () {
      return this._errorMessage;
    },
  };
  a.RadMenuItemPopulationFailedEventArgs.registerClass(
    "Telerik.Web.UI.RadMenuItemPopulationFailedEventArgs",
    a.RadMenuItemCancelEventArgs
  );
})(Telerik.Web.UI);
(function (a, N) {
  $telerik.findMenu = $find;
  $telerik.toMenu = function (O) {
    return O;
  };
  Type.registerNamespace("Telerik.Web.UI");
  var c = Telerik.Web.UI,
    b = Sys.Serialization.JavaScriptSerializer,
    j = ".",
    h = "DOMActivate",
    A = "RadMenu_rtl",
    w = "RadMenuPopup",
    x = "RadMenuPopup_rtl",
    o = "rmDisabled",
    m = "rmSlide",
    s = "rmItem",
    u = "rmLink",
    B = "rmToggle",
    z = "rmRootToggle",
    v = "rmParentItem",
    y = "rmRootGroup",
    q = "rmGroup",
    r = "rmHiddenPointer",
    t = "rmLeft",
    p = "rmExpanded",
    n = ".rmTopArrow, .rmBottomArrow, .rmLeftArrow, .rmRightArrow",
    f = "click",
    I = "mouseup",
    C = $telerik.isTouchDevice ? "touchend" : "click",
    F = $telerik.isTouchDevice ? "touchstart" : "mousedown",
    E = $telerik.isTouchDevice ? "touchend" : "mouseup",
    D = $telerik.isTouchDevice ? "mouseup" : "click",
    H = $telerik.isTouchDevice ? "touchstart" : "mouseover",
    G = $telerik.isTouchDevice ? "touchend" : "mouseout",
    d = "blur",
    k = "focus",
    l = "keydown",
    J = "mousewheel",
    i = "DOMMouseScroll",
    g = 14,
    K = "(orientation: portrait)",
    e = { left: "100%", opacity: 0 },
    L = { left: 0, opacity: 1 },
    M = "matchMedia" in window;
  c.RadMenu = function (O) {
    c.RadMenu.initializeBase(this, [O]);
    this._childTypeName = "";
    this._selectedValue = "";
    this._itemData = null;
    this._expandAnimation = new c.AnimationSettings({});
    this._collapseAnimation = new c.AnimationSettings({});
    this._flow = c.ItemFlow.Horizontal;
    this._defaultGroupSettings = new c.RadMenuItemGroupSettings({});
    this._childListElement = null;
    this._popUpElement = null;
    this._postBackReference = null;
    this._onClickDelegate = null;
    this._webServiceSettings = new c.WebServiceSettings({});
    this._persistLoadOnDemandItems = true;
    this._enableOverlay = true;
    this._childListElementCssClass = "";
    this._selectedItemIndex = null;
    this._eventPreventDelay = 250;
    this._enabled = true;
    this._visible = true;
    this._openedItem = null;
    this._childrenDetached = false;
    this._originalZIndex = null;
    this._defaultZIndex = 7000;
    this._zIndexIncrementDepth = 0;
    this._fireEvents = true;
    this._webServiceLoader = null;
    this._preventBlurEvent = false;
    this._onMouseOutDelegate = null;
    this._onClickDelegate = null;
    this._isUsedOnTouchDevices = false;
    this._cachedClickedIndex = null;
    this._rightToLeft = null;
    this._skin = null;
    this._enableItemImagesPreloading = false;
    this._keyboardNavigator = null;
    this._isMobile = false;
    this._opened = false;
    this._maintainState = false;
    this._clientDataSource = null;
    this._dataFieldParentID = "";
    this._dataFieldID = "";
    this._dataNavigateUrlField = "";
    this._animatedHeight = 200;
    this._popUpHeight = "";
    this._ariaSettings = null;
  };
  c.RadMenu.prototype = {
    initialize: function () {
      this._isMobile = this._renderMode === c.RenderMode.Mobile;
      this._childTypeName = this._isMobile
        ? "Telerik.Web.UI.MobileMenuItem"
        : "Telerik.Web.UI.RadMenuItem";
      c.RadMenu.callBaseMethod(this, "initialize");
      if (this._isMobile) {
        this._initializeMobile();
      } else {
        this._initialize();
      }
      if (!this.get_enabled()) {
        this.set_enabled(false);
      }
      if (this.get_webServiceSettings().get_isOData()) {
        this._initializeWebServiceLoader();
        if (this.get_items().get_count() == 0) {
          var O = a.raiseCancellableControlEvent(this, "menuPopulating", {});
          if (!O) {
            this._webServiceLoader.loadData({ isRootLevel: true }, this);
          }
        }
      }
      this._addFocusStateUpdate();
      this._raiseEvent("load", null);
      this._initializeExpandState();
      this._cdInitDelegate = a.proxy(this._initializeClientDataSource, this);
      Sys.Application.add_load(this._cdInitDelegate);
      if (this.get_enableAriaSupport()) {
        this._applyAriaSupport();
      }
    },
    _initialize: function () {
      var Q = this,
        P = Q.get_element(),
        O = a(Q._getMainElement());
      this._isUsedOnTouchDevices = $telerik.isTouchDevice;
      P.value = this._selectedValue;
      if (this.get_rightToLeft()) {
        this._initRightToLeft();
      }
      if (this._flow == c.ItemFlow.Vertical && this.get_childListElement()) {
        this._adjustRootItemWidth();
      }
      this._originalZIndex = parseInt(
        $telerik.getCurrentStyle(P, "zIndex"),
        10
      );
      if (!this._originalZIndex) {
        P.style.zIndex = this._defaultZIndex;
        this._originalZIndex = this._defaultZIndex;
      }
      this._keyboardNavigator = new c.RadMenu.KeyboardNavigator(this);
      this._onClickDelegate = Function.createDelegate(this, this._onClick);
      $telerik.addHandler(document, f, this._onClickDelegate);
      if (!this.get_clickToOpen()) {
        if ($telerik.isIE) {
          this._onMouseOutDelegate = Function.createDelegate(
            this,
            this._onMouseOut
          );
          $telerik.addExternalHandler(
            document.documentElement,
            "mouseout",
            this._onMouseOutDelegate
          );
        }
      }
      if (this._isUsedOnTouchDevices) {
        O.on(f, j + s, function (R) {
          Q._onItemTouchEnd(R);
        });
      } else {
        this._eventMap.addHandlerForClassName(
          "mouseover",
          s,
          this._onItemMouseOver
        );
        this._eventMap.addHandlerForClassName(
          "mouseout",
          s,
          this._onItemMouseOut,
          true
        );
        this._eventMap.addHandlerForClassName(
          "dragstart",
          s,
          this._onItemDragStart
        );
        this._eventMap.addHandlerForClassName(f, u, this._onItemClick);
        this._eventMap.addHandlerForClassName(f, s, this._onItemClick);
      }
      this._eventMap.addHandlerForClassName(
        "mouseover",
        u,
        this._onLinkMouseOver
      );
      this._eventMap.addHandlerForClassName(
        "mouseout",
        u,
        this._onLinkMouseOut,
        true
      );
      this._eventMap.addHandlerForClassName(F, u, this._onLinkMouseDown);
      this._eventMap.addHandlerForClassName(E, u, this._onLinkMouseUp);
      this._eventMap.addHandlerForClassName(
        E,
        "rmTemplate",
        this._onTemplasteLinkMouseUp
      );
      this._eventMap.addHandlerForClassName("blur", u, this._onLinkBlur);
      this._eventMap.addHandlerForClassName("deactivate", u, this._onLinkBlur);
      this._eventMap.addHandlerForClassName("focus", u, this._onLinkFocus);
      this._eventMap.addHandlerForClassName("activate", u, this._onLinkFocus);
      if ($telerik.isChrome) {
        a(Q.get_element()).on(h, function (R) {
          Q._focus(R);
        });
      }
      if ($telerik.isFirefox) {
        O.on(i, function (R) {
          Q._onItemMousewheel(R);
        });
      }
      this._initializeKeyboardEvents();
      O.on(F, n, function (R) {
        Q._onArrowMouseDown(R.target);
      })
        .on(E, n, function (R) {
          Q._onArrowMouseUp(R.target);
        })
        .on(H, n, function (R) {
          Q._onArrowMouseOver(
            R.target,
            c.RadMenu._resolveDirectionFromClass(this.className)
          );
        })
        .on(G, n, function (R) {
          Q._onArrowMouseOut(R.target);
        })
        .on(J, j + s, function (R) {
          Q._onItemMousewheel(R);
        })
        .on(f, n, function (R) {
          R.preventDefault();
          R.stopPropagation();
        });
      this._initializeScroller();
    },
    _initializeKeyboardEvents: function () {
      var P = this,
        O = a(P._getMainElement());
      O.on(l, function (Q) {
        P._onKeyDown(Q);
      })
        .on(k, function (Q) {
          P._focus(Q);
        })
        .on(d, function (Q) {
          var R = P.get_focusedItem();
          var S = P._extractItemFromDomElement(Q.relatedTarget);
          if (R && R !== S) {
            R.blur(Q);
          }
        });
    },
    _initializeMobile: function () {
      var R = this,
        O = a(R._getPopUpElement()),
        P = a(R._element).find(j + z),
        Q = false;
      this._detachPopUpContainer();
      this._sizeAnimationContainer();
      if (this.get_rightToLeft()) {
        O.addClass(x).attr("dir", "rtl");
      }
      O.on(C, j + s, function (S) {
        S.stopPropagation();
      })
        .on("touchstart", j + u, function (S) {
          Q = false;
        })
        .on("touchmove", j + u, function (S) {
          Q = true;
        })
        .on(C, j + u, function (S) {
          S.stopPropagation();
          if (!Q) {
            R._onLinkClick(S);
          }
        })
        .on(C, j + B, function (S) {
          S.stopPropagation();
          S.preventDefault();
          setTimeout(function () {
            R._onToggleClick(S);
          }, 150);
        })
        .on(C, j + v, function (S) {
          S.stopPropagation();
          S.preventDefault();
          setTimeout(function () {
            R._onParentItemClick(S);
          }, 150);
        })
        .on(C, j + q, function (S) {
          S.stopPropagation();
        });
      P.on(C, function (S) {
        S.stopPropagation();
        if (!R._opened) {
          R._positionPopUpContainer();
        }
        R._animatePopUp();
      });
      a(document).on(D + j + R.get_id(), function (S) {
        if (S.button && S.button != 0) {
          return;
        }
        if (R._opened) {
          R._animatePopUp();
        }
      });
      if ($telerik.isTouchDevice) {
        O.on(I, j + s, function (S) {
          S.stopPropagation();
        })
          .on(I, j + u, function (S) {
            S.stopPropagation();
          })
          .on(I, j + q, function (S) {
            S.stopPropagation();
          });
        P.on(I, function (S) {
          S.stopPropagation();
        });
      }
      if (M) {
        R._mediaListenerDelegate = Function.createDelegate(
          R,
          R._onOrientationChange
        );
        R._mediaQuery = window.matchMedia(K);
        R._mediaQuery.addListener(R._mediaListenerDelegate);
      }
    },
    _addFocusStateUpdate: function () {
      this.add_itemFocus(function (P, O) {
        O.get_item()._focused = true;
        O.get_item()._updateLinkClass();
      });
      this.add_itemBlur(function (P, O) {
        O.get_item()._focused = false;
        O.get_item()._updateLinkClass();
      });
    },
    _applyAriaSupport: function () {
      this._applyMainElementAttributes();
      if (this._ariaSettings) {
        var P = b.deserialize(this._ariaSettings);
        var O = new c.WaiAriaDecorator(this._getMainElement(), P);
        O.setAttributes();
      }
    },
    _applyMainElementAttributes: function () {
      var R = this,
        O = a(R._getMainElement());
      O.attr({
        role: "menubar",
        "aria-disabled": !R.get_enabled(),
        "aria-activedescendant": R.get_id() + "_active",
      });
      for (var Q = 0; Q < R.get_allItems().length; Q++) {
        var P = R.get_allItems()[Q];
        if (P.get_isSeparator()) {
          a(P.get_element()).attr({ role: "separator" });
        } else {
          a(P.get_element()).attr({
            role: "menuitem",
            "aria-disabled": !P.get_enabled(),
            "aria-haspopup": P.get_items().get_count() > 0,
          });
        }
        if (P.get_items().get_count() > 0) {
          a(P._childListElement).attr({ role: "menu", "aria-hidden": true });
        }
      }
    },
    _focus: function (P) {
      var Q = this.get_focusedItem();
      var O = a(P.target);
      if (
        O.closest(".rmTemplate").length > 0 ||
        O.closest(this._scrollWrapElement).length > 0
      ) {
        return false;
      }
      if (!Q) {
        Q =
          this._extractItemFromDomElement(P.relatedTarget) ||
          this.get_selectedItem();
      }
      if (Q) {
        Q.focus(P);
      } else {
        this.get_items().getItem(0).focus(P);
      }
    },
    _triggerEventOnce: function (O, P, S) {
      var R = this;
      var Q;
      if (this._preventBlurEvent) {
        this._preventBlurEvent = false;
        return;
      }
      if (!R["_" + O] || R["_" + O] != P.get_item() || S == "click") {
        R["_" + O] = P.get_item();
        if (S !== "click") {
          R._raiseEvent(O, P);
        }
        clearTimeout(Q);
        Q = window.setTimeout(function () {
          R["_" + O] = null;
        }, R._eventPreventDelay);
      }
    },
    dispose: function () {
      if (this._isMobile) {
        this._disposeMobile();
      } else {
        this._diposeDesktop();
      }
      c.RadMenu.callBaseMethod(this, "dispose");
    },
    _diposeDesktop: function () {
      if (this._keyboardNavigator) {
        this._keyboardNavigator._dispose();
        this._keyboardNavigator = null;
      }
      if (this._onClickDelegate) {
        $telerik.removeHandler(document, f, this._onClickDelegate);
        this._onClickDelegate = null;
      }
      if (this._onMouseOutDelegate) {
        $telerik.removeExternalHandler(
          document.documentElement,
          "mouseout",
          this._onMouseOutDelegate
        );
        this._onMouseOutDelegate = null;
      }
      if (this._isUsedOnTouchDevices) {
        a(this.get_childListElement()).off();
      }
      if (this._eventMap) {
        this._eventMap.dispose();
        this._eventMap = null;
      }
      a(this._element).off();
      if (this._scroller) {
        this._scroller.dispose();
        this._scroller = null;
      }
    },
    _disposeMobile: function () {
      this._popUpElement = null;
      this._animationContainer = null;
      a(this._getPopUpElement()).off();
      a(this._element)
        .find(j + z)
        .off();
      a(document).off(D + j + this.get_id());
      if (this._mediaQuery && this._mediaListenerDelegate) {
        this._mediaQuery.removeListener(this._mediaListenerDelegate);
        this._mediaListenerDelegate = null;
      }
    },
    get_rippleZonesConfiguration: function () {
      var P = this._getPopUpElement();
      var O = P ? ".rmRootToggle" : ".rmLink";
      var Q = [
        {
          element: this._getMainElement(),
          rippleConfigurations: [
            { containerSelector: O, disabledClass: "rmDisabled" },
            {
              containerSelector: ".rmRightArrow, .rmLeftArrow",
              autoHide: true,
              disabledClass: "rmDisabled",
            },
          ],
        },
      ];
      if (P) {
        Q[Q.length] = {
          element: P,
          rippleConfigurations: [
            { containerSelector: ".rmItem", disabledClass: "rmDisabled" },
          ],
        };
      }
      return Q;
    },
    get_maintainState: function () {
      return this._maintainState;
    },
    set_maintainState: function (O) {
      this._maintainState = !!O;
    },
    get_items: function () {
      return this._getChildren();
    },
    set_items: function (O) {
      this._children = O;
    },
    get_childListElement: function () {
      var O, Q, P;
      if (!this._childListElement) {
        P = this._getPopUpElement();
        if (P) {
          this._childListElement = a(P)
            .find(j + y)
            .get(0);
        } else {
          O = this.get_element();
          Q = this._getScrollWrapElement();
          if (Q) {
            O = Q;
          }
          this._childListElement = $telerik.getFirstChildByTagName(O, "ul", 0);
        }
      }
      return this._childListElement;
    },
    get_expandAnimation: function () {
      return this._expandAnimation;
    },
    set_expandAnimation: function (P) {
      var O = Sys.Serialization.JavaScriptSerializer.deserialize(P);
      this._expandAnimation = new c.AnimationSettings(O);
    },
    get_collapseAnimation: function () {
      return this._collapseAnimation;
    },
    set_collapseAnimation: function (P) {
      var O = Sys.Serialization.JavaScriptSerializer.deserialize(P);
      this._collapseAnimation = new c.AnimationSettings(O);
    },
    get_defaultGroupSettings: function () {
      return this._defaultGroupSettings;
    },
    set_defaultGroupSettings: function (P) {
      var O = Sys.Serialization.JavaScriptSerializer.deserialize(P);
      this._defaultGroupSettings = new c.RadMenuItemGroupSettings(O);
    },
    get_itemData: function () {
      return this._itemData;
    },
    set_itemData: function (O) {
      if (this._enableItemImagesPreloading) {
        c.RadMenu._preloadItemImages(O);
      }
      this._itemData = O;
    },
    set_enabled: function (T) {
      c.RadMenu.callBaseMethod(this, "set_enabled", [T]);
      if (!this.get_isInitialized()) {
        return;
      }
      this.get_element().disabled = !T;
      var S = this.get_items(),
        O = a(this._getRootToggleElement()),
        R = S.get_count(),
        P = T ? "enable" : "disable";
      O.toggleClass(o, !T);
      if (this.get_enableAriaSupport()) {
        a(this.get_element()).attr("aria-disabled", !T);
      }
      this[P + "Events"]();
      for (var Q = 0; Q < R; Q++) {
        S.getItem(Q)[P]();
      }
    },
    get_focusedItem: function () {
      return this._focusedItem;
    },
    get_openedItem: function () {
      return this._openedItem;
    },
    get_rightToLeft: function () {
      if (this._rightToLeft === null) {
        this._rightToLeft = c.RadMenu._requiresRightToLeft(this.get_element());
      }
      return this._rightToLeft;
    },
    set_rightToLeft: function (O) {
      this._rightToLeft = O;
    },
    get_selectedItem: function () {
      if (!this._childControlsCreated) {
        return null;
      }
      if (this._selectedItemIndex) {
        return this._findItemByHierarchicalIndex(this._selectedItemIndex);
      }
      return null;
    },
    createMenuItem: function () {
      return this._isMobile ? new c.MobileMenuItem() : new c.RadMenuItem();
    },
    repaint: function () {
      if (!this._isMobile) {
        var P = this._flow == c.ItemFlow.Vertical,
          O = this.get_element();
        if (P) {
          this._adjustRootItemWidth();
        }
        if (this._scroller) {
          var Q = this._getScrollWrapElement();
          if (P) {
            Q.style.height = O.style.height;
          } else {
            Q.style.width = O.style.width;
          }
          this._initializeScroller();
        }
        window.setTimeout(function () {
          O.style.cssText = O.style.cssText;
        }, 0);
      } else {
        this._sizeAnimationContainer();
      }
    },
    saveClientState: function () {
      var P = this._log._logEntries;
      var O = { logEntries: P };
      if (this._selectedItemIndex) {
        O.selectedItemIndex = this._selectedItemIndex;
      }
      return Sys.Serialization.JavaScriptSerializer.serialize(O);
    },
    close: function () {
      var O = this.get_openedItem();
      if (O) {
        var P = this.get_selectedItem();
        if (P) {
          P.set_selected(false);
        }
        O.close();
      }
      if (this.get_clickToOpen()) {
        this.set_clicked(false);
      }
      if (this._isMobile) {
        if (this._opened) {
          this._animatePopUp();
        }
      }
    },
    disable: function () {
      this.set_enabled(false);
    },
    enable: function () {
      this.set_enabled(true);
    },
    disableEvents: function () {
      this._fireEvents = false;
    },
    enableEvents: function () {
      this._fireEvents = true;
    },
    focus: function () {
      this.get_element().focus();
    },
    findItemByText: function (O) {
      return this._findItemByText(O);
    },
    findItemByUrl: function (O) {
      return this._findItemByUrl(O);
    },
    findItemByAbsoluteUrl: function (O) {
      return this._findItemByAbsoluteUrl(O);
    },
    findItemByValue: function (O) {
      return this._findItemByValue(O);
    },
    findItemByAttribute: function (O, P) {
      return this._findItemByAttribute(O, P);
    },
    get_allItems: function () {
      return this._getAllItems();
    },
    get_persistLoadOnDemandItems: function () {
      return this._persistLoadOnDemandItems;
    },
    set_persistLoadOnDemandItems: function (O) {
      this._persistLoadOnDemandItems = O;
    },
    get_enableOverlay: function () {
      return this._enableOverlay;
    },
    set_enableOverlay: function (O) {
      this._enableOverlay = O;
    },
    _detachPopUpContainer: function () {
      a(document.body).find("form").append(this._getPopUpElement());
    },
    _positionPopUpContainer: function () {
      var P = a(this._getRootToggleElement()),
        O = a(this._getPopUpElement()),
        Q = document.documentElement.clientWidth,
        S = P.offset(),
        R = { left: "auto", right: "auto" };
      if (S.left > Math.round(Q / 2)) {
        R.right = Q - (S.left + P.outerWidth());
        O.removeClass(t);
      } else {
        R.left = S.left;
        O.addClass(t);
      }
      R.top = S.top + P.height() + g;
      O.css(R);
    },
    _initializeExpandState: function () {
      var O = this._cachedClickedIndex;
      if (this._isUsedOnTouchDevices && O) {
        var P = this._findItemByHierarchicalIndex(O);
        if (P && P.get_items().get_count() > 0) {
          c.RadMenu._expandItemsRecursively(this, O);
        }
      }
    },
    _isMainElementDescendant: function (O) {
      return $telerik.isDescendant(this.get_element(), O);
    },
    _createChildControls: function () {
      this._children = new c.RadMenuItemCollection(this);
      c.RadMenu._createChildControls(this, this._children);
    },
    _createChildListElement: function () {
      if (!this._childListElementCssClass) {
        return;
      }
      var Q = this._getPopUpElement() || this.get_element(),
        O = a("<ul class='" + this._childListElementCssClass + "'></ul>"),
        P = a(Q).find("div.rmScrollWrap, div.rmSlide");
      if (P.length == 1) {
        O.appendTo(P);
      } else {
        O.appendTo(Q);
      }
    },
    _getChildElements: function () {
      return a(this.get_childListElement()).children(".rmItem");
    },
    _getRootToggleElement: function () {
      if (!this._rootToggleElement) {
        this._rootToggleElement = a(this._element)
          .find(j + z)
          .get(0);
      }
      return this._rootToggleElement;
    },
    _getPopUpElement: function () {
      if (!this._popUpElement) {
        this._popUpElement = a(this._element)
          .find(j + w)
          .get(0);
      }
      return this._popUpElement;
    },
    _getAnimationContainerElement: function () {
      if (!this._animationContainer) {
        this._animationContainer = a(this._popUpElement)
          .find(j + m)
          .get(0);
      }
      return this._animationContainer;
    },
    _getScrollWrapElement: function () {
      if (!this._scrollWrapElement) {
        var O = $telerik.getFirstChildByTagName(this.get_element(), "div", 0);
        if (O && Sys.UI.DomElement.containsCssClass(O, "rmScrollWrap")) {
          this._scrollWrapElement = O;
        }
      }
      return this._scrollWrapElement;
    },
    _clearSelectedItem: function () {
      var O = this.get_selectedItem();
      if (O) {
        O.set_selected(false);
      }
    },
    _registerSelectedItem: function (O) {
      this._selectedItemIndex = O._getHierarchicalIndex();
      this.updateClientState();
      this._updateValidationField(O);
    },
    _unregisterSelectedItem: function (O) {
      if (O._getHierarchicalIndex() != this._selectedItemIndex) {
        return;
      }
      this._selectedItemIndex = null;
      this.updateClientState();
      this._updateValidationField(this.get_selectedItem());
    },
    _updateValidationField: function (O) {
      var P = "";
      if (O) {
        P = O.get_value();
        if (P === null) {
          P = O.get_text();
        }
      }
      this.get_element().value = P;
    },
    _onMouseOut: function (O) {
      var Q = O.relatedTarget ? O.relatedTarget : O.toElement,
        R = this;
      if (!Q && !this._isMainElementDescendant(O.target)) {
        try {
          setTimeout(function () {
            R.close();
          }, this.get_collapseDelay());
        } catch (P) {}
      }
    },
    _onClick: function (P) {
      if (!this._isMainElementDescendant(P.target)) {
        var O = this.get_clickToOpen();
        if (this._focusedItem || O) {
          this.close();
        }
      }
    },
    _onItemMouseOver: function (O) {
      var P = this._extractItemFromDomElement(O.eventMapTarget),
        R,
        Q,
        S = O.target;
      if (!P.get_enabled() || a(S).hasClass(m)) {
        return true;
      }
      if (c.RadMenu._isTargetToggleButton(S)) {
        if (O.preventDefault) {
          O.preventDefault();
        }
        return false;
      }
      P._preventClose();
      if (this.get_clickToOpen() && !this.get_clicked()) {
        return true;
      }
      if (
        P._state == c.RadMenuItemState.Open ||
        P._state == c.RadMenuItemState.AboutToOpen
      ) {
        return true;
      }
      R = P.get_parent();
      Q = R.get_openedItem();
      if (Q && Q != P) {
        Q._clearTimeout();
        Q._state = c.RadMenuItemState.AboutToClose;
        Q._setTimeout(function () {
          Q.close();
          Q._timeoutRef = null;
        }, this.get_expandDelay());
      }
      if (!P._shouldOpen()) {
        return true;
      }
      P._state = c.RadMenuItemState.AboutToOpen;
      P._setTimeout(function () {
        P.open();
        P._timeoutRef = null;
      }, this.get_expandDelay());
      return true;
    },
    _onItemMouseOut: function (O) {
      var Q = this._extractItemFromDomElement(O.eventMapTarget),
        S,
        P;
      if (Q != null) {
        if (!Q.get_enabled()) {
          return true;
        }
        S = O.eventMapRelatedTarget;
        P = Q.get_element();
        if (!S || P == S || $telerik.isDescendant(P, S)) {
          return true;
        }
        if (
          Q.get_hasContentTemplate() &&
          $telerik.isDescendant(Q._getContentTemplateContainer(), S)
        ) {
          return true;
        }
        if (
          this._childrenDetached &&
          $telerik.isDescendant(Q.get_parent()._getAnimationContainer(), S)
        ) {
          return true;
        }
        if (
          this._scroller &&
          Q.get_level() > 0 &&
          !$telerik.isDescendant(this.get_element(), S)
        ) {
          var R = Q;
          while (R.get_level() > 0) {
            R = R.get_parent();
            if (typeof R.get_level == "undefined") {
              break;
            }
          }
          this._onItemMouseOut({
            eventMapTarget: R.get_element(),
            eventMapRelatedTarget: S,
          });
        }
        if (
          Q._state == c.RadMenuItemState.Closed ||
          Q._state == c.RadMenuItemState.AboutToClose
        ) {
          return true;
        }
        if (Q._state == c.RadMenuItemState.AboutToOpen) {
          Q._clearTimeout();
          Q._state = c.RadMenuItemState.Closed;
          Q.get_parent()._openedItem = null;
          return true;
        }
        if (this.get_clickToOpen()) {
          return true;
        }
        Q._state = c.RadMenuItemState.AboutToClose;
        Q._setTimeout(function () {
          Q.close();
          Q._timeoutRef = null;
        }, this.get_collapseDelay());
        return true;
      }
    },
    _onItemDragStart: function (O) {
      O.preventDefault();
      return false;
    },
    _onItemClick: function (P) {
      if (!this.get_enabled()) {
        $telerik.cancelRawEvent(P);
        return false;
      }
      var Q = this._extractItemFromDomElement(P.eventMapTarget),
        S = P.target,
        O,
        R = Q.get_parent().get_openedItem();
      if (Q.get_isSeparator()) {
        return false;
      }
      if (c.RadMenu._isTargetToggleButton(S)) {
        if (P.preventDefault) {
          P.preventDefault();
        }
        if (R && R !== Q) {
          R.close();
        }
        Q._toggleState(P);
        return false;
      }
      O = c.RadMenu._getFirstClickableParent(P.target, Q.get_element());
      if (O && !a(O).hasClass(u)) {
        return false;
      }
      if (a(P.eventMapTarget).is(j + s) && Q.get_linkElement()) {
        return false;
      }
      Q._transferFocus(P);
      Q._click(P);
      if (Telerik.Web.Browser.chrome) {
        this.focus();
      }
      if (!Q._shouldNavigate()) {
        $telerik.cancelRawEvent(P);
      }
      return false;
    },
    _onItemTouchEnd: function (P) {
      if (!this.get_enabled()) {
        P.preventDefault();
        P.stopPropagation();
        return;
      }
      var T = $telerik.getTouchTarget(P),
        Q = this._extractItemFromDomElement(T),
        R = Q.get_parent(),
        S = R ? R._scroller : null,
        O;
      if (Q.get_isSeparator() || (S && S._touchScrollInAction)) {
        return;
      }
      P.stopPropagation();
      if (c.RadMenu._isTargetToggleButton(T)) {
        P.preventDefault();
        Q._toggleState(P);
        return;
      }
      O = c.RadMenu._getFirstClickableParent(P.target, Q.get_element());
      if (O && !a(O).hasClass(u)) {
        return false;
      }
      Q._transferFocus(P);
      Q._click(P);
    },
    _onLinkMouseOver: function (O) {
      var R = O.eventMapRelatedTarget,
        P = this._extractItemFromDomElement(O.eventMapTarget),
        Q;
      if (!P.get_enabled()) {
        return true;
      }
      Q = P.get_linkElement();
      if (!R || Q == R || $telerik.isDescendant(Q, R)) {
        return true;
      }
      P._hovered = true;
      P._updateImageSrc();
      this._raiseEvent("mouseOver", new c.RadMenuMouseOverEventArgs(P, O));
      return true;
    },
    _onLinkMouseOut: function (O) {
      var R = O.eventMapRelatedTarget,
        P = this._extractItemFromDomElement(O.eventMapTarget),
        Q;
      if (!P.get_enabled()) {
        return true;
      }
      Q = P.get_linkElement();
      if (!R || !Q) {
        return;
      }
      if (Q == R || $telerik.isDescendant(Q, R)) {
        return true;
      }
      P._hovered = false;
      P._updateImageSrc();
      this._raiseEvent("mouseOut", new c.RadMenuMouseOutEventArgs(P, O));
      return true;
    },
    _onLinkMouseDown: function (O) {
      var P = this._extractItemFromDomElement(O.eventMapTarget);
      if (!P.get_enabled()) {
        return true;
      }
      P._clicked = true;
      P._updateLinkClass();
      P._updateImageSrc();
      return true;
    },
    _onLinkMouseUp: function (O) {
      var P = this._extractItemFromDomElement(O.eventMapTarget);
      if (!P.get_enabled()) {
        return true;
      }
      if (
        Telerik.Web.Browser.chrome ||
        Telerik.Web.Browser.ie ||
        Telerik.Web.Browser.edge
      ) {
        this._preventBlurEvent = true;
        this.focus();
      }
      P._clicked = false;
      P._updateLinkClass();
      P._updateImageSrc();
      return true;
    },
    _onTemplasteLinkMouseUp: function (P) {
      var Q = this._extractItemFromDomElement(P.eventMapTarget);
      var O = c.RadMenu._getFirstClickableParent(P.target, Q.get_element());
      if (O && !a(O).hasClass(u)) {
        return true;
      }
      if (!Q.get_enabled()) {
        return true;
      }
      if (
        Telerik.Web.Browser.chrome ||
        Telerik.Web.Browser.ie ||
        Telerik.Web.Browser.edge
      ) {
        this._preventBlurEvent = true;
        this.focus();
      }
      Q._clicked = false;
      Q._updateLinkClass();
      Q._updateImageSrc();
      return true;
    },
    _onLinkBlur: function (O) {
      var P =
        this.get_focusedItem() ||
        this._extractItemFromDomElement(O.eventMapTarget);
      P._focused = false;
      P.blur(O);
      return true;
    },
    _onLinkFocus: function (O) {
      var P = this._extractItemFromDomElement(O.eventMapTarget);
      P._focused = true;
      this._focusedItem = P;
      this._focus(O);
      return false;
    },
    _onKeyDown: function (O) {
      var P = this.get_focusedItem();
      if (a(O.target).closest(".rmTemplate").length > 0 || !P) {
        return false;
      }
      return this._keyboardNavigator._onKeyDown(O, P);
    },
    _onLinkClick: function (O) {
      var Q = O.target,
        P = this._extractItemFromDomElement(Q);
      P._click(O);
    },
    _onToggleClick: function (O) {
      var Q = O.target,
        P = this._extractItemFromDomElement(Q);
      P._open(O);
    },
    _onParentItemClick: function (O) {
      var Q = O.target,
        P = this._extractItemFromDomElement(Q);
      P._close(O);
    },
    _onOrientationChange: function () {
      if (this._opened) {
        this._positionPopUpContainer();
      }
      this.repaint();
    },
    _animatePopUp: function () {
      var W = this,
        O = a(this._getPopUpElement()),
        P = a(this._getRootToggleElement()),
        Q = a(this._getAnimationContainerElement()),
        V,
        R = this._opened
          ? this.get_collapseAnimation()
          : this.get_expandAnimation(),
        U = { height: this._opened ? 0 : this._animatedHeight },
        S = R.get_duration(),
        T = c.AnimationType.toEasing(R.get_type());
      if (!this.get_enabled()) {
        return;
      }
      if (this._opened) {
        O.addClass(r);
        V = function () {
          O.hide();
          W._restoreState();
        };
      } else {
        O.removeClass(r);
        O.show();
      }
      this._opened = !this._opened;
      P.toggleClass(p, this._opened);
      Q.stopTransition();
      if (T !== "easeNone") {
        Q.transition(U, S, T, V);
      } else {
        Q.css(U);
        if (V) {
          V();
        }
      }
    },
    _sizeAnimationContainer: function () {
      var Q = a(this._getPopUpElement()),
        P = a(this.get_childListElement()),
        O = a(this._getAnimationContainerElement()),
        T = parseInt(this._popUpHeight, 10),
        R,
        S = {
          "max-height": Math.round(document.documentElement.clientHeight * 0.6),
        };
      if (!this._opened) {
        Q.show();
      }
      O.css(S);
      O.height("auto");
      P.height("auto");
      R = O.height();
      if (R > 0) {
        this._animatedHeight = R;
      }
      if (!isNaN(T)) {
        O.css("max-height", T);
        this._animatedHeight = T;
      }
      if (P.length > 0) {
        P.height(this._animatedHeight);
        if (O.get(0).style.width === "" && P[0].scrollHeight > P.height()) {
          O.width(O.width() + Telerik.Web.Browser.scrollBarWidth);
        }
      }
      if (this._opened) {
        O.height(this._animatedHeight);
      } else {
        O.height(0);
        Q.hide();
      }
    },
    _purgeEmptyGroup: function (P) {
      if (P == this && P.hide) {
        P.hide();
      } else {
        P.close();
      }
      if (this._isMobile) {
        this._purgeEmptyGroupMobile(P);
        return;
      }
      c.RadMenu._removeChildListCorners(P);
      c.RadMenu._removeScrollWrapContainer(P);
      var O = $telerik.getFirstChildByTagName(P.get_element(), "div", 0);
      if (this !== P && this.get_showToggleHandle()) {
        P._removeToggleButton();
      }
      if (P._originalExpandMode) {
        P.set_expandMode(P._originalExpandMode);
      }
      if (P._slideWrapElement) {
        if ($telerik.isIE && !$telerik.isIE10Mode) {
          P._slideWrapElement.outerHTML = "";
        }
        P._slideWrapElement = null;
        P._scrollWrapElement = null;
      }
      P._linkElement = null;
      P._childListElement = null;
      P._animatedElement = null;
      P._animationContainer = null;
      P._itemsLoaded = false;
      P._hasItems = false;
      if (P._updateTextElementClass) {
        P._updateTextElementClass();
      }
      if (this._enableRootItemScroll) {
        P._childrenDetached = false;
      }
      if (P == this) {
        return;
      }
      if (P._slide) {
        P._slide.dispose();
        P._slide = null;
      }
      if ($telerik.isIE && O) {
        O.outerHTML = "";
      }
      if (O && O.parentNode) {
        O.parentNode.removeChild(O);
      }
      O = null;
    },
    _purgeEmptyGroupMobile: function (O) {
      a(O.get_childListElement()).remove();
      if (this !== O) {
        O._removeToggleButton();
      }
      O._childListElement = null;
      O._parentItemElement = null;
      O._childrenDetached = false;
      O._itemsLoaded = false;
      O._hasItems = false;
    },
    _childrenCleared: function (O) {
      if (O != this && !O._getHasItems()) {
        return;
      }
      this._purgeEmptyGroup(O);
      c.RadMenu.callBaseMethod(this, "_childrenCleared", [O]);
    },
    _childInserting: function (O, P, Q) {
      if (Q != this && Q.get_hasContentTemplate()) {
        throw new Error(
          "Cannot add items to an RadMenuItem, which has ContentTemplate."
        );
      }
      if (!Q._childControlsCreated) {
        return;
      }
      this._backupClientState();
    },
    _childInserted: function (O, P, Q) {
      this._restoreClientState();
      if (Q._setHasItems) {
        Q._setHasItems(true);
      }
      c.RadMenu.callBaseMethod(this, "_childInserted", [O, P, Q]);
      if (!this._isMobile) {
        if (Q._updateTextElementClass) {
          Q._updateTextElementClass();
        }
        if (
          Q._state &&
          Q._state === c.RadMenuItemState.Open &&
          this._renderMode === c.RenderMode.Classic
        ) {
          if (P._getWidth() > 0) {
            c.RadMenu._adjustChildrenWidth(Q);
          }
          Q._updateColumnWrapSize();
        }
        if (Q == this && this._enableRootItemScroll) {
          this._initializeScroller();
        }
        if (this.get_showToggleHandle() && Q !== this) {
          Q._ensureToggleButton();
        }
      } else {
        if (Q !== this) {
          Q._ensureToggleButton();
          Q._ensureChildrenParent();
        }
      }
    },
    _attachChildItem: function (P, Q, T) {
      if (T == this || !T._hasMultipleColumns()) {
        c.RadMenu.callBaseMethod(this, "_attachChildItem", [P, Q, T]);
        return;
      }
      if (!T.get_childListElement()) {
        T._createChildListElement();
      }
      var R = P.get_nextSibling(),
        S,
        O;
      if (R) {
        S = R.get_element();
        S.parentNode.insertBefore(Q, S);
      } else {
        O = T._getColumnForItem(P);
        a(O).children(".rmGroup").append(Q);
        T._recalculateColumns();
      }
    },
    _childRemoving: function (O) {
      O.set_selected(false);
      O._cacheDomProperties();
      this._backupClientState();
      c.RadMenu.callBaseMethod(this, "_childRemoving", [O]);
    },
    _childRemoved: function (P, Q) {
      this._restoreClientState();
      P.get_text();
      var O = P.get_element();
      if (Q.get_items().get_count() == 0 && Q !== this) {
        this._purgeEmptyGroup(Q);
      } else {
        if ($telerik.isIE) {
          O.outerHTML = "";
        }
        if (O.parentNode) {
          O.parentNode.removeChild(O);
        }
        O = null;
      }
      c.RadMenu.callBaseMethod(this, "_childRemoved", [P, Q]);
      if (!this._isMobile) {
        if (
          Q._state &&
          Q._state === c.RadMenuItemState.Open &&
          this._renderMode === c.RenderMode.Classic
        ) {
          c.RadMenu._adjustChildrenWidth(Q, true);
          Q._updateColumnWrapSize();
        }
        if (Q == this && this._enableRootItemScroll) {
          this._initializeScroller();
        }
        c.RadMenu._updateChildrenPositionClass(Q);
      }
    },
    _backupClientState: function () {
      this._backupSelectedItem = this.get_selectedItem();
    },
    _restoreClientState: function () {
      if (this._backupSelectedItem) {
        this._registerSelectedItem(this._backupSelectedItem);
      }
    },
    _getExtendedItemClickingEventArgs: function (O) {
      return O;
    },
    _getExtendedItemClickedEventArgs: function (O) {
      return O;
    },
    _incrementZIndex: function (P) {
      if (this._zIndexIncrementDepth == 0) {
        var O = this.get_element();
        O.style.zIndex = this._originalZIndex + P;
      }
      this._zIndexIncrementDepth++;
    },
    _restoreZIndex: function () {
      if (this._zIndexIncrementDepth > 0) {
        this._zIndexIncrementDepth--;
      }
      if (this._zIndexIncrementDepth == 0) {
        var O = this.get_element();
        O.style.zIndex = this._originalZIndex;
      }
    },
    _restoreState: function () {
      if (!this.get_maintainState()) {
        var O = function (P) {
          if (P._openedItem) {
            O(P._openedItem);
            P._openedItem = null;
          }
        };
        O(this);
        a(this.get_childListElement()).stopTransition().css(L);
        a(this._getPopUpElement()).find(".rmGroup:not(.rmRootGroup)").css(e);
      }
    },
    _getMainElement: function () {
      return this.get_element();
    },
    _initRightToLeft: function () {
      var O = this._getMainElement();
      O.dir = "ltr";
      this._applyRtlStyles();
    },
    _applyRtlStyles: function () {
      var O = A;
      if (this._skin) {
        O += " RadMenu_" + this._skin + "_rtl";
      }
      a(this._getMainElement()).addClass(O);
    },
    _postback: function (O) {
      if (!this._postBackReference) {
        return;
      }
      var P = this._postBackReference.replace("arguments", O);
      eval(P);
    },
    _raiseEvent: function (P, O) {
      if (this._fireEvents) {
        this.raiseEvent(P, O);
      }
    },
    _adjustRootItemWidth: function () {
      c.RadMenu._adjustRootItemWidth(
        this.get_id(),
        this.get_childListElement()
      );
    },
  };
  a.registerControlProperties(c.RadMenu, {
    clicked: false,
    dataBindings: null,
    odataClientSettings: null,
    enableRootItemScroll: false,
    enableRoundedCorners: false,
    enableShadows: false,
    enableImageSprites: false,
    showToggleHandle: false,
    clientTemplate: null,
    loadingTemplate: "",
    enableScreenBoundaryDetection: true,
    enableAutoScroll: false,
    enableSelection: true,
    autoScrollMinimumHeight: 50,
    autoScrollMinimumWidth: 50,
    clickToOpen: false,
    collapseDelay: 500,
    expandDelay: 10,
    enableAriaSupport: false,
  });
  a.registerControlEvents(c.RadMenu, [
    "load",
    "menuPopulating",
    "menuPopulated",
    "itemFocus",
    "itemBlur",
    "itemOpening",
    "itemOpened",
    "itemClosing",
    "itemClosed",
    "itemPopulating",
    "itemPopulated",
    "itemPopulationFailed",
    "templateDataBound",
    "mouseOver",
    "mouseOut",
    "itemClicked",
    "itemClicking",
  ]);
  c.RadMenu.registerClass("Telerik.Web.UI.RadMenu", c.ControlItemContainer);
})($telerik.$);
(function (a, b, e) {
  var c = "rmToggle",
    d = "rmIcon";
  b.RadMenu.GetView = function (h, g) {
    var i = h._renderMode,
      f = b.RadMenuItem.Views;
    if (i == b.RenderMode.Classic) {
      return new f.Classic(g);
    } else {
      return new f.Lite(g);
    }
  };
  b.RadMenu.ExtendWithView = function (h, i, g) {
    var j = h._renderMode,
      f = b.RadMenu.StaticViews;
    if (j == b.RenderMode.Classic) {
      f.Classic[g](i);
    } else {
      f.Lite[g](i);
    }
  };
  b.RadMenu._expandItemsRecursively = function (m, f) {
    var h = f.split(":"),
      n = m;
    for (var g = 0, k = h.length; g < k; g++) {
      var j = n.get_items().getItem(h[g]);
      j.open();
      n = j;
    }
  };
  b.RadMenu._getFirstClickableParent = function (i, j) {
    var f = [
        "select",
        "option",
        "a",
        "input",
        "textarea",
        "button",
        "label",
        "area",
      ],
      g = i;
    while (g != j) {
      var h = a.inArray(g.tagName.toLowerCase(), f) != -1;
      if (h) {
        return g;
      }
      g = g.parentNode;
    }
    return null;
  };
  b.RadMenu._isTargetToggleButton = function (f) {
    return f && (f.className == c || f.className == d);
  };
  b.RadMenu._createChildControls = function (j, h) {
    var g = j.get_itemData(),
      f,
      i;
    if (!g) {
      return;
    }
    f = j.get_childListElement();
    if (!f) {
      return;
    }
    (i = j._getControl()),
      a(j._getChildElements()).each(function (k) {
        var l = i.createMenuItem();
        h.add(l);
        l._initialize(g[k], this);
      });
  };
  b.RadMenu._adjustChildrenWidth = function (j, l) {
    var g = j.get_items(),
      f = g.get_count(),
      k;
    if (l) {
      for (var h = 0; h < f; h++) {
        g.getItem(h)._clearWidth();
      }
    }
    k = b.RadMenu._getMaxChildWidth(j) + "px";
    if (
      ($telerik.isChrome || $telerik.isSafari) &&
      j._control &&
      j._control._enableRootItemScroll
    ) {
      j._childListElement.style.width = k;
    }
    b.RadMenu._setChildrenWidth(j, k);
  };
  b.RadMenu._getMaxChildWidth = function (n) {
    var p = 0,
      q = n._getControl(),
      g = n.get_items(),
      f = g.get_count();
    for (var m = 0; m < f; m++) {
      if (q.get_rightToLeft()) {
        var o = g.getItem(m).get_imageElement();
        if (o) {
          o.style.styleFloat = "left";
          o.style.cssFloat = "left";
        }
      }
      var r = g.getItem(m)._getWidth();
      p = Math.max(r, p);
    }
    if (n.get_groupSettings) {
      var l = n.get_groupSettings().get_width();
      if (l) {
        var h = a(n.get_childListElement()),
          j = parseFloat(a(h).css("padding-left")),
          k = parseFloat(a(h).css("padding-right"));
        p = parseInt(l, 10) - j - k;
      }
    }
    return p;
  };
  b.RadMenu._setChildrenWidth = function (j, m) {
    var l = j._getControl();
    var g = j.get_items();
    var f = g.get_count();
    for (var h = 0; h < f; h++) {
      if (l.get_rightToLeft()) {
        var k = g.getItem(h).get_imageElement();
        if (k) {
          k.style.styleFloat = "right";
          k.style.cssFloat = "right";
        }
      }
      g.getItem(h)._setWidth(m);
    }
  };
  b.RadMenu._adjustRootItemWidth = function (i, f) {
    var g = $get(i);
    var h = b.RadMenu._getMaxRootItemWidth(g, f || null);
    b.RadMenu._setRootItemWidth(g, h, f || null);
  };
  b.RadMenu._getChildListElement = function (h) {
    var f = $telerik.getFirstChildByTagName(h, "ul", 0);
    if (!f) {
      var i = $telerik.getFirstChildByTagName(h, "div", 0);
      f = $telerik.getFirstChildByTagName(i, "ul", 0);
      if (!f) {
        var g = i;
        i = $telerik.getFirstChildByTagName(g, "div", 0);
        f = $telerik.getFirstChildByTagName(i, "ul", 0);
      }
    }
    return f;
  };
  b.RadMenu._getMaxRootItemWidth = function (m, f) {
    if (!f) {
      f = b.RadMenu._getChildListElement(m);
    }
    var g = a(f).children(".rmItem");
    var h = g.length;
    var l = 0;
    for (var j = 0; j < h; j++) {
      var n = g[j];
      if (n.nodeType === 3) {
        continue;
      }
      var k = $telerik.getFirstChildByTagName(n, "a", 0);
      var o;
      if (k) {
        o = k.offsetWidth;
      } else {
        o = n.offsetWidth;
      }
      l = Math.max(l, o);
    }
    return l;
  };
  b.RadMenu._setRootItemWidth = function (j, i, f) {
    if (!f) {
      f = b.RadMenu._getChildListElement(j);
    }
    var h = $telerik.getPaddingBox(f).horizontal;
    var g = $telerik.getBorderBox(f).horizontal;
    if (i == 0) {
      return;
    }
    if ($telerik.isSafari) {
      f.style.width = i;
    }
    if (j.style.width === "" && b.RadMenu._requiresRightToLeft(j)) {
      j.style.width = i + h + g + "px";
    }
  };
  b.RadMenu._requiresRightToLeft = function (g) {
    var f = g;
    while (f.nodeType !== 9) {
      if (f.dir == "rtl") {
        return true;
      }
      if (a(f).css("direction") == "rtl") {
        return true;
      }
      f = f.parentNode;
    }
    return false;
  };
  b.RadMenu._adjustListWidth = function (g, h) {
    var f = a(g.get_childListElement());
    var i = 0;
    f.find(".rmItem").each(function () {
      var j = a(this);
      if (j.is(":visible")) {
        if ($telerik.isIE7 || $telerik.isIE8) {
          i += a(this).outerWidth(true);
        } else {
          var l = Math.ceil(
              parseFloat(
                window.getComputedStyle(this).getPropertyValue("width")
              )
            ),
            k =
              parseInt(a(this).css("border-left-width"), 10) +
              parseInt(a(this).css("border-right-width"), 10),
            o = Math.ceil(
              parseFloat(a(this).css("padding-left")) +
                parseFloat(a(this).css("padding-right"))
            ),
            n = Math.ceil(
              parseFloat(a(this).css("margin-left")) +
                parseFloat(a(this).css("margin-right"))
            ),
            m = l + k + o + n;
          i += m;
        }
        this.style.clear = "none";
      }
    });
    h = h || 0;
    h++;
    if (i > 0) {
      if ($telerik.isIE9Mode || parseFloat(f.css("font-size")) > 12) {
        i += 3;
      }
      f[0].style.width = Math.ceil(i) + "px";
    } else {
      if (h < 3) {
        setTimeout(function () {
          b.RadMenu._adjustListWidth(g, h);
        }, 0);
      }
    }
  };
  b.RadMenu._getViewPortSize = function () {
    var g = $telerik.getViewPortSize();
    var f = document.compatMode != "CSS1Compat";
    if (($telerik.isFirefox && f) || Telerik.Web.Browser.edge) {
      g.height += document.body.scrollTop;
    }
    return g;
  };
  b.RadMenu._updateChildrenPositionClass = function (g) {
    var h = function (i) {
      a(i)
        .children(".rmItem")
        .filter(function () {
          return this._item && this._item.get_visible();
        })
        .removeClass("rmFirst rmLast")
        .filter(":first")
        .addClass("rmFirst")
        .end()
        .filter(":last")
        .addClass("rmLast");
    };
    if (!g) {
      return;
    }
    var f = g.get_childListElement();
    if (!f) {
      return;
    }
    if (a(f).is(".rmMultiColumn")) {
      a(f)
        .find("> .rmGroupColumn > ul")
        .each(function () {
          h(this);
        });
    } else {
      h(f);
    }
  };
  b.RadMenu._removeChildListCorners = function (f) {
    a(f.get_childListElement())
      .find(
        ".rmTopRight, .rmBottomLeft, .rmBottomRight, .rmTopFix, .rmBottomFix"
      )
      .remove();
    f._roundedCornersRendered = false;
    f._shadowsRendered = false;
  };
  b.RadMenu._removeScrollWrapContainer = function (f) {
    if (f._slide) {
      var g = a(f._getScrollWrapElement()).appendTo(f._slide.get_element())[0];
      if (g) {
        a(f.get_element()).find(".rmScrollWrapContainer").remove();
        f._slide.set_animatedElement(g);
      }
      f._roundedCornersRendered = false;
      f._shadowsRendered = false;
    }
  };
  b.RadMenu._renderCornerElements = function (j, g) {
    var k = a(j._getScrollWrapElement()),
      f =
        '<{0} class="rmTopRight"></{0}><{0} class="rmBottomLeft"></{0}><{0} class="rmBottomRight"></{0}><{0} class="rmTopFix"></{0}><{0} class="rmBottomFix"></{0}>',
      h = j.get_hasContentTemplate && j.get_hasContentTemplate(),
      m = "span",
      i = "li";
    if (g) {
      f =
        '<{0} class="rmTopRight rmTopShadowRight"></{0}><{0} class="rmBottomLeft rmBottomShadowLeft"></{0}><{0} class="rmBottomRight rmBottomShadowRight"></{0}>';
    }
    if (h) {
      f = String.format(f, m);
      a(j._getContentTemplateContainer()).prepend(f);
    } else {
      f = String.format(f, i);
      if (k.length) {
        var l = a(j.get_element()).find(".rmScrollWrapContainer");
        if (!l.length) {
          l = a('<div class="rmScrollWrapContainer">')
            .append(k)
            .appendTo(j._getAnimationContainer());
          j._animatedElement = l[0];
          j._slide.set_animatedElement(j._getAnimatedElement());
        }
        l.prepend(f);
      } else {
        a(j.get_childListElement()).prepend(f);
      }
    }
  };
  b.RadMenu._preloadItemImages = function (h) {
    var g = [
      "imageUrl",
      "hoveredImageUrl",
      "expandedImageUrl",
      "disabledImageUrl",
      "clickedImageUrl",
      "selectedImageUrl",
    ];
    var f = function (m) {
      for (var j = 0; j < m.length; j++) {
        var l = m[j];
        for (var n = 0; n < g.length; n++) {
          var k = l[g[n]];
          if (k) {
            b.RadMenu._preloadImage(k);
          }
        }
        if (l.items) {
          f(l.items);
        }
      }
    };
    f(h);
  };
  b.RadMenu._preloadImage = function (g) {
    var f = new Image();
    f.src = g;
  };
  b.RadMenu._resolveDirectionFromClass = function (f) {
    return f
      .match(/rm(Left|Right|Top|Bottom)Arrow/gi)[0]
      .replace(/rm(Left|Right|Top|Bottom)Arrow/gi, function () {
        return arguments[1];
      });
  };
})($telerik.$, Telerik.Web.UI);
(function (a, b, c) {
  b.RadMenu.KeyboardNavigator = function (d) {
    this._owner = d;
    this._item = null;
  };
  b.RadMenu.KeyboardNavigator.prototype = {
    _dispose: function () {
      this._owner = null;
      this._item = null;
    },
    _onKeyDown: function (d, g) {
      this._item = g;
      var f = d.keyCode ? d.keyCode : d.rawEvent.keyCode,
        i = this._owner.get_rightToLeft(),
        h = this._item._getParentFlow();
      switch (f) {
        case Sys.UI.Key.tab:
          if (
            d.target !== this._owner.get_element() &&
            g &&
            g.get_level() > 0
          ) {
            this._owner.get_element().focus();
          }
          this._item.blur(d);
          this._owner.close();
          return true;
        case Sys.UI.Key.up:
          this._onKeyboardUp(d);
          break;
        case Sys.UI.Key.down:
          this._onKeyboardDown(d);
          break;
        case Sys.UI.Key.left:
          if (!(i && h === b.ItemFlow.Horizontal)) {
            this._onKeyboardLeft(d);
          } else {
            this._onKeyboardRight(d);
          }
          break;
        case Sys.UI.Key.right:
          if (!(i && h === b.ItemFlow.Horizontal)) {
            this._onKeyboardRight(d);
          } else {
            this._onKeyboardLeft(d);
          }
          break;
        case Sys.UI.Key.space:
        case Sys.UI.Key.enter:
          if (!this._item.get_enabled()) {
            d.preventDefault();
            return true;
          }
          if (this._item.get_linkElement()) {
            this._item.get_linkElement().click();
          }
          if (!this._item._shouldNavigate()) {
            this._onKeyboardSpace(d);
          }
          this._item = null;
          d.preventDefault();
          d.stopPropagation();
          return false;
        case Sys.UI.Key.esc:
          this._onKeyboardEsc(d);
          break;
        default:
          this._item = null;
          return true;
      }
      this._item = null;
      d.preventDefault();
      return false;
    },
    _onKeyboardSpace: function (d) {
      this._item.focusFirstChild(d);
    },
    _onKeyboardUp: function (d) {
      var f = this._item._getParentFlow();
      if (f == b.ItemFlow.Vertical) {
        this._item.focusPreviousItem(d);
      } else {
        if (!this._item.get_enabled()) {
          return true;
        }
        this._item.focusLastChild(d);
      }
    },
    _onKeyboardDown: function (d) {
      var f = this._item._getParentFlow();
      if (f == b.ItemFlow.Vertical) {
        this._item.focusNextItem(d);
      } else {
        if (!this._item.get_enabled()) {
          return true;
        }
        this._item.focusFirstChild(d);
      }
    },
    _onKeyboardLeft: function (d) {
      var j = this._item._getParentFlow();
      if (j == b.ItemFlow.Horizontal) {
        this._item.focusPreviousItem(d);
        return;
      }
      var g = this._item.get_items(),
        f = this._item.get_groupSettings();
      if (
        g.get_count() > 0 &&
        f.get_expandDirection() == b.ExpandDirection.Left
      ) {
        if (!this._item.get_enabled()) {
          return true;
        }
        this._item.focusFirstChild(d);
        return;
      }
      var i = this._item.get_parent(),
        k = null;
      if (i.get_groupSettings) {
        k = i.get_groupSettings();
      }
      if (k && k.get_expandDirection() == b.ExpandDirection.Right) {
        i._transferFocus(d);
        return;
      }
      var h = this._owner.get_openedItem();
      if (h) {
        h.focusPreviousItem(d);
      }
    },
    _onKeyboardRight: function (d) {
      var j = this._item._getParentFlow();
      if (j == b.ItemFlow.Horizontal) {
        this._item.focusNextItem(d);
        return;
      }
      var g = this._item.get_items(),
        f = this._item.get_groupSettings();
      if (
        g.get_count() > 0 &&
        f.get_expandDirection() == b.ExpandDirection.Right
      ) {
        if (!this._item.get_enabled()) {
          return true;
        }
        this._item.focusFirstChild(d);
        return;
      }
      var i = this._item.get_parent(),
        k = null;
      if (i.get_groupSettings) {
        k = i.get_groupSettings();
      }
      if (k && k.get_expandDirection() == b.ExpandDirection.Left) {
        i._transferFocus(d);
        return;
      }
      var h = this._owner.get_openedItem();
      if (h) {
        h.focusNextItem(d);
      }
    },
    _onKeyboardEsc: function (d) {
      var g = this._item.get_parent(),
        f = this._owner;
      if (g == f) {
        this._item._setFocused(false, d);
      } else {
        g._close(d);
        g._transferFocus(d);
      }
    },
  };
})($telerik.$, Telerik.Web.UI);
(function (a, c, d) {
  var b = Sys.Serialization.JavaScriptSerializer;
  (c.RadMenu.prototype.get_hierarchyModel = function () {
    var f = this.get_odataClientSettings();
    f.ExpandMode = c.MenuItemExpandMode.WebService;
    var e = this.get_dataBindings();
    if (e) {
      e[e.length - 1].ExpandMode = c.MenuItemExpandMode.ClientSide;
    }
    f.DataBindings = e;
    return c.RadODataDataSource.Binder.Hierarhical.Model(f);
  }),
    (c.RadMenu.prototype._initializeODataSourceBinder = function () {
      var e = this;
      setTimeout(function () {
        var h = e.get_odataClientSettings().ODataSourceID,
          g = $find(h);
        if (!g) {
          var i = String.format(
            "DataSource with id {0} was not found on the page",
            h
          );
          alert(i);
          return;
        }
        e._hierarhicalBinder = new c.RadODataDataSource.Binder.Hierarhical(
          g,
          e
        );
        e._hierarhicalBinder.initialize();
        var f = a.raiseCancellableControlEvent(e, "menuPopulating", {});
        if (!f) {
          e._onDataNeeded();
        }
      }, 1);
    });
  c.RadMenu.prototype._onDataNeeded = function (h) {
    var f = h != d ? 1 + h.get_level() : 0,
      e = h != d ? h.get_key() : "null";
    var g = {
      level: f,
      key: e,
      events: {
        requesting: function (i) {
          if (h) {
            var j = new Telerik.Web.UI.WebServiceLoaderEventArgs(h);
            this._onItemLoadingStarted(this, j);
          }
        },
        success: function (i) {
          var j = h || this,
            k = new Telerik.Web.UI.WebServiceLoaderSuccessEventArgs(i, j);
          this._onItemLoadingSuccess(this, k);
        },
        fail: function (i) {
          var j = h || this,
            k = new Telerik.Web.UI.WebServiceLoaderErrorEventArgs(
              i.get_message(),
              j
            );
          this._onItemLoadingError(this, k);
        },
      },
    };
    this._hierarhicalBinder.fetch(g);
  };
  c.RadMenu.prototype.get_webServiceSettings = function () {
    return this._webServiceSettings;
  };
  c.RadMenu.prototype.set_webServiceSettings = function (f) {
    var e = b.deserialize(f);
    if (e.ODataSettings) {
      this._webServiceSettings = new c.NavigationControlODataSettings(e);
    } else {
      this._webServiceSettings = new c.WebServiceSettings(e);
    }
  };
  c.RadMenu.prototype._initializeWebServiceLoader = function () {
    var e = this.get_webServiceSettings();
    if (e.get_isOData()) {
      this._webServiceLoader = new c.NavigationControlODataLoader(
        this.get_webServiceSettings(),
        function (f) {
          if (f.length > 0) {
            return c.MenuItemExpandMode.WebService;
          } else {
            return c.MenuItemExpandMode.ClientSide;
          }
        }
      );
    } else {
      this._webServiceLoader = new c.WebServiceLoader(
        this.get_webServiceSettings()
      );
    }
    this._webServiceLoader.add_loadingStarted(
      Function.createDelegate(this, this._onItemLoadingStarted)
    );
    this._webServiceLoader.add_loadingSuccess(
      Function.createDelegate(this, this._onItemLoadingSuccess)
    );
    this._webServiceLoader.add_loadingError(
      Function.createDelegate(this, this._onItemLoadingError)
    );
  };
  c.RadMenu.prototype._loadChildrenFromWebService = function (e) {
    if (!this._webServiceLoader) {
      this._initializeWebServiceLoader();
    }
    var i = {},
      g = new c.RadMenuItemPopulatingEventArgs(e, i);
    this._raiseEvent("itemPopulating", g);
    if (g.get_cancel()) {
      return;
    }
    var f = {
      Text: e.get_text(),
      Value: e.get_value(),
      ExpandMode: e.get_expandMode(),
    };
    if (e.get_attributes().get_count() > 0) {
      f.Attributes = e.get_attributes()._data;
    }
    var h = { item: f, context: i };
    if (this.get_webServiceSettings().get_isWcf()) {
      h.context = this._webServiceLoader._serializeDictionaryAsKeyValuePairs(
        h.context
      );
      if (h.item.Attributes) {
        h.item.Attributes = this._webServiceLoader._serializeDictionaryAsKeyValuePairs(
          h.item.Attributes
        );
      }
    } else {
      if (this.get_odataClientSettings()) {
        this._onDataNeeded(e);
        return;
      }
    }
    this._webServiceLoader.loadData(h, e);
  };
  c.RadMenu.prototype._onItemLoadingStarted = function (g, e) {
    var f = e.get_context();
    f._onChildrenLoading();
  };
  c.RadMenu.prototype._onItemLoadingSuccess = function (o, h) {
    var n = h.get_data(),
      m = h.get_context(),
      f = m.get_items(),
      p = this.get_webServiceSettings().get_isWcf(),
      j;
    for (j = 0; j < n.length; j++) {
      var k = n[j];
      var g = this.createMenuItem();
      g._loadFromDictionary(k, p);
      g._renderedClientTemplate = c.TemplateRenderer.renderTemplate(k, this, g);
      if (g.get_navigateUrl() === "") {
        g.set_navigateUrl("#");
      }
      f.add(g);
    }
    if (m._onChildrenLoaded) {
      m._onChildrenLoaded();
    }
    if (this.get_persistLoadOnDemandItems()) {
      this.trackChanges();
      if (m.set_expandMode) {
        m.set_expandMode(c.MenuItemExpandMode.ClientSide);
      }
      var e = f.get_count();
      for (j = 0; j < e; j++) {
        this._log.logInsert(f.getItem(j));
      }
      this.commitChanges();
    }
    if (this._isMobile && this === m) {
      this._sizeAnimationContainer();
    }
    if (a(m.get_element()).is(".rmItem")) {
      var l = new c.RadMenuItemPopulatedEventArgs(m);
      this._raiseEvent("itemPopulated", l);
    } else {
      a.raiseControlEvent(this, "menuPopulated", {});
    }
  };
  c.RadMenu.prototype._onItemLoadingError = function (i, f) {
    var e = f.get_message(),
      g = f.get_context(),
      h;
    if (g._onChildrenLoadingError) {
      g._onChildrenLoadingError();
    }
    h = new c.RadMenuItemPopulationFailedEventArgs(g, e);
    this._raiseEvent("itemPopulationFailed", h);
    if (h.get_cancel()) {
      return;
    }
    alert(e);
  };
  c.RadMenu.prototype._initializeClientDataSource = function () {
    if (this._clientDataSourceID) {
      this._clientDataSource = $find(this._clientDataSourceID);
      this._loadChildrenFromClientDataSource(this);
    }
    Sys.Application.remove_load(this._cdInitDelegate);
  };
  c.RadMenu.prototype._loadChildrenFromClientDataSource = function (e) {
    var g = {},
      f = new c.RadMenuItemPopulatingEventArgs(e, g);
    this._raiseEvent("itemPopulating", f);
    if (f.get_cancel()) {
      return;
    }
    this._requestDataFromClientDataSource(e);
  };
  c.RadMenu.prototype._requestDataFromClientDataSource = function (f) {
    var e = this._clientDataSource,
      h = this,
      g;
    if (f.get_key) {
      g = f.get_key();
    } else {
      g = null;
    }
    if (e.get_data().length == 0) {
      e.fetch(function () {
        h._processClientDataSourceData(g, f);
      });
    } else {
      h._processClientDataSourceData(g, f);
    }
  };
  c.RadMenu.prototype._processClientDataSourceData = function (g, f) {
    var h = this,
      e = this._clientDataSource;
    e.get_filterExpressions().clear();
    e.get_filterExpressions().add([
      { fieldName: this._dataFieldParentID, value: g },
    ]);
    e.fetch(function () {
      var i = e.view();
      h._loadItemsFromData(i, f);
    });
  };
  c.RadMenu.prototype._loadItemsFromData = function (p, n) {
    var j = [],
      g = p.length,
      f = this._clientDataSource;
    for (var m = 0; m < g; m++) {
      var h = p[m],
        k = 0,
        o = h[this._dataFieldID];
      f.get_filterExpressions().clear();
      f.get_filterExpressions().add([
        { fieldName: this._dataFieldParentID, value: o },
      ]);
      var l = f.view();
      if (l.length > 0) {
        k = 1;
      }
      j.push({
        ExpandMode: k,
        Key: h[this._dataFieldID],
        NavigateUrl: h[this._dataNavigateUrlField],
        ParentID: h[this._dataFieldParentID],
        Text: h[this._dataTextField],
        Value: h[this._dataValueField],
      });
    }
    var e = {
      _data: j,
      _context: n,
      get_data: function () {
        return this._data;
      },
      get_context: function () {
        return this._context;
      },
    };
    this._onItemLoadingSuccess(this, e);
  };
})($telerik.$, Telerik.Web.UI);
(function (a, b, c) {
  b.RadMenu.prototype._initializeScroller = function () {
    if (!this._childControlsCreated) {
      return null;
    }
    var g = this._getScrollWrapElement(),
      d = this.get_childListElement();
    if (g && d) {
      var f = null;
      if (this._scroller) {
        f = this._scroller.get_currentPosition();
        this._scroller.dispose();
      }
      this._scroller = new b.MenuItemScroller(
        this,
        this.get_childListElement(),
        this._flow
      );
      d.style.display = "block";
      var e = this._flow == b.ItemFlow.Horizontal;
      if (e) {
        b.RadMenu._adjustListWidth(this);
      } else {
        b.RadMenu._adjustChildrenWidth(this);
        if (this.get_rightToLeft() && $telerik.isIE && d.firstChild) {
          d.style.width = d.firstChild.offsetWidth + "px";
          d.parentNode.style.width = d.offsetWidth + "px";
        }
      }
      this._scroller.initialize();
      this._scroller.updateState();
      if (f !== null) {
        this._scroller.set_currentPosition(f);
      }
      if (this.get_rightToLeft() && e) {
        d.style.cssFloat = "left";
        this._scroller.scrollToMaxPosition();
      }
    }
  };
  b.RadMenu.prototype._getScrollableParent = function (e) {
    var d = this._extractItemFromDomElement(e);
    if (!d && this._scroller) {
      d = this;
    }
    return d;
  };
  b.RadMenu.prototype._changeScrollSpeed = function (g, f) {
    var d = this._getScrollableParent(g),
      e = d._scroller;
    if (!e) {
      return;
    }
    e.changeScrollSpeed(f);
  };
  b.RadMenu.prototype._startScroll = function (i, d) {
    var g = this._getScrollableParent(i),
      h = g._scroller;
    if (!h) {
      return;
    }
    var e = 1,
      f = g.get_openedItem();
    if (d == b.ArrowPosition.Top || d == b.ArrowPosition.Left) {
      e = -1;
    }
    if (f) {
      f.close();
    }
    h.startScroll(b.ScrollerSpeed.Slow, e);
  };
  b.RadMenu.prototype._stopScroll = function (f) {
    var d = this._getScrollableParent(f),
      e = d._scroller;
    if (!e) {
      return;
    }
    e.stopScroll();
  };
  b.RadMenu.prototype._onItemMousewheel = function (f) {
    var h = f.originalEvent,
      d = h.wheelDelta ? h.wheelDelta : -h.detail,
      k = b.ScrollerSpeed.MousewheelDefault,
      g = this._getScrollableParent(f.target),
      i = g && g.get_parent ? g.get_parent() : null,
      j = i ? i._scroller : null;
    if (!j) {
      return;
    }
    j.scrollRelative(d > 0 ? -k : k);
    f.preventDefault();
  };
  b.RadMenu.prototype._onArrowMouseDown = function (d) {
    this._changeScrollSpeed(d, b.ScrollerSpeed.Fast);
  };
  b.RadMenu.prototype._onArrowMouseUp = function (d) {
    this._changeScrollSpeed(d, b.ScrollerSpeed.Slow);
  };
  b.RadMenu.prototype._onArrowMouseOver = function (e, d) {
    this._startScroll(e, b.ArrowPosition[d]);
  };
  b.RadMenu.prototype._onArrowMouseOut = function (d) {
    this._stopScroll(d);
  };
})($telerik.$, Telerik.Web.UI);
(function (a, b, q) {
  var m = a.proxy,
    j = "rmLeftArrow",
    k = "rmRightArrow",
    l = "rmTopArrow",
    d = "rmBottomArrow",
    f = "rmLeftArrowDisabled",
    g = "rmRightArrowDisabled",
    h = "rmTopArrowDisabled",
    e = "rmBottomArrowDisabled",
    i = "rmItem",
    p = "touchstart",
    n = "touchend",
    o = "touchmove",
    c = ".";
  b.MenuItemScroller = function (t, r, s) {
    this._owner = t;
    this._menu = this._owner.get_menu ? this._owner.get_menu() : this._owner;
    this._leftArrowCssClass = j;
    this._rightArrowCssClass = k;
    this._topArrowCssClass = l;
    this._bottomArrowCssClass = d;
    this._leftArrowDisabledCssClass = f;
    this._rightArrowDisabledCssClass = g;
    this._topArrowDisabledCssClass = h;
    this._bottomArrowDisabledCssClass = e;
    this._arrowsZIndex = 2;
    this._scroller = null;
    this._childListElement = r;
    this._scrollElement = null;
    this._orientation = null;
    this._minScrollPosition = null;
    this._itemFlow = s;
    this._scrollerPositionChangedDelegate = null;
    this._decArrow = null;
    this._incArrow = null;
    this._rtl = b.RadMenu._requiresRightToLeft(r);
    this._isUsedOnTouchDevices = $telerik.isTouchDevice;
    this._initialTouchLocation = 0;
    this._previousScrollLocation = 0;
    this._touchScrollInAction = false;
    this._timeOut = null;
  };
  b.MenuItemScroller.prototype = {
    initialize: function () {
      b.RadMenu.ExtendWithView(this._menu, this, "ExtendScrollerWithView");
      this._childListElement.style.position = "relative";
      this._scrollElement = this._childListElement.parentNode;
      this._orientation = b.ScrollerOrientation.Horizontal;
      if (this._itemFlow == b.ItemFlow.Vertical) {
        this._orientation = b.ScrollerOrientation.Vertical;
      }
      this._scroller = new b.Scroller(
        this._childListElement,
        this._scrollElement,
        this._orientation
      );
      if (this._isUsedOnTouchDevices) {
        var r = a(this._childListElement);
        r.on(p, c + i, m(this._mobileScrollHandlerStart, this));
        r.on(o, c + i, m(this._mobileScrollHandler, this));
        r.on(n, c + i, m(this._mobileScrollHandlerStop, this));
        this._scroller._onTick = a.proxy(this._onTick, this);
      }
      this._scroller.initialize();
      this._createArrows();
      this._scroller.resetState();
      this._scrollerPositionChangedDelegate = Function.createDelegate(
        this,
        this._onScrollerPositionChanged
      );
      this._scroller.add_positionChanged(this._scrollerPositionChangedDelegate);
    },
    dispose: function () {
      if (this._isUsedOnTouchDevices) {
        var r = a(this._childListElement);
        r.off(p, c + i, this._mobileScrollHandlerStart);
        r.off(o, c + i, this._mobileScrollHandler);
        r.off(n, c + i, this._mobileScrollHandlerStop);
      }
      if (this._scroller) {
        this._scroller.dispose();
        this._scroller = null;
        var s = a(this._decArrow).add(a(this._incArrow));
        if ($telerik.isIE) {
          s.unbind(".menuScroller");
        }
        s.remove();
      }
      this._scrollerPositionChangedDelegate = null;
      this._childListElement = null;
      this._scrollElement = null;
    },
    updateState: function () {
      this._updateScrollingLimits();
      this._updateArrows();
    },
    resetState: function () {
      this._scroller.resetState();
    },
    startScroll: function (s, r) {
      this._scroller.startScroll(s, r);
    },
    changeScrollSpeed: function (r) {
      this._scroller.changeScrollSpeed(r);
    },
    stopScroll: function () {
      this._scroller.stopScroll();
    },
    scrollToMaxPosition: function () {
      this._scroller.scrollToMaxPosition();
    },
    scrollRelative: function (r) {
      this.set_currentPosition(this.get_currentPosition() + r);
    },
    get_currentPosition: function () {
      return this._scroller._currentPosition;
    },
    set_currentPosition: function (r) {
      this._scroller._scrollTo(
        Math.max(
          Math.min(this._scroller._maxPosition, r),
          this._scroller._minPosition
        )
      );
    },
    _onTick: function () {
      var s = this._scroller,
        r = s._currentPosition + s._direction * s._speed;
      r = Math.max(r, s._minPosition);
      r = Math.min(r, s._maxPosition);
      this._previousScrollLocation = r;
      s._scrollTo(r);
      if (r == s._minPosition || r == s._maxPosition) {
        s.stopScroll();
      }
    },
    _createArrows: function () {
      var r = this._arrowsZIndex;
      this._decArrow = this._createArrowDomElement(r);
      this._incArrow = this._createArrowDomElement(r);
      if (this._orientation == b.ScrollerOrientation.Vertical) {
        this._decArrow.style.left = "0px";
        this._decArrow.style.top = "0px";
        this._incArrow.style.left = "0px";
        this._incArrow.style.bottom = "0px";
      } else {
        this._decArrow.style.top = "0px";
        this._decArrow.style.left = "-1px";
        this._incArrow.style.top = "0px";
        this._incArrow.style.right = "-1px";
      }
    },
    _updateArrows: function () {
      var s = this._scroller.isAtMinPosition(),
        r = this._scroller.isAtMaxPosition();
      if (s) {
        this._decArrow.disabled = "disabled";
        this._setElementCssClass(
          this._decArrow,
          this._getDecArrowCssClass(false),
          this._getDecArrowCssClass(true)
        );
      } else {
        this._decArrow.disabled = "";
        this._setElementCssClass(
          this._decArrow,
          this._getDecArrowCssClass(true),
          this._getDecArrowCssClass(false)
        );
      }
      if (r) {
        this._incArrow.disabled = "disabled";
        this._setElementCssClass(
          this._incArrow,
          this._getIncArrowCssClass(false),
          this._getIncArrowCssClass(true)
        );
      } else {
        this._incArrow.disabled = "";
        this._setElementCssClass(
          this._incArrow,
          this._getIncArrowCssClass(true),
          this._getIncArrowCssClass(false)
        );
      }
    },
    _updateScrollingLimits: function () {
      var u = 0,
        t = 0,
        r = a(this._childListElement),
        s = a(this._scrollElement);
      if (this._orientation == b.ScrollerOrientation.Vertical) {
        t = r.outerHeight(true) - s.height();
      } else {
        t = r.outerWidth(true) - s.width();
      }
      if (this._rtl && $telerik.isIE8) {
        u = -t;
        t = 0;
      }
      this._scroller.setScrollingLimits(u, t);
    },
    _getDecArrowCssClass: function (r) {
      if (this._orientation == b.ScrollerOrientation.Vertical) {
        return r ? this._topArrowCssClass : this._topArrowDisabledCssClass;
      } else {
        return r ? this._leftArrowCssClass : this._leftArrowDisabledCssClass;
      }
    },
    _getIncArrowCssClass: function (r) {
      if (this._orientation == b.ScrollerOrientation.Vertical) {
        return r
          ? this._bottomArrowCssClass
          : this._bottomArrowDisabledCssClass;
      } else {
        return r ? this._rightArrowCssClass : this._rightArrowDisabledCssClass;
      }
    },
    _onScrollerPositionChanged: function (s, r) {
      this._updateArrows();
    },
    _mobileScrollHandler: function (t) {
      var r =
          this._orientation != Telerik.Web.UI.ScrollerOrientation.Vertical
            ? $telerik.getTouchEventLocation(t).x
            : $telerik.getTouchEventLocation(t).y,
        s,
        u,
        v = this._owner.get_openedItem();
      t.preventDefault();
      t.stopPropagation();
      if (this._initialTouchLocation === 0) {
        this._initialTouchLocation = r;
        if (v) {
          v.close();
        }
      }
      s = this._initialTouchLocation - r;
      u = s + this._previousScrollLocation;
      this.set_currentPosition(u);
      clearTimeout(this._timeOut);
      this._touchScrollInAction = true;
      if (
        this._scroller.isAtMinPosition(u) ||
        this._scroller.isAtMaxPosition(u)
      ) {
        this.stopScroll();
      } else {
        this._lastDelta = s;
      }
    },
    _mobileScrollHandlerStop: function (r) {
      r.stopPropagation();
      this._initialTouchLocation = 0;
      this._previousScrollLocation += this._lastDelta;
      this._touchScrollInAction = false;
    },
    _mobileScrollHandlerStart: function (r) {
      var s = this;
      r.stopPropagation();
      this._timeOut = setTimeout(function () {
        s._touchScrollInAction = false;
      }, 90);
    },
  };
  b.MenuItemScroller.registerClass(
    "Telerik.Web.UI.MenuItemScroller",
    null,
    Sys.IDisposable
  );
})($telerik.$, Telerik.Web.UI);
(function (a, b, c) {
  a.registerEnum(b, "ItemFlow", { Vertical: 0, Horizontal: 1 });
  a.registerEnum(b, "ExpandDirection", {
    Auto: 0,
    Up: 1,
    Down: 2,
    Left: 3,
    Right: 4,
  });
  a.registerEnum(b, "MenuRepeatDirection", { Vertical: 0, Horizontal: 1 });
  b.RadMenuItemGroupSettings = function (f, d) {
    var e;
    if (d) {
      for (e in d) {
        this[e] = d[e];
      }
    }
    for (e in f) {
      var g = this["set_" + e];
      if (g) {
        g.call(this, f[e]);
      }
    }
  };
  a.registerControlProperties(b.RadMenuItemGroupSettings, {
    flow: b.ItemFlow.Vertical,
    expandDirection: b.ExpandDirection.Auto,
    offsetX: 0,
    offsetY: 0,
    width: null,
    height: null,
    repeatDirection: b.MenuRepeatDirection.Vertical,
    repeatColumns: 1,
  });
  b.RadMenuItemGroupSettings.registerClass(
    "Telerik.Web.UI.RadMenuItemGroupSettings"
  );
})($telerik.$, Telerik.Web.UI);

/* END Telerik.Web.UI.Menu.RadMenuScripts.js */
/* START Telerik.Web.UI.Menu.MenuItem.RadMenuItem.js */
(function (a, c, b, y) {
  var g = ".",
    j = "rmGroup",
    q = "rmMultiColumn",
    r = "rmMultiGroup",
    i = "rmGroupColumn",
    h = "rmFirstGroupColumn",
    t = "rmScrollWrap",
    u = "rmSlide",
    p = "rmLevel",
    k = "rmHorizontal",
    z = "rmVertical",
    s = "rmRootLink",
    m = "rmImageOnly",
    o = "rmLeftImage",
    x = "rmToggle",
    l = "rmIcon",
    w = "rmText",
    d = "rmContentTemplate",
    e = "rmDisabled",
    f = "div",
    v = "span",
    n = "img";
  c.RadMenuItem = function () {
    c.RadMenuItem.initializeBase(this);
  };
  c.RadMenuItem.prototype = {
    _initialize: function (B, A) {
      c.RadMenuItem.callBaseMethod(this, "_initialize", [B, A]);
      var C = this.get_menu();
      this._groupSettings = new c.RadMenuItemGroupSettings(
        B.groupSettings || {},
        C.get_defaultGroupSettings()
      );
      this._initializeAnimation();
      this._clearNavigateUrl();
      this._updateTextElementClass();
      this._renderAccessKey();
      this._originalExpandMode = this.get_expandMode();
    },
    _initializeRenderedItem: function () {
      c.RadMenuItem.callBaseMethod(this, "_initializeRenderedItem");
      this._initializeAnimation();
      this._clearNavigateUrl();
      this._updateTextElementClass();
      this._updateLinkClass();
      this._renderAccessKey();
      c.RadMenu._updateChildrenPositionClass(this.get_parent());
      c.RadMenu._updateChildrenPositionClass(this);
    },
    _dispose: function () {
      c.BaseMenuItem.callBaseMethod(this, "_dispose");
      if (this._collapseAnimationEndedDelegate) {
        if (this._slide) {
          this._slide.remove_collapseAnimationEnded(
            this._collapseAnimationEndedDelegate
          );
        }
        this._collapseAnimationEndedDelegate = null;
      }
      if (this._slide) {
        this._slide.dispose();
        this._slide = null;
      }
      if (this._scroller) {
        this._scroller.dispose();
        this._scroller = null;
      }
      this._disposeDomElement();
      this._clearTimeout();
    },
    get_view: function () {
      return this._view;
    },
    withView: function (A, B) {
      if (!this.get_view()) {
        if (this.get_menu()) {
          this._view = c.RadMenu.GetView(this.get_menu(), this);
        } else {
          if (B) {
            return B();
          } else {
            return;
          }
        }
      }
      return A();
    },
    get_templateElement: function () {
      var A;
      if (!this._templateElement) {
        A = this._getTemplateClassName();
        this._templateElement = a(this.get_element())
          .children(f + g + A)
          .get(0);
      }
      return this._templateElement;
    },
    get_childListElement: function () {
      if (!this._childListElement) {
        var C = this._getSlideWrapElement();
        if (C) {
          var A = C,
            B = this._getScrollWrapElement();
          if (B) {
            A = B;
          }
          this._childListElement = $telerik.getFirstChildByTagName(A, "ul", 0);
        }
      }
      return this._childListElement;
    },
    get_imageElement: function () {
      if (!this._imageElement) {
        this._imageElement = a(this.get_linkElement())
          .children(g + o)
          .get(0);
      }
      return this._imageElement;
    },
    get_textElement: function () {
      if (!this._textElement) {
        this._textElement = a(this.get_linkElement())
          .children(g + w)
          .get(0);
      }
      return this._textElement;
    },
    get_text: function () {
      var A = this;
      return A.withView(
        function () {
          return A.get_view().get_text();
        },
        function () {
          return c.RadMenuItem.callBaseMethod(A, "get_text");
        }
      );
    },
    set_text: function (B) {
      var A = this;
      this.withView(
        function () {
          A.get_view().set_text(B);
        },
        function () {
          c.RadMenuItem.callBaseMethod(A, "set_text", [B]);
        }
      );
      if (this._state != c.RadMenuItemState.Closed) {
        this._clearWidth();
        this._setWidth(this._getWidth() + "px");
      } else {
        if (this._getParentFlow() == c.ItemFlow.Vertical) {
          this._adjustSiblingsWidthOnShow = true;
        }
      }
      this._updateLinkClass();
    },
    set_navigateUrl: function (B) {
      var A = this;
      this._properties.setValue("navigateUrl", B, true);
      this.withView(function () {
        A.get_view().set_navigateUrl(B);
      });
      this._clearNavigateUrl();
    },
    get_groupSettings: function () {
      return this._groupSettings;
    },
    set_groupSettings: function (A) {
      this._groupSettings = A;
    },
    get_hoveredImageUrl: function () {
      return this._properties.getValue("hoveredImageUrl", null);
    },
    set_hoveredImageUrl: function (A) {
      this._properties.setValue("hoveredImageUrl", A, true);
      this._updateImageSrc();
    },
    get_clickedImageUrl: function () {
      return this._properties.getValue("clickedImageUrl", null);
    },
    set_clickedImageUrl: function (A) {
      this._properties.setValue("clickedImageUrl", A, true);
      this._updateImageSrc();
    },
    get_selectedImageUrl: function () {
      return this._properties.getValue("selectedImageUrl", null);
    },
    set_selectedImageUrl: function (A) {
      this._properties.setValue("selectedImageUrl", A, true);
      this._updateImageSrc();
    },
    get_imageUrl: function () {
      if (this._imageUrl) {
        return this._imageUrl;
      }
      this._imageUrl = this._properties.getValue("imageUrl", null);
      if (this._imageUrl) {
        return this._imageUrl;
      }
      this._imageUrl = this._getCurrentImageUrl();
      return this._imageUrl;
    },
    set_imageUrl: function (A) {
      this._imageUrl = A;
      this._properties.setValue("imageUrl", A, true);
      if (!A) {
        a(this.get_imageElement()).remove();
        this._imageElement = null;
        return;
      }
      this._updateImageSrc();
    },
    get_expandedImageUrl: function () {
      return this._properties.getValue("expandedImageUrl", null);
    },
    set_expandedImageUrl: function (A) {
      this._properties.setValue("expandedImageUrl", A, true);
      this._updateImageSrc();
    },
    get_disabledImageUrl: function () {
      return this._properties.getValue("disabledImageUrl", null);
    },
    set_disabledImageUrl: function (A) {
      this._properties.setValue("disabledImageUrl", A, true);
      this._updateImageSrc();
    },
    set_visible: function (H) {
      var I = this.get_visible() != H;
      if (!I) {
        return;
      }
      c.RadMenuItem.callBaseMethod(this, "set_visible", [H]);
      var F = this._getParentFlow(),
        B = this.get_element(),
        D = this.get_linkElement(),
        G = this.get_textElement(),
        A = H ? "" : "none",
        C;
      if (F === c.ItemFlow.Vertical) {
        this._adjustSiblingsWidthOnShow = true;
      }
      this._clearWidth();
      if (D) {
        C = D;
      } else {
        if (G) {
          C = G;
        }
      }
      if (this.get_isSeparator() || this.get_templated()) {
        C = B.childNodes[0] || B;
      }
      C.style.display = A;
      if (C != B) {
        if (this.get_visible()) {
          B.style.cssText = this._styleCssText;
        } else {
          this._styleCssText = this.get_element().style.cssText;
          B.style.cssText =
            "padding:0px;margin:0px;height:0px;overflow:hidden;";
        }
      }
      if (F === c.ItemFlow.Vertical) {
        if (!H) {
          this._clearSiblingsWidth();
        }
        var E = this.get_parent();
        if (E.get_element().offsetWidth > 0) {
          c.RadMenu._adjustChildrenWidth(E);
        }
      }
    },
    scrollIntoView: function () {
      var K = this.get_parent();
      if (!K) {
        return;
      }
      var M = K._getScrollWrapElement();
      if (!M) {
        return;
      }
      var L = K._scroller;
      if (!L) {
        return;
      }
      var D =
        K._flow !== y && K._flow !== null
          ? K._flow
          : K.get_groupSettings().get_flow();
      var F = D == c.ItemFlow.Vertical;
      if (F) {
        M.scrollTop = 0;
      } else {
        $telerik.scrollLeft(M, 0);
      }
      var B = K.get_childListElement();
      var I = F ? "offsetTop" : "offsetLeft";
      var Q = F ? "offsetHeight" : "offsetWidth";
      var A = a([K._scroller._decArrow, K._scroller._incArrow]);
      var C = F ? A.first().height() : A.first().width();
      var E = F ? A.last().height() : A.last().width();
      var O = -B[I];
      var P = M[Q] - E;
      var N = O + M[Q];
      var H = this.get_element()[I];
      var J = this.get_element()[Q];
      var G = H + J;
      if (H < O + C || G > N - E) {
        if (O - H > G - N) {
          L.set_currentPosition(H - C);
        } else {
          L.set_currentPosition(H - P + J);
        }
      }
    },
    focusFirstChild: function (A) {
      var D = this.get_items();
      if (D.get_count() == 0) {
        return;
      }
      var C = D.getItem(0);
      var B = C;
      while (!C._canFocus()) {
        C = C._getNextItem();
        if (C == B) {
          return;
        }
      }
      C._transferFocus(A || null);
    },
    focusLastChild: function (A) {
      var C = this.get_items();
      if (C.get_count() == 0) {
        return;
      }
      var B = C.getItem(C.get_count() - 1);
      var D = B;
      while (!B._canFocus()) {
        B = B._getPreviousItem();
        if (B == D) {
          return;
        }
      }
      B._transferFocus(A || null);
    },
    focusNextItem: function (A) {
      var B = this._getNextItem();
      while (!B._canFocus()) {
        B = B._getNextItem();
      }
      B._transferFocus(A || null);
    },
    focusPreviousItem: function (A) {
      var B = this._getPreviousItem();
      while (!B._canFocus()) {
        B = B._getPreviousItem();
      }
      B._transferFocus(A || null);
    },
    _render: function (A) {
      var B = this,
        C = this.withView(function () {
          return B.get_view();
        });
      if (this._renderedClientTemplate) {
        this._renderClientTemplate(A);
      } else {
        A[A.length] = "<li class='" + this._determineCssClass() + "'>";
        C._renderLink(A);
        C._renderLinkContent(A);
        C._renderLinkEndTag(A);
        this._renderChildItems(A);
        A[A.length] = "</li>";
      }
    },
    _renderLinkContent: function (A) {
      var C =
          this.get_menu().get_showToggleHandle() &&
          (this.get_items().get_count() > 0 ||
            this.get_expandMode() === c.MenuItemExpandMode.WebService),
        B = C;
      if (this.get_imageUrl() || this.get_enableImageSprite()) {
        B = true;
        this._renderImage(A);
      }
      if (this.get_menu()._enableItemImagesPreloading) {
        this._renderPreloadImages(A);
      }
      this.get_view()._renderTextElement(A, B);
      if (C) {
        this._renderToggleButton(A);
      }
    },
    _renderClientTemplate: function (A) {
      A[A.length] = "<li class='" + this._determineCssClass() + " rmTemplate'>";
      A[A.length] = "<div class='" + this._getTemplateClassName() + "'>";
      A[A.length] = this._renderedClientTemplate;
      A[A.length] = "</div></li>";
    },
    _renderTextElement: function (A) {
      A[A.length] = "<span class='" + w + "'>";
      A[A.length] = this.get_text();
      A[A.length] = "</span>";
    },
    _renderToggleButton: function (A) {
      A[A.length] = "<span class='" + x + "'>";
      A[A.length] = "<span class='" + l + "'>Toggle</span>";
      A[A.length] = "</span>";
    },
    _renderAccessKey: function () {
      if (this.get_isSeparator() || this.get_templated()) {
        return;
      }
      var C = this.get_linkElement(),
        A;
      if (!C) {
        return;
      }
      A = C.getAttribute("accessKey");
      if (!A || !this.get_text()) {
        return;
      }
      var E = this.get_textElement() || C,
        D = E.innerHTML,
        B = D.toLowerCase().indexOf(A.toLowerCase());
      if (D.toLowerCase().indexOf("<u>") != -1) {
        return;
      }
      if (B == -1) {
        return;
      }
      E.innerHTML =
        D.substr(0, B) +
        "<u>" +
        D.substr(B, 1) +
        "</u>" +
        D.substr(B + 1, D.length);
    },
    _renderImage: function (B) {
      var A = this.get_enableImageSprite(),
        C = A ? "span" : "img",
        E = A ? " " : " alt='' src='" + this.get_imageUrl() + "' ",
        D = new b(B);
      D.append("<", C, E).append("class='", o, "' ");
      if (!this.get_enabled()) {
        D.append("disabled='disabled'");
      }
      if (A) {
        D.append("></span>");
      } else {
        D.append("/>");
      }
      return B;
    },
    _renderPreloadImages: function () {
      var B = [
        this.get_imageUrl(),
        this.get_hoveredImageUrl(),
        this.get_expandedImageUrl(),
        this.get_disabledImageUrl(),
        this.get_clickedImageUrl(),
        this.get_selectedImageUrl(),
      ];
      for (var A = 0; A < B.length; A++) {
        var C = B[A];
        if (C) {
          c.RadMenu._preloadImage(C);
        }
      }
    },
    _renderChildItems: function (A, E) {
      var B = this.get_items().toArray();
      if (!E && B.length == 0) {
        return;
      }
      var D = new b(A);
      D.append("<div class='rmSlide'>");
      if (this._getShouldRenderScrollWrap()) {
        this._renderScrollWrap(D);
      }
      var C = this._getGroupCssClass();
      if (this._hasMultipleColumns()) {
        this._renderColumns(D, B, C, E);
      } else {
        this._renderChildGroup(D, B, C, E);
      }
      if (this._getShouldRenderScrollWrap()) {
        D.append("</div>");
      }
      D.append("</div>");
    },
    _renderScrollWrap: function (D) {
      D.append("<div class='")
        .append(t, " ", j, " ")
        .append(p, this._getGroupLevelCssClass())
        .append("' style='");
      var B = this.get_groupSettings();
      var C = B.get_width();
      if (C) {
        D.append("width :", C, ";");
      }
      var A = B.get_height();
      if (A) {
        D.append("height :", A, ";");
      }
      D.append("'>");
    },
    _renderColumns: function (I, F, D, J) {
      I.append("<ul class='", q, "'>");
      var E = this.get_groupSettings();
      var K = E.get_repeatColumns();
      var H = J ? 0 : Math.min(K, F.length);
      var L = E.get_repeatDirection();
      for (var A = 0; A < H; A++) {
        var C = "";
        if (A == 0) {
          C = " " + h;
        }
        I.append("<li class='", i, C, "'>");
        var B =
          L == c.MenuRepeatDirection.Vertical
            ? this._getRowItems(A, K, F)
            : this._getColumnItems(A, K, F);
        var G = D + " " + r;
        this._renderChildGroup(I, B, G);
        I.append("</li>");
      }
      I.append("</ul>");
    },
    _renderChildGroup: function (C, B, A, D) {
      C.append("<ul class='", A, "'>");
      if (!D) {
        a.each(B, function () {
          this._render(C.get_buffer());
        });
      }
      C.append("</ul>");
    },
    _determineCssClass: function () {
      var A = this;
      return this.withView(function () {
        return A.get_view()._determineCssClass();
      });
    },
    _getNextItem: function () {
      var B = this.get_parent().get_items();
      var A = this.get_index();
      if (A == B.get_count() - 1) {
        return B.getItem(0);
      }
      return B.getItem(A + 1);
    },
    _getPreviousItem: function () {
      var B = this.get_parent().get_items();
      var A = this.get_index();
      if (A == 0) {
        return B.getItem(B.get_count() - 1);
      }
      return B.getItem(A - 1);
    },
    _getTemplateClassName: function () {
      var A = this;
      return this.withView(function () {
        return A.get_view().get_templateClassClass();
      });
    },
    _getGroupLevelCssClass: function () {
      return p + (this.get_level() + 1);
    },
    _getGroupCssClass: function () {
      var A = new b();
      A.append(this._getFlowCssClass());
      if (!this._getShouldRenderScrollWrap()) {
        A.append(" ", j, " ", this._getGroupLevelCssClass());
      }
      return A.toString();
    },
    _getIsImageOnly: function () {
      if (this._isImageOnly === null) {
        this._isImageOnly = this.get_imageElement() != null;
      }
      return this._isImageOnly;
    },
    _getFlowCssClass: function () {
      if (this.get_groupSettings().get_flow() == c.ItemFlow.Vertical) {
        return z;
      } else {
        return k;
      }
    },
    _getCurrentImageUrl: function () {
      var B = null,
        A = this.get_imageElement();
      if (A) {
        B = A.src;
      }
      return B;
    },
    _getParentFlow: function () {
      var A = this.get_parent();
      if (!A) {
        return null;
      }
      if (A == this.get_menu()) {
        return A._flow;
      } else {
        return A.get_groupSettings().get_flow();
      }
    },
    _getRowItems: function (F, D, B) {
      var G = [];
      for (var E = 0; E < D; E++) {
        G[E] = [];
      }
      var A = function () {
        for (var J = G.length - 1; J > 0; J--) {
          var I = G[J];
          var H = G[J - 1];
          if (I.length == H.length) {
            return;
          }
          H.push(I.shift());
        }
      };
      var C = G[D - 1];
      a.each(B, function () {
        C.push(this);
        A();
      });
      return G[F];
    },
    _getColumnItems: function (A, F, E) {
      var B = [];
      var C = 0;
      for (var D = 0; D < E.length; D++) {
        if (C == A) {
          B.push(E[D]);
        }
        C = (C + 1) % F;
      }
      return B;
    },
    _getColumnForItem: function (D) {
      if (!this._hasMultipleColumns()) {
        return null;
      }
      var A = this.get_childListElement();
      var B = a(A).children(".rmGroupColumn");
      var C = this.get_groupSettings();
      var F = C.get_repeatColumns();
      if (B.length < F) {
        return this._createEmptyColumn();
      }
      var E = D.get_index();
      if (C.get_repeatDirection() == c.MenuRepeatDirection.Horizontal) {
        return B[E % F];
      } else {
        return B[B.length - 1];
      }
    },
    _getColumnItemCount: function (A) {
      return a(A).children(".rmGroup").children(".rmItem").length;
    },
    _getToggleButtonElement: function () {
      if (!this._toggleButtonElement) {
        this._toggleButtonElement = a(this.get_linkElement())
          .children(g + x)
          .get(0);
      }
      return this._toggleButtonElement;
    },
    _getChildElements: function () {
      var A = a(this.get_childListElement());
      if (A.is(".rmMultiColumn")) {
        var B = A.find("> .rmGroupColumn > ul > .rmItem"),
          C = this.get_groupSettings(),
          G = C.get_repeatDirection(),
          F = C.get_repeatColumns();
        if (F == 1 || G == c.MenuRepeatDirection.Vertical) {
          return B;
        }
        var E = [],
          H = Math.ceil(B.length / F);
        for (var D = 0; D < H; D++) {
          B.filter(".rmItem:nth-child(" + (D + 1) + ")").each(function () {
            Array.add(E, this);
          });
        }
        return E;
      }
      return A.children(".rmItem");
    },
    _getSlideWrapElement: function () {
      if (!this._slideWrapElement) {
        this._slideWrapElement = a(this.get_element())
          .children(g + u)
          .get(0);
      }
      return this._slideWrapElement;
    },
    _getScrollWrapElement: function () {
      if (!this._scrollWrapElement) {
        var A = this._getSlideWrapElement();
        if (A) {
          this._scrollWrapElement = a(A)
            .children(g + t)
            .get(0);
        }
      }
      return this._scrollWrapElement;
    },
    _getAnimationContainer: function () {
      return this._getSlideWrapElement();
    },
    _getContentTemplateContainer: function () {
      if (!this._contentTemplateContainer) {
        this._contentTemplateContainer = a(this.get_element())
          .find(g + d)
          .get(0);
      }
      return this._contentTemplateContainer;
    },
    _getAnimatedElement: function () {
      if (!this._animatedElement) {
        this._animatedElement =
          this._getScrollWrapElement() ||
          this.get_childListElement() ||
          this._getContentTemplateContainer();
      }
      return this._animatedElement;
    },
    _createChildControls: function () {
      c.RadMenuItem.callBaseMethod(this, "_createChildControls");
      this._initializeScroller();
    },
    _createChildListElement: function () {
      var A = [];
      this._renderChildItems(A, true);
      var B = a(A.join(""));
      a(this.get_element()).append(B);
      this._initializeAnimation();
      this._updateTextElementClass();
      if (this._getShouldRenderScrollWrap()) {
        this._initializeScroller();
      }
      return B;
    },
    _createToggleButtonElement: function () {
      var B = document.createElement(v),
        A = document.createElement(v);
      A.className = l;
      A.appendChild(document.createTextNode("Toggle"));
      B.className = x;
      B.appendChild(A);
      this._toggleButtonElement = B;
    },
    _attachChildren: function () {
      if (this._childrenDetached) {
        var A = this.get_element();
        A.appendChild(this._getAnimationContainer());
        this._childrenDetached = false;
      }
    },
    _detachChildren: function () {
      if (this._childrenDetached) {
        return;
      }
      var C = this.get_parent(),
        D;
      if (this.get_level() == 0 && C.get_enableRootItemScroll()) {
        var E = document.createElement("div");
        E.className = "rmHorizontal rmRootGroup";
        if (C.get_enableRoundedCorners()) {
          E.className += " rmRoundedCorners";
        }
        if (C.get_enableShadows()) {
          E.className += " rmShadows";
        }
        E.style.position = "absolute";
        E.style.height = "0px";
        E.style.width = "0px";
        E.style.visibility = "hidden";
        E.style.left = "0px";
        if (C.get_rightToLeft()) {
          E.style.cssFloat = "right";
        }
        var B = document.createElement("div");
        B.className = j;
        B.style.position = "relative";
        C.get_element().appendChild(E);
        E.appendChild(B);
        if ($telerik.isIE) {
          E.style.cssText = E.style.cssText;
        }
        D = B;
      } else {
        D = C._getAnimationContainer();
      }
      var A = this._getAnimationContainer();
      D.appendChild(A);
      this._childrenDetached = true;
      A._item = this;
      A._itemTypeName = Object.getTypeName(this);
    },
    _getWidth: function () {
      var A = this.get_linkElement();
      if (A) {
        return A.offsetWidth;
      } else {
        return this.get_element().offsetWidth;
      }
    },
    _setWidth: function (L) {
      var K = this.get_linkElement();
      if (!K) {
        K = this.get_element();
      }
      if (!K) {
        return;
      }
      if ($telerik.isOpera) {
        this.get_element().style.cssFloat = "none";
      }
      var J = parseInt(L, 10);
      if (isNaN(J)) {
        K.style.width = L;
        return;
      }
      var G = J,
        I =
          parseFloat(a(K).css("padding-left")) +
          parseFloat(a(K).css("padding-right")),
        A = a(K).css("border-left-width"),
        B = a(K).css("border-right-width"),
        F = /\d/,
        C = F.test(A) ? parseInt(A, 10) : 0,
        D = F.test(B) ? parseInt(B, 10) : 0,
        E = C + D;
      G -= I + E;
      if (G <= 0) {
        return;
      }
      var H = K.style.width;
      if (!H || G != H) {
        K.style.width = G + "px";
      }
    },
    _clearWidth: function () {
      this._setWidth("auto");
    },
    _initializeAnimation: function () {
      this._determineExpandDirection();
      var A = this._getAnimatedElement();
      if (A) {
        var B = this.get_menu();
        this._slide = new c.jSlide(
          A,
          B.get_expandAnimation(),
          B.get_collapseAnimation(),
          B.get_enableOverlay()
        );
        this._slide.initialize();
        this._slide.set_direction(this._getSlideDirection());
        this._collapseAnimationEndedDelegate = Function.createDelegate(
          this,
          this._onCollapseAnimationEnded
        );
        this._slide.add_collapseAnimationEnded(
          this._collapseAnimationEndedDelegate
        );
      }
    },
    _doOpen: function (B) {
      var F = this,
        C = this.get_menu(),
        E,
        A,
        D;
      if (!this.get_hasContentTemplate()) {
        this._ensureChildControls();
      }
      E = this.get_parent();
      if (E != C && E._state != c.RadMenuItemState.Open) {
        E._open(B);
      }
      A = this._getAnimationContainer();
      if (!A) {
        return;
      }
      E._openedItem = this;
      this._state = c.RadMenuItemState.Open;
      if (this.get_hasContentTemplate()) {
        this._doOpenContentTemplate(A);
      } else {
        this.withView(function () {
          F.get_view()._doOpen(A);
        });
      }
      this._updateLinkClass();
      this._updateImageSrc();
      if (C && C.get_enableAriaSupport()) {
        a(this._childListElement).removeAttr("aria-hidden");
      }
      D = new c.RadMenuItemOpenedEventArgs(this, B);
      this.get_menu()._raiseEvent("itemOpened", D);
    },
    _doOpenContentTemplate: function (A) {
      var C = this,
        B = C._slide;
      this.withView(function () {
        C.get_view()._ensureDecorationElements();
      });
      A.style.display = "block";
      A.style.visibility = "hidden";
      C._resetAnimatedElementPosition();
      B.set_direction(C._getSlideDirection());
      B.set_animatedElement(C._getAnimatedElement());
      B.updateSize();
      C._positionChildContainerBasic();
      A.style.visibility = "visible";
      C._updateZIndex();
      B.expand();
    },
    _doClose: function (B) {
      var C, A, D;
      if (this._openedItem) {
        this._openedItem._close(B);
      }
      D = this.get_parent();
      D._openedItem = null;
      if (!this._getAnimationContainer()) {
        return;
      }
      this._state = c.RadMenuItemState.Closed;
      if (!this._getIsImageOnly()) {
        this.get_element().style.zIndex = 0;
      }
      this._slide.collapse();
      this._updateLinkClass();
      this._updateImageSrc();
      if (C && C.get_enableAriaSupport()) {
        a(this._childListElement).attr("aria-hidden", true);
      }
      A = new c.RadMenuItemClosedEventArgs(this, B);
      C = this.get_menu();
      C._raiseEvent("itemClosed", A);
      this._closeChildren(B);
    },
    _click: function (C) {
      if (!this.get_enabled()) {
        if ($telerik.isSafari && !$telerik.isChrome) {
          C.preventDefault();
        }
        return;
      }
      var D = this.get_menu(),
        E = D.get_openedItem(),
        B = D._getExtendedItemClickingEventArgs(
          new c.RadMenuItemClickingEventArgs(this, C)
        ),
        A;
      if (D._isUsedOnTouchDevices) {
        if (this._preventDefaultUnderMobile(C)) {
          return;
        }
      }
      D._raiseEvent("itemClicking", B);
      if (B.get_cancel()) {
        if (C && C.preventDefault) {
          C.preventDefault();
        }
        return;
      }
      if (D._isUsedOnTouchDevices && !D.get_showToggleHandle()) {
        if (!this._shouldPostBack()) {
          this._toggleState(C);
        }
      } else {
        if (D.get_clickToOpen() && this.get_level() == 0) {
          if (E && E != this) {
            E._close(C);
          }
          if (
            D.get_clicked() &&
            !$telerik.isBlackBerry4 &&
            !$telerik.isBlackBerry5
          ) {
            this._close(C);
          } else {
            this._open(C);
          }
          D.set_clicked(!D.get_clicked());
        }
      }
      A = D._getExtendedItemClickedEventArgs(
        new c.RadMenuItemClickedEventArgs(this, C)
      );
      D._raiseEvent("itemClicked", A);
      if (this._shouldNavigate()) {
        return;
      }
      this.set_selected(true);
      if (this._shouldPostBack()) {
        D._postback(this._getHierarchicalIndex());
      }
    },
    _toggleState: function (A) {
      if (!this.get_enabled()) {
        return;
      }
      if (this.get_isOpen()) {
        this._close(A);
      } else {
        if (this._shouldOpen()) {
          this._open(A);
        }
      }
    },
    _doFocus: function (A) {
      if (!this._canFocus()) {
        return;
      }
      this._ensureChildControls();
      var C = this.get_parent(),
        B = this.get_menu();
      if (C._state != c.RadMenuItemState.Open && C.open) {
        C._open(A);
      }
      C._focusedItem = this;
      if (C !== B) {
        B._focusedItem = this;
      }
      this.scrollIntoView();
      if (
        B.get_enableAriaSupport() &&
        A.type.toLowerCase() !== "click" &&
        A.type.toLowerCase() !== "domactivate"
      ) {
        this._doAriaFocus();
      }
      B._triggerEventOnce(
        "itemFocus",
        new c.RadMenuItemFocusEventArgs(this, A),
        "focus"
      );
    },
    _doBlur: function (A) {
      if (this.get_isSeparator()) {
        return;
      }
      var D = this,
        C = D.get_parent(),
        B = D.get_menu(),
        E = A ? A.type : "blur";
      C._focusedItem = null;
      if (C !== B) {
        B._focusedItem = null;
      }
      if (B.get_enableAriaSupport()) {
        this._doAriaBlur();
      }
      B._triggerEventOnce("itemBlur", new c.RadMenuItemBlurEventArgs(D, A), E);
    },
    _doAriaFocus: function () {
      var A = this.get_menu();
      var B = A.get_id() + "_active";
      a(this.get_element()).attr("id", B);
      a(A._getMainElement()).attr("aria-activedescendant", B);
    },
    _doAriaBlur: function () {
      a(this.get_menu()._getMainElement()).removeAttr("aria-activedescendant");
      a(this.get_element()).removeAttr("id");
    },
    _transferFocus: function (A) {
      this._ensureChildControls();
      var C = this.get_parent();
      var B = C.get_openedItem();
      if (B && B != this) {
        B._close(A);
      }
      if (C._state != c.RadMenuItemState.Open && C.open) {
        C._open(A);
      }
      if (this.get_menu().get_focusedItem()) {
        this.get_menu().get_focusedItem().blur(A);
      }
      this.focus(A);
    },
    _setFocused: function (B, A) {
      if (B) {
        this._doFocus(A);
      } else {
        this._doBlur(A);
      }
    },
    _updateZIndex: function () {
      var A = this._getAnimationContainer(),
        B = this.get_parent();
      A.style.visibility = "visible";
      this.get_element().style.zIndex =
        B.get_items().get_count() - this.get_index();
      A.style.zIndex = B.get_items().get_count() + 1;
      this.get_menu()._incrementZIndex(this._zIndexStep);
    },
    _positionChildContainer: function () {
      if (!this._autoScrollActive) {
        this._saveAnimationContainerSize();
      }
      var E = this._positionChildContainerBasic();
      var C = E.left;
      var H = E.top;
      var D = this.get_menu();
      var A = D.get_enableAutoScroll();
      var B = D.get_enableScreenBoundaryDetection();
      var G = false;
      if (A) {
        if (!this._applyAutoScroll(C, H)) {
          if (this._autoScrollActive) {
            this._removeAutoScroll();
            this._autoScrollActive = false;
            this._restoreAnimationContainerSize();
            E = this._positionChildContainerBasic();
            C = E.left;
            H = E.top;
          }
          if (B) {
            var F = this._adjustForScreenBoundaries(C, H);
            G = true;
            this._applyAutoScroll(F.adjustedLeft, F.adjustedTop);
          }
        }
        if (this._autoScrollActive) {
          this._updateScrollSize();
        }
      }
      if (B && !G) {
        this._adjustForScreenBoundaries(C, H);
      }
      this._updateTextElementClass();
    },
    _positionChildContainerBasic: function () {
      var J = 0;
      var H = 0;
      var C = this.get_element();
      var F = C.offsetHeight;
      var G = C.offsetWidth;
      var E = this._getAnimationContainer();
      var A = E.offsetHeight;
      var B = E.offsetWidth;
      var D = this.get_groupSettings().get_expandDirection();
      switch (D) {
        case c.ExpandDirection.Up:
          J = -A;
          break;
        case c.ExpandDirection.Down:
          J = F;
          break;
        case c.ExpandDirection.Left:
          H = -B;
          break;
        case c.ExpandDirection.Right:
          H = G;
          break;
      }
      var I = this.get_menu();
      if (I.get_rightToLeft() && this.get_level() == 0) {
        H = G - B;
        if (this._getParentFlow() == c.ItemFlow.Vertical) {
          H -= G;
        }
      }
      this._setChildContainerPosition(H, J);
      return { left: H, top: J };
    },
    _setChildContainerPosition: function (F, I) {
      var A = this._getAnimationContainer();
      var G = this.get_parent();
      var H = null;
      if (G._getScrollWrapElement) {
        H = G._getScrollWrapElement();
      }
      if (H) {
        this._detachChildren();
        var E = this.get_element();
        I += E.offsetTop;
        F += E.offsetLeft;
        var B = G.get_childListElement();
        var D = parseInt(B.style.top, 10);
        if (isNaN(D)) {
          D = 0;
        }
        if (this.get_groupSettings().get_offsetY() == 0) {
          I += D;
        }
        var C = parseInt(B.style.left, 10);
        if (isNaN(C)) {
          C = 0;
        }
        if (this.get_groupSettings().get_offsetX() == 0) {
          F += C;
          if (this._getParentFlow() == c.ItemFlow.Horizontal) {
            F = Math.max(F, 0);
          }
        }
      }
      A.style.left = F + this.get_groupSettings().get_offsetX() + "px";
      A.style.top = I + this.get_groupSettings().get_offsetY() + "px";
    },
    _adjustForScreenBoundaries: function (T, Y) {
      var Q = this._getAnimationContainer();
      var B = Q.offsetHeight;
      var D = Q.offsetWidth;
      var W = this.get_menu().get_rightToLeft();
      var L = this.get_element();
      var R = L.offsetHeight;
      var S = L.offsetWidth;
      var N = this.get_groupSettings().get_expandDirection();
      var V = N;
      var K = c.RadMenu._getViewPortSize();
      var J = a().scrollTop();
      var C = $telerik.getLocation(Q);
      var M = $telerik.getLocation(L);
      var H = K.width - M.x - L.offsetWidth;
      var G = M.x;
      var F = K.height - M.y - L.offsetHeight;
      var I = M.y - J;
      switch (N) {
        case c.ExpandDirection.Up:
          if ($telerik.elementOverflowsTop(Q, C) || (C.y < J && F > I)) {
            V = c.ExpandDirection.Down;
            Y = R;
          }
          break;
        case c.ExpandDirection.Down:
          if ($telerik.elementOverflowsBottom(K, Q, C)) {
            if (M.y > Q.offsetHeight) {
              V = c.ExpandDirection.Up;
              Y = -B;
            }
          }
          break;
        case c.ExpandDirection.Left:
          if (C.x < a(document).scrollLeft()) {
            if (H > G) {
              V = c.ExpandDirection.Right;
              T = S;
            }
          }
          if (W && this.get_level() == 0) {
            var A = a(this.get_childListElement()).outerWidth(true);
            var P = G > A;
            var O = "get_contextMenuElement" in this.get_menu();
            if (P && !O) {
              T = T - S;
            }
          }
          break;
        case c.ExpandDirection.Right:
          if ($telerik.elementOverflowsRight(K, Q, C)) {
            if (G > H) {
              V = c.ExpandDirection.Left;
              T = -D;
            }
          } else {
            if (W) {
              if ($telerik.elementOverflowsLeft(Q) && H > G) {
                T = T + D;
              } else {
                V = c.ExpandDirection.Left;
                T = T - S;
              }
            }
          }
          break;
      }
      switch (V) {
        case c.ExpandDirection.Down:
        case c.ExpandDirection.Up:
          if ($telerik.elementOverflowsRight(K, Q)) {
            var E = K.width - (C.x + D);
            var U = this.get_menu();
            if (U.get_rightToLeft() && this.get_level() == 0) {
              T += E;
            } else {
              T = E;
            }
          }
          if (W) {
            if ($telerik.elementOverflowsLeft(Q) && H > G) {
              T = T + D - S;
            }
          }
          break;
        case c.ExpandDirection.Left:
        case c.ExpandDirection.Right:
          if ($telerik.elementOverflowsBottom(K, Q)) {
            var X = Math.min(B, K.height);
            Y = K.height - (C.y + X) - this._defaultScrollSize;
          }
          break;
      }
      this._setChildContainerPosition(T, Y);
      this._slide.set_direction(V);
      return { adjustedLeft: T, adjustedTop: Y };
    },
    _resetAnimatedElementPosition: function () {
      var A = this._getAnimatedElement();
      A.style.top = "0px";
      A.style.left = "0px";
    },
    _determineExpandDirection: function () {
      var A = this.get_groupSettings();
      if (A.get_expandDirection() != c.ExpandDirection.Auto) {
        return;
      }
      var B = this._getParentFlow();
      if (B == c.ItemFlow.Vertical) {
        if (this.get_menu().get_rightToLeft()) {
          A.set_expandDirection(c.ExpandDirection.Left);
        } else {
          A.set_expandDirection(c.ExpandDirection.Right);
        }
      } else {
        A.set_expandDirection(c.ExpandDirection.Down);
      }
    },
    _getMaximumExpandSize: function () {
      var F = this._slide.get_direction(),
        E = c.RadMenu._getViewPortSize(),
        A = this._getAnimationContainer(),
        B = $telerik.getLocation(A);
      if (this.get_groupSettings().get_flow() == c.ItemFlow.Vertical) {
        var C;
        if (F == c.ExpandDirection.Up) {
          C = A.offsetHeight + B.y;
        } else {
          C = E.height - B.y - this._defaultScrollSize;
        }
        return Math.min(C, E.height - this._defaultScrollSize);
      }
      var D;
      if (F == c.ExpandDirection.Left) {
        D = B.x;
      } else {
        D = E.width - B.x;
      }
      return Math.min(D, E.width);
    },
    _saveAnimationContainerSize: function () {
      var C = this._getAnimationContainer();
      var A = C.offsetHeight;
      var B = C.offsetWidth;
      this._animationContainerOriginalSize = {};
      this._animationContainerOriginalSize.height = A;
      this._animationContainerOriginalSize.width = B;
    },
    _restoreAnimationContainerSize: function () {
      if (this._animationContainerOriginalSize) {
        var A = this._getAnimationContainer();
        A.style.height = this._animationContainerOriginalSize.height + "px";
        A.style.width = this._animationContainerOriginalSize.width + "px";
        this._animationContainerOriginalSize = null;
      }
    },
    _getSlideDirection: function () {
      var A = this.get_groupSettings().get_expandDirection();
      if (A == c.ExpandDirection.Auto) {
        return null;
      }
      return A;
    },
    _getExpandClassName: function () {
      return "rmExpand" + this._getExpandClass();
    },
    _getExpandClass: function () {
      var A = this._getSlideDirection();
      switch (A) {
        case c.jSlideDirection.Up:
          return "Top";
        case c.jSlideDirection.Down:
          return "Down";
        case c.jSlideDirection.Left:
          return "Left";
        case c.jSlideDirection.Right:
          return "Right";
      }
    },
    _fitsWindow: function () {
      var B = this._getMaximumExpandSize();
      var A = this._getAnimationContainer();
      if (this.get_groupSettings().get_flow() == c.ItemFlow.Vertical) {
        return A.offsetHeight <= B;
      }
      return A.offsetWidth <= B;
    },
    _updateImageSrc: function () {
      var B = this.get_imageUrl();
      if (this._hovered && this.get_hoveredImageUrl()) {
        B = this.get_hoveredImageUrl();
      }
      if (
        this._state == c.RadMenuItemState.Open &&
        this.get_expandedImageUrl()
      ) {
        B = this.get_expandedImageUrl();
      }
      if (!this.get_enabled() && this.get_disabledImageUrl()) {
        B = this.get_disabledImageUrl();
      }
      if (this._clicked && this.get_clickedImageUrl()) {
        B = this.get_clickedImageUrl();
      }
      if (this.get_selected() && this.get_selectedImageUrl()) {
        B = this.get_selectedImageUrl();
      }
      if (B && this.get_element()) {
        var A = this.get_imageElement();
        if (!A) {
          A = this._createImageElement();
        }
        B = B.replace(/&amp;/gi, "&");
        if (B != A.src) {
          A.src = B;
        }
      }
    },
    _applyCssClass: function (C, A) {
      var B = this;
      this.withView(function () {
        B.get_view()._applyCssClass(C, A);
      });
    },
    _updateLinkClass: function () {
      var A = this;
      if (this.get_isSeparator()) {
        return;
      }
      this.withView(function () {
        A.get_view()._updateLinkClass();
      });
    },
    _updateTextElementClass: function () {
      var A = this;
      this.withView(function () {
        A.get_view()._updateTextElementClass();
      });
    },
    _updateColumnWrapSize: function () {
      var A = a(this.get_childListElement());
      if (!A.is(".rmMultiColumn")) {
        return;
      }
      var C = 0;
      var B = 0;
      a(A)
        .children(".rmGroupColumn")
        .children(".rmGroup")
        .each(function () {
          C += this.offsetWidth;
          B = Math.max(this.offsetHeight, B);
        });
      if (C == 0 || B == 0) {
        return;
      }
      A.css("width", C + "px").css("height", B + "px");
    },
    _updateScrollPosition: function () {
      this._scroller.updateState();
      if (
        this.get_menu().get_rightToLeft() &&
        this._groupSettings.get_flow() == c.ItemFlow.Horizontal
      ) {
        this.get_childListElement().style.cssFloat = "left";
        this._scroller.scrollToMaxPosition();
      }
    },
    _updateChildListWidth: function () {
      var C = this.get_menu();
      if (
        this._groupSettings.get_flow() == c.ItemFlow.Vertical &&
        C.get_rightToLeft() &&
        $telerik.isIE
      ) {
        var A = this.get_childListElement();
        var B = a(A).children(".rmItem").get(0);
        if (B) {
          A.style.width = B.offsetWidth + "px";
        }
      }
    },
    _recalculateColumns: function () {
      if (
        this.get_groupSettings().get_repeatDirection() ==
        c.MenuRepeatDirection.Horizontal
      ) {
        return;
      }
      var A = this.get_childListElement();
      var C = a(A).children(".rmGroupColumn");
      for (var D = C.length - 1; D > 0; D--) {
        var B = C[D];
        var E = C[D - 1];
        if (this._getColumnItemCount(E) == this._getColumnItemCount(B)) {
          return;
        }
        a(E)
          .children(".rmGroup")
          .append(a(B).children(".rmGroup").children(".rmItem").eq(0));
      }
    },
    _createEmptyColumn: function () {
      var B = this._getGroupCssClass();
      var C = new b();
      C.append("<li class='", i, "'>");
      this._renderChildGroup(C, [], B);
      C.append("</li>");
      var A = a(C.toString());
      a(this.get_childListElement()).append(A);
      return A;
    },
    _createImageElement: function () {
      var C = this,
        B = this.get_enableImageSprite() ? v : n,
        A = this.get_linkElement() || this.get_element();
      this._imageElement = document.createElement(B);
      this._imageElement.className = o;
      if (!this.get_enabled()) {
        this._imageElement.disabled = "disabled";
      }
      if (A.firstChild) {
        this.withView(function () {
          C.get_view()._positionImageElement(A);
        });
      } else {
        A.appendChild(this._imageElement);
      }
      return this._imageElement;
    },
    _hasMultipleColumns: function () {
      var A = this.get_groupSettings();
      var B = A.get_repeatColumns();
      if (B == 1) {
        B = this.get_menu().get_defaultGroupSettings().get_repeatColumns();
      }
      return B > 1;
    },
    _onCollapseAnimationEnded: function () {
      var A = this.get_menu();
      this.get_element().style.zIndex = 0;
      A._restoreZIndex();
      if (this.get_level() == 0 && A.get_rightToLeft()) {
        var B = A.get_element();
        B.style.cssText = B.style.cssText;
      }
    },
    _stopAnimation: function () {
      if (this._slide) {
        this._slide._stopAnimation();
      }
    },
    _resolveCssClass: function (B, C) {
      var A = [],
        D;
      if (!this.get_templated()) {
        A.push(B);
        if (
          C &&
          this.get_text() == "" &&
          a(this.get_textElement()).children().length === 0
        ) {
          A.push(m);
        }
        if (C && this._isRootLink()) {
          A.push(s);
        }
        if (this.get_focused() && !this.get_templated()) {
          A.push(this.get_focusedCssClass());
        }
        D = this.get_menu();
        if (this.get_selected() && (!D || D.get_enableSelection())) {
          A.push(this.get_selectedCssClass());
        }
        if (this._clicked) {
          A.push(this.get_clickedCssClass());
        }
        A.push(this.get_cssClass());
      }
      if (this._state == c.RadMenuItemState.Open) {
        A.push(this.get_expandedCssClass());
      }
      if (!this.get_enabled()) {
        Array.addRange(A, [e, this.get_disabledCssClass()]);
      }
      return A;
    },
    _preventDefaultUnderMobile: function (A) {
      if (!A) {
        return false;
      }
      var B = !(
        this._shouldNavigate() ||
        a(this.get_element()).hasClass("rmTemplate") ||
        this._getContentTemplateContainer()
      );
      if (B) {
        A.preventDefault();
      } else {
        if (!this.get_menu().get_showToggleHandle()) {
          if (this._shouldOpen()) {
            if (this.get_isOpen()) {
              return true;
            } else {
              A.preventDefault();
            }
          }
        }
      }
      return false;
    },
    _applyTemplate: function () {
      var A = this;
      this.withView(function () {
        A.get_view()._applyTemplate();
      });
    },
    _initializeScroller: function () {
      var A = this._getScrollWrapElement();
      if (A) {
        this._scroller = new c.MenuItemScroller(
          this,
          this.get_childListElement(),
          this.get_groupSettings().get_flow()
        );
        this._scroller.initialize();
      }
    },
    _removeScrollWrapContainer: function () {
      var A = this.get_menu();
      if (
        A &&
        ((A.get_enableRoundedCorners() && this._roundedCornersRendered) ||
          (A.get_enableShadows() && this._shadowsRendered))
      ) {
        c.RadMenu._removeScrollWrapContainer(this);
      }
    },
    _getShouldRenderScrollWrap: function () {
      if (this._hasMultipleColumns()) {
        return false;
      }
      var C = this.get_groupSettings();
      var A = this.get_menu().get_defaultGroupSettings();
      var D = C.get_width();
      if (!D) {
        D = A.get_width();
      }
      var B = C.get_height();
      if (!B) {
        B = A.get_height();
      }
      return D || B;
    },
    _initializeAutoScroll: function () {
      this._removeChildListCorners();
      this._buildScrollWrap();
      this._initializeScroller();
      this._animatedElement = null;
      this._scrollWrapElement = null;
      this._slide.set_animatedElement(this._getAnimatedElement());
      this._ensureRoundedCorners();
      this._ensureShadows();
    },
    _isAutoScrollPossible: function () {
      var C = this.get_menu();
      var B = this._getMaximumExpandSize();
      var A = this._getAnimationContainer();
      if (this.get_groupSettings().get_flow() == c.ItemFlow.Vertical) {
        return C.get_autoScrollMinimumHeight() < B && B <= A.offsetHeight;
      } else {
        return C.get_autoScrollMinimumWidth() < B && B <= A.offsetWidth;
      }
    },
    _applyAutoScroll: function (A, B) {
      if (this._isAutoScrollPossible()) {
        if (!this._scroller) {
          this._initializeAutoScroll();
          this._autoScrollActive = true;
          this._setChildContainerPosition(A, B);
        }
        return true;
      }
      return false;
    },
    _removeAutoScroll: function () {
      this._removeScrollWrapContainer();
      var B = this.get_items();
      var C = B.get_count();
      for (var D = 0; D < C; D++) {
        B.getItem(D)._removeAutoScroll();
      }
      this._attachChildren();
      if (!this._scroller) {
        return;
      }
      this._scroller.dispose();
      this._scroller = null;
      var F = this._getSlideWrapElement();
      var A = this.get_childListElement();
      var E = this._getScrollWrapElement();
      F.appendChild(A);
      F.removeChild(E);
      A.className = String.format(
        "{0} {1} {2}{3}",
        this._getFlowCssClass(),
        j,
        p,
        this.get_level()
      );
      this._animatedElement = null;
      this._scrollWrapElement = null;
      this._slide.set_animatedElement(this._getAnimatedElement());
      this._slide.updateSize();
      this._ensureRoundedCorners();
      this._ensureShadows();
    },
    _updateScrollSize: function () {
      var B = this._slide.get_direction();
      var A = this._getAnimationContainer();
      var D = this._getScrollWrapElement();
      D.style.height = "";
      D.style.width = "";
      var C = this._getMaximumExpandSize();
      if (this.get_groupSettings().get_flow() == c.ItemFlow.Vertical) {
        $telerik.setSize(D, { height: C, width: parseInt(A.style.width, 10) });
        if (B == c.ExpandDirection.Up) {
          A.style.top = -C + "px";
        }
      } else {
        $telerik.setSize(D, { width: C, height: parseInt(A.style.height, 10) });
      }
      this._slide.updateSize();
      this._scroller.resetState();
    },
    _buildScrollWrap: function () {
      var C = this._getSlideWrapElement();
      var A = this.get_childListElement();
      var B = document.createElement("div");
      B.style.position = "relative";
      B.style.overflow = "hidden";
      A.className = this._getFlowCssClass();
      B.className = String.format("{0} {1} {2}{3}", t, j, p, this.get_level());
      B.appendChild(A);
      C.appendChild(B);
    },
    _updateScrollWrapSize: function () {
      var B = this._getScrollWrapElement();
      var A = this.get_childListElement();
      if (!B) {
        return;
      }
      if (!B.style.height) {
        B.style.height = A.offsetHeight + "px";
      }
      if (this.get_groupSettings().get_flow() == c.ItemFlow.Vertical) {
        B.style.width = A.offsetWidth + "px";
      }
    },
    _adjustSiblingsWidth: function (B) {
      var A = this.get_parent();
      if (A) {
        this._clearSiblingsWidth();
        c.RadMenu._adjustChildrenWidth(A, B);
      }
    },
    _clearSiblingsWidth: function () {
      var B = this.get_parent(),
        E = B.get_items();
      for (var A = 0; A < E.get_count(); A++) {
        var C = E.getItem(A);
        if (C != this) {
          var D = C.get_linkElement();
          if (D) {
            D.style.width = "auto";
          }
        }
        if ($telerik.isSafari) {
          B.get_childListElement().style.width = "auto";
        }
      }
    },
    _ensureToggleButton: function () {
      var B = this,
        A = this.get_linkElement() || this.get_element();
      if (!this._getToggleButtonElement()) {
        this._createToggleButtonElement();
        this.withView(function () {
          B.get_view()._positionToggleButtonElement(A, B._toggleButtonElement);
        });
      }
    },
    _ensureRoundedCorners: function () {
      var A = this;
      this.withView(function () {
        A.get_view()._ensureRoundedCorners();
      });
    },
    _ensureShadows: function () {
      var A = this;
      this.withView(function () {
        A.get_view()._ensureShadows();
      });
    },
    _removeChildListCorners: function () {
      var A = this;
      this.withView(function () {
        A.get_view()._removeChildListCorners();
      });
    },
    _isRootLink: function () {
      if (this.get_menu()) {
        if (this.get_level() > 0) {
          return false;
        }
        if ("get_contextMenuElement" in this.get_menu()) {
          return false;
        }
        return true;
      }
    },
    _createLoadingItem: function () {
      var B = this.get_menu().get_loadingTemplate();
      if (B === "") {
        return;
      }
      var A = new c.RadMenuItem();
      this.get_items().add(A);
      A.set_text(B);
    },
    _removeLoadingItem: function () {
      if (this.get_menu().get_loadingTemplate() === "") {
        return;
      }
      var A = this.get_items().getItem(0);
      this.get_items().remove(A);
    },
    _onChildrenLoading: function () {
      this._itemsLoading = true;
      this._createLoadingItem();
      this._doOpen(null);
    },
    _onChildrenLoaded: function () {
      this._removeLoadingItem();
      this._itemsLoaded = true;
      this._itemsLoading = false;
      if (this.get_items().get_count() > 0) {
        var A = a(this.get_element()).hasClass("rmTemplate");
        if (this._hovered || A || $telerik.isTouchDevice) {
          this._doOpen(null);
        } else {
          if (this.get_menu()._renderMode === c.RenderMode.Lite) {
            this._getAnimationContainer().style.width = "auto";
          }
        }
      }
    },
    _onChildrenLoadingError: function () {
      this._close(null);
      this._removeLoadingItem();
      this._itemsLoaded = false;
      this._itemsLoading = false;
    },
  };
  c.RadMenuItem.registerClass("Telerik.Web.UI.RadMenuItem", c.BaseMenuItem);
})($telerik.$, Telerik.Web.UI, Telerik.Web.StringBuilder);

/* END Telerik.Web.UI.Menu.MenuItem.RadMenuItem.js */
/* START Telerik.Web.UI.Menu.Views.ClassicView.js */
(function (a, c, b, l) {
  var e = "rmItem",
    j = "rmSeparator",
    h = "rmLink",
    k = "rmText",
    g = "rmImageOnly",
    i = "rmRootLink",
    d = "rmDisabled",
    f = a.extend;
  if (!c.RadMenuItem.Views) {
    c.RadMenuItem.Views = {};
  }
  if (!c.RadMenu.StaticViews) {
    c.RadMenu.StaticViews = {};
  }
  c.RadMenu.StaticViews.Classic = {
    ExtendContextMenuWithView: function (m) {
      (function () {
        f(m, {
          _ensureDecorationElements: function () {
            this._ensureRoundedCorners();
            this._ensureShadows();
          },
          _ensureRoundedCorners: function () {
            if (this._roundedCornersRendered) {
              return;
            }
            if (this.get_enableRoundedCorners()) {
              this._roundedCornersRendered = true;
              c.RadMenu._renderCornerElements(this);
            }
          },
          _ensureShadows: function () {
            if (this._shadowsRendered) {
              return;
            }
            if (this.get_enableShadows()) {
              this._shadowsRendered = true;
              c.RadMenu._renderCornerElements(this, "shadow");
            }
          },
        });
      })();
    },
    ExtendScrollerWithView: function (m) {
      (function () {
        f(m, {
          _createArrowDomElement: function (o) {
            var n = document.createElement("a");
            n.href = "#";
            n.style.zIndex = o;
            n.appendChild(document.createTextNode("&nbsp;"));
            if ($telerik.isIE) {
              a(n).bind("dragstart.menuScroller", function () {
                return false;
              });
            }
            this._scrollElement.appendChild(n);
            return n;
          },
          _setElementCssClass: function (o, n) {
            var p = o.className;
            if (p != n) {
              o.className = n;
            }
          },
        });
      })();
    },
  };
  c.RadMenuItem.Views.Classic = function (m) {
    this._owner = m;
  };
  c.RadMenuItem.Views.Classic.prototype = {
    get_templateClassClass: function () {
      return k;
    },
    set_navigateUrl: function (n) {
      var m = this._owner.get_linkElement();
      if (m) {
        m.href = n;
      }
    },
    get_text: function () {
      return c.RadMenuItem.callBaseMethod(this._owner, "get_text");
    },
    set_text: function (m) {
      c.RadMenuItem.callBaseMethod(this._owner, "set_text", [m]);
    },
    _renderLink: function (n) {
      var m = "#",
        o = this._owner.get_navigateUrl(),
        q = this._owner.get_target(),
        p = new b(n);
      if (o && o != "#") {
        m = o;
      }
      p.append("<a href='", m, "' ");
      if (q) {
        p.append("target='", q, "' ");
      }
      p.append("class='", h, " ");
      if (
        this._owner.get_text() == "" &&
        !a(this._owner.get_textElement()).children().length
      ) {
        p.append(" " + g);
      }
      if (this._owner._isRootLink()) {
        p.append(" " + i);
      }
      if (!this._owner.get_enabled()) {
        p.append(d);
      }
      p.append("'>");
    },
    _renderLinkContent: function (m) {
      if (this._owner.get_isSeparator()) {
        this._renderTextElement(m);
      } else {
        this._owner._renderLinkContent(m);
      }
    },
    _renderTextElement: function (m) {
      this._owner._renderTextElement(m);
    },
    _renderLinkEndTag: function (m) {
      m[m.length] = "</a>";
    },
    _determineCssClass: function () {
      if (this._owner.get_isSeparator()) {
        return e + " " + j;
      }
      return e;
    },
    _applyCssClass: function (n, o) {
      var p = this._owner,
        m = p.get_templated() ? a(p.get_element()) : a(p.get_linkElement());
      m.removeClass(o);
      m.addClass(n);
    },
    _updateLinkClass: function () {
      var p = this._owner,
        o = p.get_templated() ? p.get_templateElement() : p.get_linkElement(),
        m = a(o),
        n = p._resolveCssClass(h, true);
      if (m.is("div")) {
        n.splice(0, 0, k);
      }
      m.removeClass();
      m.addClass(n.join(" "));
    },
    _updateTextElementClass: function () {
      var o = this._owner,
        n = o.get_textElement(),
        m = k;
      if (!n) {
        return;
      }
      if (
        o._getHasItems() ||
        o.get_expandMode() == c.MenuItemExpandMode.WebService
      ) {
        m += " " + o._getExpandClassName();
      }
      n.className = m;
    },
    _ensureRoundedCorners: function () {
      var n = this._owner,
        m;
      if (n._roundedCornersRendered) {
        return;
      }
      m = n.get_menu();
      if (m && m.get_enableRoundedCorners()) {
        n._roundedCornersRendered = true;
        c.RadMenu._renderCornerElements(n);
      }
    },
    _ensureShadows: function () {
      var n = this._owner,
        m;
      if (n._shadowsRendered) {
        return;
      }
      m = n.get_menu();
      if (m && m.get_enableShadows()) {
        n._shadowsRendered = true;
        c.RadMenu._renderCornerElements(n, "shadow");
      }
    },
    _ensureDecorationElements: function () {
      this._ensureRoundedCorners();
      this._ensureShadows();
    },
    _removeChildListCorners: function () {
      var n = this._owner,
        m = n.get_menu();
      if (m.get_enableRoundedCorners() || m.get_enableShadows()) {
        c.RadMenu._removeChildListCorners(n);
      }
    },
    _positionImageElement: function (m) {
      m.insertBefore(this._owner._imageElement, m.firstChild);
    },
    _positionToggleButtonElement: function (n, m) {
      n.appendChild(m);
    },
    _doOpen: function (m) {
      var p = this._owner,
        o = p.get_menu(),
        n;
      this._ensureDecorationElements();
      n = p.get_childListElement();
      n.style.display = "block";
      if (
        $telerik.isOpera &&
        (o.get_enableRoundedCorners() || o.get_enableShadows())
      ) {
        n.style.position = "absolute";
      }
      if (!$telerik.isIE7) {
        m.style.visibility = "hidden";
      }
      p._updateColumnWrapSize();
      p._slide.updateSize();
      p._slide.show();
      if (p._groupSettings.get_flow() == c.ItemFlow.Vertical) {
        c.RadMenu._adjustChildrenWidth(p);
      } else {
        c.RadMenu._adjustListWidth(p);
      }
      if (p._adjustSiblingsWidthOnShow) {
        p._adjustSiblingsWidth();
        p._adjustSiblingsWidthOnShow = false;
      }
      p._updateChildListWidth();
      p._updateColumnWrapSize();
      p._resetAnimatedElementPosition();
      p._slide.set_direction(p._getSlideDirection());
      p._slide.set_animatedElement(p._getAnimatedElement());
      p._slide.updateSize();
      p._positionChildContainer();
      p._updateScrollWrapSize();
      if (p._scroller && !p._autoScrollActive && !p._fitsWindow()) {
        p._updateScrollSize();
        p._positionChildContainer();
      }
      m.style.visibility = "visible";
      p._updateZIndex();
      if (p._scroller) {
        p._updateScrollPosition();
      }
      p._updateColumnWrapSize();
      p._slide.updateSize();
      p._slide.expand();
    },
    _applyTemplate: function () {
      var n = this._owner;
      if (!n._renderedClientTemplate) {
        return;
      }
      var m =
        "<div class='" +
        n._getTemplateClassName() +
        "'>" +
        n._renderedClientTemplate +
        "</div>";
      a("a.rmLink", n._element).replaceWith(m);
      a(n._element).addClass("rmTemplate");
    },
  };
})($telerik.$, Telerik.Web.UI, Telerik.Web.StringBuilder);

/* END Telerik.Web.UI.Menu.Views.ClassicView.js */
/* START Telerik.Web.UI.Grid.RadGridScripts.js */
Type.registerNamespace("Telerik.Web.UI");
Telerik.Web.UI.GridColumn = function (a) {
  Telerik.Web.UI.GridColumn.initializeBase(this, [a]);
  this._owner = {};
  this._data = {};
  this._selected;
  this._selectedCellsCount = 0;
  this._resizeTolerance = $telerik.isTouchDevice ? 10 : 5;
  this._onMouseUpDelegate = null;
  this._columnResizer = null;
  this._checkboxes = [];
  this._onContextMenuItemClickingDelegate = null;
  this._onContextMenuHiddenDelegate = null;
  this._supportedStringAggregatesValues = {
    "System.String": {
      Count: true,
      CountDistinct: true,
      None: true,
      Custom: true,
    },
    "System.DateTime": {
      None: true,
      Min: true,
      Max: true,
      Last: true,
      First: true,
      Count: true,
      CountDistinct: true,
      Custom: true,
    },
  };
  this._supportedColumnTypesForAggregation = [
    "GridDateTimeColumn",
    "GridBoundColumn",
    "GridTemplateColumn",
    "GridMaskedColumn",
    "GridNumericColumn",
    "GridCalculatedColumn",
  ];
  this._oldTitle = null;
  if (
    Sys.UI.DomElement.containsCssClass(a, "rgRotateHeader") &&
    a.children.length == 0
  ) {
    var b = document.createElement("span");
    b.innerHTML = a.innerHTML;
    a.innerHTML = "";
    a.appendChild(b);
  }
};
Telerik.Web.UI.GridColumn.prototype = {
  initialize: function () {
    Telerik.Web.UI.GridColumn.callBaseMethod(this, "initialize");
    this._onMouseDownDelegate = $telerik.addMobileHandler(
      this,
      this.get_element(),
      "mousedown",
      this._onMouseDownHandler
    );
    this.get_element().UniqueName = this.get_uniqueName();
    this._onLocalMouseMoveDelegate = $telerik.addMobileHandler(
      this,
      this.get_element(),
      "mousemove",
      this._onLocalMouseMoveHandler
    );
    if (!$telerik.isTouchDevice) {
      window.$addHandlers(this.get_element(), {
        click: Function.createDelegate(this, this._onClick),
      });
      window.$addHandlers(this.get_element(), {
        dblclick: Function.createDelegate(this, this._onDblClick),
      });
      window.$addHandlers(this.get_element(), {
        mouseover: Function.createDelegate(this, this._onMouseOver),
      });
      window.$addHandlers(this.get_element(), {
        mouseout: Function.createDelegate(this, this._onMouseOut),
      });
    }
    var a = this._owner._owner;
    var b = a.ClientSettings;
    if (
      $telerik.isMobileIE10 &&
      (b.AllowColumnsReorder || (b.Resizing && b.Resizing.AllowColumnResize))
    ) {
      this.get_element().style.msTouchAction = "none";
      this.get_element().style.touchAction = "none";
    }
    if ($telerik.isOpera) {
      window.$addHandlers(this.get_element(), {
        mousedown: Function.createDelegate(this, this._onContextMenu),
      });
    } else {
      window.$addHandlers(this.get_element(), {
        contextmenu: Function.createDelegate(this, this._onContextMenu),
      });
    }
    if (Telerik.Web.Browser.ie) {
      window.$addHandlers(this.get_element(), {
        keydown: Function.createDelegate(this, this._onIEKeyDown),
      });
    }
    this._selectedCellsCount = this._data.SelectedCellsCount;
    this.Display = this._data.Display;
    this._enableHeaderContextMenu = this._data.EnableHeaderContextMenu;
    this._oldTitle = this.get_element().title;
    if (
      this._data.ListOfFilterValues &&
      this._data.ListOfFilterValues.length > 0
    ) {
      a._checkListFilterKeys[a._checkListFilterKeys.length] =
        this.get_owner()._data.UniqueID + "," + this.get_uniqueName();
      a._checkListFilterValues[
        a._checkListFilterValues.length
      ] = this._data.ListOfFilterValues;
    }
    this._initializeBindingMethods();
  },
  _onIEKeyDown: function (b) {
    if (
      b.target.tagName == "A" &&
      b.target.parentElement.className.indexOf("rgHeader") >= 0 &&
      b.shiftKey &&
      b.keyCode == 121
    ) {
      b.preventDefault();
      var a = b.target.getBoundingClientRect();
      b.clientX = a.left + 0.5 * a.width;
      b.clientY = a.top + 0.5 * a.height;
      this._onContextMenu(b);
    }
  },
  dispose: function () {
    if (this._columnResizer) {
      this._columnResizer.dispose();
    }
    this._owner._owner.raise_columnDestroying(Sys.EventArgs.Empty);
    window.$clearHandlers(this.get_element());
    this._checkboxes = [];
    this._element.control = null;
    this._owner = null;
    Telerik.Web.UI.GridColumn.callBaseMethod(this, "dispose");
  },
  get_owner: function () {
    return this._owner;
  },
  get_selected: function () {
    var a = false;
    if (
      this._owner._owner.get_allowColumnSelection() &&
      this._selectedCellsCount > 0 &&
      this._selectedCellsCount == this.get_realOwner().get_dataItems().length
    ) {
      a = true;
    }
    return a;
  },
  set_selected: function (a) {
    if (this._owner._owner.get_allowColumnSelection()) {
      if (a) {
        if (!this._owner._owner.get_allowMultiColumnSelection()) {
          this.get_realOwner().clearSelectedColumns();
        }
        this._owner._owner._cellSelection._selectColumnByHeaderElement(
          this.get_realOwner(),
          this.get_element()
        );
        this._selectedCellsCount = this._owner.get_dataItems().length;
      } else {
        this._owner._owner._cellSelection._deselectColumnByHeaderElement(
          this.get_realOwner(),
          this.get_element()
        );
        this._selectedCellsCount = 0;
      }
    }
  },
  get_realOwner: function () {
    if (
      this._owner.get_id() ==
      this._owner._owner.get_masterTableView().get_id() + "_Header"
    ) {
      return this._owner._owner.get_masterTableView();
    } else {
      return $find(this._owner.get_id());
    }
  },
  get_selectedCellsCount: function () {
    return this._selectedCellsCount;
  },
  set_selectedCellsCount: function (a) {
    this._selectedCellsCount = a;
  },
  _initializeBindingMethods: function () {
    var a =
        Telerik.Web.UI.Grid[this._data.ColumnType] ||
        Telerik.Web.UI.Grid.GridBoundColumn,
      c = function () {},
      b;
    if (a) {
      for (b in a) {
        this[b] = a[b];
      }
      this.initializeCell = this.initializeCell || c;
      this.populateCell = this.populateCell || c;
      this.populateEditCell = this.populateEditCell || c;
    }
  },
  _onMouseDownHandler: function (b) {
    if (
      (b.button != Sys.UI.MouseButton.leftButton ||
        Telerik.Web.UI.Grid._moveHeaderDiv) &&
      !$telerik.isTouchDevice
    ) {
      return false;
    }
    var c = this.get_owner().get_owner();
    var d = c._animation && c._animation.ColumnAnimation;
    var g =
      $telerik.isTouchDevice &&
      this._isTouchPointOverResizeHandle(b) &&
      this._owner._owner.ClientSettings &&
      this._owner._owner.ClientSettings.Resizing.AllowColumnResize &&
      this.get_resizable();
    if (!d && !this._onMouseUpDelegate) {
      this._onMouseUpDelegate = $telerik.addMobileHandler(
        this,
        document,
        "mouseup",
        this._onMouseUpHandler,
        null,
        true
      );
    }
    if ($telerik.isTouchDevice) {
      this._canDragDrop = true;
      if (g) {
        this._canResize = true;
      }
    }
    if (
      c.ClientSettings.AllowDragToGroup ||
      c.ClientSettings.AllowColumnsReorder
    ) {
      var a = c._getHeaderContextMenu();
      if (a && a._shown) {
        a.hide();
      }
      var f =
        c.ClientSettings.AllowColumnsReorder &&
        d &&
        c.ClientSettings.Animation.AllowColumnReorderAnimation &&
        c.ClientSettings.ColumnsReorderMethod === 1;
      if (!f && !this._onMouseMoveDelegate) {
        this._onMouseMoveDelegate = $telerik.addMobileHandler(
          this,
          document,
          "mousemove",
          this._onMouseMoveHandler,
          null,
          true
        );
      }
      if (
        this._canDragDrop &&
        !g &&
        ((this._data.Reorderable && c.ClientSettings.AllowColumnsReorder) ||
          (this._data.Groupable && c.ClientSettings.AllowDragToGroup))
      ) {
        if (d) {
          c._animation.ColumnAnimation._mouseDown(b, this);
        } else {
          Telerik.Web.UI.Grid.CreateDragDrop(b, this, true);
        }
      }
    }
    if (this._canResize && (b.button == 0 || $telerik.isTouchDevice)) {
      if (this._isMouseOverResizeHandle(b)) {
        this._columnResizer = new Telerik.Web.UI.GridColumnResizer(
          this,
          c.ClientSettings.Resizing.EnableRealTimeResize,
          c.ClientSettings.Resizing.ResizeGridOnColumnResize
        );
        this._columnResizer._position(b);
        this._owner._owner._isResize = true;
      }
      Telerik.Web.UI.Grid.ClearDocumentEvents();
    }
  },
  _onMouseUpHandler: function (f) {
    if (this._onMouseUpDelegate) {
      $telerik.removeMobileHandler(
        document,
        "mouseup",
        this._onMouseUpDelegate,
        null,
        true
      );
      this._onMouseUpDelegate = null;
    }
    if (this._onMouseMoveDelegate) {
      $telerik.removeMobileHandler(
        document,
        "mousemove",
        this._onMouseMoveDelegate,
        null,
        true
      );
      this._onMouseMoveDelegate = null;
    }
    if (!Telerik.Web.UI.Grid) {
      return;
    }
    var d;
    if ($telerik.isTouchDevice) {
      d = $telerik.getTouchTarget(f);
    } else {
      d = Telerik.Web.UI.Grid.GetCurrentElement(f);
    }
    var l = false;
    var j = this._owner;
    if (d != null && this._canDragDrop && !j._owner._isResize) {
      var k = j._owner.ClientSettings.PostBackFunction;
      k = k.replace("{0}", j._owner.UniqueID);
      if (j._owner.ClientSettings.AllowDragToGroup && j._owner._groupPanel) {
        var i = false;
        if (
          $telerik.isMouseOverElement(j._owner._groupPanel.get_element(), f)
        ) {
          i = true;
        }
        if (
          Telerik.Web.UI.Grid.IsChildOf(
            d,
            j._owner._groupPanel.get_element()
          ) ||
          ($telerik.isTouchDevice && d == j._owner._groupPanel.get_element()) ||
          i
        ) {
          if (this._data.Groupable) {
            l = true;
            var h = !!j._owner._clientDataSourceID;
            j.groupColumn(
              h ? this.get_dataField() : this.get_element().UniqueName
            );
          }
        }
      }
      if (
        j._owner.ClientSettings.AllowColumnsReorder &&
        Telerik.Web.UI.Grid.IsChildOf(d, this.get_element().parentNode) &&
        d != this.get_element()
      ) {
        var g = d.parentNode;
        while (g != null && typeof g.UniqueName == "undefined") {
          g = g.parentNode;
        }
        if (
          g != null &&
          typeof g.UniqueName != "undefined" &&
          g.UniqueName != this.get_uniqueName()
        ) {
          d = g;
        }
        if (
          typeof d.UniqueName != "undefined" &&
          this._canDropOnThisColumn(d.UniqueName) &&
          this.get_reorderable()
        ) {
          if (!j._owner.ClientSettings.ReorderColumnsOnClient) {
            var b = j.getColumnByUniqueName(this.get_element().UniqueName);
            var c = j.getColumnByUniqueName(d.UniqueName);
            var a = new Sys.CancelEventArgs();
            a.get_gridSourceColumn = function () {
              return b;
            };
            a.get_gridTargetColumn = function () {
              return c;
            };
            j._owner.raise_columnSwapping(a);
            if (a.get_cancel()) {
              return false;
            }
            l = true;
            k = k.replace(
              "{1}",
              "ReorderColumns," +
                j._data.UniqueID +
                "," +
                this.get_element().UniqueName +
                "," +
                d.UniqueName
            );
            eval(k);
          } else {
            if (j._owner.ClientSettings.ColumnsReorderMethod == 1) {
              j.reorderColumns(this.get_element().UniqueName, d.UniqueName);
            } else {
              j.swapColumns(this.get_element().UniqueName, d.UniqueName);
            }
            l = true;
          }
        }
      }
    }
    if (
      !j._owner._animation ||
      !j._owner.ClientSettings.Animation ||
      !j._owner.ClientSettings.Animation.AllowColumnRevertAnimation ||
      l
    ) {
      Telerik.Web.UI.Grid.DestroyDragDrop();
    }
    j._owner._isResize = null;
    Telerik.Web.UI.Grid.RestoreDocumentEvents();
  },
  _onMouseMoveHandler: function (a) {
    if (this._canDragDrop) {
      if (!this.get_element()) {
        return;
      }
      if ($telerik.isTouchDevice) {
        a.preventDefault();
      }
      Telerik.Web.UI.Grid.MoveDragDrop(a, this, true);
    }
  },
  _onLocalMouseMoveHandler: function (f) {
    if (!Telerik.Web.UI.Grid || $telerik.isTouchDevice) {
      return;
    }
    this._canDragDrop = true;
    this._canResize = false;
    if (this._owner._owner._isResize) {
      return;
    }
    var d = Telerik.Web.UI.Grid.GetCurrentElement(f);
    var g = Telerik.Web.UI.Grid.GetFirstParentByTagName(d, "th");
    var h = Telerik.Web.UI.Grid.FindPosX(d);
    var b =
      !!this._owner._owner.ClientSettings.AllowDragToGroup &&
      this._data.Groupable;
    var c =
      !!this._owner._owner.ClientSettings.AllowColumnsReorder &&
      this.get_reorderable();
    if (b || c) {
      this.get_element().title =
        this._owner._owner.ClientSettings.ClientMessages.DragToGroupOrReorder ||
        this.get_element().title;
      this.get_element().style.cursor = "move";
    }
    if (
      this._owner._owner.ClientSettings.Resizing.AllowColumnResize &&
      this.get_resizable() &&
      Telerik.Web.UI.Grid.GetEventPosX(f) >= h + g.offsetWidth - 5 &&
      !Telerik.Web.UI.Grid._moveHeaderDiv
    ) {
      this._canDragDrop = false;
    }
    if (
      this._owner._owner.ClientSettings &&
      this._owner._owner.ClientSettings.Resizing.AllowColumnResize &&
      this.get_resizable() &&
      this.get_element().tagName.toLowerCase() == "th"
    ) {
      d = Telerik.Web.UI.Grid.GetCurrentElement(f);
      if (
        this._owner._owner.GridDataDiv &&
        !this._owner._owner.GridHeaderDiv &&
        !window.netscape
      ) {
        var a = 0;
        if (
          document.body.currentStyle &&
          document.body.currentStyle.margin &&
          document.body.currentStyle.marginLeft.indexOf("px") != -1 &&
          !window.opera
        ) {
          a = parseInt(document.body.currentStyle.marginLeft, 10);
        }
        this._resizeTolerance = 10;
      }
      if (
        this._isMouseOverResizeHandle(f) &&
        !Telerik.Web.UI.Grid._moveHeaderDiv
      ) {
        this.get_element().style.cursor = "e-resize";
        if (
          this.get_element().title !==
          this._owner._owner.ClientSettings.ClientMessages.DragToResize
        ) {
          this._oldTitle = this.get_element().title;
        }
        this.get_element().title = this._owner._owner.ClientSettings.ClientMessages.DragToResize;
        this._canResize = true;
        d.style.cursor = "e-resize";
      } else {
        if (this.get_element().style.cursor != "move") {
          this.get_element().style.cursor = "";
          d.style.cursor = "";
          this.get_element().title = this._oldTitle;
        }
        if (d.style.cursor == "e-resize") {
          d.style.cursor = "";
        }
        this._canResize = false;
      }
    }
  },
  _canDropOnThisColumn: function (c) {
    if (typeof this._owner._columns == "undefined") {
      this._owner._columns = {};
      for (var a = 0; a < this._owner._data._columnsData.length; a++) {
        this._owner._columns[
          this._owner._data._columnsData[a].UniqueName
        ] = this._owner._data._columnsData[a];
      }
    }
    var b = true;
    if (this._owner._hasMultiHeaders) {
      b = this.get_columnGroupName() == this._owner._columns[c].ColumnGroupName;
    }
    return this._owner._columns[c].Reorderable && b;
  },
  showHeaderMenu: function (a, b, c) {
    if (this._owner._data.enableHeaderContextMenu) {
      this._initHeaderContextMenu(a, true, b, c);
    }
  },
  _shouldShowAggregatesMenuForColumn: function () {
    return (
      this.get_owner()._data.enableHeaderContextAggregatesMenu &&
      Array.contains(
        this._supportedColumnTypesForAggregation,
        this._data.ColumnType
      )
    );
  },
  _initHeaderContextAggregatesMenu: function (d) {
    if (d.findItemByValue("AggregatesContainer")) {
      var a = d.findItemByValue("AggregatesContainer");
      if (this._shouldShowAggregatesMenuForColumn()) {
        a.set_visible(true);
        var c = a.get_items();
        for (var e = 0, f = c.get_count(); e < f; e++) {
          var b = c.getItem(e);
          b._column = this;
          if (
            this._supportedStringAggregatesValues[this.get_dataType()] &&
            !this._supportedStringAggregatesValues[this.get_dataType()][
              b.get_value()
            ]
          ) {
            b.set_visible(false);
          } else {
            b.set_visible(true);
          }
        }
      } else {
        a.set_visible(false);
      }
    }
  },
  _initHeaderContextMenu: function (v, B, K, L) {
    if (this._owner._owner._getHeaderContextMenu()) {
      var o = this._owner._owner._getHeaderContextMenu();
      var r = this;
      var x = $find(this._owner._owner._filterCheckListClientID || "");
      if (x && this._owner._owner._filterCheckListSearch) {
        this._owner._owner._checkListFilterActiveColumn = this;
        x.get_items().clear();
        var d = "";
        if (
          this._owner._data.CheckListWebServicePath &&
          this._data.FilterCheckListWebServiceMethod
        ) {
          x.set_visible(true);
          x.get_webServiceSettings().set_path(
            this._owner._data.CheckListWebServicePath
          );
          x.get_webServiceSettings().set_method(
            this._data.FilterCheckListWebServiceMethod
          );
          x.requestItems();
        } else {
          if (this._data.FilterCheckListEnableLoadOnDemand) {
            x.set_visible(true);
            var t = { startIndex: 0, count: 0 };
            var l = this.get_uniqueName();
            var n = {
              columnUniqueName: l,
              tableViewUniqueId: this._owner._data.UniqueID,
            };
            x._doLoadOnDemandWithCallBack(n, t);
          } else {
            x.set_visible(false);
            d = "None";
          }
        }
        var y = $find(this._owner._owner._filterCheckListSearch.id);
        y.set_visible(d == "");
        var I = y.get_element().parentNode.parentNode;
        I.className = I.className.replace(" rgEmptyList", "");
        if (d != "") {
          I.className = I.className + " rgEmptyList";
        }
        y.set_value("");
      }
      if (o._shown) {
        o.hide();
      }
      var u = r._data.DataField;
      if (r._data.DataTextField) {
        u = r._data.DataTextField;
      } else {
        if (r._data.DataAlternateTextField) {
          u = r._data.DataAlternateTextField;
        }
      }
      this._onContextMenuItemClickingDelegate = Function.createDelegate(
        o,
        this._onContextMenuItemClicking
      );
      o.add_itemClicking(this._onContextMenuItemClickingDelegate);
      this._onContextMenuHiddenDelegate = Function.createDelegate(
        this,
        this._onContextMenuHidden
      );
      o.add_hidden(this._onContextMenuHiddenDelegate);
      this._initHeaderContextAggregatesMenu(o);
      if (o.findItemByValue("SortAsc")) {
        o.findItemByValue("SortAsc")._column = r;
      }
      if (o.findItemByValue("SortDesc")) {
        o.findItemByValue("SortDesc")._column = r;
      }
      if (o.findItemByValue("SortNone")) {
        o.findItemByValue("SortNone")._column = r;
      }
      var C;
      if (o.findItemByValue("GroupBy")) {
        C = o.findItemByValue("GroupBy");
        if (r._data.Groupable) {
          o.findItemByValue("GroupBy")._column = r;
          C.set_visible(true);
        } else {
          C.set_visible(false);
        }
      }
      if (o.findItemByValue("UnGroupBy")) {
        C = o.findItemByValue("UnGroupBy");
        if (r._data.Groupable) {
          o.findItemByValue("UnGroupBy")._column = r;
          C.set_visible(true);
        } else {
          C.set_visible(false);
        }
      }
      this._updateFreezeOption();
      if (o.findItemByValue("topGroupSeperator")) {
        o.findItemByValue("topGroupSeperator").set_visible(r._data.Groupable);
      }
      if (o.findItemByValue("bottomGroupSeperator")) {
        o.findItemByValue("bottomGroupSeperator").set_visible(
          r._data.Groupable
        );
      }
      if (
        this._owner._data.enableHeaderContextFilterMenu &&
        this._owner._data.AllowFilteringByColumn &&
        r._data.AllowFiltering
      ) {
        if (o.findItemByValue("FilterMenuParent")) {
          o.findItemByValue("FilterMenuParent").set_enabled(true);
          o.findItemByValue("FilterMenuParent").set_visible(true);
        }
        if (o.findItemByValue("FilterList")) {
          o.findItemByValue("FilterList").set_visible(true);
        }
        if (o.findItemByValue("filterMenuSeparator")) {
          o.findItemByValue("filterMenuSeparator").set_visible(true);
        }
        if (
          o.FilterControlsIDsHelper == null ||
          typeof o.FilterControlsIDsHelper == "undefined"
        ) {
          o.FilterControlsIDsHelper = {
            IdPrefix: "HCFM",
            IdSuffix: { FirstCond: "FirstCond", SecondCond: "SecondCond" },
            FilterControl: {
              CheckBox: "CB",
              RadComboBox: "RCMB",
              RadTextBox: "RTB",
              RadDateInput: "RDI",
              RadDatePicker: "RDP",
              RadDateTimePicker: "RDTP",
              RadTimePicker: "RTP",
              RadNumericBox: "RNTB",
              RadMaskedBox: "RMTB",
              FilterButton: "FilterButton",
              ClearFilterButton: "ClearFilterButton",
            },
            FirstFilterValueControl: null,
            SecondFilterValueControl: null,
            FilterControlsType: null,
            getFilterControlID: function (i, e) {
              return this.IdPrefix + i + e;
            },
          };
        }
        var m = null;
        if (
          o.findItemByValue("FilterMenuParent") &&
          o.findItemByValue("FilterMenuContainer") &&
          r._data.AllowFiltering
        ) {
          m = o.findItemByValue("FilterMenuContainer").get_element();
        } else {
          if (
            o.findItemByValue("FilterMenuParent") &&
            $telerik.findElement(
              o.findItemByValue("FilterMenuParent").get_element(),
              "HCFMFilterButton"
            )
          ) {
            m = o.findItemByValue("FilterMenuParent").get_element();
          }
        }
        if (m) {
          o.trackChanges();
          this._onContextMenuItemClosingDelegate = Function.createDelegate(
            o,
            this._onContextMenuItemClosing
          );
          o.add_itemClosing(this._onContextMenuItemClosingDelegate);
          o.commitChanges();
          this._updateDisplayHCMenuFilterControls(m, o.FilterControlsIDsHelper);
          this._updateFilterFunctionsForHCMenu(m, o.FilterControlsIDsHelper);
          this._updateFilterValuesForHCMenu(o.FilterControlsIDsHelper);
          var w = $telerik.findElement(m, "HCFMFilterButton");
          this._filterButtonClickDelegate = Function.createDelegate(
            this,
            this._filterButtonClickHandler
          );
          window.$addHandler(w, "click", this._filterButtonClickDelegate);
          var f = $telerik.findElement(m, "HCFMClearFilterButton");
          f.onclick = "";
          this._clearFilterButtonClickDelegate = Function.createDelegate(
            this,
            this._clearFilterButtonClickHandler
          );
          window.$addHandler(f, "click", this._clearFilterButtonClickDelegate);
        }
      } else {
        if (
          o.findItemByValue("FilterMenuParent") &&
          this._owner._data.AllowFilteringByColumn &&
          !this._owner._data.enableHeaderContextFilterMenu
        ) {
          o.findItemByValue("FilterMenuParent").set_enabled(false);
        } else {
          if (o.findItemByValue("FilterMenuParent")) {
            o.findItemByValue("FilterMenuParent").set_visible(false);
            if (o.findItemByValue("FilterList")) {
              o.findItemByValue("FilterList").set_visible(false);
            }
          }
        }
        if (
          o.findItemByValue("filterMenuSeparator") &&
          !this._owner._data.AllowFilteringByColumn
        ) {
          o.findItemByValue("filterMenuSeparator").set_visible(false);
        }
      }
      var b = o.findItemByValue("BestFit");
      if (b) {
        b.set_visible(this.get_resizable());
        b._column = this.get_resizable() ? this : null;
      }
      var c = o.findItemByValue("bestFitSeparator");
      if (c) {
        c.set_visible(b.get_visible());
      }
      var D = null;
      var k = o.findItemByValue("ColumnsContainer");
      if (k) {
        D = o.findItemByValue("ColumnsContainer").get_items();
      }
      if (D) {
        for (var z = 0, G = D.get_count(); z < G; z++) {
          C = D.getItem(z);
          C.set_visible(false);
          for (var E = 0, H = r.get_owner().get_columns().length; E < H; E++) {
            var h = r.get_owner().get_columns()[E];
            if (
              C.get_value() ==
              String.format(
                "{0}|{1}",
                r.get_owner()._data.ClientID,
                h.get_uniqueName()
              )
            ) {
              C.set_visible(true);
              var A = C.get_element().getElementsByTagName("input");
              if (A && A.length && A[0].type == "checkbox") {
                window.$addHandler(A[0], "click", this._checkBoxClickHandler);
                if (h.get_visible()) {
                  A[0].checked = true;
                } else {
                  A[0].checked = false;
                }
                A[0]._column = h;
                A[0]._index = E;
                Array.add(this._checkboxes, A[0]);
                break;
              }
            }
          }
        }
        this._handleColumnsCheckboxesState();
      }
      var a = new Telerik.Web.UI.GridHeaderMenuCancelEventArgs(this, v, o);
      this._owner._owner.raise_headerMenuShowing(a);
      if (a.get_cancel()) {
        return;
      }
      var J = $telerik.getLocation(this.get_element());
      if (B) {
        if (J) {
          var F = J.x;
          var N = J.y;
          if (K) {
            F = F + parseInt(K, 10);
          }
          if (L) {
            N = N + parseInt(L, 10);
          }
          o.showAt(F, N);
          $telerik.cancelRawEvent(v);
        }
      } else {
        var O = $telerik.getTouchEventLocation(v, "client");
        if (O.x == 0 && O.y == 0 && J) {
          var g = this.get_element().getBoundingClientRect();
          o.showAt(J.x + (g.right - g.left) / 2, J.y + (g.bottom - g.top) / 2);
        } else {
          o.show(v);
        }
        var q = o.get_items();
        for (var M = 0; M < q.get_count(); M++) {
          var s = q.getItem(M);
          if (s._linkElement) {
            s._linkElement.focus();
            break;
          } else {
            if (s._templateElement) {
              s._templateElement.focus();
              break;
            }
          }
        }
      }
      if (this._owner._owner._enableRippleEffect) {
        this._initializeContextMenuFilterRippleEffect(o);
      }
    }
  },
  _initializeContextMenuFilterRippleEffect: function (b) {
    var d = b.get_contextMenuElement();
    var e = Telerik.Web.UI.MaterialRippleManager.getInstance();
    var c = $telerik.findElement(d, "HCFMFilterButton");
    var a = $telerik.findElement(d, "HCFMClearFilterButton");
    if (e) {
      if (c) {
        e.initializeRipple(c);
      }
      if (a) {
        e.initializeRipple(a);
      }
    }
  },
  _updateFreezeOption: function () {
    var g = this._owner;
    var d = g._owner;
    var b = d._getHeaderContextMenu();
    var e = b.findItemByValue("Freeze");
    var f = b.findItemByValue("FreezeSeparator");
    var c = d.ClientSettings.Scrolling.FrozenColumnsCount;
    var a = Array.indexOf(g.get_columns(), this);
    if (e) {
      e.set_visible(
        this.get_realOwner().get_id() == d.get_masterTableView().get_id()
      );
      f.set_visible(
        this.get_realOwner().get_id() == d.get_masterTableView().get_id()
      );
      if (a >= c) {
        e.set_text(d._freezeText);
        e.set_cssClass("rgFreeze");
        if (d._renderMode == Telerik.Web.UI.RenderMode.Lite) {
          $telerik.$(e.get_linkElement()).children(".rmIcon")[0].className =
            "rmIcon rgFreezeIcon";
        }
      } else {
        e.set_text(d._unfreezeText);
        e.set_cssClass("rgUnFreeze");
        if (d._renderMode == Telerik.Web.UI.RenderMode.Lite) {
          $telerik.$(e.get_linkElement()).children(".rmIcon")[0].className =
            "rmIcon rgUnFreezeIcon";
        }
      }
      e._column = this;
    }
  },
  _toggleFreeze: function () {
    var g = this._owner;
    var d = g._owner;
    var c = this._owner._owner._getHeaderContextMenu();
    var e = c.findItemByValue("Freeze");
    var f = this._owner._owner.ClientSettings.Scrolling;
    var a = Array.indexOf(g.get_columns(), this);
    var b = d.ClientSettings.AllowColumnsReorder;
    d.ClientSettings.AllowColumnsReorder = true;
    if (e) {
      if (a >= f.FrozenColumnsCount) {
        g._reorderColumns(
          this.get_uniqueName(),
          g.get_columns()[f.FrozenColumnsCount].get_uniqueName()
        );
        f.FrozenColumnsCount++;
      } else {
        g._reorderColumns(
          this.get_uniqueName(),
          g.get_columns()[f.FrozenColumnsCount - 1].get_uniqueName()
        );
        f.FrozenColumnsCount--;
      }
      if (d._scrolling._frozenScroll) {
        d._scrolling._frozenScroll.scrollLeft = 0;
      } else {
        d._scrolling._scrollToFirstColumn();
      }
    }
    d.ClientSettings.AllowColumnsReorder = b;
  },
  _updateFilterValuesForHCMenu: function (g) {
    var c = this._data.CurrentFilterValue;
    var a = this._data.AndCurrentFilterValue;
    if (g.FirstFilterValueControl) {
      if (g.FilterControlsType == g.FilterControl.CheckBox) {
        if (c.toString().toLowerCase() == "true") {
          g.FirstFilterValueControl.checked = true;
        } else {
          g.FirstFilterValueControl.checked = false;
        }
      } else {
        if (
          g.FilterControlsType == g.FilterControl.RadTextBox ||
          g.FilterControlsType == g.FilterControl.RadMaskedBox ||
          g.FilterControlsType == g.FilterControl.RadNumericBox
        ) {
          g.FirstFilterValueControl.set_value(c);
        } else {
          if (
            g.FilterControlsType == g.FilterControl.RadDateInput ||
            g.FilterControlsType == g.FilterControl.RadDatePicker ||
            g.FilterControlsType == g.FilterControl.RadDateTimePicker ||
            g.FilterControlsType == g.FilterControl.RadTimePicker
          ) {
            var d = Date.parseLocale(c);
            if (!d) {
              try {
                d = new Date(c);
              } catch (f) {}
            }
            if (!isNaN(d) && d != null && typeof d != "undefined") {
              g.FirstFilterValueControl.set_selectedDate(d);
            } else {
              g.FirstFilterValueControl.clear();
            }
          }
        }
      }
    }
    if (g.SecondFilterValueControl) {
      if (g.FilterControlsType == g.FilterControl.CheckBox) {
        if (a.toString().toLowerCase() == "true") {
          g.SecondFilterValueControl.checked = true;
        } else {
          g.SecondFilterValueControl.checked = false;
        }
      } else {
        if (
          g.FilterControlsType == g.FilterControl.RadTextBox ||
          g.FilterControlsType == g.FilterControl.RadMaskedBox ||
          g.FilterControlsType == g.FilterControl.RadNumericBox
        ) {
          g.SecondFilterValueControl.set_value(a);
        } else {
          if (
            g.FilterControlsType == g.FilterControl.RadDateInput ||
            g.FilterControlsType == g.FilterControl.RadDatePicker ||
            g.FilterControlsType == g.FilterControl.RadDateTimePicker ||
            g.FilterControlsType == g.FilterControl.RadTimePicker
          ) {
            var b = Date.parseLocale(a);
            if (!b) {
              try {
                b = new Date(a);
              } catch (f) {}
            }
            if (!isNaN(b) && b != null && typeof b != "undefined") {
              g.SecondFilterValueControl.set_selectedDate(b);
            } else {
              g.SecondFilterValueControl.clear();
            }
          }
        }
      }
    }
  },
  _updateFilterFunctionsForHCMenu: function (e, f) {
    var d = this._data.CurrentFilterFunctionName;
    var a = this._data.AndCurrentFilterFunctionName;
    var c = f.getFilterControlID(
      f.FilterControl.RadComboBox,
      f.IdSuffix.FirstCond
    );
    var b = $telerik.findControl(e, c);
    this._setUpHeaderContextMenuFilterControls(
      b,
      d,
      this._data.DataTypeName,
      this._data.FilterListOptions
    );
    c = f.getFilterControlID(
      f.FilterControl.RadComboBox,
      f.IdSuffix.SecondCond
    );
    b = $telerik.findControl(e, c);
    this._setUpHeaderContextMenuFilterControls(
      b,
      a,
      this._data.DataTypeName,
      this._data.FilterListOptions
    );
  },
  _updateDisplayHCMenuFilterControls: function (a, b) {
    this._updateDisplayHCFilterBoundColumnControls(a, b, b.IdSuffix.FirstCond);
    this._updateDisplayHCFilterBoundColumnControls(a, b, b.IdSuffix.SecondCond);
    this._updateDisplayHCFilterCheckBoxColumnControls(
      a,
      b,
      b.IdSuffix.FirstCond
    );
    this._updateDisplayHCFilterCheckBoxColumnControls(
      a,
      b,
      b.IdSuffix.SecondCond
    );
    this._updateDisplayHCFilterPickerControls(
      a,
      b,
      b.FilterControl.RadDatePicker,
      "DatePicker",
      b.IdSuffix.FirstCond
    );
    this._updateDisplayHCFilterPickerControls(
      a,
      b,
      b.FilterControl.RadDatePicker,
      "DatePicker",
      b.IdSuffix.SecondCond
    );
    this._updateDisplayHCFilterPickerControls(
      a,
      b,
      b.FilterControl.RadDateTimePicker,
      "DateTimePicker",
      b.IdSuffix.FirstCond
    );
    this._updateDisplayHCFilterPickerControls(
      a,
      b,
      b.FilterControl.RadDateTimePicker,
      "DateTimePicker",
      b.IdSuffix.SecondCond
    );
    this._updateDisplayHCFilterPickerControls(
      a,
      b,
      b.FilterControl.RadTimePicker,
      "TimePicker",
      b.IdSuffix.FirstCond
    );
    this._updateDisplayHCFilterPickerControls(
      a,
      b,
      b.FilterControl.RadTimePicker,
      "TimePicker",
      b.IdSuffix.SecondCond
    );
    this._updateDisplayHCFilterPickerControls(
      a,
      b,
      b.FilterControl.RadDateInput,
      "None",
      b.IdSuffix.FirstCond
    );
    this._updateDisplayHCFilterPickerControls(
      a,
      b,
      b.FilterControl.RadDateInput,
      "None",
      b.IdSuffix.SecondCond
    );
    this._updateDisplayHCFilterMaskedBoxControls(a, b, b.IdSuffix.FirstCond);
    this._updateDisplayHCFilterMaskedBoxControls(a, b, b.IdSuffix.SecondCond);
    this._updateDisplayHCFilterNumericBoxControls(a, b, b.IdSuffix.FirstCond);
    this._updateDisplayHCFilterNumericBoxControls(a, b, b.IdSuffix.SecondCond);
  },
  _updateDisplayHCFilterBoundColumnControls: function (b, c, d) {
    var a = c.getFilterControlID(c.FilterControl.RadTextBox, d);
    var e = $telerik.findControl(b, a);
    if (e) {
      if (
        this._data.ColumnType != "GridDateTimeColumn" &&
        this._data.ColumnType != "GridMaskedColumn" &&
        this._data.ColumnType != "GridNumericColumn" &&
        this._data.ColumnType != "GridCheckBoxColumn" &&
        this._data.DataTypeName != "System.Boolean" &&
        this._data.ColumnType != "GridRatingColumn"
      ) {
        if (d == c.IdSuffix.FirstCond) {
          c.FirstFilterValueControl = e;
        } else {
          c.SecondFilterValueControl = e;
        }
        c.FilterControlsType = c.FilterControl.RadTextBox;
        e.set_visible(true);
        if (this._data.FilterControlWidth) {
          e._originalTextBoxCssText = this._adjustHCFilterMenuInputControlsWidth(
            e._originalTextBoxCssText,
            this._data.FilterControlWidth.Value
          );
        }
      } else {
        e.set_visible(false);
      }
    }
  },
  _updateDisplayHCFilterPickerControls: function (d, e, c, g, f) {
    var a = e.getFilterControlID(c, f);
    var b = $telerik.findControl(d, a);
    if (b) {
      if (this._data.PickerType != g) {
        b.set_visible(false);
      } else {
        if (f == e.IdSuffix.FirstCond) {
          e.FirstFilterValueControl = b;
        } else {
          e.SecondFilterValueControl = b;
        }
        e.FilterControlsType = c;
        b.set_visible(true);
        if (this._data.FilterControlWidth) {
          if (c == e.FilterControl.RadDateInput) {
            b._originalTextBoxCssText = this._adjustHCFilterMenuInputControlsWidth(
              b._originalTextBoxCssText,
              this._data.FilterControlWidth.Value
            );
          } else {
            this._adjustHCFilterMenuPickerControlsWidth(
              b,
              this._data.FilterControlWidth.Value
            );
          }
        }
        if (this._data.MinDate) {
          b.set_minDate(new Date(this._data.MinDate));
        }
        if (this._data.MaxDate) {
          b.set_maxDate(new Date(this._data.MaxDate));
        }
      }
    }
  },
  _updateDisplayHCFilterCheckBoxColumnControls: function (c, d, e) {
    var b = d.getFilterControlID(d.FilterControl.CheckBox, e);
    var a = $telerik.findElement(c, b);
    if (a) {
      if (
        this._data.ColumnType == "GridCheckBoxColumn" ||
        this._data.DataTypeName == "System.Boolean"
      ) {
        a.style.display = "block";
        if (e == d.IdSuffix.FirstCond) {
          d.FirstFilterValueControl = a;
          d.FilterControlsType = d.FilterControl.CheckBox;
        } else {
          d.SecondFilterValueControl = a;
          d.FilterControlsType = d.FilterControl.CheckBox;
        }
      } else {
        a.style.display = "none";
      }
    }
  },
  _updateDisplayHCFilterMaskedBoxControls: function (c, e, f) {
    var b = e.getFilterControlID(e.FilterControl.RadMaskedBox, f);
    var a = $telerik.findControl(c, b);
    if (a) {
      if (this._data.ColumnType != "GridMaskedColumn") {
        a.set_visible(false);
      } else {
        if (f == e.IdSuffix.FirstCond) {
          e.FirstFilterValueControl = a;
        } else {
          e.SecondFilterValueControl = a;
        }
        e.FilterControlsType = e.FilterControl.RadMaskedBox;
        a.set_visible(true);
        if (this._data.Mask != null && typeof this._data.Mask != "undefined") {
          var g = [];
          var h = this._data.Mask.split(",");
          for (var d = 0; d < h.length; d++) {
            g.push(eval(h[d]));
          }
          a._length = 0;
          a._setMask(g);
          if (this._data.FilterControlWidth) {
            a._originalTextBoxCssText = this._adjustHCFilterMenuInputControlsWidth(
              a._originalTextBoxCssText,
              this._data.FilterControlWidth.Value
            );
          }
        }
      }
    }
  },
  _updateDisplayHCFilterNumericBoxControls: function (c, d, e) {
    var b = d.getFilterControlID(d.FilterControl.RadNumericBox, e);
    var a = $telerik.findControl(c, b);
    if (a) {
      if (
        this._data.ColumnType != "GridNumericColumn" &&
        this._data.ColumnType != "GridRatingColumn"
      ) {
        a.set_visible(false);
      } else {
        d.FilterControlsType = d.FilterControl.RadNumericBox;
        if (e == d.IdSuffix.FirstCond) {
          d.FirstFilterValueControl = a;
        } else {
          d.SecondFilterValueControl = a;
        }
        var f = a.get_numberFormat();
        if (
          this._data.NegativePattern != null &&
          typeof this._data.NegativePattern != "undefined"
        ) {
          f.NegativePattern = this._data.NegativePattern;
        }
        if (
          this._data.PositivePattern != null &&
          typeof this._data.PositivePattern != "undefined"
        ) {
          f.PositivePattern = this._data.PositivePattern;
        }
        if (
          this._data.AllowRounding != null &&
          typeof this._data.AllowRounding != "undefined"
        ) {
          f.AllowRounding = this._data.AllowRounding;
        }
        if (
          this._data.KeepNotRoundedValue != null &&
          typeof this._data.KeepNotRoundedValue != "undefined"
        ) {
          f.KeepNotRoundedValue = this._data.KeepNotRoundedValue;
        }
        a.set_numberFormat(f);
        a.set_visible(true);
      }
    }
  },
  _adjustHCFilterMenuInputControlsWidth: function (a, b) {
    if (a.search(/(^|[^-])width/i) != -1) {
      a = a.replace(
        /(^|[^-])width(\s*):(\s*)([^;]+);/i,
        "$1WIDTH:" + b + "px;"
      );
    } else {
      a += "WIDTH:" + b + "px;";
    }
    return a;
  },
  _adjustHCFilterMenuPickerControlsWidth: function (b, a) {
    $get(b.get_id() + "_wrapper").style.width = a;
  },
  _setUpHeaderContextMenuFilterControls: function (c, d, b, e) {
    var a = c.get_items().toArray();
    for (var f = 0; f < a.length; f++) {
      var g = a[f];
      if (b == "System.Boolean") {
        if (
          g.get_value() == "GreaterThan" ||
          g.get_value() == "LessThan" ||
          g.get_value() == "GreaterThanOrEqualTo" ||
          g.get_value() == "LessThanOrEqualTo"
        ) {
          g.set_visible(false);
          continue;
        }
      }
      if (b != "System.String") {
        if (
          g.get_value() == "StartsWith" ||
          g.get_value() == "EndsWith" ||
          g.get_value() == "Contains" ||
          g.get_value() == "DoesNotContain" ||
          g.get_value() == "IsEmpty" ||
          g.get_value() == "NotIsEmpty"
        ) {
          g.set_visible(false);
          continue;
        }
      }
      if (e == 0) {
        if (g.get_value() == "Custom") {
          g.set_visible(false);
          continue;
        }
      }
      if (g.get_value() == d) {
        g.select();
      }
      g.set_visible(true);
    }
  },
  _filterButtonClickHandler: function (a) {
    var c = this._owner._owner._getHeaderContextMenu();
    var d = this;
    var m = c.FilterControlsIDsHelper;
    var e = d._data.DataField;
    if (d._data.DataTextField) {
      e = d._data.DataTextField;
    } else {
      if (d._data.DataAlternateTextField) {
        e = d._data.DataAlternateTextField;
      }
    }
    var i = m.getFilterControlID(
      m.FilterControl.RadComboBox,
      m.IdSuffix.FirstCond
    );
    var j = (
      c.findItemByValue("FilterMenuContainer") ||
      c.findItemByValue("FilterMenuParent")
    )
      .findControl(i)
      .get_selectedItem()
      .get_value();
    var r = m.getFilterControlID(
      m.FilterControl.RadComboBox,
      m.IdSuffix.SecondCond
    );
    var s = (
      c.findItemByValue("FilterMenuContainer") ||
      c.findItemByValue("FilterMenuParent")
    )
      .findControl(r)
      .get_selectedItem()
      .get_value();
    var k;
    var t;
    var u = true;
    var o = ["NoFilter", "IsEmpty", "NotIsEmpty", "IsNull", "NotIsNull"];
    if (
      m.FilterControlsType == m.FilterControl.RadTextBox ||
      m.FilterControlsType == m.FilterControl.RadMaskedBox ||
      m.FilterControlsType == m.FilterControl.RadNumericBox
    ) {
      k = m.FirstFilterValueControl.get_value();
      t = m.SecondFilterValueControl.get_value();
    } else {
      if (m.FilterControlsType == m.FilterControl.CheckBox) {
        k = m.FirstFilterValueControl.checked;
        t = m.SecondFilterValueControl.checked;
        u = false;
      } else {
        var f = (function (v) {
          return function (w) {
            return v == m.FilterControl.RadDateInput
              ? w._dateFormat
              : w._dateInput._dateFormat;
          };
        })(m.FilterControlsType);
        var h = m.FirstFilterValueControl.get_selectedDate();
        if (!!h) {
          k = h.localeFormat(f(m.FirstFilterValueControl));
        }
        var q = m.SecondFilterValueControl.get_selectedDate();
        if (!!q) {
          t = q.localeFormat(f(m.SecondFilterValueControl));
        }
      }
    }
    if ($telerik.$.inArray(j, o) !== -1) {
      k = "";
    }
    if ($telerik.$.inArray(s, o) !== -1) {
      t = "";
    }
    if (u) {
      if (typeof k == "undefined" || k == null) {
        k = "";
      } else {
        k = k.toString();
      }
      if (typeof t == "undefined" || t == null) {
        t = "";
      } else {
        t = t.toString();
      }
      k = k.replace(/\\/g, "\\\\").replace(/'/g, "\\'");
      t = t.replace(/\\/g, "\\\\").replace(/'/g, "\\'");
    }
    a.preventDefault();
    var p = this._owner;
    var b = d._data.UniqueName + "|?" + j + "|" + k + "|?" + s + "|" + t;
    var l = $find(p.get_owner().get_id());
    var n =
      typeof l.ClientSettings.DataBinding.Location != "undefined" &&
      l.ClientSettings.DataBinding.Location != "" &&
      !l.get_masterTableView()._virtualization;
    if (n || l._clientDataSourceID) {
      while (p._filterExpressions.get_count() != 0) {
        var g = p._filterExpressions.getItem(0);
        if (g.get_columnUniqueName() == d._data.UniqueName) {
          p._filterExpressions.remove(g);
        }
      }
      if (j != "NoFilter" && k !== "") {
        p.filter(d._data.UniqueName, k, j, true, true);
      }
      if (s != "NoFilter" && t !== "") {
        p.filter(d._data.UniqueName, t, s, false, true);
      }
      d._data.CurrentFilterFunctionName = j;
      d._data.AndCurrentFilterFunctionName = s;
      d._data.CurrentFilterValue = k;
      d._data.AndCurrentFilterValue = t;
      if (j == "NoFilter") {
        d._data.CurrentFilterValue = "";
      }
      if (s == "NoFilter") {
        d._data.AndCurrentFilterValue = "";
      }
      if (j == "NoFilter" || s == "NoFilter") {
        c = p._owner._getHeaderContextMenu();
        this._updateFilterValuesForHCMenu(c.FilterControlsIDsHelper);
        if (j == "NoFilter") {
          p._updateFilterControlValue("", this._data.UniqueName, "NoFilter");
        }
      }
      p.fireCommand("HeaderContextMenuFilter", b);
      if (l._clientDataSourceID && c) {
        c.hide();
      }
    } else {
      p.fireCommand("HeaderContextMenuFilter", b);
    }
    return false;
  },
  _clearFilterButtonClickHandler: function (a) {
    var c = this._owner._owner._getHeaderContextMenu();
    var b = this._data.UniqueName + "|?NoFilter||?NoFilter|";
    a.preventDefault();
    var j = this._owner;
    var h = $find(j.get_owner().get_id());
    var i =
      typeof h.ClientSettings.DataBinding.Location != "undefined" &&
      h.ClientSettings.DataBinding.Location != "" &&
      !h.get_masterTableView()._virtualization;
    if (i || h._clientDataSourceID) {
      c = j._owner._getHeaderContextMenu();
      var d = this;
      d._data.CurrentFilterFunctionName = "NoFilter";
      d._data.AndCurrentFilterFunctionName = "NoFilter";
      d._data.CurrentFilterValue = "";
      d._data.AndCurrentFilterValue = "";
      j._updateFilterControlValue("", d._data.UniqueName, "NoFilter");
      this.set_filterFunction("NoFilter");
      j._filterExpressions.clear();
      var e = $telerik.getElementByClassName(
        j._getFilterCellByColumnUniqueName(d._data.UniqueName),
        "rgFilter"
      );
      Sys.UI.DomElement.removeCssClass(e, "rgFiltered");
      var g =
        c.findItemByValue("FilterMenuContainer") ||
        c.findItemByValue("FilterMenuParent");
      this._updateDisplayHCMenuFilterControls(
        g.get_element(),
        c.FilterControlsIDsHelper
      );
      this._updateFilterFunctionsForHCMenu(
        g.get_element(),
        c.FilterControlsIDsHelper
      );
      this._updateFilterValuesForHCMenu(c.FilterControlsIDsHelper);
    }
    if (h._filterCheckListClientID) {
      var f = $find(h._filterCheckListClientID);
      h._resetCheckListFilterOfColumn(this);
      f.uncheckItems(f.get_checkedItems());
      if (h._filterCheckListSearch) {
        $find(h._filterCheckListSearch.id).set_value("");
      }
      h.updateClientState();
    }
    j.fireCommand("HeaderContextMenuFilter", b);
    if (h._clientDataSourceID && c) {
      c.hide();
    }
    return false;
  },
  _checkBoxClickHandler: function (a) {
    var e = $find(this._column.get_owner().get_id());
    if (!e) {
      return;
    }
    if (!this.checked) {
      e.hideColumn(this._index);
    } else {
      e.showColumn(this._index);
    }
    this._column._handleColumnsCheckboxesState();
    if ($telerik.isIE8 || $telerik.isIE9) {
      var c = e._owner.get_element();
      var b = c.style.display;
      c.style.display = "none";
      var d = c.offsetHeight;
      c.style.display = b;
    }
  },
  _handleColumnsCheckboxesState: function () {
    var d = this.get_owner().get_owner();
    if (d) {
      var f = d.get_headerMenu().findItemByValue("ColumnsContainer");
      if (!f) {
        return;
      }
      var c = f.get_items();
      if (!c) {
        return;
      }
      var b = null;
      var a = null;
      var g;
      for (var e = 0, h = c.get_count(); e < h; e++) {
        b = c.getItem(e);
        if (!b.get_visible()) {
          continue;
        }
        a = b.get_element().getElementsByTagName("input")[0];
        a.removeAttribute("disabled");
        if (a.checked) {
          if (g) {
            g = null;
            break;
          }
          g = a;
        }
      }
      if (g) {
        g.disabled = "disabled";
      }
    }
  },
  _onContextMenuItemClosing: function (b, a) {
    if (
      a.get_item().get_value() == "FilterMenuParent" &&
      a.get_item()._popUpOpened
    ) {
      a.set_cancel(true);
    }
  },
  _onContextMenuItemClicking: function (p, a) {
    var l = a.get_item();
    var k = !!p.get_parent()._clientDataSourceID;
    var m = l.get_value();
    if (
      m == "FilterList" ||
      m == "FilterMenuContainer" ||
      m == "AggregatesContainer" ||
      m == "FilterMenuParent" ||
      m == "ColumnsContainer" ||
      (Telerik.Web.UI.RadMenuItem.isInstanceOfType(l.get_parent()) &&
        l.get_parent().get_value() == "ColumnsContainer")
    ) {
      a.set_cancel(true);
    } else {
      if (m == "SortAsc" || m == "SortDesc" || m == "SortNone") {
        var d = l._column._data;
        var n = $find(l._column.get_owner().get_id()),
          o = n.get_owner();
        var f = d.SortExpression;
        if (
          (typeof o.ClientSettings.DataBinding.Location != "undefined" &&
            o.ClientSettings.DataBinding.Location != "") ||
          k
        ) {
          if (m == "SortNone") {
            a = n._raiseAction("ClearSort", { sortExpression: f });
            if (!a.get_cancel()) {
              f = a.get_sortExpression();
              n.clearSort(f);
            }
          } else {
            f += m == "SortAsc" ? " ASC" : " DESC";
            a = n._raiseAction("Sort", { sortExpression: f });
            if (!a.get_cancel()) {
              f = a.get_sortExpression();
              n.sort(f);
            }
          }
        } else {
          p.trackChanges();
          var e = d.DataField;
          if (d.DataTextField) {
            e = d.DataTextField;
          } else {
            if (d.DataAlternateTextField) {
              e = d.DataAlternateTextField;
            }
          }
          l.get_attributes().setAttribute("ColumnName", f ? f : e);
          l.get_attributes().setAttribute(
            "TableID",
            l._column.get_owner()._data.UniqueID
          );
          p.commitChanges();
        }
      } else {
        if (m == "GroupBy") {
          if (k) {
            l._column
              .get_owner()
              .fireCommand("GroupByColumn", l._column.get_dataField());
            p.hide();
          } else {
            l._column.get_owner().groupColumn(l._column.get_uniqueName());
            a.set_cancel(true);
          }
        } else {
          if (m == "UnGroupBy") {
            if (k) {
              var g = l._column.get_owner().get_owner()._groupPanel;
              if (g) {
                var h = g._items;
                var b = l._column.get_dataField();
                var c = null;
                for (var j = 0; j < h.length; j++) {
                  if (h[j]._dataField == b) {
                    c = h[j];
                  }
                }
                if (c) {
                  g._ungroup(c.get_element().childNodes[0]);
                }
              } else {
                l._column.get_owner().ungroupColumn(l._column.get_uniqueName());
              }
              p.hide();
            } else {
              l._column.get_owner().ungroupColumn(l._column.get_uniqueName());
              a.set_cancel(true);
            }
          } else {
            if (m == "BestFit") {
              l._column.resizeToFit();
            } else {
              if (l.get_isSeparator()) {
                a.set_cancel(true);
              } else {
                if (
                  l.get_parent() != null &&
                  l.get_parent().get_value &&
                  l.get_parent().get_value() == "AggregatesContainer"
                ) {
                  l._column
                    .get_owner()
                    .fireCommand(
                      "SetColumnAggregate",
                      String.format(
                        "{0}|{1}|{2}",
                        m,
                        l._column.get_owner()._data.UniqueID,
                        l._column.get_uniqueName()
                      )
                    );
                } else {
                  if (m == "Freeze") {
                    l._column._toggleFreeze();
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  _onContextMenuHidden: function (g, a) {
    var c = g;
    if (this._checkboxes) {
      for (var e = 0, f = this._checkboxes.length; e < f; e++) {
        window.$removeHandler(
          this._checkboxes[e],
          "click",
          this._checkBoxClickHandler
        );
        this._checkboxes[e]._column = null;
        this._checkboxes[e]._index = null;
      }
    }
    if (this._onContextMenuItemClickingDelegate) {
      g.remove_itemClicking(this._onContextMenuItemClickingDelegate);
      this._onContextMenuItemClickingDelegate = null;
    }
    if (this._onContextMenuItemClosingDelegate) {
      g.remove_itemClosing(this._onContextMenuItemClosingDelegate);
      this._onContextMenuItemClosingDelegate = null;
    }
    if (this._onContextMenuHiddenDelegate) {
      g.remove_hidden(this._onContextMenuHiddenDelegate);
      this._onContextMenuHiddenDelegate = null;
    }
    if (this._filterButtonClickDelegate) {
      var d = $telerik.findElement(
        (
          c.findItemByValue("FilterMenuContainer") ||
          c.findItemByValue("FilterMenuParent")
        ).get_element(),
        "HCFMFilterButton"
      );
      window.$removeHandler(d, "click", this._filterButtonClickDelegate);
      this._filterButtonClickDelegate = null;
    }
    if (this._clearFilterButtonClickDelegate) {
      var b = $telerik.findElement(
        (
          c.findItemByValue("FilterMenuContainer") ||
          c.findItemByValue("FilterMenuParent")
        ).get_element(),
        "HCFMClearFilterButton"
      );
      window.$removeHandler(b, "click", this._clearFilterButtonClickDelegate);
      this._clearFilterButtonClickDelegate = null;
    }
    this._checkboxes = [];
  },
  _onContextMenu: function (a) {
    if ($telerik.isOpera && a.button != 2) {
      return;
    }
    if (this._data.EnableHeaderContextMenu === false) {
      return;
    }
    this._owner._owner.raise_columnContextMenu(
      new Telerik.Web.UI.GridColumnEventArgs(this, a)
    );
    if (
      this._owner._owner.get_events().getHandler("columnContextMenu") ||
      this._owner._data.enableHeaderContextMenu
    ) {
      this._initHeaderContextMenu(a);
      if (a.preventDefault) {
        a.preventDefault();
      } else {
        a.returnValue = false;
        return false;
      }
    }
  },
  resizeToFit: function (e, c) {
    if (!this._canResizeToFit()) {
      return;
    }
    if (typeof c != "undefined") {
      this.get_realOwner()._includeAllHeaderRows = c;
    }
    var f = this._getItemContainerTableView();
    var a = Array.indexOf(f.get_columns(), this);
    var b = this._createFitTestContainer(f.get_element(), e);
    var d = this._calculateBestFitSizes(b, a);
    this._removeFitTestContainer(f.get_element());
    this.get_owner().resizeColumn(a, d || this.get_element().offsetWidth);
    this.get_owner()._owner.updateClientState();
  },
  _isMouseOverResizeHandle: function (a) {
    var c = Telerik.Web.UI.Grid.GetEventPosX(a);
    var d = Telerik.Web.UI.Grid.FindPosX(this.get_element());
    var b = d + this.get_element().offsetWidth;
    if (c >= b - this._resizeTolerance && c <= b + this._resizeTolerance) {
      return true;
    }
    return false;
  },
  _isTouchPointOverResizeHandle: function (a) {
    var c = $telerik.getTouchEventLocation(a).x;
    var d = Telerik.Web.UI.Grid.FindPosX(this.get_element());
    var b = d + this.get_element().offsetWidth;
    if (c >= b - this._resizeTolerance) {
      return true;
    }
    return false;
  },
  _canResizeToFit: function () {
    var a =
      this.get_visible() &&
      (this._data.Display == null || this._data.Display) &&
      (this.Display == null || this.Display);
    var b = this.get_owner().get_owner().ClientSettings.Resizing;
    return (
      a &&
      this.get_resizable() &&
      b &&
      b.AllowColumnResize &&
      b.AllowResizeToFit
    );
  },
  _getItemContainerTableView: function () {
    var a = this.get_owner();
    if (a.get_id().endsWith("_Header")) {
      return $find(a.get_owner().get_id()).get_masterTableView();
    }
    return a;
  },
  _calculateBestFitSizes: function (c, b) {
    var d = c.tBodies[0].getElementsByTagName("tr")[0];
    if (d) {
      var a = d.cells[b];
      if (a) {
        return a.offsetWidth;
      }
    }
    return null;
  },
  _createFitTestContainer: function (n, m) {
    var h = n.parentNode;
    var b = h.id + "_FitTestContainer";
    var d = b + "_FitTestTable";
    var e = document.createDocumentFragment();
    var a = document.createElement("div");
    e.appendChild(a);
    a.id = b;
    a.style.position = "absolute";
    a.style.visibility = "hidden";
    if (n.tBodies.length > 0) {
      a.innerHTML =
        "<table class='" +
        n.className +
        "' cellspacing='0' border='0' style='" +
        n.style.cssText +
        ";table-layout:auto;white-space:nowrap;width:auto;'><tbody>" +
        n.tBodies[n.tBodies.length - 1].innerHTML +
        "</tbody></table>";
    }
    var c = a.childNodes[0];
    c.id = d;
    var k = [];
    for (var f = 0, g = c.rows.length; f < g; f++) {
      var j = c.rows[f];
      if (
        !(
          (j.id && j.id.indexOf(n.id) > -1) ||
          (j.className && j.className.indexOf("rgFooter") > -1)
        )
      ) {
        k.push(j);
      }
    }
    var l = k.pop();
    while (l) {
      c.deleteRow(l.rowIndex);
      l = k.pop();
    }
    if (!m) {
      this._insertHeaderCells(c);
    }
    h.appendChild(e.childNodes[0]);
    return document.getElementById(d);
  },
  _insertHeaderCells: function (b) {
    var g = b.createTHead();
    var c, f, e, a, d;
    if (this._owner._hasMultiHeaders) {
      this.get_realOwner()._includeAllHeaderRows = true;
    }
    if (this.get_realOwner()._includeAllHeaderRows) {
      f = $telerik.$(
        ">tr:not(.rgCommandRow)",
        this.get_element().parentNode.parentNode
      );
      for (d = 0; d < f.length; d++) {
        e = f[d];
        c = g.insertRow(-1);
        c.className = e.className;
        this._insertCellsInRows(e.cells, c);
      }
    } else {
      c = g.insertRow(-1);
      e = this.get_element().parentNode;
      a = e.cells;
      this._insertCellsInRows(a, c);
    }
    if (this.get_realOwner().get_element().tFoot) {
      f = this.get_realOwner().get_element().tFoot.rows;
      for (d = 0; d < f.length; d++) {
        e = f[d];
        if (e.className.indexOf("rgFooter") > -1) {
          c = g.insertRow(-1);
          c.className = e.className;
          this._insertCellsInRows(e.cells, c);
        }
      }
    }
  },
  _insertCellsInRows: function (a, c) {
    var b;
    for (var d = 0, e = a.length; d < e; d++) {
      b = c.insertCell(d);
      b.className = a[d].className;
      b.colSpan = a[d].colSpan;
      b.rowSpan = a[d].rowSpan;
      b.style.cssText = a[d].style.cssText;
      b.style.width = "auto";
      b.innerHTML = a[d].innerHTML;
    }
  },
  _removeFitTestContainer: function (b) {
    var a = document.getElementById(b.parentNode.id + "_FitTestContainer");
    if (a) {
      a.parentNode.removeChild(a);
    }
  },
  _onClick: function (a) {
    this._owner._owner.raise_columnClick(
      new Telerik.Web.UI.GridColumnEventArgs(this, a)
    );
  },
  _onDblClick: function (a) {
    this._owner._owner.raise_columnDblClick(
      new Telerik.Web.UI.GridColumnEventArgs(this, a)
    );
    if (this._isMouseOverResizeHandle(a)) {
      this.resizeToFit();
    }
  },
  _onMouseOver: function (a) {
    this._owner._owner.raise_columnMouseOver(
      new Telerik.Web.UI.GridColumnEventArgs(this, a)
    );
    if (this._owner._owner.Skin != "") {
      Sys.UI.DomElement.addCssClass(this.get_element(), "rgHeaderOver");
    }
  },
  _onMouseOut: function (a) {
    this._owner._owner.raise_columnMouseOut(
      new Telerik.Web.UI.GridColumnEventArgs(this, a)
    );
    if (this._owner._owner.Skin != "") {
      Sys.UI.DomElement.removeCssClass(this.get_element(), "rgHeaderOver");
    }
  },
  get_resizable: function () {
    return this._data.Resizable;
  },
  set_resizable: function (a) {
    if (this._data.Resizable != a) {
      this._data.Resizable = a;
    }
  },
  get_reorderable: function () {
    return this._data.Reorderable;
  },
  get_columnGroupName: function () {
    return this._data.ColumnGroupName;
  },
  get_selectable: function () {
    return this._data.Selectable;
  },
  set_reorderable: function (a) {
    if (this._data.Reorderable != a) {
      this._data.Reorderable = a;
    }
  },
  get_uniqueName: function () {
    return this._data.UniqueName;
  },
  get_dataField: function () {
    return this._data.DataField;
  },
  get_readOnly: function () {
    return typeof this._data.ReadOnly != "undefined" ? true : false;
  },
  get_dataType: function () {
    return this._data.DataTypeName;
  },
  get_filterFunction: function () {
    return this._data.CurrentFilterFunctionName;
  },
  set_filterFunction: function (a) {
    if (this._data.CurrentFilterFunctionName != a) {
      this._data.CurrentFilterFunctionName = a;
    }
  },
  get_filterDelay: function () {
    return typeof this._data.FilterDelay == "undefined"
      ? null
      : this._data.FilterDelay;
  },
  set_filterDelay: function (a) {
    if (this._data.FilterDelay != a) {
      this._data.FilterDelay = a;
    }
  },
};
Telerik.Web.UI.GridColumn.registerClass(
  "Telerik.Web.UI.GridColumn",
  Sys.UI.Control
);
Telerik.Web.UI.GridColumnEventArgs = function (b, a) {
  Telerik.Web.UI.GridColumnEventArgs.initializeBase(this);
  this._gridColumn = b;
  this._domEvent = a;
};
Telerik.Web.UI.GridColumnEventArgs.prototype = {
  get_gridColumn: function () {
    return this._gridColumn;
  },
  get_domEvent: function () {
    return this._domEvent;
  },
};
Telerik.Web.UI.GridColumnEventArgs.registerClass(
  "Telerik.Web.UI.GridColumnEventArgs",
  Sys.EventArgs
);
Telerik.Web.UI.GridColumnCancelEventArgs = function (b, a) {
  Telerik.Web.UI.GridColumnCancelEventArgs.initializeBase(this);
  this._gridColumn = b;
  this._domEvent = a;
};
Telerik.Web.UI.GridColumnCancelEventArgs.prototype = {
  get_gridColumn: function () {
    return this._gridColumn;
  },
  get_domEvent: function () {
    return this._domEvent;
  },
};
Telerik.Web.UI.GridColumnCancelEventArgs.registerClass(
  "Telerik.Web.UI.GridColumnCancelEventArgs",
  Sys.CancelEventArgs
);
Telerik.Web.UI.GridHeaderMenuCancelEventArgs = function (b, a, c) {
  Telerik.Web.UI.GridHeaderMenuCancelEventArgs.initializeBase(this, [b, a]);
  this._menu = c;
};
Telerik.Web.UI.GridHeaderMenuCancelEventArgs.prototype = {
  get_menu: function () {
    return this._menu;
  },
};
Telerik.Web.UI.GridHeaderMenuCancelEventArgs.registerClass(
  "Telerik.Web.UI.GridHeaderMenuCancelEventArgs",
  Telerik.Web.UI.GridColumnCancelEventArgs
);
Type.registerNamespace("Telerik.Web.UI");
Type.registerNamespace("Telerik.Web.UI.Grid");
(function (a) {
  a.Grid.GridBoundColumn = {
    populateCell: function (c, e, g) {
      var f = this._owner._owner,
        d = this._data.DataFormatString;
      if (typeof d != "undefined" && d != "") {
        if (g.toString().indexOf("/Date(") != -1) {
          g = new Date(parseInt(g.replace("/Date(", "").replace(")/", ""), 10));
        }
        c.innerHTML = String.localeFormat(d, g) || "&nbsp;";
      } else {
        if (g.toString().indexOf("/Date(") != -1) {
          c.innerHTML = String.localeFormat(
            "{0:" + f._defaultDateTimeFormat + "}",
            new Date(parseInt(g.replace("/Date(", "").replace(")/", ""), 10))
          );
        } else {
          c.innerHTML = g !== "" ? g : "&nbsp;";
        }
      }
    },
    populateEditCell: function (c, d, f, e) {
      this.get_realOwner()._fillEditorsData(e, this, f);
    },
  };
  a.Grid.GridTemplateColumn = {
    populateCell: function (d, e, h, f) {
      if (this._data.ClientItemTemplate) {
        var c = this.get_realOwner()._getBindingContext(e, f.get_itemIndex()),
          g = Telerik.Web.UI.Template.compile(this._data.ClientItemTemplate);
        if (g) {
          d.innerHTML = g(c);
        }
      }
    },
    populateEditCell: function (c, d, f, e) {
      this.get_realOwner()._fillTemplateEditorsData(e, d, c);
    },
  };
  a.Grid.GridCheckBoxColumn = {
    initializeCell: function (c) {
      c.innerHTML =
        '<span disabled="disabled"><input type="checkbox" disabled="disabled" /></span>';
    },
    populateCell: function (c, d, g) {
      var f = c.getElementsByTagName("input"),
        e = f[0];
      if (e && e.type == "checkbox") {
        e.checked = g;
      }
    },
    populateEditCell: function (c, d, f, e) {
      this.get_realOwner()._fillTemplateEditorsData(e, d, c);
    },
  };
  a.Grid.GridHyperLinkColumn = {
    initializeCell: function (c) {
      c.innerHTML = "<a />";
    },
    populateCell: function (c, e) {
      if (!e) {
        return;
      }
      var d = this._data,
        h = c.getElementsByTagName("a");
      if (h.length > 0) {
        var g = h[0];
        if (d.NavigateUrl && d.NavigateUrl != "") {
          g.href = d.NavigateUrl;
        }
        if (d.Target && d.Target != "") {
          g.target = d.Target;
        }
        if (d.Text && d.Text != "") {
          g.innerHTML = d.Text;
        }
        var f = d.DataTextFormatString;
        var i = String.localeFormat(f == "" ? "{0}" : f, e[d.DataTextField]);
        var k = b(d.DataNavigateUrlFields, e);
        if (k && k.length > 0) {
          var j = eval(
            "String.format('" +
              d.DataNavigateUrlFormatString +
              "'," +
              k.join(",") +
              ")"
          );
          g.href = j;
        }
        if ((f && f != "") || (d.DataTextField && d.DataTextField != "")) {
          g.innerHTML = i;
        }
      }
    },
  };
  a.Grid.GridImageColumn = {
    initializeCell: function (c) {
      c.innerHTML = "<img />";
    },
    populateCell: function (c, e) {
      if (!e) {
        return;
      }
      var d = this._data,
        h = c.getElementsByTagName("img"),
        g = h[0];
      if (g) {
        if (d.ImageUrl && d.ImageUrl != "") {
          g.src = d.ImageUrl;
        }
        if (d.AlternateText && d.AlternateText != "") {
          g.alt = g.title = d.AlternateText;
        }
        var f = d.DataAlternateTextFormatString;
        var i = String.localeFormat(
          f == "" ? "{0}" : f,
          e[d.DataAlternateTextField]
        );
        var k = b(d.DataImageUrlFields, e);
        if (k && k.length > 0) {
          var j = eval(
            "String.format('" +
              (d.DataImageUrlFormatString || "{0}") +
              "'," +
              k.join(",") +
              ")"
          );
          g.src = j;
        }
        if (d.ImageHeight && d.ImageHeight != "") {
          g.style.height = d.ImageHeight;
        }
        if (d.ImageWidth && d.ImageWidth != "") {
          g.style.width = d.ImageWidth;
        }
        if (
          (f && f != "") ||
          (d.DataAlternateTextField && d.DataAlternateTextField != "")
        ) {
          g.alt = g.title = i;
        }
      }
    },
  };
  a.Grid.GridButtonColumn = {
    initializeCell: function (d, h) {
      var g = this._owner._owner,
        f = this._data,
        c;
      switch (f.ButtonType) {
        case "PushButton":
          c = '<input type="submit" onclick="{0}"/>';
          break;
        case "LinkButton":
          c = '<a href="#" onclick="{0}"></a>';
          break;
        case "ImageButton":
          c = '<input type="image" src="' + f.ImageUrl + '" onclick="{0}"/>';
          break;
        case "FontIconButton":
          if (f.CommandName == "Delete") {
            c =
              '<button type="submit" class="t-button rgActionButton rgDel" value="Delete" title="Delete" onclick="{0}"><span class="t-font-icon rgIcon rgDelIcon"></span></button>';
          } else {
            if (f.CommandName == "Edit") {
              c =
                '<button type="submit" class="t-button rgActionButton rgEdit" value="Edit" title="Edit" onclick="{0}"><span class="t-font-icon rgIcon rgEditIcon"></span></button>';
            }
          }
          break;
      }
      var e = f.CommandArgument;
      if (e == undefined || e == "") {
        e = h._itemIndexHierarchical;
      }
      var i = String.format(
        this._getClickStatement(),
        g.get_id(),
        this.get_realOwner().get_id(),
        h.get_id(),
        f.CommandName,
        e
      );
      d.innerHTML = String.format(c, i);
      this.populateCell(d, {});
    },
    populateCell: function (e, f) {
      var d = f[this._data.DataTextField];
      if (d == undefined || d == "") {
        d = this._data.Text;
      }
      var c;
      switch (this._data.ButtonType) {
        case "PushButton":
          c = e.getElementsByTagName("input")[0];
          c.value = d;
          break;
        case "LinkButton":
          c = e.getElementsByTagName("a")[0];
          c.innerHTML = d;
          break;
        case "ImageButton":
          c = e.getElementsByTagName("input")[0];
          c.title = d;
          c.alt = d;
          break;
      }
    },
    _getClickStatement: function () {
      return "if(!$find('{1}').fireCommand('{3}','{4}')) return false;";
    },
  };
  a.Grid.GridEditCommandColumn = a.Grid.GridButtonColumn;
  a.Grid.GridDragDropColumn = {
    initializeCell: function (c) {
      if (
        this.get_realOwner().get_owner()._renderMode ==
        Telerik.Web.UI.RenderMode.Classic
      ) {
        c.innerHTML = '<input class="rgDrag" type="button">';
      } else {
        c.innerHTML = '<a class="rgDragIcon t-font-icon rgIcon"></a>';
      }
    },
    populateCell: function (c, d) {},
  };
  a.Grid.GridClientDeleteColumn = {
    initializeCell: a.Grid.GridButtonColumn.initializeCell,
    populateCell: a.Grid.GridButtonColumn.populateCell,
    _getClickStatement: function () {
      if (this.get_realOwner()._data.EditMode == "Batch") {
        return "$find('{0}').get_batchEditingManager()._deleteRecord('{1}','{2}'); return false;";
      } else {
        return "$find('{1}')._clientDelete(event); return false;";
      }
    },
  };
  a.Grid.GridClientSelectColumn = {
    initializeCell: function (c, e) {
      var d = this._owner._owner;
      c.innerHTML = String.format(
        "<input type='checkbox' id='{0}_SelectCheckBox' />",
        d.get_id() + "__" + e._itemIndexHierarchical
      );
    },
  };
  a.Grid.GridCalculatedColumn = {
    populateCell: function (c, f) {
      var e = this._data,
        d = "",
        j = [],
        i;
      if (typeof e.Expression != "undefined" && e.Expression != "") {
        j = [];
        for (var m = 0; m < e.DataFields.length; m++) {
          i = e.DataFields[m];
          Array.add(j, f[i]);
        }
        var n = eval(
          "String.format('" + e.Expression + "'," + j.join(",") + ")"
        );
        var l = e.DataFormatString;
        if (l == "") {
          l = "{0}";
        }
        var g = "";
        try {
          g = eval(n);
        } catch (h) {}
        d = String.localeFormat(l, g);
      }
      c.innerHTML = d !== "" ? d : "&nbsp;";
    },
  };
  a.Grid.GridAttachmentColumn = {
    initializeCell: function (c) {
      c.innerHTML = "<a></a>";
    },
    populateCell: function (c, e, g) {
      var f = c.getElementsByTagName("a")[0],
        d;
      if (!f) {
        this.initializeCell(c);
        f = c.getElementsByTagName("a")[0];
      }
      if (g !== "") {
        f.innerHTML = g;
        d =
          '{"ColumnUniqueName":"' +
          this.get_uniqueName() +
          '","FileName":"' +
          g +
          '"}';
        f.setAttribute(
          "onclick",
          "if (!$find('" +
            this._owner._owner.get_masterTableView().get_id() +
            "').fireCommand('DownloadAttachment','" +
            d +
            "')) return false;"
        );
        f.href = "#";
      } else {
        f.href = "";
        f.innerHTML = "&nbsp;";
        f.onclick = function () {};
      }
    },
  };
  a.Grid.GridRatingColumn = {
    populateCell: function (c, d, g) {
      var f = $telerik.getElementByClassName(c, "RadRating"),
        e = f ? $find(f.id) : null;
      if (e) {
        e._caching = true;
        e._shouldUpdateClientState = false;
        e.set_value(parseFloat(g));
        e._shouldUpdateClientState = true;
      }
    },
  };
  a.Grid.GridGroupSplitterColumn = {
    populateCell: function (c) {
      Sys.UI.DomElement.addCssClass(c, "rgGroupCol");
    },
    populateEditCell: function (c) {
      Sys.UI.DomElement.addCssClass(c, "rgGroupCol");
    },
  };
  a.Grid.GridExpandColumn = {
    initializeCell: function (c) {
      Sys.UI.DomElement.addCssClass(c, "rgExpandCol");
    },
  };
  function b(c, d) {
    var g = [];
    if (!c || !d) {
      return g;
    }
    for (var f = 0; f < c.length; f++) {
      var e = c[f];
      if (typeof d[e] != "number") {
        Array.add(g, String.format("'{0}'", d[e]));
      } else {
        Array.add(g, d[e]);
      }
    }
    return g;
  }
})(Telerik.Web.UI);
Type.registerNamespace("Telerik.Web.UI");
Telerik.Web.UI.GridColumnAnimation = function () {
  Telerik.Web.UI.GridColumnAnimation.initializeBase(this);
  this.$ = null;
  this._owner = {};
  this._mouseMoveDelegate = null;
  this._moueUpDelegate = null;
  this._$animatedContainer = null;
  this._$innerContainer = null;
  this._animatedHeaderOffset = 0;
  this._dragToGroupColumn = null;
  this._nextCellPosition = 0;
  this._animatedHeaderCells = [];
  this._revertPendingCells = [];
  this._initialDraggedHeaderCellIndex = -1;
  this._draggedHeaderCellIndex = -1;
  this._reorderDuration = 300;
  this._revertDuration = 300;
  this._allowColumnsReorderAnimation = false;
  this._allowColumnRevertAnimation = false;
  this._allowDragToGroup = false;
  this._allowFreeMove = false;
};
Telerik.Web.UI.GridColumnAnimation.prototype = {
  initialize: function () {
    Telerik.Web.UI.GridColumnAnimation.callBaseMethod(this, "initialize");
    var a = this.get_owner().ClientSettings;
    this._allowColumnsReorderAnimation =
      a.Animation.AllowColumnReorderAnimation &&
      a.AllowColumnsReorder &&
      a.ColumnsReorderMethod == 1;
    this._allowColumnRevertAnimation = a.Animation.AllowColumnRevertAnimation;
    this._allowDragToGroup = a.AllowDragToGroup;
    this._allowFreeMove = this._allowDragToGroup;
    this._mouseMoveDelegate = Function.createDelegate(this, this._mouseMove);
    this._mouseUpDelegate = Function.createDelegate(this, this._mouseUp);
    this.$ = $telerik.$;
    (function (b) {
      b.fn.outerHtml = function (d) {
        if (!this[0]) {
          return null;
        }
        var c = d ? this.eq(0).clone() : this.eq(0).clone().empty();
        return b("<p>").append(c).html();
      };
    })(this.$);
  },
  _mouseDown: function (c, a) {
    var d = c.target || c.srcElement,
      b = a.get_element();
    if (!d) {
      return;
    }
    if (d !== b && d.parentNode !== b) {
      return;
    }
    this._dragToGroupColumn = a;
    this._mouseDownPosition = [c.clientX, c.clientY];
    if (this._allowColumnsReorderAnimation) {
      this.$(document).mousemove(this._mouseMoveDelegate);
    } else {
      this._createDraggedHeaderCell(c);
    }
    this.$(document).mouseup(this._mouseUpDelegate);
    Telerik.Web.UI.Grid.ClearDocumentEvents();
  },
  _createDraggedHeaderCell: function (a) {
    Telerik.Web.UI.Grid.CreateDragDrop(a, this._dragToGroupColumn, true);
  },
  _createAnimatedContainer: function (d) {
    var a = this.$(d);
    var b = a.closest("table");
    this._animatedHeaderOffset = b.offset();
    this._animatedHeaderOffset.top = a.offset().top;
    this._$innerContainer = this.$(
      $("<div>", { id: b.attr("id"), class: b.attr("class") })
    ).css({
      height: "100%",
      overflow: this._allowFreeMove ? "visible" : "hidden",
      padding: "0",
      margin: "0",
      position: "absolute",
      border: "none",
      width: "100%",
    });
    this._$animatedContainer = this.$(
      this.$(this.get_owner().get_element()).outerHtml()
    )
      .append(this._$innerContainer)
      .css({
        left: this._animatedHeaderOffset.left + "px",
        top: this._animatedHeaderOffset.top + "px",
        width: b.parent().width() + "px",
        height: a.outerHeight() - 1 + "px",
        overflow: this._allowFreeMove ? "visible" : "hidden",
        padding: "0",
        margin: "0",
        position: "absolute",
        borderStyle: "none none solid none",
      })
      .appendTo(document.body);
    var c = this;
    this.$("th", a.parent()).each(function (g) {
      if (this.clientWidth === 0) {
        return;
      }
      var e = c._createAnimatedCell(this);
      if (this === d) {
        e.addClass("rgDraggedHeader")
          .attr("title", "")
          .css({ opacity: "0.8", zIndex: "9999" });
        c._draggedHeaderCellIndex = c._animatedHeaderCells.length;
        c._initialDraggedHeaderCellIndex = c._draggedHeaderCellIndex;
      }
      var f = this;
      c._$innerContainer.append(e);
      c._animatedHeaderCells.push(
        new Telerik.Web.UI.GridAnimatedHeaderCell(
          e,
          c.get_reorderDuration(),
          f.UniqueName
        )
      );
    });
  },
  _createAnimatedCell: function (b) {
    var a = this.$(b);
    return this._changeElementTag(b, "div").css({
      position: "absolute",
      left: this._getNextCellPosition(b),
      width: a.width() + "px",
      cursor: "default",
    });
  },
  _getNextCellPosition: function (a) {
    var b = this._nextCellPosition;
    this._nextCellPosition += this.$(a).outerWidth();
    return b;
  },
  _changeElementTag: function (a, e) {
    a = a.jquery && a.length ? a[0] : a;
    if (!a.tagName) {
      return;
    }
    var c = this.$(a).html();
    var b = this.$(a).outerHtml();
    var d = a.tagName.toLowerCase();
    b = b.replace("<" + a.tagName, "<" + d).replace(a.tagName + ">", d + ">");
    return this.$(b.replace("<" + d, "<" + e).replace(d + ">", e + ">")).html(
      c
    );
  },
  _mouseMove: function (a) {
    if (this._mouseDownPosition) {
      if (
        Math.abs(this._mouseDownPosition[0] - a.clientX) > 0 ||
        Math.abs(this._mouseDownPosition[1] - a.clientY) > 0
      ) {
        this._createAnimatedContainer(this._dragToGroupColumn.get_element());
        this._mouseDownPosition = null;
      } else {
        return;
      }
    }
    this._handleMouseMoveInternal(a);
  },
  _handleMouseMoveInternal: function (a) {
    this._setMoveDirection(a);
    this._getDraggedHeaderCell().moveWithCursor(a, this._allowFreeMove);
    this._mouseTrackOrigin = this._getMouseTrackOrigin(a);
    if (
      this._isTrackOriginOverHeader() &&
      !this._getDraggedHeaderCell().isPointOverOrigin(this._mouseTrackOrigin)
    ) {
      this._reorderHeaderCells();
    } else {
      this._revertHeaderCellsToOrigin();
    }
    if (this._allowDragToGroup) {
      this._updateGroupPanelIndicators(a);
    }
  },
  _updateGroupPanelIndicators: function (a) {
    if (this._isDraggedHeaderOverGroupPanel()) {
      Telerik.Web.UI.Grid.CreateReorderIndicators(
        this.get_owner()._groupPanel.get_element(),
        this.get_owner().Skin,
        this.get_owner()._imagesPath,
        true,
        this.get_owner().get_id()
      );
      Telerik.Web.UI.Grid.MoveReorderIndicators(
        a,
        this.get_owner()._groupPanel.get_element(),
        true,
        this.get_owner().get_id()
      );
    } else {
      this._hideReorderIndicators();
    }
  },
  _hideReorderIndicators: function () {
    if (Telerik.Web.UI.Grid.ReorderIndicator1) {
      Telerik.Web.UI.Grid.ReorderIndicator1.style.visibility = "hidden";
      Telerik.Web.UI.Grid.ReorderIndicator1.style.display = "none";
      Telerik.Web.UI.Grid.ReorderIndicator1.style.position = "absolute";
      Telerik.Web.UI.Grid.ReorderIndicator2.style.visibility =
        Telerik.Web.UI.Grid.ReorderIndicator1.style.visibility;
      Telerik.Web.UI.Grid.ReorderIndicator2.style.display =
        Telerik.Web.UI.Grid.ReorderIndicator1.style.display;
      Telerik.Web.UI.Grid.ReorderIndicator2.style.position =
        Telerik.Web.UI.Grid.ReorderIndicator1.style.position;
    }
  },
  _getMoveDirection: function () {
    return this._moveDirection || 0;
  },
  _setMoveDirection: function (a) {
    var b = this._prevPageX || a.pageX;
    this._moveDirection = a.pageX - b;
    this._prevPageX = a.pageX;
  },
  _isTrackOriginOverHeader: function () {
    var a = Telerik.Web.UI.Grid.Animation;
    if (this._mouseTrackOrigin) {
      return a.containsPoint(
        a.getBoundingRectangle(this._$animatedContainer),
        this._mouseTrackOrigin
      );
    }
    return false;
  },
  _getLastMovedHeaderWidth: function () {
    if (!this._lastMovedCellWidth) {
      this._lastMovedCellWidth = this._getDraggedHeaderCell().get_animationWidth();
    }
    return this._lastMovedCellWidth;
  },
  _updateLastMovedHeaderWidth: function (a) {
    this._lastMovedCellWidth = Math.max(
      a.get_animationWidth(),
      this._getDraggedHeaderCell().get_animationWidth()
    );
  },
  _reorderHeaderCells: function () {
    var b =
      this._animatedHeaderOffset.left +
      this._getDraggedHeaderCell().get_draggedPosition();
    var a = b;
    var d = this._draggedHeaderCellIndex;
    var c = null;
    if (this._getMoveDirection() > 0 || a < this._mouseTrackOrigin.left) {
      a += this._getLastMovedHeaderWidth();
      while (
        a < this._mouseTrackOrigin.left &&
        d < this._animatedHeaderCells.length - 1
      ) {
        d++;
        c = this._animatedHeaderCells[d];
        a += c.get_animationWidth();
        if (c.canMove()) {
          this._moveCell(d, "left");
        }
      }
    } else {
      if (this._getMoveDirection() < 0 || a >= this._mouseTrackOrigin.left) {
        while (a > this._mouseTrackOrigin.left && d > 0) {
          d--;
          c = this._animatedHeaderCells[d];
          a -= c.get_animationWidth();
          if (c.canMove()) {
            this._moveCell(d, "right");
          }
        }
      }
    }
  },
  _moveCell: function (c, a) {
    var b = this._animatedHeaderCells[c];
    if (b.isPointOver(this._mouseTrackOrigin)) {
      this._updateLastMovedHeaderWidth(b);
      this._getDraggedHeaderCell().set_draggedPosition(b.get_currentPosition());
    } else {
      if (b.isPointOverOrigin(this._mouseTrackOrigin)) {
        this._updateLastMovedHeaderWidth(b);
        this._getDraggedHeaderCell().set_draggedPosition(
          b.get_originalPosition()
        );
      }
    }
    this._exchangeCellPosition(c);
    this._updateRevertState(b);
    if (a === "left") {
      b.moveLeft(this._getDraggedHeaderCell().get_animationWidth());
    } else {
      b.moveRight(this._getDraggedHeaderCell().get_animationWidth());
    }
  },
  _updateRevertState: function (b) {
    if (b.isAtOrigin()) {
      this._revertPendingCells.push(b);
    } else {
      if (this._revertPendingCells.length > 0) {
        var a = Array.indexOf(this._revertPendingCells, b);
        if (a > -1) {
          this._revertPendingCells.splice(a, 1);
        }
      }
    }
  },
  _exchangeCellPosition: function (c) {
    var b = this._draggedHeaderCellIndex;
    var a = this._getDraggedHeaderCell();
    this._animatedHeaderCells.splice(b, 1);
    this._animatedHeaderCells.splice(c, 0, a);
    this._draggedHeaderCellIndex = c;
  },
  _revertHeaderCellsToOrigin: function () {
    if (this._revertPendingCells.length > 0) {
      if (
        this._initialDraggedHeaderCellIndex !== this._draggedHeaderCellIndex
      ) {
        this._exchangeCellPosition(this._initialDraggedHeaderCellIndex);
      }
      var a = this._getDraggedHeaderCell();
      if (a.get_draggedPosition() !== a.get_originalPosition()) {
        this._updateLastMovedHeaderWidth(a);
        a.set_draggedPosition(a.get_originalPosition());
      }
      while (this._revertPendingCells.length) {
        this._revertPendingCells.pop().moveToOrigin();
      }
    }
  },
  _getMouseTrackOrigin: function (a) {
    var b = { left: a.pageX, top: a.pageY };
    var c = Telerik.Web.UI.Grid.Animation.getTrackedPoint();
    if (!this._allowFreeMove && c) {
      b.top = c.top;
    }
    return b;
  },
  _getDraggedHeaderCell: function () {
    return this._animatedHeaderCells[this._draggedHeaderCellIndex];
  },
  _isDraggedHeaderOverGroupPanel: function () {
    if (this._mouseTrackOrigin) {
      return (
        this._allowDragToGroup &&
        this.get_owner()._groupPanel &&
        Telerik.Web.UI.Grid.Animation.containsPoint(
          this._getGroupPanelBoundingRectangle(),
          this._mouseTrackOrigin
        )
      );
    }
    return false;
  },
  _getGroupPanelBoundingRectangle: function () {
    if (!this._cachedGroupPanelRect) {
      this._cachedGroupPanelRect = Telerik.Web.UI.Grid.Animation.getBoundingRectangle(
        this.get_owner()._groupPanel.get_element()
      );
    }
    return this._cachedGroupPanelRect;
  },
  _mouseUp: function (b) {
    clearTimeout(this._mouseMoveTimeout);
    if (!this._mouseDownPosition && this._allowColumnsReorderAnimation) {
      var f = this._getDraggedHeaderCell().get_element().parent()[0].id;
      var d = $find(f);
      if (
        this.get_owner().ClientSettings.AllowColumnsReorder &&
        this._isTrackOriginOverHeader()
      ) {
        var c = this._getReorderColumnNames();
        if (c && d) {
          d.reorderColumns(c.first, c.second);
        }
        this._clearAnimationData();
        this._removeAnimatedContainer();
        Telerik.Web.UI.Grid.RestoreDocumentEvents();
        return;
      }
      this._revertHeaderCellsToOrigin();
      if (
        this.get_owner().ClientSettings.AllowDragToGroup &&
        this._isDraggedHeaderOverGroupPanel()
      ) {
        var a = d.getColumnByUniqueName(
          this._getDraggedHeaderCell().get_columnName()
        );
        if (a && a._data.Groupable) {
          this._clearAnimationData();
          this._removeAnimatedContainer();
          this._hideReorderIndicators();
          d.groupColumn(a.get_element().UniqueName);
        }
      } else {
        this._moveDraggedCellToOrigin();
      }
    } else {
      if (this._allowDragToGroup && this._dragToGroupColumn) {
        this._dragToGroupColumn._onMouseUpHandler(b);
        if (this._allowColumnRevertAnimation) {
          Telerik.Web.UI.Grid.AnimateRevertDragDrop(
            this._dragToGroupColumn,
            this.get_revertDuration()
          );
        }
      } else {
        this._dragToGroupColumn._onMouseUpHandler(b);
        if (this._dragToGroupColumn && this._allowColumnRevertAnimation) {
          Telerik.Web.UI.Grid.AnimateRevertDragDrop(
            this._dragToGroupColumn,
            this.get_revertDuration()
          );
        } else {
          Telerik.Web.UI.Grid.DestroyDragDrop();
        }
      }
    }
    this._clearAnimationData();
    Telerik.Web.UI.Grid.RestoreDocumentEvents();
  },
  _getReorderColumnNames: function () {
    var b = this._getDraggedHeaderCell().get_columnName();
    var a = "";
    for (var d = 0; d < this._revertPendingCells.length; d++) {
      var c = this._revertPendingCells[d];
      if (
        !c.isDragged() &&
        c.get_originalPosition() ===
          this._getDraggedHeaderCell().get_currentPosition()
      ) {
        a = c.get_columnName();
        break;
      }
    }
    if (b && a && b !== a) {
      return { first: b, second: a };
    }
    return null;
  },
  _moveDraggedCellToOrigin: function () {
    var b = this._getDraggedHeaderCell();
    if (this._allowColumnRevertAnimation) {
      var a = this;
      b.get_element().animate(
        { left: b.get_originalPosition(), top: 0 },
        this.get_revertDuration(),
        function () {
          a._removeAnimatedContainer();
        }
      );
    } else {
      this._removeAnimatedContainer();
    }
  },
  _clearAnimationData: function () {
    this._mouseTrackOrigin = -1;
    this._nextCellPosition = 0;
    this._revertPendingCells = [];
    this._animatedHeaderCells = [];
    this._draggedHeaderCellIndex = -1;
    this._initialDraggedHeaderCellIndex = -1;
    this._lastMovedCellWidth = null;
    this._moveDirection = 0;
    this._prevPageX = 0;
    this._mouseMoveInProgress = false;
    this._dragToGroupColumn = null;
    this._mouseDownPosition = null;
    Telerik.Web.UI.Grid.Animation.clearElementRelativeMousePoint();
    this._clearHandlers();
  },
  _clearHandlers: function () {
    this.$(document).unbind("mousemove", this._mouseMoveDelegate);
    this.$(document).unbind("mouseup", this._mouseUpDelegate);
  },
  _removeAnimatedContainer: function () {
    this._$animatedContainer.remove();
  },
  get_reorderDuration: function () {
    return this._reorderDuration;
  },
  set_reorderDuration: function (a) {
    this._reorderDuration = a;
  },
  get_revertDuration: function () {
    return this._revertDuration;
  },
  set_revertDuration: function (a) {
    this._revertDuration = a;
  },
  get_owner: function () {
    return this._owner;
  },
  set_owner: function (a) {
    this._owner = a;
  },
};
Telerik.Web.UI.GridColumnAnimation.registerClass(
  "Telerik.Web.UI.GridColumnAnimation",
  Sys.Component
);
Telerik.Web.UI.GridAnimatedHeaderCell = function (a, b, c) {
  this._$element = a;
  this._columnName = c;
  this._originalPosition = parseInt(a.css("left"), 10);
  this._currentPosition = this._originalPosition;
  this.className = this._$element[0].className;
  this._animated = false;
  this._animationDuration = b;
  this._originalOffset = this._$element.offset();
  this._originalParentOffset = this._$element.parent().offset();
  this._originBoundingRectangle = {
    left: this._originalParentOffset.left + this.get_originalPosition(),
    top: this._originalOffset.top,
    width: this.get_animationWidth(),
    height:
      this._$element.parent().height() -
      (this._$element.innerHeight() - this._$element.height()),
  };
  this._$element[0].innerHTML = String.format(
    "<span style='display:inline-block;vertical-align:middle;width:100%;'>{0}</span>",
    this._$element.html()
  );
  this._$element.prepend(
    "<span style='display:inline-block;vertical-align:middle;height:100%;'></span>"
  );
  this._$element.height(this._originBoundingRectangle.height);
};
Telerik.Web.UI.GridAnimatedHeaderCell.prototype = {
  isDragged: function () {
    return this._$element[0].className.indexOf("rgDraggedHeader") > -1;
  },
  get_element: function () {
    return this._$element;
  },
  get_columnName: function () {
    return this._columnName;
  },
  isAtOrigin: function () {
    return this.get_currentPosition() === this.get_originalPosition();
  },
  get_originalPosition: function () {
    return this._originalPosition;
  },
  get_currentPosition: function () {
    return this._currentPosition;
  },
  get_draggedPosition: function () {
    return this._currentPosition;
  },
  set_draggedPosition: function (a) {
    if (this.isDragged()) {
      this._currentPosition = a;
    }
  },
  get_animationWidth: function () {
    return this._$element.outerWidth();
  },
  get_animationDuration: function () {
    return this._animationDuration;
  },
  isPointOver: function (a) {
    return Telerik.Web.UI.Grid.Animation.containsPoint(
      Telerik.Web.UI.Grid.Animation.getBoundingRectangle(this.get_element()),
      a
    );
  },
  isPointOverOrigin: function (a) {
    return Telerik.Web.UI.Grid.Animation.containsPoint(
      this._originBoundingRectangle,
      a
    );
  },
  canMove: function () {
    return (
      this.className.indexOf("rgGroupCol") < 0 &&
      this.className.indexOf("rgExpandCol") < 0
    );
  },
  canMoveLeft: function () {
    return (
      this.canMove() &&
      this.get_currentPosition() > 0 &&
      this.get_originalPosition() <= this.get_currentPosition()
    );
  },
  canMoveRight: function () {
    var a = this._$element.parent().width() - this._$element.outerWidth();
    return (
      this.canMove() &&
      this.get_currentPosition() < a &&
      this.get_originalPosition() >= this.get_currentPosition()
    );
  },
  moveLeft: function (a) {
    this.moveTo(a, "left");
  },
  moveRight: function (a) {
    this.moveTo(a, "right");
  },
  moveToOrigin: function () {
    this.moveTo(0, "origin");
  },
  moveTo: function (c, d) {
    var b = { left: null };
    switch (d) {
      case "left":
        if (this.canMoveLeft()) {
          b.left =
            this.get_currentPosition() === this.get_originalPosition()
              ? this.get_originalPosition() - c
              : this.get_originalPosition();
        }
        break;
      case "right":
        if (this.canMoveRight()) {
          b.left =
            this.get_currentPosition() === this.get_originalPosition()
              ? this.get_originalPosition() + c
              : this.get_originalPosition();
        }
        break;
      case "origin":
        if (this.get_currentPosition !== this.get_originalPosition()) {
          b.left = this.get_originalPosition();
        }
        break;
    }
    if (b.left !== null) {
      this._currentPosition = b.left;
      var a = this;
      setTimeout(function () {
        a._$element.stop(false, false).animate(b, a.get_animationDuration());
      }, 10);
    }
  },
  moveWithCursor: function (c, a) {
    if (this.isDragged()) {
      var b = {};
      if (a) {
        b.left = c.pageX - this._originalParentOffset.left + "px";
        b.top = c.pageY - this._originalParentOffset.top + "px";
      } else {
        if (!Telerik.Web.UI.Grid.Animation.getElementRelativeTrackedPoint()) {
          Telerik.Web.UI.Grid.Animation.trackElementRelativeMousePoint(
            this.get_element(),
            c
          );
        }
        b.left =
          c.pageX -
          this._originalParentOffset.left -
          Telerik.Web.UI.Grid.Animation.getElementRelativeTrackedPoint().left +
          "px";
      }
      this.get_element().css(b);
    }
  },
};
Type.registerNamespace("Telerik.Web.UI.Grid");
Type.registerNamespace("Telerik.Web.UI.Grid.Animation");
Telerik.Web.UI.Grid.Animation.getBoundingRectangle = function (a) {
  a = a.jquery ? a : $telerik.$(a);
  var b = a.offset();
  var c = {};
  c.left = c.x = b.left;
  c.width = a.outerWidth();
  c.top = c.y = b.top;
  c.height = a.outerHeight();
  return c;
};
Telerik.Web.UI.Grid.Animation.containsPoint = function (b, a) {
  if (typeof b.x === "undefined") {
    b.x = b.left;
  }
  if (typeof b.y === "undefined") {
    b.y = b.top;
  }
  if (typeof a.x === "undefined") {
    a.x = a.left;
  }
  if (typeof a.y === "undefined") {
    a.y = a.top;
  }
  return $telerik.containsPoint(b, a.x, a.y);
};
Telerik.Web.UI.Grid.Animation.trackElementRelativeMousePoint = function (b, a) {
  if (!a.pageX) {
    $telerik.$.event.fix(a);
  }
  b = b.jquery ? b : $telerik.$(b);
  var c = b.offset();
  Telerik.Web.UI.Grid.Animation._trackedElement = b;
  var d = (Telerik.Web.UI.Grid.Animation._trackedElementRelativeMousePoint = {});
  d.left = d.x = a.pageX - c.left;
  d.top = d.y = a.pageY - c.top;
};
Telerik.Web.UI.Grid.Animation.getTrackedPoint = function () {
  var c = Telerik.Web.UI.Grid.Animation.getElementRelativeTrackedPoint();
  if (!Telerik.Web.UI.Grid.Animation._trackedElement || !c) {
    return null;
  }
  var a = Telerik.Web.UI.Grid.Animation._trackedElement.offset();
  var b = {};
  b.left = b.x = a.left + c.left;
  b.top = b.y = a.top + c.top;
  return b;
};
Telerik.Web.UI.Grid.Animation.getElementRelativeTrackedPoint = function () {
  return Telerik.Web.UI.Grid.Animation._trackedElementRelativeMousePoint;
};
Telerik.Web.UI.Grid.Animation.clearElementRelativeMousePoint = function () {
  Telerik.Web.UI.Grid.Animation._trackedElement = null;
  Telerik.Web.UI.Grid.Animation._trackedElementRelativeMousePoint = null;
};
Type.registerNamespace("Telerik.Web.UI");
Telerik.Web.UI.GridColumnResizer = function (d, c, a) {
  Telerik.Web.UI.GridColumnResizer.initializeBase(this);
  this._column = d;
  this._isRealTimeResize = c;
  this._elementToAttachMove = a
    ? document
    : this._column._owner._owner.get_element();
  this._currentWidth = null;
  this._leftResizer = document.createElement("span");
  this._leftResizer.style.backgroundColor = "navy";
  this._leftResizer.style.width = "1px";
  this._leftResizer.style.position = "absolute";
  this._leftResizer.style.cursor = "e-resize";
  this._rightResizer = document.createElement("span");
  this._rightResizer.style.backgroundColor = "navy";
  this._rightResizer.style.width = "1px";
  this._rightResizer.style.position = "absolute";
  this._rightResizer.style.cursor = "e-resize";
  this._resizerToolTip = document.createElement("span");
  this._resizerToolTip.style.position = "absolute";
  this._resizerToolTip.style.zIndex = 10000;
  this._resizerToolTip.style.display =
    this._column._owner._owner.ClientSettings.ClientMessages
      .ColumnResizeTooltipFormatString == ""
      ? "none"
      : "";
  this._resizerToolTipFormatString = this._column._owner._owner.ClientSettings.ClientMessages.ColumnResizeTooltipFormatString;
  if (this._column._owner._owner.Skin != "") {
    this._resizerToolTip.className = String.format(
      "GridToolTip GridToolTip_{0}",
      this._column._owner._owner.Skin
    );
    this._leftResizer.className = String.format(
      "GridLeftResizer GridLeftResizer_{0}",
      this._column._owner._owner.Skin
    );
    this._rightResizer.className = String.format(
      "GridRightResizer GridRightResizer_{0}",
      this._column._owner._owner.Skin
    );
  }
  if (
    !this._column._owner._owner._embeddedSkin ||
    this._column._owner._owner.Skin == ""
  ) {
    this._resizerToolTip.style.backgroundColor = "#F5F5DC";
    this._resizerToolTip.style.border = "1px solid";
    this._resizerToolTip.style.font = "icon";
    this._resizerToolTip.style.padding = "2px";
  }
  var b = this._column.get_element().offsetWidth;
  this._resizerToolTip.innerHTML = this._applyTooltipText(b);
  document.body.appendChild(this._leftResizer);
  document.body.appendChild(this._rightResizer);
  document.body.appendChild(this._resizerToolTip);
  this._resizerToolTip.style.width =
    this._resizerToolTip.clientWidth +
    (parseInt(b, 10).toString().length >= 3 ? 0 : 10) +
    "px";
  this.CanDestroy = true;
  this._onMouseUpDelegate = $telerik.addMobileHandler(
    this,
    document,
    "mouseup",
    this._onMouseUpHandler,
    null,
    true
  );
  this._onMouseMoveDelegate = $telerik.addMobileHandler(
    this,
    this._elementToAttachMove,
    "mousemove",
    this._onMouseMoveHandler
  );
};
Telerik.Web.UI.GridColumnResizer.prototype = {
  dispose: function () {
    try {
      this._destroy();
    } catch (a) {}
    if (this._onMouseUpDelegate) {
      $telerik.removeMobileHandler(
        document,
        "mouseup",
        this._onMouseUpDelegate,
        null,
        true
      );
    }
    if (this._onMouseMoveDelegate) {
      $telerik.removeMobileHandler(
        this._elementToAttachMove,
        "mousemove",
        this._onMouseMoveDelegate
      );
    }
    this._leftResizer = null;
    this._rightResizer = null;
    this._resizerToolTip = null;
    this._elementToAttachMove = null;
  },
  _position: function (c) {
    this._leftResizer.style.top =
      Telerik.Web.UI.Grid.FindPosY(this._column.get_element()) + "px";
    this._leftResizer.style.left =
      Telerik.Web.UI.Grid.FindPosX(this._column.get_element()) + "px";
    this._rightResizer.style.top = this._leftResizer.style.top;
    this._rightResizer.style.left =
      parseInt(this._leftResizer.style.left, 10) +
      this._column.get_element().offsetWidth +
      "px";
    var h =
      parseInt(this._rightResizer.style.top, 10) -
      this._resizerToolTip.offsetHeight -
      2;
    if (h < 0) {
      h +=
        this._resizerToolTip.offsetHeight +
        this._column.get_element().offsetHeight +
        2;
    }
    this._resizerToolTip.style.top = h + "px";
    var g = parseInt(this._rightResizer.style.left, 10) - 5;
    this._resizerToolTip.style.left = g + "px";
    if (
      $telerik.elementOverflowsRight(
        $telerik.getViewPortSize(),
        this._resizerToolTip
      )
    ) {
      this._resizerToolTip.style.left =
        g - this._resizerToolTip.offsetWidth + "px";
    }
    if (
      parseInt(this._leftResizer.style.left, 10) <
      Telerik.Web.UI.Grid.FindPosX(this._column._owner.get_element())
    ) {
      this._leftResizer.style.display = "none";
    }
    var a = this._column,
      j = a._owner,
      d = j._owner,
      i = d.ClientSettings.Scrolling,
      f = j._hasMultiHeaders
        ? a.get_element().offsetHeight
        : j.get_element().tHead.offsetHeight;
    if (!i.AllowScroll) {
      this._leftResizer.style.height =
        j.get_element().tBodies[0].offsetHeight + f + "px";
    } else {
      if (i.UseStaticHeaders) {
        this._leftResizer.style.height = d._gridDataDiv.clientHeight + f + "px";
      } else {
        var b = d._gridDataDiv.clientHeight;
        if (j._hasMultiHeaders) {
          b =
            b -
            j.get_element().tHead.offsetHeight +
            a.get_element().offsetHeight;
        }
        this._leftResizer.style.height = b + "px";
      }
    }
    this._rightResizer.style.height = this._leftResizer.style.height;
  },
  _onMouseUpHandler: function (a) {
    this._destroy(a);
  },
  _onMouseMoveHandler: function (a) {
    if ($telerik.isTouchDevice) {
      a.preventDefault();
    }
    this._move(a);
  },
  _destroy: function (c) {
    if (this.CanDestroy) {
      if (this._onMouseUpDelegate) {
        $telerik.removeMobileHandler(
          document,
          "mouseup",
          this._onMouseUpDelegate,
          null,
          true
        );
        this._onMouseUpDelegate = null;
      }
      if (this._onMouseMoveDelegate) {
        $telerik.removeMobileHandler(
          this._elementToAttachMove,
          "mousemove",
          this._onMouseMoveDelegate
        );
        this._onMouseMoveDelegate = null;
        this._elementToAttachMove = null;
      }
      if (this._currentWidth != null) {
        var b = 0;
        if (this._currentWidth > 0) {
          var a = this._column;
          var f = a._owner;
          if (f._hasMultiHeaders) {
            b = Array.indexOf(f.get_columns(), a);
          } else {
            b = a.get_element().cellIndex;
          }
          f.resizeColumn(b, this._currentWidth);
          this._currentWidth = null;
        }
      }
      var d = this._column._owner._owner;
      d._isResize = null;
      d.updateClientState();
      document.body.removeChild(this._leftResizer);
      document.body.removeChild(this._rightResizer);
      document.body.removeChild(this._resizerToolTip);
      this.CanDestroy = false;
    }
  },
  _move: function (d) {
    var h = Telerik.Web.UI.Grid.FindPosX(this._column.get_element());
    this._leftResizer.style.left = h + "px";
    this._rightResizer.style.left =
      parseInt(this._leftResizer.style.left, 10) +
      (Telerik.Web.UI.Grid.GetEventPosX(d) - h) +
      "px";
    var j = parseInt(this._rightResizer.style.left, 10) - 5;
    this._resizerToolTip.style.left = j + "px";
    if (
      $telerik.elementOverflowsRight(
        $telerik.getViewPortSize(),
        this._resizerToolTip
      )
    ) {
      this._resizerToolTip.style.left =
        j - this._resizerToolTip.offsetWidth + "px";
    }
    var m =
      parseInt(this._rightResizer.style.left, 10) -
      parseInt(this._leftResizer.style.left, 10);
    var i = this._resizerToolTip.offsetHeight;
    this._resizerToolTip.innerHTML = this._applyTooltipText(m);
    if (this._resizerToolTip.offsetHeight > i) {
      this._resizerToolTip.style.width =
        parseInt(this._resizerToolTip.style.width, 10) + 10 + "px";
    }
    if (
      !Telerik.Web.UI.Grid.FireEvent(this._column._owner, "OnColumnResizing", [
        this._column.Index,
        m,
      ])
    ) {
      return;
    }
    this._currentWidth = m;
    if (this._isRealTimeResize) {
      var b =
        navigator.userAgent.indexOf("Safari") != -1 ||
        this._column._owner._hasMultiHeaders
          ? Telerik.Web.UI.Grid.GetRealCellIndex(
              this._column._owner,
              this._column.get_element()
            )
          : this._column.get_element().cellIndex;
      this._column._owner.resizeColumn(b, m);
    } else {
      this._currentWidth = m;
      return;
    }
    this._leftResizer.style.left = h + "px";
    this._rightResizer.style.left =
      h + this._column.get_element().offsetWidth + "px";
    if (
      Telerik.Web.UI.Grid.FindPosY(this._leftResizer) !=
      Telerik.Web.UI.Grid.FindPosY(this._column.get_element())
    ) {
      this._leftResizer.style.top =
        Telerik.Web.UI.Grid.FindPosY(this._column.get_element()) + "px";
      this._rightResizer.style.top =
        Telerik.Web.UI.Grid.FindPosY(this._column.get_element()) + "px";
    }
    var a = this._column,
      l = a._owner,
      f = l._owner,
      k = f.ClientSettings.Scrolling,
      g = l._hasMultiHeaders
        ? a.get_element().offsetHeight
        : l.get_element().tHead.offsetHeight;
    if (!k.AllowScroll) {
      this._leftResizer.style.height =
        l.get_element().tBodies[0].offsetHeight + g + "px";
    } else {
      if (k.UseStaticHeaders) {
        this._leftResizer.style.height = f._gridDataDiv.clientHeight + g + "px";
      } else {
        var c = f._gridDataDiv.clientHeight;
        if (l._hasMultiHeaders) {
          c =
            c -
            l.get_element().tHead.offsetHeight +
            a.get_element().offsetHeight;
        }
        this._leftResizer.style.height = c + "px";
      }
    }
    this._rightResizer.style.height = this._leftResizer.style.height;
  },
  _applyTooltipText: function (b) {
    var a = /\{0[^\}]*\}/g;
    return this._resizerToolTipFormatString.replace(a, b);
  },
};
Telerik.Web.UI.GridColumnResizer.registerClass(
  "Telerik.Web.UI.GridColumnResizer",
  null,
  Sys.IDisposable
);
Type.registerNamespace("Telerik.Web.UI");
Type.registerNamespace("Telerik.Web.UI.Grid");
Telerik.Web.UI.Grid._uniqueIDToClientID = function (a) {
  return a.replace(/[$:]/g, "_");
};
Telerik.Web.UI.Grid.getTableHeaderRow = function (c) {
  var a = null;
  if (c.tHead && c.tHead.style.display != "none") {
    for (var b = 0; b < c.tHead.rows.length; b++) {
      if (c.tHead.rows[b] != null) {
        if (c.tHead.rows[b].cells[0] != null) {
          if (c.tHead.rows[b].cells[0].tagName != null) {
            if (c.tHead.rows[b].cells[0].tagName.toLowerCase() == "th") {
              a = c.tHead.rows[b];
              break;
            }
          }
        }
      }
    }
  }
  return a;
};
Telerik.Web.UI.Grid.ShowContextMenu = function (f, a, c) {
  var b = f.get_columns();
  for (var d = 0; d < b.length; d++) {
    if (b[d].get_uniqueName() == a) {
      b[d].showHeaderMenu(c, 75, 20);
    }
  }
};
Telerik.Web.UI.Grid.FilterSearch = function (c, e) {
  var b = $find(c._filterCheckListClientID);
  var a = b.get_items()._array;
  for (var d = 0; d < a.length; d++) {
    a[d].set_visible(
      a[d].get_text().toLowerCase().indexOf(e.value.toLowerCase()) >= 0
    );
  }
};
Telerik.Web.UI.Grid.hasEventAttached = function (b, c, d) {
  if (typeof b._events !== "object" || b._events == null) {
    return false;
  }
  var a = b._events[c];
  if (!(a instanceof Array)) {
    return false;
  }
  for (var e = 0, f = a.length; e < f; e++) {
    if (a[e].handler === d) {
      return true;
    }
  }
  return false;
};
Telerik.Web.UI.Grid.ChangePageSize = function (c, b) {
  if (c && c.PageSize != b) {
    var a = c._raiseAction("PageSize", { newPageSize: parseInt(b, 10) });
    if (!a.get_cancel()) {
      c.set_pageSize(a.get_newPageSize());
    }
  }
};
Telerik.Web.UI.Grid.SeoChangePageUrl = function (e, c, h, k) {
  var n = window.location.href;
  var m = k == c ? h : String.format("{0}_{1}", h, k);
  var d = false;
  var b;
  var a;
  var l;
  if (n.indexOf("?") == -1) {
    window.location.href += String.format("?{0}={1}", e, m);
    return false;
  }
  a = n.split("?");
  b = a[0];
  l = a[1].split("&");
  for (var f = 0, g = l.length; f < g; f++) {
    if (l[f].indexOf(e) != -1) {
      l[f] = String.format("{0}={1}", e, m);
      d = true;
      break;
    }
  }
  if (!d) {
    l.push(String.format("{0}={1}", e, m));
  }
  window.location.href = String.format("{0}?{1}", b, l.join("&"));
};
Telerik.Web.UI.Grid.ChangePageIndexButtonClickHandler = function (b, a, c, h) {
  var d = $find(h);
  var g = d.get_pageSize();
  var f = $find(c);
  var e;
  if (!f) {
    return false;
  }
  e = f.get_value();
  Telerik.Web.UI.Grid.SeoChangePageUrl(b, a, e, g);
};
Telerik.Web.UI.Grid.ChangePageSizeButtonClickHandler = function (b, a, c, h) {
  var d = $find(h);
  var e = d.get_currentPageIndex() + 1;
  var g = $find(c);
  var f;
  if (!g) {
    return false;
  }
  f = g.get_value();
  Telerik.Web.UI.Grid.SeoChangePageUrl(b, a, e, f);
};
Telerik.Web.UI.Grid.ChangingPageSizeComboHandler = function (f, b) {
  var c;
  if (b.get_item) {
    c = b.get_item();
  } else {
    if (b.get_index) {
      c = f.get_items().getItem(b.get_index());
    }
  }
  if (c) {
    var e = c.get_attributes().getAttribute("ownerTableViewId");
    var d = null;
    if (c.get_value()) {
      d = c.get_value();
    } else {
      d = c.get_text();
    }
    if (e && d) {
      var g = $find(e);
      if (g && g.PageSize != d) {
        var a = g._raiseAction("PageSize", { newPageSize: parseInt(d, 10) });
        if (a.get_cancel()) {
          b.set_cancel(true);
        }
      }
    }
  }
};
Telerik.Web.UI.Grid.ChangePageSizeComboHandler = function (e, a) {
  var b;
  if (a.get_item) {
    b = a.get_item();
  } else {
    if (a.get_index) {
      b = e.get_items().getItem(a.get_index());
    }
  }
  if (b) {
    var d = b.get_attributes().getAttribute("ownerTableViewId");
    var c = null;
    if (e.get_value) {
      if (e.get_value()) {
        c = e.get_value();
      } else {
        c = e.get_text();
      }
    } else {
      if (b.get_value()) {
        c = b.get_value();
      } else {
        c = b.get_text();
      }
    }
    if (d && c) {
      var h = parseInt(c, 10);
      var g = $find(d);
      if (g) {
        var f = b.get_attributes().getAttribute("seoRedirectUrl");
        if (f) {
          window.location.href = f;
          return false;
        }
        g.set_pageSize(h);
      }
    }
  }
};
Telerik.Web.UI.Grid.Sort = function (c, b) {
  var a = c._raiseAction("Sort", { sortExpression: b });
  if (!a.get_cancel()) {
    b = a.get_sortExpression();
    c.sort(b);
  }
};
Telerik.Web.UI.Grid.GetRealCellIndex = function (c, a) {
  for (var b = 0; b < c.get_columns().length; b++) {
    if (c.get_columns()[b].get_element() == a) {
      return b;
    }
  }
};
Telerik.Web.UI.Grid.CopyAttributes = function (d, c) {
  for (var b = 0; b < c.attributes.length; b++) {
    try {
      if (c.attributes[b].name.toLowerCase() == "id") {
        continue;
      }
      if (
        c.attributes[b].value != null &&
        c.attributes[b].value != "null" &&
        c.attributes[b].value != ""
      ) {
        d.setAttribute(c.attributes[b].name, c.attributes[b].value);
      }
    } catch (a) {
      continue;
    }
  }
};
Telerik.Web.UI.Grid.PositionDragElement = function (c, d) {
  var a = $telerik.isTouchDevice
    ? $telerik.getTouchEventLocation(d).x
    : d.clientX;
  var b = $telerik.isTouchDevice
    ? $telerik.getTouchEventLocation(d).y
    : d.clientY;
  c.style.top = b + $telerik.getDocumentElementScrollTop() + 10 + "px";
  c.style.left = a + $telerik.getDocumentElementScrollLeft() + 10 + "px";
  if ($telerik.isOpera || $telerik.isTouchDevice) {
    c.style.top = parseInt(c.style.top, 10) - document.body.scrollTop + "px";
  }
};
Telerik.Web.UI.Grid.ClearDocumentEvents = function (a) {
  if (!a) {
    if (document.onmousedown != this.mouseDownHandler) {
      this.documentOnMouseDown = document.onmousedown;
    }
    this.mouseDownHandler = function (b) {
      return false;
    };
    document.onmousedown = this.mouseDownHandler;
  }
  if (document.onselectstart != this.selectStartHandler) {
    this.documentOnSelectStart = document.onselectstart;
  }
  if (document.ondragstart != this.dragStartHandler) {
    this.documentOnDragStart = document.ondragstart;
  }
  this.selectStartHandler = function () {
    return false;
  };
  this.dragStartHandler = function () {
    return false;
  };
  document.onselectstart = this.selectStartHandler;
  document.ondragstart = this.dragStartHandler;
};
Telerik.Web.UI.Grid.RestoreDocumentEvents = function () {
  if (
    typeof this.documentOnMouseDown == "function" &&
    document.onmousedown != this.mouseDownHandler
  ) {
    document.onmousedown = this.documentOnMouseDown;
  } else {
    document.onmousedown = "";
  }
  if (
    typeof this.documentOnSelectStart == "function" &&
    document.onselectstart != this.selectStartHandler
  ) {
    document.onselectstart = this.documentOnSelectStart;
  } else {
    document.onselectstart = "";
  }
  if (
    typeof this.documentOnDragStart == "function" &&
    document.ondragstart != this.dragStartHandler
  ) {
    document.ondragstart = this.documentOnDragStart;
  } else {
    document.ondragstart = "";
  }
};
Telerik.Web.UI.Grid.IsChildOf = function (a, b) {
  if (!a) {
    return false;
  }
  while (a.parentNode) {
    if (a.parentNode == b) {
      return true;
    }
    a = a.parentNode;
  }
  return false;
};
Telerik.Web.UI.Grid.GetCurrentElement = function (b) {
  if (!b) {
    b = window.event;
  }
  var a;
  if (b.srcElement) {
    a = b.srcElement;
  } else {
    a = b.target;
  }
  return Telerik.Web.UI.Grid.IsDomElement(a) ? a : null;
};
Telerik.Web.UI.Grid.IsDomElement = function (a) {
  var b = typeof HTMLElement === "object";
  if (b) {
    return a instanceof HTMLElement;
  } else {
    return (
      a &&
      typeof a === "object" &&
      a.nodeType === 1 &&
      typeof a.nodeName === "string"
    );
  }
  return false;
};
Telerik.Web.UI.Grid.GetNonOverflowingCoordinates = function (f, e, a) {
  var b = a(window);
  var n = { width: b.width(), height: b.height() };
  var h = $telerik.getBounds(f);
  var g = a(f).offset();
  var c = g.left;
  var d = g.top;
  var i = b.scrollLeft();
  var o = b.scrollTop();
  var j = d + h.height > n.height + o;
  var m = d < o;
  var l = c + h.width > n.width + i;
  var k = c < i;
  if (!j && !m && !l && !k) {
    return { x: c, y: d };
  }
  switch (e) {
    case 0:
      c = n.width / 2 + i - f.offsetWidth / 2;
      d = n.height / 2 + o - f.offsetHeight / 2;
      break;
    case 1:
      c = n.width + i - f.offsetWidth;
      d = n.height + o - f.offsetHeight;
      break;
    case 2:
      c = i;
      d = n.height + o - f.offsetHeight;
      break;
    case 3:
      c = n.width + i - f.offsetWidth;
      d = o;
      break;
    case 4:
      c = i;
      d = o;
      break;
  }
  return { x: c, y: d };
};
Telerik.Web.UI.Grid.GetCurrentTouchElement = function (a) {
  if ($telerik.isTouchDevice) {
    var b = $telerik.getTouchTarget(a);
    return b;
  }
};
Telerik.Web.UI.Grid.CreateReorderIndicators = function (c, i, h, a, g) {
  var f = $find(g);
  var d = 0;
  var e = 0;
  if (this.ReorderIndicator1 == null && this.ReorderIndicator2 == null) {
    this.ReorderIndicator1 = document.createElement("span");
    this.ReorderIndicator2 = document.createElement("span");
    var j;
    var b;
    if (h != "") {
      j = new Image();
      j.src = h + "MoveDown.gif";
      b = new Image();
      b.src = h + "MoveUp.gif";
      this.ReorderIndicator1.innerHTML =
        '<img src="' + h + 'MoveDown.gif" alt="reorder indicator" />';
      this.ReorderIndicator2.innerHTML =
        '<img src="' + h + 'MoveUp.gif" alt="reorder indicator" />';
      this.ReorderIndicator1.className = "GridReorderTopImage_" + i;
      this.ReorderIndicator2.className = "GridReorderBottomImage_" + i;
    } else {
      if (i == "") {
        this.ReorderIndicator1.innerHTML = "&darr;";
        this.ReorderIndicator2.innerHTML = "&uarr;";
      } else {
        this.ReorderIndicator1.className = "GridReorderTop GridReorderTop_" + i;
        this.ReorderIndicator2.className =
          "GridReorderBottom GridReorderBottom_" + i;
      }
    }
    if (f._renderMode != Telerik.Web.UI.RenderMode.Lite) {
      this.ReorderIndicator1.style.backgroundColor = "transparent";
      this.ReorderIndicator1.style.color = "darkblue";
      this.ReorderIndicator1.style.fontSize = "1px";
      this.ReorderIndicator2.style.backgroundColor = this.ReorderIndicator1.style.backgroundColor;
      this.ReorderIndicator2.style.color = this.ReorderIndicator1.style.color;
      this.ReorderIndicator2.style.fontSize = this.ReorderIndicator1.style.fontSize;
    }
    if (a && c.nodeName == "TH" && f && f.GridDataDiv) {
      d = f.GridDataDiv.scrollLeft;
      if (!f.ClientSettings.Scrolling.UseStaticHeaders) {
        e = f.GridDataDiv.scrollTop;
      }
    }
    this.ReorderIndicator1.style.top =
      Telerik.Web.UI.Grid.FindPosY(c) -
      this.ReorderIndicator1.offsetHeight +
      "px";
    this.ReorderIndicator1.style.left = Telerik.Web.UI.Grid.FindPosX(c) + "px";
    this.ReorderIndicator2.style.top =
      Telerik.Web.UI.Grid.FindPosY(c) + c.offsetHeight + "px";
    this.ReorderIndicator2.style.left = this.ReorderIndicator1.style.left;
    this.ReorderIndicator1.style.visibility = "hidden";
    this.ReorderIndicator1.style.display = "none";
    this.ReorderIndicator1.style.position = "absolute";
    this.ReorderIndicator2.style.visibility = this.ReorderIndicator1.style.visibility;
    this.ReorderIndicator2.style.display = this.ReorderIndicator1.style.display;
    this.ReorderIndicator2.style.position = this.ReorderIndicator1.style.position;
    document.body.appendChild(this.ReorderIndicator1);
    document.body.appendChild(this.ReorderIndicator2);
    if (h != "") {
      this.ReorderIndicator1.style.marginLeft =
        -parseInt(j.width / 2, 10) + "px";
      this.ReorderIndicator2.style.marginLeft =
        -parseInt(b.width / 2, 10) + "px";
      j = null;
      b = null;
    }
  }
};
Telerik.Web.UI.Grid.NavigateToPage = function (f, b) {
  var e = $find(f),
    a;
  if (e) {
    var d = e.get_currentPageIndex();
    var c = d;
    if (b == "Next") {
      c++;
    } else {
      if (b == "Prev") {
        c--;
      } else {
        if (b == "First") {
          c = 0;
        } else {
          if (b == "Last") {
            c = e.get_pageCount() - 1;
          } else {
            c = parseInt(b, 10) - 1;
          }
        }
      }
    }
    if (c < 0 || c > e.get_pageCount() - 1) {
      return false;
    }
    a = e._raiseAction("Page", { newPageIndex: c });
    if (!a.get_cancel()) {
      c = a.get_newPageIndex();
      e.page(c + 1);
    }
  }
};
Telerik.Web.UI.Grid.DestroyReorderIndicators = function () {
  if (this.ReorderIndicator1 != null && this.ReorderIndicator2 != null) {
    document.body.removeChild(this.ReorderIndicator1);
    document.body.removeChild(this.ReorderIndicator2);
    this.ReorderIndicator1 = null;
    this.ReorderIndicator2 = null;
  }
};
Telerik.Web.UI.Grid.MoveReorderIndicators = function (f, b, a, h) {
  if (this.ReorderIndicator1 != null && this.ReorderIndicator2 != null) {
    this.ReorderIndicator1.style.visibility = "visible";
    this.ReorderIndicator1.style.display = "";
    this.ReorderIndicator2.style.visibility = "visible";
    this.ReorderIndicator2.style.display = "";
    var g = $find(h);
    var c = 0;
    var d = 0;
    if (a && b.nodeName == "TH" && g && g.GridDataDiv) {
      c = g.GridDataDiv.scrollLeft;
      if (!g.ClientSettings.Scrolling.UseStaticHeaders) {
        d = g.GridDataDiv.scrollTop;
      }
    }
    var i = 0;
    if (
      a &&
      b.nodeName == "TH" &&
      g &&
      this._columnInitiatorIndex != null &&
      this._columnOverIndex != null &&
      this._columnInitiatorIndex < this._columnOverIndex
    ) {
      i = b.offsetWidth;
    }
    this.ReorderIndicator1.style.top =
      Telerik.Web.UI.Grid.FindPosY(b) -
      this.ReorderIndicator1.offsetHeight +
      "px";
    this.ReorderIndicator1.style.left =
      Telerik.Web.UI.Grid.FindPosX(b) + i + "px";
    this.ReorderIndicator2.style.top =
      Telerik.Web.UI.Grid.FindPosY(b) + b.offsetHeight + "px";
    this.ReorderIndicator2.style.left = this.ReorderIndicator1.style.left;
  }
};
Telerik.Web.UI.Grid.getVisibleCols = function (a) {
  var b = 0;
  for (var c = 0, d = a.length; c < d; c++) {
    if (a[c].style.display == "none") {
      continue;
    }
    b++;
  }
  return b;
};
Telerik.Web.UI.Grid.isDetailTable = function (b) {
  var a = new RegExp(b.get_owner().get_id() + ".+Detail.+");
  return a.test(b.get_id());
};
Telerik.Web.UI.Grid.hideShowCells = function (C, p, g, d, B) {
  var E = Telerik.Web.UI.Grid.getVisibleCols(d);
  var D = $find(C.id);
  var h = D._owner;
  var n = D._hasMultiHeaders;
  var v = [];
  var A = false;
  var z = h.ClientSettings.Scrolling;
  var s = z && z.AllowScroll && z.UseStaticHeaders;
  var f = D.get_columns()[p];
  var q = Telerik.Web.UI.Grid.isDetailTable(D);
  if (
    n &&
    ((s && C.id.indexOf("Header") > -1) ||
      (!s && D.get_owner().get_masterTableView().get_id() == C.id) ||
      q)
  ) {
    v = Telerik.Web.UI.Grid.getMultiHeaderCells(D);
  }
  var o, u, t;
  var y = C.rows;
  var c = 0;
  for (o = 0, u = y.length; o < u; o++) {
    var a = null;
    var r =
      n &&
      !!y[o].className &&
      C.rows[o].className.indexOf("rgMultiHeaderRow") > -1;
    if (r && A) {
      continue;
    }
    if (
      s &&
      h._renderMode == Telerik.Web.UI.RenderMode.Lite &&
      y[o].className.indexOf("rgGroupHeader") !== -1
    ) {
      for (t = 0; t < y[o].cells.length; t++) {
        if (y[o].cells[t].className.indexOf("rgGroupCol") !== -1) {
          c++;
        }
      }
      y[o].cells[y[o].cells.length - 1].colSpan = E - c || 1;
      c = 0;
    }
    if (y[o].cells.length == 1 && y[o].cells.length != E) {
      y[o].cells[0].colSpan = E || 1;
    } else {
      for (t = 0; t < y[o].cells.length; t++) {
        a = y[o].cells[t];
        if (Telerik.Web.UI.Grid._trySetColSpanOnDetailTable(a)) {
          break;
        }
        var b = a.colSpan;
        if (
          !n &&
          !B &&
          y[o].cells.length != E &&
          ((b > 1 && t + b >= p) ||
            (a.parentNode.className.indexOf("rgGroupHeader") != -1 &&
              a.className.indexOf("rgGroupCol") == -1))
        ) {
          if (f && f._data.ColumnType === "GridGroupSplitterColumn") {
            var k = y[o].cells[f.get_element().cellIndex];
            if (k && k.className.indexOf("rgGroupCol") !== -1) {
              break;
            }
          }
          if (!g) {
            var e = y[o].cells[t].colSpan - 1;
            if (e <= 0) {
              e = 1;
            }
            y[o].cells[t].colSpan = e;
          } else {
            y[o].cells[t].colSpan = y[o].cells[t].colSpan + 1;
          }
          break;
        }
      }
    }
    a = r ? v[p] : y[o].cells[p];
    if (a != null && a.colSpan == 1) {
      if (
        !(
          a.children.length > 0 &&
          a.children[0].tagName.toUpperCase() == "TABLE" &&
          a.children[0].className.indexOf("rgDetailTable") > -1
        )
      ) {
        if (a.style.display == "none" && g) {
          a.style.display = window.netscape ? "table-cell" : "";
        }
        if ((a.style.display == "" || a.style.display == "table-cell") && !g) {
          a.style.display = "none";
        }
        if (D._owner.get_enableAriaSupport()) {
          a.setAttribute("aria-hidden", (a.style.display == "none").toString());
        }
      }
      if (n && !A) {
        var x = a.parentCell;
        A = true;
        while (x) {
          if (a.style.display == "none") {
            var w = x.colSpan - 1;
            if (w == 0) {
              x.style.display = "none";
            } else {
              x.colSpan = w;
            }
          } else {
            if (x.style.display == "none") {
              x.style.display = "";
            } else {
              x.colSpan++;
            }
          }
          x = x.parentCell;
        }
      }
    }
  }
  if (h._renderMode == Telerik.Web.UI.RenderMode.Mobile && s && h._groupPanel) {
    var m = h._groupPanel.children[0];
    m.colSpan = Telerik.Web.UI.Grid.getVisibleCols(d);
  }
  if (s) {
    if ($telerik.isFirefox || $telerik.isIE9Mode) {
      C.style.tableLayout = "auto";
      setTimeout(function () {
        C.style.tableLayout = "fixed";
      }, 0);
    }
  }
  Telerik.Web.UI.Grid.calculateRowSpan(C, g, s, n, v, p);
};
Telerik.Web.UI.Grid.calculateRowSpan = function (u, d, n, e, q, l) {
  var t = u.parentNode;
  if (n && t && t.id && t.id.indexOf("GridHeader") == -1) {
    return;
  }
  if (e) {
    var f = u.tHead.rows;
    var g = 0;
    var h, b, a, k, o, p;
    for (k = 0; k < f.length; k++) {
      h = f[k];
      b = h.cells;
      var m = true;
      for (o = 0; o < b.length; o++) {
        a = b[o];
        m = m && a.style.display == "none";
      }
      if (m || h.className.indexOf("rgFilterRow") > -1) {
        g++;
      }
    }
    for (k = 0, p = f.length; k < p; k++) {
      h = f[k];
      b = h.cells;
      var s = p - k;
      for (o = 0; o < b.length; o++) {
        a = b[o];
        if (a.id && a.id.indexOf("MultiHeader") > -1) {
          var r = s - g;
          a.rowSpan = r > 0 ? r : 1;
        }
      }
      if (k == f.length - 1 - g) {
        break;
      }
    }
  }
};
Telerik.Web.UI.Grid._trySetColSpanOnDetailTable = function (a) {
  var c = $telerik.getFirstChildByTagName(a, "table", 0);
  var d;
  if (c) {
    d = $find(c.id);
  }
  if (d) {
    var b = d.get_parentView()._getVisibleColumnsCount();
    a.colSpan = b;
    return true;
  }
  return false;
};
Telerik.Web.UI.Grid._hideShowSelect = function (c, a) {
  if (!c) {
    return;
  }
  var d = c.getElementsByTagName("select");
  for (var b = 0; b < d.length; b++) {
    d[b].style.display = a ? "" : "none";
  }
};
Telerik.Web.UI.Grid.FindPosX = function (a) {
  return Telerik.Web.UI.Grid.GetLocation(a).x;
};
Telerik.Web.UI.Grid.FindPosY = function (a) {
  return Telerik.Web.UI.Grid.GetLocation(a).y;
};
Telerik.Web.UI.Grid.CreateDragDrop = function (c, b, a) {
  if (a) {
    var d = b.get_element().parentNode;
    this._columnInitiatorIndex = b
      .get_owner()
      ._getCellIndexByColumnUniqueNameFromTableRowElement(
        d,
        b.get_element().UniqueName
      );
  }
  if (b._owner._owner._renderMode != Telerik.Web.UI.RenderMode.Mobile) {
    Telerik.Web.UI.Grid.CreateReorderIndicators(
      b.get_element(),
      b._owner._owner.Skin,
      b._owner._owner._imagesPath,
      a,
      b._owner._owner.get_id()
    );
  }
  this._moveHeaderDiv = document.createElement("div");
  var f = document.createElement("table");
  if (this._moveHeaderDiv.mergeAttributes) {
    this._moveHeaderDiv.mergeAttributes(b._owner._owner.get_element());
  } else {
    Telerik.Web.UI.Grid.CopyAttributes(this._moveHeaderDiv, b.get_element());
  }
  this._moveHeaderDiv.style.margin = 0;
  if (f.mergeAttributes) {
    f.mergeAttributes(b._owner.get_element());
  } else {
    Telerik.Web.UI.Grid.CopyAttributes(f, b._owner.get_element());
  }
  f.style.margin = "0px";
  f.style.height = b.get_element().offsetHeight + "px";
  f.style.width = b.get_element().offsetWidth + "px";
  f.style.border = "0px";
  f.style.borderCollapse = "collapse";
  f.style.padding = "0px";
  var g = document.createElement("thead");
  var h = document.createElement("tr");
  f.appendChild(g);
  g.appendChild(h);
  h.appendChild(b.get_element().cloneNode(true));
  this._moveHeaderDiv.appendChild(f);
  if (!$telerik.isIE) {
    this._moveHeaderDiv.className +=
      " " + b._owner._owner.get_element().className;
  }
  if (b._owner._owner.get_enableAriaSupport()) {
    this._moveHeaderDiv.removeAttribute("aria-dropeffect");
    this._moveHeaderDiv.setAttribute("aria-grabbed", "true");
  }
  document.body.appendChild(this._moveHeaderDiv);
  this._moveHeaderDiv.style.height = f.style.height;
  this._moveHeaderDiv.style.width = f.style.width;
  this._moveHeaderDiv.style.position = "absolute";
  this._moveHeaderDiv.style.cursor = "move";
  this._moveHeaderDiv.style.display = "none";
  this._moveHeaderDiv.UniqueName = b.get_element().UniqueName;
  Telerik.Web.UI.Grid.ClearDocumentEvents();
};
Telerik.Web.UI.Grid.MoveDragDrop = function (g, b, a) {
  if (this._moveHeaderDiv != null) {
    if (typeof this._moveHeaderDiv.style.filter != "undefined") {
      this._moveHeaderDiv.style.filter = "alpha(opacity=80);";
    } else {
      if (typeof this._moveHeaderDiv.style.MozOpacity != "undefined") {
        this._moveHeaderDiv.style.MozOpacity = 0.8;
      } else {
        if (typeof this._moveHeaderDiv.style.opacity != "undefined") {
          this._moveHeaderDiv.style.opacity = 0.8;
        }
      }
    }
    this._moveHeaderDiv.style.visibility = "";
    this._moveHeaderDiv.style.display = "";
    Telerik.Web.UI.Grid.PositionDragElement(this._moveHeaderDiv, g);
    var d;
    if ($telerik.isTouchDevice) {
      d = $telerik.getTouchTarget(g);
    } else {
      d = Telerik.Web.UI.Grid.GetCurrentElement(g);
    }
    if (b._owner._owner._renderMode != Telerik.Web.UI.RenderMode.Mobile) {
      if (d != null) {
        if (a && d.tagName.toLowerCase() == "th") {
          this._columnOverIndex = b
            .get_owner()
            ._getCellIndexByColumnUniqueNameFromTableRowElement(
              d.parentNode,
              d.UniqueName
            );
        } else {
          if (
            a &&
            d.parentNode &&
            d.parentNode.tagName &&
            d.parentNode.tagName.toLowerCase() == "th"
          ) {
            this._columnOverIndex = b
              .get_owner()
              ._getCellIndexByColumnUniqueNameFromTableRowElement(
                d.parentNode.parentNode,
                d.parentNode.UniqueName
              );
            d = d.parentNode;
          }
        }
        var j = b._owner._owner._groupPanel
          ? b._owner._owner._groupPanel.get_element()
          : null;
        if (
          Telerik.Web.UI.Grid.IsChildOf(d, b._owner.get_element()) ||
          (b._owner._owner.ClientSettings.AllowDragToGroup &&
            b._owner._owner._groupPanel &&
            (Telerik.Web.UI.Grid.IsChildOf(d, j) ||
              (($telerik.isTouchDevice ||
                b._owner._owner._renderMode ==
                  Telerik.Web.UI.RenderMode.Lite) &&
                d == j)))
        ) {
          if (
            d != b.get_element() &&
            d.parentNode == b.get_element().parentNode
          ) {
            if (!b._hierarchicalIndex) {
              var c = b._owner.getColumnByUniqueName(d.UniqueName);
              var l = true;
              if (b._owner._hasMultiHeaders) {
                l =
                  !!b &&
                  !!c &&
                  b.get_columnGroupName() == c.get_columnGroupName();
              }
              if (
                c &&
                c._data.Reorderable &&
                c._owner._owner.ClientSettings.AllowColumnsReorder &&
                l
              ) {
                d.title =
                  b._owner._owner.ClientSettings.ClientMessages.DropHereToReorder;
                Telerik.Web.UI.Grid.MoveReorderIndicators(
                  g,
                  d,
                  a,
                  b._owner._owner.get_id()
                );
              }
            } else {
              if (
                b._owner._owner._renderMode == Telerik.Web.UI.RenderMode.Lite
              ) {
                var n = d.parentNode.getElementsByTagName("span");
                if (n && d != n[n.length - 1]) {
                  d.title =
                    b._owner._owner.ClientSettings.ClientMessages.DropHereToReorder;
                  Telerik.Web.UI.Grid.MoveReorderIndicators(
                    g,
                    d,
                    a,
                    b._owner._owner.get_id()
                  );
                }
              } else {
                if (
                  d.parentNode.cells &&
                  d != d.parentNode.cells[d.parentNode.cells.length - 1]
                ) {
                  d.title =
                    b._owner._owner.ClientSettings.ClientMessages.DropHereToReorder;
                  Telerik.Web.UI.Grid.MoveReorderIndicators(
                    g,
                    d,
                    a,
                    b._owner._owner.get_id()
                  );
                }
              }
            }
          } else {
            if (
              b._owner._owner.ClientSettings.AllowDragToGroup &&
              b._owner._owner._groupPanel &&
              (Telerik.Web.UI.Grid.IsChildOf(d, j) ||
                (($telerik.isTouchDevice ||
                  b._owner._owner._renderMode ==
                    Telerik.Web.UI.RenderMode.Lite) &&
                  d == j))
            ) {
              Telerik.Web.UI.Grid.MoveReorderIndicators(
                g,
                j,
                a,
                b._owner._owner.get_id()
              );
            } else {
              Telerik.Web.UI.Grid.ReorderIndicator1.style.visibility = "hidden";
              Telerik.Web.UI.Grid.ReorderIndicator1.style.display = "none";
              Telerik.Web.UI.Grid.ReorderIndicator1.style.position = "absolute";
              Telerik.Web.UI.Grid.ReorderIndicator2.style.visibility =
                Telerik.Web.UI.Grid.ReorderIndicator1.style.visibility;
              Telerik.Web.UI.Grid.ReorderIndicator2.style.display =
                Telerik.Web.UI.Grid.ReorderIndicator1.style.display;
              Telerik.Web.UI.Grid.ReorderIndicator2.style.position =
                Telerik.Web.UI.Grid.ReorderIndicator1.style.position;
            }
          }
          var m = null;
          if (b) {
            m = b._owner._owner;
          }
          if (m && m.ClientSettings.Scrolling.AllowScroll && m._gridDataDiv) {
            Telerik.Web.UI.Grid.AutoScrollHorizontally(m, d);
          }
        } else {
          if (
            Telerik.Web.UI.Grid.ReorderIndicator1.style.visibility != "hidden"
          ) {
            Telerik.Web.UI.Grid.ReorderIndicator1.style.visibility = "hidden";
            Telerik.Web.UI.Grid.ReorderIndicator1.style.display = "none";
            Telerik.Web.UI.Grid.ReorderIndicator1.style.position = "absolute";
            Telerik.Web.UI.Grid.ReorderIndicator2.style.visibility =
              Telerik.Web.UI.Grid.ReorderIndicator1.style.visibility;
            Telerik.Web.UI.Grid.ReorderIndicator2.style.display =
              Telerik.Web.UI.Grid.ReorderIndicator1.style.display;
            Telerik.Web.UI.Grid.ReorderIndicator2.style.position =
              Telerik.Web.UI.Grid.ReorderIndicator1.style.position;
          }
        }
      }
    } else {
      var f = this._moveHeaderDiv;
      var h = b._owner._owner._groupPanel;
      var i = b._owner._owner._groupPanel.cells[0];
      var k;
      var o;
      if ($telerik.isTouchDevice) {
        o = $telerik.getTouches(g)[0];
        k = $telerik.containsPoint(
          $telerik.getBounds(h),
          o.location.pageX,
          o.location.pageY
        );
      } else {
        k = $telerik.isMouseOverElement(h, g);
      }
      f.className = f.className.replace("rgDropAllow", "");
      f.className = f.className.replace("rgDropDisable", "");
      f.className = f.className.trim();
      i.className = i.className.replace("rgGroupPanelCellHover", "");
      i.className = i.className.trim();
      if (k) {
        f.className += " rgDropAllow";
        i.className += " rgGroupPanelCellHover";
      } else {
        f.className += " rgDropDisable";
      }
    }
  }
};
Telerik.Web.UI.Grid.AutoScrollHorizontally = function (g, a) {
  if (!g || !this || g.ClientSettings.Scrolling.FrozenColumnsCount > 0) {
    return;
  }
  var d, h;
  var c = g._gridDataDiv;
  if (!c || !this._moveHeaderDiv) {
    return;
  }
  var b = Telerik.Web.UI.Grid.GetLocation(this._moveHeaderDiv);
  d = Telerik.Web.UI.Grid.GetLocation(c).x;
  h = d + c.offsetWidth;
  var j = c.scrollLeft <= 0;
  var k = c.scrollLeft >= c.scrollWidth - c.offsetWidth + 16;
  var e = b.x - d;
  var f = h - b.x;
  var i;
  if (e < 50 + Telerik.Web.UI.Grid.GetScrollBarWidth() && !j) {
    i = 10 - e / 5;
    c.scrollLeft = c.scrollLeft - i;
    window.setTimeout(function () {
      Telerik.Web.UI.Grid.AutoScrollHorizontally(g, a);
    }, 100);
    Telerik.Web.UI.Grid.HideReorderIndicators();
  } else {
    if (f < 50 + Telerik.Web.UI.Grid.GetScrollBarWidth() && !k) {
      i = 10 - f / 5;
      c.scrollLeft = c.scrollLeft + i;
      window.setTimeout(function () {
        Telerik.Web.UI.Grid.AutoScrollHorizontally(g, a);
      }, 100);
      Telerik.Web.UI.Grid.HideReorderIndicators();
    }
  }
};
Telerik.Web.UI.Grid.HideReorderIndicators = function () {
  if (
    !Telerik.Web.UI.Grid.ReorderIndicator1 ||
    !Telerik.Web.UI.Grid.ReorderIndicator2
  ) {
    return;
  }
  Telerik.Web.UI.Grid.ReorderIndicator1.style.visibility = "hidden";
  Telerik.Web.UI.Grid.ReorderIndicator1.style.display = "none";
  Telerik.Web.UI.Grid.ReorderIndicator1.style.position = "absolute";
  Telerik.Web.UI.Grid.ReorderIndicator2.style.visibility =
    Telerik.Web.UI.Grid.ReorderIndicator1.style.visibility;
  Telerik.Web.UI.Grid.ReorderIndicator2.style.display =
    Telerik.Web.UI.Grid.ReorderIndicator1.style.display;
  Telerik.Web.UI.Grid.ReorderIndicator2.style.position =
    Telerik.Web.UI.Grid.ReorderIndicator1.style.position;
};
Telerik.Web.UI.Grid.DestroyDragDrop = function (a) {
  if (this._moveHeaderDiv != null) {
    var b = this._moveHeaderDiv.parentNode;
    b.removeChild(this._moveHeaderDiv);
    this._moveHeaderDiv = null;
    Telerik.Web.UI.Grid.RestoreDocumentEvents();
  }
  this._columnInitiatorIndex = null;
  this._columnOverIndex = null;
  if (!a) {
    Telerik.Web.UI.Grid.DestroyReorderIndicators();
  }
};
Telerik.Web.UI.Grid.AnimateRevertDragDrop = function (a, b) {
  if (!this._moveHeaderDiv) {
    return;
  }
  b = b || 300;
  var c = this._moveHeaderDiv;
  if ($telerik.$) {
    (function (d) {
      var e = $telerik.getLocation(a.get_element());
      d(c)
        .clone()
        .appendTo(c.parentNode)
        .animate({ left: e.x, top: e.y }, b, function () {
          d(this).remove();
        });
    })($telerik.$);
  }
  Telerik.Web.UI.Grid.DestroyDragDrop();
};
Telerik.Web.UI.Grid.GetFirstParentByTagName = function (a, b) {
  while (a && a.parentNode) {
    if (a.tagName.toLowerCase() == b.toLowerCase()) {
      return a;
    }
    a = a.parentNode;
  }
  return null;
};
Telerik.Web.UI.Grid.GetFirstParentRowWithID = function (a) {
  while (a && a.parentNode) {
    if (a.tagName.toLowerCase() == "tr" && a.id != undefined && a.id != "") {
      return a;
    }
    a = a.parentNode;
  }
  return null;
};
Telerik.Web.UI.Grid.CreateColumnResizers = function (a, b) {
  Telerik.Web.UI.Grid.ClearDocumentEvents();
  this.LeftResizer = document.createElement("span");
  this.LeftResizer.style.backgroundColor = "navy";
  this.LeftResizer.style.width = "1px";
  this.LeftResizer.style.position = "absolute";
  this.LeftResizer.style.cursor = "e-resize";
  this.RightResizer = document.createElement("span");
  this.RightResizer.style.backgroundColor = "navy";
  this.RightResizer.style.width = "1px";
  this.RightResizer.style.position = "absolute";
  this.RightResizer.style.cursor = "e-resize";
  this.ResizerToolTip = document.createElement("span");
  this.ResizerToolTip.style.backgroundColor = "#F5F5DC";
  this.ResizerToolTip.style.border = "1px solid";
  this.ResizerToolTip.style.position = "absolute";
  this.ResizerToolTip.style.font = "icon";
  this.ResizerToolTip.style.padding = "2";
  this.ResizerToolTip.innerHTML =
    "Width: <b>" + a.get_element().offsetWidth + "</b> <em>pixels</em>";
  this.LeftResizer.style.display = this.ResizerToolTip.style.display = this.ResizerToolTip.style.display =
    "none";
  document.body.appendChild(this.LeftResizer);
  document.body.appendChild(this.RightResizer);
  document.body.appendChild(this.ResizerToolTip);
  Telerik.Web.UI.Grid.MoveColumnResizers(a, b);
};
Telerik.Web.UI.Grid.DestroyColumnResizers = function () {
  Telerik.Web.UI.Grid.RestoreDocumentEvents();
  if (this.LeftResizer && this.LeftResizer.parentNode) {
    document.body.removeChild(this.LeftResizer);
    this.LeftResizer = null;
  }
  if (this.RightResizer && this.RightResizer.parentNode) {
    document.body.removeChild(this.RightResizer);
    this.RightResizer = null;
  }
  if (this.ResizerToolTip && this.ResizerToolTip.parentNode) {
    document.body.removeChild(this.ResizerToolTip);
    this.ResizerToolTip = null;
  }
};
Telerik.Web.UI.Grid.MoveColumnResizers = function (a, d) {
  if (!this.LeftResizer || !this.RightResizer || !this.RightResizer) {
    return;
  }
  this.LeftResizer.style.display = this.RightResizer.style.display = this.ResizerToolTip.style.display =
    "";
  this.LeftResizer.style.top =
    Telerik.Web.UI.Grid.FindPosY(a.get_element()) + "px";
  this.LeftResizer.style.left =
    Telerik.Web.UI.Grid.FindPosX(a.get_element()) + "px";
  this.RightResizer.style.top = this.LeftResizer.style.top;
  this.RightResizer.style.left = Telerik.Web.UI.Grid.GetEventPosX(d) - 5 + "px";
  this.ResizerToolTip.style.top =
    parseInt(this.RightResizer.style.top, 10) - 20 + "px";
  this.ResizerToolTip.style.left =
    parseInt(this.RightResizer.style.left, 10) - 5 + "px";
  if (
    parseInt(this.LeftResizer.style.left, 10) <
    Telerik.Web.UI.Grid.FindPosX(a._owner.get_element())
  ) {
    this.LeftResizer.style.display = "none";
  }
  if (!a._owner._owner.ClientSettings.Scrolling.AllowScroll) {
    this.LeftResizer.style.height =
      a._owner.get_element().tBodies[0].offsetHeight +
      a._owner.get_element().tHead.offsetHeight +
      "px";
  } else {
    var b = $get(a._owner._owner.ClientID + "_GridData");
    if (a._owner._owner.ClientSettings.Scrolling.UseStaticHeaders) {
      this.LeftResizer.style.height =
        b.clientHeight + a._owner.get_element().tHead.offsetHeight + "px";
    } else {
      this.LeftResizer.style.height = b.clientHeight + "px";
    }
  }
  this.RightResizer.style.height = this.LeftResizer.style.height;
  var c =
    parseInt(this.RightResizer.style.left, 10) -
    parseInt(this.LeftResizer.style.left, 10);
  this.ResizerToolTip.innerHTML = "Width: <b>" + c + "</b> <em>pixels</em>";
  if (a._owner._owner.ClientSettings.Resizing.EnableRealTimeResize) {
    if (c > 0) {
      a.get_element().style.width = c + "px";
      this.RightResizer.style.left =
        parseInt(this.LeftResizer.style.left, 10) +
        a.get_element().offsetWidth +
        "px";
    }
  }
  if (
    parseInt(this.RightResizer.style.left, 10) + 1 <=
    parseInt(this.LeftResizer.style.left, 10)
  ) {
    Telerik.Web.UI.Grid.DestroyColumnResizers();
  }
};
Telerik.Web.UI.Grid.FindScrollPosX = function (a) {
  var b = 0;
  while (a.parentNode) {
    if (typeof a.parentNode.scrollLeft == "number") {
      b += a.parentNode.scrollLeft;
    }
    a = a.parentNode;
  }
  if (
    document.body.currentStyle &&
    document.body.currentStyle.marginLeft.indexOf("px") != -1 &&
    !window.opera
  ) {
    b = parseInt(b, 10) - parseInt(document.body.currentStyle.marginLeft, 10);
  }
  return b;
};
Telerik.Web.UI.Grid.FindScrollPosY = function (a) {
  var b = 0;
  while (a.parentNode) {
    if (typeof a.parentNode.scrollTop == "number") {
      b += a.parentNode.scrollTop;
    }
    a = a.parentNode;
  }
  if (
    document.body.currentStyle &&
    document.body.currentStyle.marginTop.indexOf("px") != -1 &&
    !window.opera
  ) {
    b = parseInt(b, 10) - parseInt(document.body.currentStyle.marginTop, 10);
  }
  return b;
};
Telerik.Web.UI.Grid.GetEventPosX = function (a) {
  if ($telerik.isTouchDevice) {
    return $telerik.getTouchEventLocation(a).x;
  } else {
    return (
      parseInt(a.clientX, 10) +
      parseInt($telerik.getScrollOffset(document.body, true).x, 10)
    );
  }
};
Telerik.Web.UI.Grid.GetEventPosY = function (a) {
  if ($telerik.isTouchDevice) {
    return $telerik.getTouchEventLocation(a).y;
  } else {
    return (
      parseInt(a.clientY, 10) +
      parseInt($telerik.getScrollOffset(document.body, true).y, 10)
    );
  }
};
Telerik.Web.UI.Grid.IsScrollOnLeftSide = function () {
  if (typeof this._IsScrollOnLeftSide == "undefined") {
    Telerik.Web.UI.Grid.getScrollBarHeight();
  }
  return this._IsScrollOnLeftSide;
};
Telerik.Web.UI.Grid.getScrollBarHeight = function () {
  try {
    var f,
      a = 0;
    var b = document.createElement("div");
    b.style.position = "absolute";
    b.style.top = "-1000px";
    b.style.left = "-1000px";
    b.style.width = "100px";
    b.style.height = "100px";
    b.style.overflow = "auto";
    var c = document.createElement("div");
    c.style.width = "1000px";
    c.style.height = "1000px";
    b.appendChild(c);
    document.body.appendChild(b);
    f = b.offsetHeight;
    a = b.clientHeight;
    document.body.removeChild(document.body.lastChild);
    this.scrollbarHeight = f - a;
    if (this.scrollbarHeight <= 0 || a == 0) {
      this.scrollbarHeight = 16;
    }
    b.dir = "rtl";
    var d = document.createElement("div");
    d.style.position = "absolute";
    d.style.left = "0";
    d.style.height = "100%";
    d.style.width = "100%";
    b.appendChild(d);
    if ($telerik.isOpera) {
      d.style.left = "";
      d.style.width = "100px";
    }
    document.body.appendChild(b);
    this._IsScrollOnLeftSide = false;
    if (
      $telerik.$(b).offset().left != $telerik.$(d).offset().left ||
      $telerik.isChrome
    ) {
      this._IsScrollOnLeftSide = true;
    }
    b.removeChild(c);
    b.removeChild(d);
    b.parentNode.removeChild(b);
    b = null;
    c = null;
    d = null;
    return this.scrollbarHeight;
  } catch (e) {
    this._IsScrollOnLeftSide = false;
    return false;
  }
};
Telerik.Web.UI.Grid.GetScrollBarWidth = function () {
  try {
    var e,
      a = 0;
    var b = document.createElement("div");
    b.style.position = "absolute";
    b.style.top = "-1000px";
    b.style.left = "-1000px";
    b.style.width = "100px";
    b.style.overflow = "auto";
    var c = document.createElement("div");
    c.style.width = "1000px";
    b.appendChild(c);
    document.body.appendChild(b);
    e = b.offsetWidth;
    a = b.clientWidth;
    this.scrollbarWidth = e - a;
    if (this.scrollbarWidth <= 0 || a == 0) {
      this.scrollbarWidth = 16;
    }
    b.removeChild(c);
    b.parentNode.removeChild(b);
    b = null;
    c = null;
    return this.scrollbarWidth;
  } catch (d) {
    return false;
  }
};
Telerik.Web.UI.Grid.IsRightToLeft = function (b) {
  try {
    while (b && b != document) {
      if ($telerik.getCurrentStyle(b, "direction") == "rtl") {
        return true;
      }
      b = b.parentNode;
    }
    return false;
  } catch (a) {
    return false;
  }
};
Telerik.Web.UI.Grid.FireEvent = function (e, c, b) {
  try {
    var d = true;
    if (typeof e[c] == "string") {
      eval(e[c]);
    } else {
      if (typeof e[c] == "function") {
        if (b) {
          switch (b.length) {
            case 1:
              d = e[c](b[0]);
              break;
            case 2:
              d = e[c](b[0], b[1]);
              break;
          }
        } else {
          d = e[c]();
        }
      }
    }
    if (typeof d != "boolean") {
      return true;
    } else {
      return d;
    }
  } catch (a) {
    throw a;
  }
};
Telerik.Web.UI.Grid.GetTableColGroup = function (b) {
  try {
    return b.getElementsByTagName("colgroup")[0];
  } catch (a) {
    return false;
  }
};
Telerik.Web.UI.Grid.RemoveHiddenColGroupCols = function (a) {
  try {
    var b = a.getElementsByTagName("col");
    for (var d = 0; d < b.length; d++) {
      if (b[d].style.display && b[d].style.display == "none") {
        b[d].parentNode.removeChild(b[d]);
        d--;
      }
    }
  } catch (c) {}
};
Telerik.Web.UI.Grid.GetTableColGroupCols = function (a) {
  try {
    var b = [];
    for (var d = 0; d < a.childNodes.length; d++) {
      if (
        a.childNodes[d].tagName &&
        a.childNodes[d].tagName.toLowerCase() == "col"
      ) {
        b[b.length] = a.childNodes[d];
      }
    }
    return b;
  } catch (c) {
    return false;
  }
};
Telerik.Web.UI.Grid.ClearItemStyle = function (f, c, d) {
  Sys.UI.DomElement.removeCssClass(f, d);
  if (c) {
    var b = f.style.cssText.toLowerCase().replace(/ /g, "");
    var a = b.split(";");
    for (var e = 0; e < a.length; e++) {
      if (c.indexOf(a[e]) != -1) {
        a[e] = "";
      }
    }
    f.style.cssText = a.join(";");
  }
};
Telerik.Web.UI.Grid.SetItemStyle = function (c, a, b) {
  Sys.UI.DomElement.addCssClass(c, b);
  if (a) {
    c.style.cssText = c.style.cssText + ";" + a;
  }
};
Telerik.Web.UI.Grid.ScrollIntoView = function (i) {
  var a =
    Telerik.Web.UI.Grid.getScrollableContainer(i) ||
    document.body ||
    document.documentElement;
  var e = i;
  var h = $telerik.getLocation(e).y - $telerik.getLocation(a).y,
    g = h + a.scrollTop,
    f = g + e.offsetHeight;
  var c = a.clientHeight;
  var d = parseInt(a.scrollTop, 10);
  var b = d + c;
  if (e.offsetHeight > c || g < d) {
    a.scrollTop = g;
  } else {
    if (f > b) {
      a.scrollTop = f - c;
    }
  }
  a.scrollTop = a.scrollTop;
};
Telerik.Web.UI.Grid.getScrollableContainer = function (a) {
  if (!a || !a.parentNode) {
    return;
  }
  var d = null;
  var c = a.parentNode;
  while (c != null) {
    if (c.tagName.toUpperCase() == "BODY") {
      d = c;
      break;
    }
    var b = $telerik.getCurrentStyle(c, "overflowY");
    if (b == "scroll" || b == "auto") {
      d = c;
      break;
    }
    c = c.parentNode;
  }
  return d;
};
Telerik.Web.UI.Grid.GetNestedTableView = function (c) {
  var b = null;
  var a = Telerik.Web.UI.Grid.GetNestedTable(c);
  if (a) {
    b = $find(a.id.split("__")[0]);
  }
  return b;
};
Telerik.Web.UI.Grid.GetLastNestedTableView = function (c) {
  var b = null;
  var a = Telerik.Web.UI.Grid.GetLastNestedTable(c);
  if (a) {
    b = $find(a.id.split("__")[0]);
  }
  return b;
};
Telerik.Web.UI.Grid.GetPreviousNestedTableView = function (b) {
  var a = null;
  if (b.previousSibling && b.previousSibling.previousSibling) {
    a = Telerik.Web.UI.Grid.GetNestedTableView(b.previousSibling);
  }
  return a;
};
Telerik.Web.UI.Grid.GetNestedTable = function (d) {
  var b = null;
  var c = Telerik.Web.UI.Grid.GetNodeNextSiblingByTagName(d, "tr");
  if (c) {
    var a = c.getElementsByTagName("table");
    if (a.length > 0 && a[0].id.indexOf("Detail") != -1) {
      b = a[0];
    }
  }
  return b;
};
Telerik.Web.UI.Grid.GetLastNestedTable = function (f) {
  var d = null;
  var e = Telerik.Web.UI.Grid.GetNodeNextSiblingByTagName(f, "tr");
  if (e) {
    var b = e.getElementsByTagName("table");
    for (var c = b.length - 1; c >= 0; c--) {
      var a = b[c];
      if (a.id.indexOf("Detail") != -1 && a.id.indexOf("_mainTable") == -1) {
        d = a;
        break;
      }
    }
  }
  return d;
};
Telerik.Web.UI.Grid.GetNodeNextSiblingByTagName = function (a, b) {
  a = a.nextSibling;
  while (
    a != null &&
    (a.nodeType == 3 ||
      (a.tagName && a.tagName.toLowerCase() != b.toLowerCase()))
  ) {
    a = a.nextSibling;
  }
  return a;
};
Telerik.Web.UI.Grid.GetNodePreviousSiblingByTagName = function (a, b) {
  a = a.previousSibling;
  while (
    a != null &&
    (a.nodeType == 3 ||
      (a.tagName && a.tagName.toLowerCase() != b.toLowerCase()))
  ) {
    a = a.previousSibling;
  }
  return a;
};
Telerik.Web.UI.Grid.ClearBestFitCache = function (a) {};
Telerik.Web.UI.Grid.LocationCache = {};
Telerik.Web.UI.Grid.GetLocation = function (a) {
  if ($telerik.isOpera) {
    return $telerik.originalGetLocation(a);
  }
  return $telerik.getLocation(a);
};
Telerik.Web.UI.Grid.GetGrid = function (a) {
  while (!!a) {
    if (a.tagName.toLowerCase() == "div" && a.id && $find(a.id)) {
      return $find(a.id);
    }
    a = a.parentNode;
  }
  return null;
};
Telerik.Web.UI.Grid.ClientStateData = function ClientStateData() {
  var a = {};
  this.add = function (b, c) {
    a[b] = c;
  };
  this.toString = function () {
    var c = "";
    var d = null;
    for (var b in a) {
      c += b;
      d = a[b];
      if (typeof d != "undefined" && d != null) {
        c += ",";
        c += a[b];
      }
      c += ";";
    }
    return c;
  };
};
Telerik.Web.UI.Grid.getMultiHeaderCells = function (k) {
  var c = "MultiHeader";
  var h = k.get_element();
  var d = h.tHead.rows;
  var b = [];
  for (var e = 0; e < d.length; e++) {
    var g = d[e];
    for (var f = 0; f < g.cells.length; f++) {
      var a = g.cells[f];
      if (a.id && a.id.indexOf(c) > -1) {
        b.push(a);
      }
    }
  }
  b.sort(function (i, j) {
    return i.id.split(c)[1] - j.id.split(c)[1];
  });
  return b;
};
Telerik.Web.UI.Grid.correctWidthForIE = function (a) {
  var c = $telerik.getBorderWidth(a, Telerik.Web.BoxSide.Right);
  var b = $telerik.getBorderWidth(a, Telerik.Web.BoxSide.Left);
  return (
    b +
    c +
    parseInt(a.currentStyle.paddingLeft, 10) +
    parseInt(a.currentStyle.paddingRight, 10)
  );
};
Telerik.Web.UI.Grid.IsEditableControl = function (a) {
  var b = a.tagName ? a.tagName.toLowerCase() : null;
  if (
    b &&
    (b === "input" ||
      b === "textarea" ||
      b === "select" ||
      b === "option" ||
      b == "checkbox")
  ) {
    return true;
  }
  return false;
};
Telerik.Web.UI.Grid.IsActionControl = function (b) {
  if (b.jquery) {
    b = b[0];
  }
  var c = b.tagName ? b.tagName.toLowerCase() : null;
  var a = $find(b.id);
  if (
    c &&
    (c == "button" ||
      c == "a" ||
      (a &&
        Telerik.Web.UI.RadButton &&
        Telerik.Web.UI.RadButton.isInstanceOfType(a)))
  ) {
    return true;
  }
  return Telerik.Web.UI.Grid.IsEditableControl(b);
};
Telerik.Web.UI.Grid.BuildEventArgs = function (a, b) {
  for (var d in b) {
    var c = d;
    var e = b[d];
    if (c.indexOf("et_") > 0) {
      a[c] = e;
      continue;
    }
    a["_" + c] = e;
    a["get_" + c] = (function (f) {
      return function () {
        return this["_" + f];
      };
    })(c);
  }
  return a;
};
Telerik.Web.UI.Grid.TouchPointDirection = {
  None: -1,
  N: 0,
  NNE: 1,
  NE: 2,
  ENE: 3,
  E: 4,
  ESE: 5,
  SE: 6,
  SSE: 7,
  S: 8,
  SSW: 9,
  SW: 10,
  WSW: 11,
  W: 12,
  WNW: 13,
  NW: 14,
  NNW: 15,
};
Telerik.Web.UI.Grid.TouchPointMovement = {
  Up: 0,
  Left: 1,
  Down: 2,
  Right: 3,
  None: 4,
  Inconsistent: 5,
};
Telerik.Web.UI.Grid.detectTouchPointDirection = function (c, b, a) {
  if (b.x > c.x) {
    if (b.y > c.y) {
      if (a == 0) {
        return Telerik.Web.UI.Grid.TouchPointDirection.SE;
      }
      if (a > 0) {
        return Telerik.Web.UI.Grid.TouchPointDirection.ESE;
      }
      if (a < 0) {
        return Telerik.Web.UI.Grid.TouchPointDirection.SSE;
      }
    } else {
      if (b.y == c.y) {
        return Telerik.Web.UI.Grid.TouchPointDirection.E;
      } else {
        if (a == 0) {
          return Telerik.Web.UI.Grid.TouchPointDirection.NE;
        }
        if (a > 0) {
          return Telerik.Web.UI.Grid.TouchPointDirection.ENE;
        }
        if (a < 0) {
          return Telerik.Web.UI.Grid.TouchPointDirection.NNE;
        }
      }
    }
  } else {
    if (b.x == c.x) {
      if (b.y > c.y) {
        return Telerik.Web.UI.Grid.TouchPointDirection.S;
      } else {
        if (b.y == c.y) {
          return Telerik.Web.UI.Grid.TouchPointDirection.None;
        } else {
          return Telerik.Web.UI.Grid.TouchPointDirection.N;
        }
      }
    } else {
      if (b.y > c.y) {
        if (a == 0) {
          return Telerik.Web.UI.Grid.TouchPointDirection.SW;
        }
        if (a > 0) {
          return Telerik.Web.UI.Grid.TouchPointDirection.WSW;
        }
        if (a < 0) {
          return Telerik.Web.UI.Grid.TouchPointDirection.SSW;
        }
      } else {
        if (b.y == c.y) {
          return Telerik.Web.UI.Grid.TouchPointDirection.W;
        } else {
          if (a == 0) {
            return Telerik.Web.UI.Grid.TouchPointDirection.NW;
          }
          if (a > 0) {
            return Telerik.Web.UI.Grid.TouchPointDirection.WNW;
          }
          if (a < 0) {
            return Telerik.Web.UI.Grid.TouchPointDirection.NNW;
          }
        }
      }
    }
  }
};
Telerik.Web.UI.Grid.detectTouchPointMovement = function (a) {
  if (
    a >= Telerik.Web.UI.Grid.TouchPointDirection.NE &&
    a < Telerik.Web.UI.Grid.TouchPointDirection.SE
  ) {
    return Telerik.Web.UI.Grid.TouchPointMovement.Right;
  }
  if (
    a >= Telerik.Web.UI.Grid.TouchPointDirection.SE &&
    a < Telerik.Web.UI.Grid.TouchPointDirection.SW
  ) {
    return Telerik.Web.UI.Grid.TouchPointMovement.Down;
  }
  if (
    a >= Telerik.Web.UI.Grid.TouchPointDirection.SW &&
    a < Telerik.Web.UI.Grid.TouchPointDirection.NW
  ) {
    return Telerik.Web.UI.Grid.TouchPointMovement.Left;
  }
  if (
    a >= Telerik.Web.UI.Grid.TouchPointDirection.NW ||
    (a >= Telerik.Web.UI.Grid.TouchPointDirection.N &&
      a < Telerik.Web.UI.Grid.TouchPointDirection.NE)
  ) {
    return Telerik.Web.UI.Grid.TouchPointMovement.Up;
  }
  if (a == Telerik.Web.UI.Grid.TouchPointDirection.None) {
    return Telerik.Web.UI.Grid.TouchPointMovement.None;
  }
};
Telerik.Web.UI.Grid.reorderArray = function (a, e, f) {
  var c = [];
  for (var b = 0; b < a.length; b++) {
    c[b] = a[b];
  }
  if (e > f) {
    var d = c.splice(e, 1)[0];
    c.splice(f, 0, d);
    return c;
  }
  if (e < f) {
    c.splice(f + 1, 0, c[e]);
    c.splice(e, 1);
    return c;
  }
};
Telerik.Web.UI.Grid.Draggable = (function (a) {
  var c = ".draggable";
  function b(d) {
    this._options = d;
    this._isDragging = false;
    this.init(d);
  }
  b.prototype = {
    init: function (d) {
      a(d.container).onEvent(
        ($telerik.isTouchDevice ? "touchstart" : "down") + c,
        a.proxy(this._down, this)
      );
    },
    dispose: function () {
      a(document).add(this._options.container).off(c);
    },
    _positionDragElement: function (d) {
      var f = $telerik.getEventLocation(d);
      this._$dragElement.offset({ top: f.pageY + 1, left: f.pageX + 1 });
    },
    _down: function (d) {
      var f = this._options;
      var g;
      if (f.canDrag.call(f.thisArg, d)) {
        g = f.createDraggable.call(f.thisArg, d);
        if (g === false) {
          return;
        }
        a(document).onEvent(
          ($telerik.isTouchDevice ? "touchmove" : "move") + c,
          a.proxy(this._move, this)
        );
        a(document).onEvent(
          ($telerik.isTouchDevice ? "touchend" : "up") + c,
          a.proxy(this._up, this)
        );
        this._$dragElement = a(g).appendTo(document.body);
        if (f.createDropClue) {
          this._$dropClue = a(f.createDropClue.call(f.thisArg, d))
            .css("position", "absolute")
            .appendTo(document.body)
            .hide();
        }
        if ($telerik.isTouchDevice) {
          d.preventDefault(true);
        }
        this._positionDragElement(d);
        this._isDragging = true;
      }
    },
    _move: function (d) {
      var f = this._options;
      this._positionDragElement(d);
      f.dragging.call(f.thisArg, d, {
        $dropClue: this._$dropClue,
        $dragElement: this._$dragElement,
      });
      if (!$telerik.isTouchDevice) {
        d.preventDefault(true);
      }
    },
    _up: function (d) {
      var f = this._options;
      if (this._isDragging) {
        if (f.stopDragging) {
          f.stopDragging.call(f.thisArg, d, {
            $dragElement: this._$dragElement,
          });
        }
        this._$dragElement.remove();
        if (this._$dropClue) {
          this._$dropClue.remove();
        }
        a(document).off(c);
        this._isDragging = false;
      }
    },
  };
  return b;
})($telerik.$);
Type.registerNamespace("Telerik.Web.UI");
Telerik.Web.UI.GridItemResizer = function (a) {
  Telerik.Web.UI.GridItemResizer.initializeBase(this);
  this._owner = a;
  this._onResizeMouseUpDelegate = null;
  this._cellsWithEvents = [];
};
Telerik.Web.UI.GridItemResizer.prototype = {
  dispose: function () {
    for (var a = 0; a < this._cellsWithEvents.length; a++) {
      window.$clearHandlers(this._cellsWithEvents[a]);
      this._cellsWithEvents[a]._events = null;
      this._cellsWithEvents[a]._onResizeMouseDownDelegate = null;
    }
    this._cellsWithEvents = null;
    this._destroyRowResizer();
    if (this._onResizeMouseUpDelegate) {
      $telerik.removeExternalHandler(
        document,
        "mouseup",
        this._onResizeMouseUpDelegate
      );
    }
  },
  _detectResizeCursorsOnItems: function (d, a) {
    if (
      a != null &&
      a.tagName.toLowerCase() == "td" &&
      !this._owner.MoveHeaderDiv
    ) {
      var f = Telerik.Web.UI.Grid.GetFirstParentByTagName(a, "tr");
      var h = false;
      while (f && Telerik.Web.UI.Grid.IsChildOf(f, this._owner.get_element())) {
        if (f.id && f.id.split("__").length == 2) {
          h = true;
          break;
        }
        f = Telerik.Web.UI.Grid.GetFirstParentByTagName(f.parentNode, "tr");
      }
      if (!h) {
        return;
      }
      var b = a.parentNode.parentNode.parentNode;
      var c = $find(b.id);
      if (c != null) {
        if (!c.get_element()) {
          return;
        }
        if (!c.get_element().tBodies[0]) {
          return;
        }
        var i = Telerik.Web.UI.Grid.GetEventPosY(d);
        var j = $telerik.isSafari
          ? Telerik.Web.UI.Grid.FindPosY(f)
          : Telerik.Web.UI.Grid.FindPosY(a);
        var g = j + a.offsetHeight;
        this._resizeTolerance = 5;
        if (i > g - this._resizeTolerance && i < g + this._resizeTolerance) {
          a.style.cursor = "n-resize";
          a.title = this._owner.ClientSettings.ClientMessages.DragToResize;
          if (!a._onResizeMouseDownDelegate) {
            a._onResizeMouseDownDelegate = Function.createDelegate(
              this,
              this._onResizeMouseDownHandler
            );
            window.$addHandler(a, "mousedown", a._onResizeMouseDownDelegate);
            this._cellsWithEvents[this._cellsWithEvents.length] = a;
          }
        } else {
          a.style.cursor = "default";
          a.title = "";
          if (a._onResizeMouseDownDelegate) {
            if (a._events != null) {
              window.$removeHandler(
                a,
                "mousedown",
                a._onResizeMouseDownDelegate
              );
            }
            a._onResizeMouseDownDelegate = null;
            a._events = null;
          }
        }
      }
    }
  },
  _moveItemResizer: function (a) {
    if (
      this._owner._rowResizer != "undefined" &&
      this._owner._rowResizer != null &&
      this._owner._rowResizer.parentNode != null
    ) {
      this._owner._rowResizer.style.top =
        Telerik.Web.UI.Grid.GetEventPosY(a) + "px";
      if (this._owner.ClientSettings.Resizing.EnableRealTimeResize) {
        this._destroyRowResizerAndResizeRow(a, false);
        this._updateRowResizerWidth(a);
      }
    }
  },
  _destroyRowResizerAndResizeRow: function (d, g) {
    if (
      this._owner._cellToResize != "undefined" &&
      this._owner._cellToResize != null &&
      this._owner._cellToResize.tagName.toLowerCase() == "td" &&
      this._owner._rowResizer != "undefined" &&
      this._owner._rowResizer != null
    ) {
      var f;
      var a = $telerik.isSafari
        ? Telerik.Web.UI.Grid.FindPosY(this._owner._cellToResize.parentNode)
        : Telerik.Web.UI.Grid.FindPosY(this._owner._cellToResize);
      if (this._gridDataDiv) {
        f =
          parseInt(this._owner._rowResizer.style.top, 10) +
          this._gridDataDiv.scrollTop -
          a;
      } else {
        f = parseInt(this._owner._rowResizer.style.top, 10) - a;
      }
      if (f > 0) {
        var b = this._owner._cellToResize.parentNode.parentNode.parentNode;
        var c = $find(b.id);
        if (c != null) {
          c.resizeItem(this._owner._cellToResize.parentNode.rowIndex, f);
        }
      }
    }
    if (g) {
      this._destroyRowResizer();
    }
  },
  _updateRowResizerWidth: function (c) {
    var a = Telerik.Web.UI.Grid.GetCurrentElement(c);
    if (a != null && a.tagName.toLowerCase() == "td") {
      var b = this._owner._rowResizerRefTable;
      if (b != null) {
        this._owner._rowResizer.style.width =
          this._owner.get_element().offsetWidth + "px";
      }
    }
  },
  _createRowResizer: function (d) {
    this._destroyRowResizer();
    var a = Telerik.Web.UI.Grid.GetCurrentElement(d);
    if (a != null && a.tagName.toLowerCase() == "td") {
      if (a.cellIndex > 0) {
        var g = a.parentNode.rowIndex;
        a = a.parentNode.parentNode.parentNode.rows[g].cells[0];
      }
      this._owner._rowResizer = null;
      this._owner._cellToResize = a;
      var b = a.parentNode.parentNode.parentNode;
      var c = $find(b.id);
      this._owner._rowResizer = document.createElement("div");
      this._owner._rowResizer.style.backgroundColor = "navy";
      this._owner._rowResizer.style.height = "1px";
      this._owner._rowResizer.style.fontSize = "1";
      this._owner._rowResizer.style.position = "absolute";
      this._owner._rowResizer.style.cursor = "n-resize";
      if (c != null) {
        this._owner._rowResizerRefTable = c;
        this._owner._rowResizer.style.width =
          this._owner.get_element().offsetWidth + "px";
        this._owner._rowResizer.style.left =
          Telerik.Web.UI.Grid.FindPosX(this._owner.get_element()) + "px";
      }
      this._owner._rowResizer.style.top =
        Telerik.Web.UI.Grid.GetEventPosY(d) + "px";
      var f = document.body;
      f.appendChild(this._owner._rowResizer);
    }
  },
  _destroyRowResizer: function () {
    if (
      this._owner._rowResizer != "undefined" &&
      this._owner._rowResizer != null &&
      this._owner._rowResizer.parentNode != null
    ) {
      var a = this._owner._rowResizer.parentNode;
      a.removeChild(this._owner._rowResizer);
      this._owner._rowResizer = null;
      this._owner._rowResizerRefTable = null;
    }
  },
  _onResizeMouseDownHandler: function (b) {
    var a = Telerik.Web.UI.Grid.GetCurrentElement(b);
    if (a) {
      if (a.tagName.toLowerCase() != "td") {
        return;
      }
      window.$clearHandlers(a);
    }
    this._createRowResizer(b);
    Telerik.Web.UI.Grid.ClearDocumentEvents();
    this._onResizeMouseUpDelegate = Function.createDelegate(
      this,
      this._onResizeMouseUpHandler
    );
    $telerik.addExternalHandler(
      document,
      "mouseup",
      this._onResizeMouseUpDelegate
    );
    this._owner._isRowResize = true;
  },
  _onResizeMouseUpHandler: function (a) {
    $telerik.removeExternalHandler(
      document,
      "mouseup",
      this._onResizeMouseUpDelegate
    );
    this._owner._isRowResize = null;
    this._destroyRowResizerAndResizeRow(a, true);
    Telerik.Web.UI.Grid.RestoreDocumentEvents();
  },
};
Telerik.Web.UI.GridItemResizer.registerClass(
  "Telerik.Web.UI.GridItemResizer",
  null,
  Sys.IDisposable
);
Telerik.Web.UI.GridDataItem = function (a) {
  Telerik.Web.UI.GridDataItem.initializeBase(this, [a]);
  this._owner = {};
  this._data = {};
  this._selected = false;
  this._selectable = true;
  this._expanded = false;
  this._display = false;
  this._dataKeyValue = null;
  this._dataItem = null;
  this._itemIndexHierarchical = "";
  this._itemIndex = null;
  this._editFormItem = "notSet";
  this._nestedViews = null;
};
Telerik.Web.UI.GridDataItem.prototype = {
  initialize: function () {
    Telerik.Web.UI.GridDataItem.callBaseMethod(this, "initialize");
    var b = this;
    var a = b._element.id.split("_");
    b._itemIndex = parseInt(a[a.length - 1], 10);
  },
  dispose: function () {
    this._owner._owner.raise_rowDestroying(
      new Telerik.Web.UI.GridDataItemEventArgs(this.get_element(), null)
    );
    if (this.get_element()) {
      window.$clearHandlers(this.get_element());
      this._element.control = null;
    }
    Telerik.Web.UI.GridDataItem.callBaseMethod(this, "dispose");
  },
  get_itemIndex: function () {
    return this._itemIndex;
  },
  get_itemIndexHierarchical: function () {
    return this._itemIndexHierarchical;
  },
  get_owner: function () {
    return this._owner;
  },
  get_cell: function (a) {
    return this.get_parent().getCellByColumnUniqueName(this, a);
  },
  get_dataItem: function () {
    return this._dataItem;
  },
  findControl: function (a) {
    return $telerik.findControl(this.get_element(), a);
  },
  findElement: function (a) {
    return $telerik.findElement(this.get_element(), a);
  },
  getDataKeyValue: function (c) {
    var b = this.get_element().id.split("__")[1];
    var a = null;
    if (
      this._owner._owner._clientKeyValues &&
      this._owner._owner._clientKeyValues[b]
    ) {
      a = this._owner._owner._clientKeyValues[b];
    }
    return a ? a[c] : null;
  },
  get_selected: function () {
    return this._selected;
  },
  set_selected: function (b) {
    if (this._selected != b) {
      if (!this.get_selectable()) {
        return;
      }
      var a = { ctrlKey: false };
      if (
        !this._owner._owner._selection._selectRowInternal(
          this.get_element(),
          a,
          true,
          true,
          true
        )
      ) {
        return;
      }
    }
  },
  get_selectable: function () {
    return this._selectable;
  },
  get_expanded: function () {
    return this._expanded;
  },
  set_expanded: function (a) {
    if (this._expanded != a) {
      if (a && !this._owner.expandItem(this.get_element())) {
        return;
      }
      if (!a && !this._owner.collapseItem(this.get_element())) {
        return;
      }
      this._expanded = a;
    }
  },
  get_nestedViews: function () {
    var j = this,
      g = j._nestedViews,
      h = Telerik.Web.UI.Grid.GetNodeNextSiblingByTagName(
        j.get_element(),
        "tr"
      );
    if (!g) {
      j._nestedViews = g = [];
      if (j.get_owner()._data.hasDetailItemTemplate) {
        h = Telerik.Web.UI.Grid.GetNodeNextSiblingByTagName(h, "tr");
      }
      if (h) {
        var a = j.get_owner().get_element().id.split("Detail").length,
          c = h.getElementsByTagName("table"),
          b,
          f;
        for (var d = 0, e = c.length; d < e; d++) {
          b = c[d];
          if (
            b.id.indexOf("Detail") != -1 &&
            b.id.indexOf("_mainTable") == -1 &&
            a + 1 == b.id.split("Detail").length
          ) {
            f = $find(b.id);
            if (f && Telerik.Web.UI.GridTableView.isInstanceOfType(f)) {
              Array.add(g, f);
            }
          }
        }
      }
    }
    return g;
  },
  get_display: function () {
    return this._display;
  },
  set_display: function (a) {
    if (this._display != a) {
      this._display = a;
    }
  },
  get_isInEditMode: function () {
    return (
      Array.indexOf(
        this.get_owner().get_owner()._editIndexes,
        this._itemIndexHierarchical
      ) > -1
    );
  },
  get_editFormItem: function () {
    if (this._editFormItem === "notSet") {
      if ($telerik.$) {
        var a = $telerik.$(this.get_element()).next();
        if (a.children("td").children("div.rgEditForm").length) {
          this._editFormItem = a.get(0);
        }
      }
      var c = Telerik.Web.UI.Grid.GetNodeNextSiblingByTagName(
        this.get_element(),
        "tr"
      );
      if (c && c.cells) {
        for (var b = 0; b < c.cells.length; b++) {
          if ($telerik.getChildByClassName(c.cells[b], "rgEditForm")) {
            this._editFormItem = c;
          }
        }
      }
      if (this._editFormItem === "notSet") {
        this._editFormItem = null;
      }
    }
    return this._editFormItem;
  },
};
Telerik.Web.UI.GridDataItem.registerClass(
  "Telerik.Web.UI.GridDataItem",
  Sys.UI.Control
);
(function (a) {
  Type.registerNamespace("Telerik.Web.UI");
  Telerik.Web.UI.GridScrolling = function () {
    Telerik.Web.UI.GridScrolling.initializeBase(this);
    this._owner = {};
    this._onGridScrollDelegate = null;
  };
  Telerik.Web.UI.GridScrolling.prototype = {
    initialize: function () {
      Telerik.Web.UI.GridScrolling.callBaseMethod(this, "initialize");
      this.AllowScroll = this._owner.ClientSettings.Scrolling.AllowScroll;
      this.UseStaticHeaders = this._owner.ClientSettings.Scrolling.UseStaticHeaders;
      if (!this._owner.canRepaint()) {
        this._shouldInitializeLayoutAndScroll = true;
        this._owner.add_parentShown(this._owner.get_element());
      } else {
        this._initializeDimensions();
        this._initializeScroll();
      }
      if (
        Telerik.Web.UI.TouchScrollExtender._getNeedsScrollExtender() &&
        !this._dropDownTouchScroll
      ) {
        this._createTouchScrollExtender(true);
      }
    },
    updated: function () {
      Telerik.Web.UI.GridScrolling.callBaseMethod(this, "updated");
    },
    dispose: function () {
      if (this._onResizeDelegate) {
        try {
          window.$removeHandler(window, "resize", this._onResizeDelegate);
          this._onResizeDelegate = null;
        } catch (b) {}
      }
      if (this._onGridFrozenScrollDelegate) {
        window.$removeHandler(
          this._frozenScroll,
          "scroll",
          this._onGridFrozenScrollDelegate
        );
        this._onGridFrozenScrollDelegate = null;
      }
      if (this._onGridScrollDelegate) {
        if (this._owner.GridDataDiv) {
          window.$removeHandler(
            this._owner.GridDataDiv,
            "scroll",
            this._onGridScrollDelegate
          );
        }
        if (this._owner.GridHeaderDiv) {
          window.$removeHandler(
            this._owner.GridHeaderDiv,
            "scroll",
            this._onGridScrollDelegate
          );
        }
        this._onGridScrollDelegate = null;
      }
      if (this._frozenScroll) {
        window.$clearHandlers(this._frozenScroll);
      }
      this._createTouchScrollExtender(false);
      Telerik.Web.UI.GridScrolling.callBaseMethod(this, "dispose");
    },
    get_owner: function () {
      return this._owner;
    },
    set_owner: function (b) {
      this._owner = b;
    },
    _initializeDimensions: function () {
      var f = this;
      this.onWindowResize();
      this.initializeAutoLayout();
      this.applyFrozenScroll();
      var e = 0;
      this._onResizeDelegate = Function.createDelegate(
        this._owner,
        function () {
          var g = this;
          clearInterval(e);
          e = setTimeout(function () {
            clearInterval(e);
            g.repaint();
          }, 200);
        }
      );
      if (navigator.userAgent.toLowerCase().indexOf("msie") != -1) {
        setTimeout(function () {
          window.$addHandler(window, "resize", f._onResizeDelegate);
        }, 0);
      } else {
        window.$addHandler(window, "resize", this._onResizeDelegate);
      }
      if (this._owner.ClientSettings.Scrolling.FrozenColumnsCount > 0) {
        if (this._owner.ClientSettings.Resizing.AllowRowResize) {
          this._owner.ClientSettings.Scrolling.FrozenColumnsCount++;
        }
        if (
          this._owner.MasterTableViewHeader &&
          this._owner.MasterTableViewHeader._data._columnsData
        ) {
          for (
            var c = 0,
              d = this._owner.MasterTableViewHeader._data._columnsData.length;
            c < d;
            c++
          ) {
            var b = this._owner.MasterTableViewHeader._data._columnsData[c];
            if (
              b.ColumnType == "GridExpandColumn" ||
              (b.ColumnType == "GridGroupSplitterColumn" &&
                this._owner.ClientSettings.Scrolling
                  .CountGroupSplitterColumnAsFrozen === false)
            ) {
              this._owner.ClientSettings.Scrolling.FrozenColumnsCount++;
            }
          }
        }
      }
    },
    _createTouchScrollExtender: function (d) {
      var b = this._owner.GridDataDiv;
      if (b) {
        var c = this._dropDownTouchScroll;
        if (c) {
          if (!d) {
            c.dispose();
            this._dropDownTouchScroll = null;
          }
        } else {
          if (d) {
            this._dropDownTouchScroll = new Telerik.Web.UI.TouchScrollExtender(
              b
            );
            this._dropDownTouchScroll.initialize();
          }
        }
      }
    },
    applyFrozenScroll: function () {
      this._frozenScroll = $get(this._owner.ClientID + "_Frozen");
      var c = Telerik.Web.UI.Grid.getScrollBarHeight();
      this._initFrozenScrollButtons();
      if (this._frozenScroll) {
        var b = $get(this._owner.ClientID + "_FrozenScroll");
        this._onGridFrozenScrollDelegate = Function.createDelegate(
          this,
          this.onGridFrozenScroll
        );
        window.$addHandler(
          this._frozenScroll,
          "scroll",
          this._onGridFrozenScrollDelegate
        );
        this.gridMasterTableWidth = this._owner
          .get_masterTableView()
          .get_element().offsetWidth;
        b.style.width = this._owner.GridDataDiv.scrollWidth + "px";
        b.style.height = c + "px";
        if (
          this._owner.get_masterTableView().get_element().offsetWidth >
          this._owner.GridDataDiv.clientWidth
        ) {
          if ($telerik.isIE) {
            c++;
          }
          this._frozenScroll.style.height = c + "px";
          if (
            this._owner.ClientSettings.Scrolling.SaveScrollPosition &&
            typeof this._owner.ClientSettings.Scrolling.ScrollLeft !=
              "undefined"
          ) {
            this._frozenScroll.scrollLeft = this._owner.ClientSettings.Scrolling.ScrollLeft;
          }
          if (this._owner.GridDataDiv.style.overflowX != null) {
            this._owner.GridDataDiv.style.overflowX = "hidden";
          } else {
            this._frozenScroll.style.marginTop = "-" + c + "px";
            this._frozenScroll.style.zIndex = 99999;
            this._frozenScroll.style.position = "relative";
          }
          if (
            Telerik.Web.UI.Grid.IsRightToLeft(this._owner.GridHeaderDiv) &&
            Telerik.Web.UI.Grid.IsScrollOnLeftSide()
          ) {
            this._frozenScroll.style.marginLeft = c + "px";
          } else {
            if (
              !(
                Telerik.Web.UI.Grid.IsRightToLeft(this._owner.GridHeaderDiv) &&
                $telerik.isSafari
              )
            ) {
              this._frozenScroll.style.marginRight = c + "px";
            }
          }
          if (this._owner.GridHeaderDiv && this._owner.GridDataDiv) {
            if (
              this._owner.GridDataDiv.clientWidth ==
              this._owner.GridDataDiv.offsetWidth
            ) {
              if (
                typeof this._frozenScroll.style.overflowX != "undefined" &&
                typeof this._frozenScroll.style.overflowY != "undefined"
              ) {
                this._frozenScroll.style.overflowX = "auto";
                this._frozenScroll.style.overflowY = "hidden";
              }
            }
          }
          if ($telerik.isIE8 || $telerik.isChrome) {
            this._frozenScroll.style.overflowX = "scroll";
          }
        } else {
          this._frozenScroll.style.height = 0;
        }
        this.isFrozenScroll = true;
        this.gridDataTableWidth = this._owner.GridDataDiv.clientWidth;
        this.isFrozenScrollApplied = true;
      }
    },
    onGridFrozenResized: function () {
      var e = Telerik.Web.UI.Grid.getScrollBarHeight();
      if ($telerik.isIE) {
        ++e;
      }
      if (this.gridDataTableWidth != this._owner.GridDataDiv.clientWidth) {
        this.gridDataTableWidth = this._owner.GridDataDiv.clientWidth;
        if (this.gridMasterTableWidth > this.gridDataTableWidth) {
          this._frozenScroll.style.height = e + "px";
          if (this._owner.GridDataDiv.style.overflowX != null) {
            this._owner.GridDataDiv.style.overflowX = "hidden";
          } else {
            this._frozenScroll.style.marginTop = "-" + e + "px";
            this._frozenScroll.style.zIndex = 99999;
            this._frozenScroll.style.position = "relative";
          }
          if (window.netscape) {
            this._frozenScroll.style.width =
              this._owner.GridDataDiv.offsetWidth - e + "px";
            this._frozenScroll.style.marginRight = e + "px";
          }
          if (this._owner.GridHeaderDiv && this._owner.GridDataDiv) {
            if (
              this._owner.GridDataDiv.clientWidth ==
              this._owner.GridDataDiv.offsetWidth
            ) {
              if (
                typeof this._frozenScroll.style.overflowX != "undefined" &&
                typeof this._frozenScroll.style.overflowY != "undefined"
              ) {
                this._frozenScroll.style.overflowX = "auto";
                this._frozenScroll.style.overflowY = "hidden";
                if (window.netscape) {
                  this._frozenScroll.style.width =
                    parseInt(this._frozenScroll.style.width, 10) + e + "px";
                  this._frozenScroll.style.marginRight = 0;
                }
              }
            }
          }
          if ($telerik.isIE8 || $telerik.isChrome) {
            this._frozenScroll.style.overflowX = "scroll";
          }
        } else {
          this._frozenScroll.scrollLeft = 0;
          this._frozenScroll.style.height = 0;
          var b = this._owner.get_masterTableView().get_columns();
          for (var c = 0, d = b.length; c < d; c++) {
            if (!b[c].get_visible() && b[c].Display) {
              this._owner.get_masterTableView().showColumn(c);
            }
          }
        }
      }
    },
    _initFrozenScrollButtons: function () {
      var e = this._owner;
      a = a || $telerik.$;
      var c = a(e.get_element());
      var d = a(e.get_masterTableView().get_element());
      var f =
        "> table > thead .rgCommandRow, > table > tbody .rgCommandRow, > table > tfoot .rgCommandRow, #" +
        this.get_id() +
        "_Pager .rgCommandRow";
      var b;
      if (d.hasClass("rgDetailTable")) {
        b = d.find("> thead > .rgCommandRow, > tfoot > .rgCommandRow");
      } else {
        b = c.find(f);
        if (b.length == 0) {
          b = c.find("> .rgDataDiv").find(f);
        }
      }
      this._$prevButton = b
        .find(".rgPrev")
        .on("click", a.proxy(this._prevFrozenColumnHandler, this));
      this._$nextButton = b
        .find(".rgNext")
        .on("click", a.proxy(this._nextFrozenColumnHandler, this));
      this._currentColumnIndex = 0;
      this._notFrozenColumns = this._getNotFrozenColumns();
    },
    _scrollToFirstColumn: function () {
      var e = this._getNotFrozenColumns();
      while (this._currentColumnIndex > 0) {
        var b = e[this._currentColumnIndex - 1];
        var c = this._owner.get_masterTableView();
        var d = this._owner.get_masterTableViewHeader();
        if (!b.FrozenDisplay) {
          d._showNotFrozenColumn(b.Index);
          this._afterColumnFreeze(c, d);
        }
        this._$nextButton.removeClass("rgDisabled");
        this._currentColumnIndex--;
      }
      this._$prevButton.addClass("rgDisabled");
    },
    _prevFrozenColumnHandler: function (c) {
      var g = this._getNotFrozenColumns();
      var b = g[--this._currentColumnIndex];
      var d = this._owner.get_masterTableView();
      var f = this._owner.get_masterTableViewHeader();
      if (typeof b == "undefined") {
        ++this._currentColumnIndex;
        c.preventDefault();
        return;
      }
      if (!b.FrozenDisplay) {
        f._showNotFrozenColumn(b.Index);
        this._afterColumnFreeze(d, f);
        if (Telerik.Web.Browser.ie && Telerik.Web.Browser.version > 7) {
          d.get_element().style.position = "relative";
          f.get_element().style.position = "relative";
          window.setTimeout(function () {
            d.get_element().style.position = "";
            f.get_element().style.position = "";
          }, 0);
        }
      }
      this._$nextButton.removeClass("rgDisabled");
      if (this._currentColumnIndex == 0) {
        this._$prevButton.addClass("rgDisabled");
      }
      c.preventDefault();
    },
    _nextFrozenColumnHandler: function (c) {
      c.preventDefault();
      var i = this._getNotFrozenColumns();
      var b = i[this._currentColumnIndex++];
      var f = this._owner.get_masterTableView();
      var g = this._owner.get_masterTableViewHeader();
      var d = this._owner.get_element().offsetWidth;
      var h;
      d = this._owner.get_element().offsetWidth;
      h = this._owner.get_masterTableView().get_element().offsetWidth;
      if (typeof b == "undefined" || h <= d) {
        this._currentColumnIndex--;
        return;
      }
      if (b.FrozenDisplay) {
        g._hideNotFrozenColumn(b.Index);
        this._afterColumnFreeze(f, g);
      }
      this._$prevButton.removeClass("rgDisabled");
      if (this._currentColumnIndex >= i.length - 1) {
        this._$nextButton.addClass("rgDisabled");
      } else {
        h = this._owner.get_masterTableView().get_element().offsetWidth;
        if (h <= d) {
          this._$nextButton.addClass("rgDisabled");
        }
      }
    },
    _getNotFrozenColumns: function () {
      var e = [];
      e._getPreviousNotFrozenColumnWidth = function (i) {
        var j = 0;
        for (var h = 0; h < this.length - 1; h++) {
          if (this[h].Index < i) {
            j += this[h].Width;
          }
        }
        return j;
      };
      var d = this._owner.get_masterTableView();
      var c;
      var b;
      for (
        c = this._owner.ClientSettings.Scrolling.FrozenColumnsCount;
        c < d.get_columns().length;
        c++
      ) {
        b = d.get_columns()[c];
        if (!b.Display) {
          continue;
        }
        var g = false;
        if (
          (window.netscape ||
            $telerik.isSafari ||
            $telerik.isIE8 ||
            $telerik.isOpera) &&
          b.get_element().style.display == "none"
        ) {
          b.get_element().style.display = "table-cell";
          g = true;
        }
        var f = d.ColGroup.Cols[c].style.width.replace("px", "") * 1;
        e[e.length] = { Index: c, Width: f, FrozenDisplay: true };
        if (typeof b.FrozenDisplay == "boolean") {
          e[e.length - 1].FrozenDisplay = b.FrozenDisplay;
        }
        if (
          (window.netscape ||
            $telerik.isSafari ||
            $telerik.isIE8 ||
            $telerik.isOpera) &&
          g
        ) {
          b.get_element().style.display = "none";
          g = false;
        }
      }
      return e;
    },
    _afterColumnFreeze: function (b, c, d) {
      if (d > 0.9999900000000001 && ($telerik.isFirefox || $telerik.isIE7)) {
        c.get_element().style.width =
          this._owner.get_masterTableViewHeader().get_element().offsetWidth +
          "px";
      }
      c.get_element().style.tableLayout = "auto";
      c.get_element().style.tableLayout = "fixed";
      if (d > 0.9999900000000001 && ($telerik.isFirefox || $telerik.isIE7)) {
        b.get_element().style.width =
          this._owner.get_masterTableViewHeader().get_element().offsetWidth +
          "px";
      }
      b.get_element().style.tableLayout = "auto";
      b.get_element().style.tableLayout = "fixed";
      c.get_element().style.width = "100%";
      b.get_element().style.width = "100%";
    },
    onGridFrozenScroll: function (b) {
      if (!this._frozenScrollCounter) {
        this._frozenScrollCounter = 0;
      }
      this._frozenScrollCounter++;
      this._needToUpdateClientState = false;
      var c = this;
      c._currentElement = Telerik.Web.UI.Grid.GetCurrentElement(b);
      Telerik.Web.UI.Grid.frozenScrollHanlder = function (f) {
        var w = 10;
        if ($telerik.isOpera) {
          w =
            navigator.userAgent.substring(
              navigator.userAgent.indexOf("Version/") + "Version".length + 1
            ) * 1;
        }
        if (c._frozenScrollCounter != f || c._owner._isResize) {
          return;
        }
        if (!c._lastScrollIndex) {
          c._lastScrollIndex = 0;
        }
        var r = c._owner.get_masterTableView();
        var s = c._owner.get_masterTableViewHeader();
        var g = c._currentElement;
        if (
          c._owner.ClientSettings.Scrolling.FrozenColumnsCount >
          s.get_columns().length
        ) {
          c.isFrozenScroll = false;
        }
        var d, n;
        if (c.isFrozenScroll) {
          var u = c._getNotFrozenColumns();
          var z = 0;
          var v = -1;
          var h = g.scrollWidth - g.offsetWidth;
          if (h != 0) {
            v = h;
          }
          z = g.scrollLeft / v;
          if (z < 0) {
            z = -1 * z;
          }
          if (z > 1) {
            z = 1;
          }
          if (
            Telerik.Web.UI.Grid.IsRightToLeft(c._owner.GridHeaderDiv) &&
            ($telerik.isSafari || $telerik.isIE7)
          ) {
            z = 1 - z;
          }
          var m = r.get_columns();
          var l = g.scrollLeft;
          n = 0;
          while (n < u.length) {
            d = u[n];
            var x = u._getPreviousNotFrozenColumnWidth(d.Index);
            if (h < 0) {
              break;
            }
            var e = (d.Width + x) / v;
            if (e <= z && l != 0) {
              if (d.FrozenDisplay) {
                s._hideNotFrozenColumn(d.Index);
              }
            } else {
              if (!d.FrozenDisplay) {
                s._showNotFrozenColumn(d.Index);
              }
            }
            n++;
            if (n == u.length - 1 && z > 0.9999900000000001) {
              var y = 0;
              var q = 0;
              var p = 0;
              for (var o = 0; o < m.length - 1; o++) {
                if (
                  typeof m[o].FrozenDisplay == "boolean" &&
                  !m[o].FrozenDisplay
                ) {
                  y += u[p].Width;
                  p++;
                  q = o;
                }
              }
              if (y - v < 0) {
                var t = u[p];
                s._hideNotFrozenColumn(t.Index);
              }
            }
          }
          c._afterColumnFreeze(r, s, z);
          if (z > 0.9999900000000001 && $telerik.isFirefox) {
            s.get_element().style.width = s.get_element().offsetWidth + "px";
            s.get_element().style.tableLayout = "auto";
            s.get_element().style.tableLayout = "fixed";
            r.get_element().style.width = s.get_element().offsetWidth + "px";
            r.get_element().style.tableLayout = "auto";
            s.get_element().style.tableLayout = "";
            setTimeout(function () {
              if ($telerik.isFirefox && Sys.Browser.version >= 4) {
                r.get_element().style.tableLayout = "fixed";
              }
              s.get_element().style.tableLayout = "auto";
              s.get_element().style.tableLayout = "fixed";
            }, 100);
          }
          if (c._owner.get_masterTableViewFooter()) {
            c._owner.get_masterTableViewFooter().get_element().style.width =
              s.get_element().offsetWidth + "px";
            c._owner
              .get_masterTableViewFooter()
              .get_element().style.tableLayout = "auto";
            c._owner
              .get_masterTableViewFooter()
              .get_element().style.tableLayout = "fixed";
          }
        } else {
          c._owner.GridDataDiv.scrollLeft = g.scrollLeft;
        }
        c._frozenScrollCounter = 0;
        c._needToUpdateClientState = true;
        setTimeout(Telerik.Web.UI.Grid._clientStateUpdater, 500);
        if (c._owner.get_events().getHandler("scroll")) {
          c._owner.raise_scroll(
            new Telerik.Web.UI.GridScrollEventArgs(c._currentElement)
          );
        }
      };
      Telerik.Web.UI.Grid._clientStateUpdater = function () {
        if (c._needToUpdateClientState) {
          c._needToUpdateClientState = false;
          c._owner.updateClientState();
        }
      };
      setTimeout(
        "Telerik.Web.UI.Grid.frozenScrollHanlder(" +
          this._frozenScrollCounter +
          ")",
        0
      );
    },
    onWindowResize: function () {
      this.setDataDivHeight();
      this.setHeaderAndFooterDivsWidth();
      if (this.isFrozenScrollApplied) {
        this.onGridFrozenResized();
      }
    },
    setHeaderAndFooterDivsWidth: function () {
      var d = this._owner,
        j = d.get_masterTableView(),
        b = d.GridDataDiv,
        f = d.GridHeaderDiv;
      if (!j || !b || !f) {
        return;
      }
      var k = j.get_element(),
        m = Telerik.Web.UI.Grid.getScrollBarHeight(),
        g = navigator.userAgent.toLowerCase().indexOf("msie") > -1;
      var h =
        Telerik.Web.UI.Grid.IsRightToLeft(f) &&
        Telerik.Web.UI.Grid.IsScrollOnLeftSide();
      var c = this._owner.GridFooterDiv;
      if (b.clientWidth === b.offsetWidth) {
        f.style.marginRight = f.style.paddingRight = "";
        f.style.marginLeft = f.style.paddingLeft = "";
      } else {
        var i = 0;
        if (!h) {
          i = d.ClientSettings.Scrolling.FrozenColumnsCount
            ? parseInt(
                $telerik.getComputedStyle(f, "border-right-width", 0),
                10
              ) || 0
            : 0;
          f.style.marginRight = m - i + "px";
          f.style.marginLeft = f.style.paddingRight = "";
        } else {
          i = d.ClientSettings.Scrolling.FrozenColumnsCount
            ? parseInt(
                $telerik.getComputedStyle(f, "border-left-width", 0),
                10
              ) || 0
            : 0;
          f.style.marginLeft = m - i + "px";
          f.style.marginRight = f.style.paddingRight = "";
        }
      }
      if (c) {
        c.style.paddingRight = f.style.paddingRight;
        c.style.paddingLeft = f.style.paddingLeft;
        c.style.width = f.style.width;
        c.style.marginRight = f.style.marginRight;
        c.style.marginLeft = f.style.marginLeft;
      }
      if (this._owner._renderMode != Telerik.Web.UI.RenderMode.Mobile) {
        var e = this._owner._groupPanel,
          l = this._owner.get_masterTableViewHeader();
        if (e && e._items.length > 0 && g && l) {
          k.style.width = l.get_element().offsetWidth + "px";
        }
      }
    },
    setDataDivHeight: function () {
      var d = 0,
        b = this._owner.get_element();
      if (this._owner.GridDataDiv && b.style.height != "") {
        this._owner.GridDataDiv.style.height = "10px";
        if (
          this._owner._groupPanelClientID != "" &&
          this._owner._renderMode != Telerik.Web.UI.RenderMode.Mobile
        ) {
          var c = $get(this._owner._groupPanelClientID);
          if (c) {
            d += c.offsetHeight;
          }
        }
        if (this._owner.GridHeaderDiv) {
          d += this._owner.GridHeaderDiv.parentNode.offsetHeight;
        }
        if (this._owner.GridFooterDiv) {
          d += this._owner.GridFooterDiv.parentNode.offsetHeight;
        }
        if (this._owner.PagerControl) {
          d += this._owner.PagerControl.offsetHeight;
        }
        if (this._owner.TopPagerControl) {
          d += this._owner.TopPagerControl.offsetHeight;
        }
        if (
          this._owner.ClientSettings.Scrolling.FrozenColumnsCount &&
          !$telerik.$(".rgCommandRow .rgNext", b).length
        ) {
          d += Telerik.Web.UI.Grid.getScrollBarHeight();
        }
        var e = b.clientHeight - d;
        if (e > 0) {
          this._owner.GridDataDiv.style.height = e + "px";
        }
      }
    },
    initializeAutoLayout: function () {
      var r = this._owner.MasterTableView;
      var m = this._owner.get_masterTableViewHeader();
      if (this.AllowScroll && this.UseStaticHeaders && r && m) {
        var s = r.get_element();
        var o = m.get_element();
        var g = r._getFirstDataRow();
        var j = this._owner.get_masterTableViewFooter();
        var l = j ? j.get_element() : null;
        if (s.style.tableLayout != "auto") {
          return;
        }
        o.style.tableLayout = "auto";
        this._owner.GridHeaderDiv.style.marginRight =
          Telerik.Web.UI.Grid.GetScrollBarWidth() + "px";
        var p = m.HeaderRow;
        var c = 0;
        var n = null;
        if (p) {
          n = p.cells;
        } else {
          if (m.MultiHeaderCells) {
            n = m.MultiHeaderCells;
          }
        }
        if (n != null) {
          c = n.length;
          if (g && g.cells.length < n.length) {
            c = g.cells.length;
          }
        }
        var b = 0;
        for (var q = 0; q < c; q++) {
          var d = this._owner.get_masterTableViewHeader().ColGroup.Cols[q];
          if (!d || (d.style.width != "" && !window.netscape)) {
            continue;
          }
          var t = n[q].offsetWidth;
          if (g && g.cells[q].offsetWidth > t) {
            t = g.cells[q].offsetWidth;
          }
          if (l) {
            var h = l.tBodies[0].rows[0];
            var k = h ? h.cells[q] : null;
            if (k && k.offsetWidth > t) {
              t = k.offsetWidth;
            }
          }
          b += t;
          if (t <= 0) {
            continue;
          }
          var e = 0;
          d.style.width = t + e + "px";
          r.ColGroup.Cols[q].style.width = t + "px";
          if (j && j.ColGroup) {
            j.ColGroup.Cols[q].style.width = t + "px";
          }
        }
        s.style.tableLayout = o.style.tableLayout = "fixed";
        var f = this._owner.GridDataDiv;
        if (f.clientHeight == f.scrollHeight) {
          this._owner.GridHeaderDiv.style.marginRight = "auto";
        }
        if (l) {
          l.style.tableLayout = "fixed";
        }
      }
    },
    initializeSaveScrollPosition: function () {
      if (!this._owner.ClientSettings.Scrolling.SaveScrollPosition) {
        return;
      }
      if (
        this._owner.ClientSettings.Scrolling.ScrollTop != "" &&
        !this._owner.ClientSettings.Scrolling.EnableVirtualScrollPaging
      ) {
        var d = this,
          e = d._owner.get_masterTableView()._virtualization,
          c = d._owner.ClientSettings.Virtualization;
        if (e) {
          if (c.ItemAtTop) {
            setTimeout(function () {
              d._owner.add_dataBound(d._scrollToIndex);
              e.select(c.StartIndex, true);
            }, 100);
          } else {
            if (this._owner.ClientSettings.Scrolling.ScrollTop) {
              e._shouldLoadState = false;
              e._startScrollTop = this._owner.ClientSettings.Scrolling.ScrollTop;
            }
          }
        }
        this._owner.GridDataDiv.scrollTop = this._owner.ClientSettings.Scrolling.ScrollTop;
      }
      var b = $get(this._owner.ClientID + "_Frozen");
      if (
        this._owner.ClientSettings.Scrolling.ScrollLeft &&
        this._owner.ClientSettings.Scrolling.ScrollLeft != ""
      ) {
        if (this._owner.GridHeaderDiv && !b) {
          this._owner.GridHeaderDiv.scrollLeft = this._owner.ClientSettings.Scrolling.ScrollLeft;
        }
        if (this._owner.GridFooterDiv && !b) {
          this._owner.GridFooterDiv.scrollLeft = this._owner.ClientSettings.Scrolling.ScrollLeft;
        }
        if (b) {
          b.scrollLeft = this._owner.ClientSettings.Scrolling.ScrollLeft;
        } else {
          this._owner.GridDataDiv.scrollLeft = this._owner.ClientSettings.Scrolling.ScrollLeft;
        }
      }
    },
    _scrollToIndex: function (b) {
      b.get_masterTableView()._virtualization.scrollToIndex(
        b.ClientSettings.Virtualization.ItemAtTop
      );
      b.remove_dataBound(b._scrolling._scrollToIndex);
    },
    _initializeScroll: function () {
      var c = this;
      var b = function () {
        c.initializeSaveScrollPosition();
      };
      if (window.netscape && !window.opera) {
        window.setTimeout(b, 0);
      } else {
        b();
      }
      this._initializeVirtualScrollPaging();
      if (this._owner.GridDataDiv || this._owner.GridHeaderDiv) {
        this._onGridScrollDelegate = Function.createDelegate(
          this,
          this._onGridScroll
        );
        if (this._owner.GridDataDiv) {
          window.$addHandlers(this._owner.GridDataDiv, {
            scroll: this._onGridScrollDelegate,
          });
        }
        if (this._owner.GridHeaderDiv) {
          window.$addHandlers(this._owner.GridHeaderDiv, {
            scroll: this._onGridScrollDelegate,
          });
        }
      }
    },
    _hideRadComboBoxes: function () {
      if (Telerik.Web.UI.RadComboBox) {
        var c = document.getElementsByTagName("div");
        var f = [];
        var g, k, l, m;
        for (g = 0, l = c.length; g < l; g++) {
          var b = c[g];
          if (Sys.UI.DomElement.containsCssClass(b, "rcbSlide")) {
            Array.add(f, b);
          }
        }
        for (g = 0, l = f.length; g < l; g++) {
          var h = f[g].getElementsByTagName("div");
          if (h) {
            for (k = 0, m = h.length; k < m; k++) {
              if (h[k].id.indexOf("_DropDown") > -1) {
                var e = h[k].id.substr(0, h[k].id.indexOf("_DropDown"));
                var d = $find(e);
                if (
                  d &&
                  d.get_dropDownVisible() &&
                  Telerik.Web.UI.Grid.IsChildOf(
                    d.get_element(),
                    this._owner.get_element()
                  )
                ) {
                  d.hideDropDown();
                }
              }
            }
          }
        }
      }
    },
    _onGridScroll: function (c) {
      if (this._owner._renderMode != Telerik.Web.UI.RenderMode.Mobile) {
        if (this._owner._getFilterMenu()) {
          this._owner._getFilterMenu().hide();
        }
        if (this._owner._headerContextMenu) {
          this._owner._headerContextMenu.hide();
        }
      }
      this._hideRadComboBoxes();
      var g = null;
      if (Telerik.Web.UI.RadDatePicker) {
        g = Telerik.Web.UI.RadDatePicker.PopupInstances;
      } else {
        if (Telerik.Web.UI.RadDateInputComponent) {
          g = Telerik.Web.UI.RadDatePickerComponent.PopupInstances;
        }
      }
      if (g) {
        for (var f in g) {
          if (
            $find(f) &&
            ($find(f)
              .get_id()
              .indexOf(this._owner.ClientID + "_gdtcSharedCalendar") > -1 ||
              $find(f)
                .get_id()
                .indexOf(this._owner.ClientID + "_gdtcSharedTimeView") > -1)
          ) {
            g[f].Hide();
          }
        }
      }
      var b = c.srcElement ? c.srcElement : c.target;
      if (window.opera && this.isFrozenScroll) {
        this._owner.GridDataDiv.scrollLeft = this._owner.GridHeaderDiv.scrollLeft = 0;
        return;
      }
      if (this.UseStaticHeaders) {
        this._updateDataDivScrollPos(b);
      }
      if (
        !Telerik.Web.UI.GridSelection ||
        (Telerik.Web.UI.GridSelection &&
          this._owner.ClientSettings.EnablePostBackOnRowClick) ||
        (this._owner._selectedItemsInternal.length > 0 &&
          this._owner._selectedIndexes.length == 0)
      ) {
        var h = this._owner._selectedItemsInternal;
        if (h.length > 0) {
          for (var d = 0; d < h.length; d++) {
            if (
              h != null &&
              !Array.contains(this._owner._selectedIndexes, h[d].itemIndex)
            ) {
              Array.add(this._owner._selectedIndexes, h[d].itemIndex);
            }
          }
        }
      }
      this._owner.updateClientState();
      if (this._owner.get_events().getHandler("scroll")) {
        this._owner.raise_scroll(
          new Telerik.Web.UI.GridScrollEventArgs(this._owner._gridDataDiv)
        );
      }
    },
    _updateDataDivScrollPos: function (b) {
      if (!b) {
        return;
      }
      if (!this.isFrozenScroll) {
        if (this._owner.GridHeaderDiv) {
          if (b == this._owner.GridHeaderDiv) {
            if ($telerik.isSafari) {
              if (
                this._owner.GridHeaderDiv.scrollLeft &&
                this._owner.GridHeaderDiv.scrollLeft !=
                  this._owner.GridDataDiv.scrollLeft
              ) {
                this._owner.GridDataDiv.scrollLeft = this._owner.GridHeaderDiv.scrollLeft;
              }
            } else {
              this._owner.GridDataDiv.scrollLeft = this._owner.GridHeaderDiv.scrollLeft;
            }
          }
          if (b == this._owner.GridDataDiv) {
            if ($telerik.isSafari) {
              if (
                this._owner.GridHeaderDiv.scrollLeft !=
                this._owner.GridDataDiv.scrollLeft
              ) {
                this._owner.GridHeaderDiv.scrollLeft = this._owner.GridDataDiv.scrollLeft;
              }
            } else {
              this._owner.GridHeaderDiv.scrollLeft = this._owner.GridDataDiv.scrollLeft;
            }
          }
        }
        if (this._owner.GridFooterDiv) {
          this._owner.GridFooterDiv.scrollLeft = this._owner.GridDataDiv.scrollLeft;
        }
      } else {
        if (this._owner.GridHeaderDiv) {
          if ($telerik.isSafari) {
            if (
              this._owner.GridHeaderDiv.scrollLeft &&
              this._owner.GridHeaderDiv.scrollLeft !=
                this._owner.GridDataDiv.scrollLeft
            ) {
              this._owner.GridHeaderDiv.scrollLeft = this._owner.GridDataDiv.scrollLeft;
            }
          } else {
            this._owner.GridHeaderDiv.scrollLeft = this._owner.GridDataDiv.scrollLeft;
          }
        }
        if (this._owner.GridFooterDiv) {
          this._owner.GridFooterDiv.scrollLeft = this._owner.GridDataDiv.scrollLeft;
        }
      }
    },
    _initializeVirtualScrollPaging: function (e) {
      if (!this._owner.ClientSettings.Scrolling.EnableVirtualScrollPaging) {
        return;
      }
      this._scrollCounter = 0;
      this._currentAJAXScrollTop = 0;
      if (
        this._owner.ClientSettings.Scrolling.AJAXScrollTop != "" &&
        typeof this._owner.ClientSettings.Scrolling.AJAXScrollTop != "undefined"
      ) {
        this._currentAJAXScrollTop = this._owner.ClientSettings.Scrolling.AJAXScrollTop;
      }
      var i =
        this._owner.get_masterTableView().get_currentPageIndex() *
        this._owner.get_masterTableView().get_pageSize() *
        20;
      var l =
        this._owner.get_masterTableView().get_pageCount() *
        this._owner.get_masterTableView().get_pageSize() *
        20;
      var j = l - i;
      var g = this._owner.get_masterTableView().get_element();
      var d;
      var b;
      if (($telerik.isIE8 || $telerik.isSafari || $telerik.isOpera) && g) {
        if (g.parentNode) {
          d = $get("dummyDivTop", g.parentNode);
          if (!d) {
            d = document.createElement("div");
            d.innerHTML = "&nbsp;";
            d.style.height = "1px";
            d.id = "dummyDivTop";
            d.style.marginTop = "-1px";
            g.parentNode.insertBefore(d, g);
          }
          b = $get("dummyDivBottom", g.parentNode);
          if (!b) {
            b = document.createElement("div");
            b.innerHTML = "&nbsp;";
            b.style.height = "1px";
            b.id = "dummyDivBottom";
            b.style.marginBottom = "-1px";
            g.parentNode.appendChild(b);
          }
        }
      }
      var k = g.offsetHeight;
      var f = $telerik.isOpera && +Sys.Browser.version < 9.800000000000001;
      if (e && (f || ($telerik.isFirefox && !$telerik.isFirefox3))) {
        if (g.style.marginBottom != "") {
          k = k - parseInt(g.style.marginBottom, 10);
        }
        if (g.style.marginTop != "") {
          k = k - parseInt(g.style.marginTop, 10);
        }
      }
      var c = this._owner._gridDataDiv.offsetHeight;
      if (!f) {
        if (($telerik.isIE8 || $telerik.isOpera) && d && b) {
          d.style.height = Math.max(i, 0) + "px";
          if (j >= c) {
            b.style.height = Math.max(j - k, 0) + "px";
          } else {
            b.style.height = Math.max(c - k, 0) + "px";
          }
        } else {
          g.style.marginTop = i + "px";
          if (j >= c) {
            g.style.marginBottom = j - k + "px";
          } else {
            g.style.marginBottom = c - k + "px";
          }
        }
      } else {
        g.style.position = "relative";
        g.style.top = i + "px";
        g.style.marginBottom = l - k + "px";
      }
      this._owner._gridDataDiv.scrollTop = i;
      this._currentAJAXScrollTop = i;
      this._createScrollerToolTip();
      var h = Function.createDelegate(this, this._onAjaxScrollHandler);
      window.$addHandler(this._owner._gridDataDiv, "scroll", h);
    },
    _createScrollerToolTip: function () {
      var b = $get(this._owner.get_id() + "ScrollerToolTip");
      if (!b) {
        this._scrollerToolTip = document.createElement("span");
        this._scrollerToolTip.id = this._owner.get_id() + "ScrollerToolTip";
        this._scrollerToolTip.style.position = "absolute";
        this._scrollerToolTip.style.zIndex = 10000;
        this._scrollerToolTip.style.display = "none";
        if (this._owner.Skin != "") {
          this._scrollerToolTip.className = String.format(
            "GridToolTip_{0}",
            this._owner.Skin
          );
        }
        if (!this._owner._embeddedSkin || this._owner.Skin == "") {
          this._scrollerToolTip.style.border = "1px solid";
          this._scrollerToolTip.style.backgroundColor = "#F5F5DC";
          this._scrollerToolTip.style.font = "icon";
          this._scrollerToolTip.style.padding = "2px";
        }
        document.body.appendChild(this._scrollerToolTip);
      }
    },
    _onAjaxScrollHandler: function (b) {
      var c = this._owner._gridDataDiv;
      if (c) {
        this._currentScrollTop = c.scrollTop;
      }
      this._scrollCounter++;
      var h = this;
      Telerik.Web.UI.Grid.AjaxScrollInternal = function (e) {
        if (h._scrollCounter != e) {
          return;
        }
        var i = h._owner._gridDataDiv;
        if (h._currentAJAXScrollTop != i.scrollTop) {
          if (h._owner.get_masterTableView().get_currentPageIndex() == d) {
            return;
          }
          h._owner.get_masterTableView().page(d + 1);
        }
        h._scrollCounter = 0;
        h._hideScrollerToolTip();
      };
      this._owner.raise_scroll(new Telerik.Web.UI.GridScrollEventArgs(c));
      var f = Telerik.Web.UI.Grid.getScrollBarHeight();
      var g = c.scrollTop / (c.scrollHeight - c.offsetHeight + f);
      var d = Math.round(
        (this._owner.get_masterTableView().get_pageCount() - 1) * g
      );
      window.setTimeout(
        "Telerik.Web.UI.Grid.AjaxScrollInternal(" + this._scrollCounter + ")",
        500
      );
      this._showScrollerTooltip(g, d);
    },
    _showScrollerTooltip: function (f, c) {
      var e = $get(this._owner.get_id() + "ScrollerToolTip");
      if (e) {
        var d = this._owner.get_masterTableView().get_pageCount();
        this._applyPagerTooltipText(e, c, d);
        var b = this._owner._gridDataDiv;
        e.style.display = "";
        e.style.top =
          parseInt(Telerik.Web.UI.Grid.FindPosY(b), 10) +
          Math.round(b.offsetHeight * f) +
          "px";
        e.style.left =
          parseInt(Telerik.Web.UI.Grid.FindPosX(b), 10) +
          b.offsetWidth -
          (b.offsetWidth - b.clientWidth) -
          e.offsetWidth +
          "px";
      }
    },
    _applyPagerTooltipText: function (h, f, e) {
      if (
        this._owner.ClientSettings.ClientMessages.PagerTooltipFormatString == ""
      ) {
        h.style.display = "none";
      } else {
        var i = this._owner.ClientSettings.ClientMessages
          .PagerTooltipFormatString;
        var d = /\{0[^\}]*\}/g;
        var c = /\{1[^\}]*\}/g;
        var g = f == 0 ? 1 : f + 1;
        var b = e;
        i = i.replace(d, g).replace(c, b);
        h.innerHTML = i;
      }
    },
    _hideScrollerToolTip: function () {
      var b = this;
      setTimeout(function () {
        var c = $get(b._owner.get_id() + "ScrollerToolTip");
        if (c && c.parentNode) {
          c.style.display = "none";
        }
      }, 200);
    },
  };
  Telerik.Web.UI.GridScrolling.registerClass(
    "Telerik.Web.UI.GridScrolling",
    Sys.Component
  );
  Telerik.Web.UI.GridScrollEventArgs = function (b) {
    Telerik.Web.UI.GridScrollEventArgs.initializeBase(this);
    this.scrollTop = b.scrollTop;
    this.scrollLeft = b.scrollLeft;
    this.scrollControl = b;
    this.isOnTop = b.scrollTop == 0 ? true : false;
    var c = Telerik.Web.UI.Grid.getScrollBarHeight();
    if (b.clientHeight == b.offsetHeight) {
      c = 0;
    }
    this.isOnBottom =
      b.scrollHeight - b.offsetHeight + c == b.scrollTop ? true : false;
  };
  Telerik.Web.UI.GridScrollEventArgs.prototype = {
    get_scrollTop: function () {
      return this.scrollTop;
    },
    get_scrollLeft: function () {
      return this.scrollLeft;
    },
    get_scrollControl: function () {
      return this.scrollControl;
    },
    get_isOnTop: function () {
      return this.isOnTop;
    },
    get_isOnBottom: function () {
      return this.isOnBottom;
    },
  };
  Telerik.Web.UI.GridScrollEventArgs.registerClass(
    "Telerik.Web.UI.GridScrollEventArgs",
    Sys.EventArgs
  );
})($telerik.$);
Type.registerNamespace("Telerik.Web.UI");
Telerik.Web.UI.GridSelection = function () {
  Telerik.Web.UI.GridSelection.initializeBase(this);
  this._owner = {};
  this._masterTable = null;
  this._selectionInProgress = false;
  this._lastSelectedItemIndex = null;
};
Telerik.Web.UI.GridSelection.prototype = {
  initialize: function () {
    var c = this;
    Telerik.Web.UI.GridSelection.callBaseMethod(c, "initialize");
    if (c._owner._masterClientID == null) {
      return;
    }
    window.$addHandlers(c._owner.get_element(), {
      click: Function.createDelegate(c, c._click),
    });
    c._masterTable = $get(c._owner._masterClientID).tBodies[0];
    if (
      c._owner.AllowMultiRowSelection &&
      !c._owner.ClientSettings.Selecting.UseClientSelectColumnOnly
    ) {
      if (c._owner.ClientSettings.Selecting.EnableDragToSelectRows) {
        window.$addHandlers(c._masterTable, {
          mousedown: Function.createDelegate(c, c._mousedown),
        });
        window.$addHandlers(c._masterTable, {
          mousemove: Function.createDelegate(c, c._mousemove),
        });
        window.$addHandlers(c._masterTable, {
          mouseup: Function.createDelegate(c, c._mouseup),
        });
        $telerik.addExternalHandler(
          document,
          "mouseup",
          Function.createDelegate(c, c._mouseup)
        );
      } else {
        window.$addHandlers(
          c._masterTable,
          {
            mousedown: c._mouseDownTryClearDocumentEvents,
            mouseup: c._mouseUpRestoreDocumentEvents,
          },
          c
        );
      }
    }
    var d = false;
    if (this._owner._selectedItemsInternal.length > 0) {
      var a = null;
      for (var b = 0; b < this._owner._selectedItemsInternal.length; b++) {
        a = this._owner._selectedItemsInternal[b].itemIndex;
        if (!Array.contains(this._owner._selectedIndexes, a)) {
          Array.add(this._owner._selectedIndexes, a);
          d = true;
        }
      }
    }
    if (d) {
      this._owner.updateClientState();
    }
  },
  updated: function () {
    Telerik.Web.UI.GridSelection.callBaseMethod(this, "updated");
  },
  dispose: function () {
    if (this._masterTable) {
      window.$clearHandlers(this._masterTable);
      this._masterTable._events = null;
    }
    this._masterTable = null;
    this._owner = null;
    Telerik.Web.UI.GridSelection.callBaseMethod(this, "dispose");
  },
  get_owner: function () {
    return this._owner;
  },
  set_owner: function (a) {
    this._owner = a;
  },
  _mouseDownTryClearDocumentEvents: function (a) {
    if (!a.shiftKey || this._shouldReturnOnMouseDown(a)) {
      return;
    }
    Telerik.Web.UI.Grid.ClearDocumentEvents(true);
  },
  _mouseUpRestoreDocumentEvents: function (a) {
    Telerik.Web.UI.Grid.RestoreDocumentEvents();
  },
  _mousedown: function (a) {
    if (
      this._owner.ClientSettings.Selecting.EnableDragToSelectRows &&
      this._owner.AllowMultiRowSelection &&
      !this._owner._rowResizer &&
      a.rawEvent.button != 2
    ) {
      this._createRowSelectorArea(a);
    }
  },
  _mousemove: function (a) {
    if (this._owner._isRowDragged()) {
      this._destroyRowSelectorArea(a);
      return;
    }
    this._resizeRowSelectorArea(a);
  },
  _mouseup: function (a) {
    this._destroyRowSelectorArea(a);
  },
  _shouldReturnOnMouseDown: function (b) {
    if (b.ctrlKey) {
      return true;
    }
    var a = null;
    if (b.srcElement) {
      a = b.srcElement;
    } else {
      if (b.target) {
        a = b.target;
      }
    }
    if (!a || a == null || !a.tagName) {
      return true;
    }
    if (
      a.tagName.toLowerCase() == "input" ||
      a.tagName.toLowerCase() == "textarea" ||
      a.tagName.toLowerCase() == "select" ||
      a.tagName.toLowerCase() == "option"
    ) {
      return true;
    }
    if (
      !this._owner.ClientSettings.Selecting.AllowRowSelect ||
      !this._owner.AllowMultiRowSelection
    ) {
      return true;
    }
  },
  _createRowSelectorArea: function (c) {
    if (this._shouldReturnOnMouseDown(c)) {
      return;
    }
    var b = Telerik.Web.UI.Grid.GetCurrentElement(c);
    if (!b || !Telerik.Web.UI.Grid.IsChildOf(b, this._owner.get_element())) {
      return;
    }
    this._firstRow = Telerik.Web.UI.Grid.GetFirstParentByTagName(b, "tr");
    if (this._firstRow.id == "") {
      return;
    }
    if (!this._rowSelectorArea) {
      this._rowSelectorArea = document.createElement("span");
      this._rowSelectorArea.style.position = "absolute";
      this._rowSelectorArea.style.zIndex = 1000100;
      if (this._owner.Skin != "") {
        this._rowSelectorArea.className = String.format(
          "GridRowSelector_{0}",
          this._owner.Skin
        );
      }
      if (!this._owner._embeddedSkin || this._owner.Skin == "") {
        this._rowSelectorArea.style.backgroundColor = "navy";
      }
      if ("opacity" in this._rowSelectorArea.style) {
        this._rowSelectorArea.style.opacity = 0.1;
      } else {
        if ("MozOpacity" in this._rowSelectorArea.style) {
          this._rowSelectorArea.style.MozOpacity = 1 / 10;
        } else {
          this._rowSelectorArea.style.filter = "alpha(opacity=10);";
        }
      }
      if (this._owner._gridDataDiv) {
        this._rowSelectorArea.style.top =
          Telerik.Web.UI.Grid.FindPosY(this._firstRow) +
          this._owner._gridDataDiv.scrollTop +
          "px";
        this._rowSelectorArea.style.left =
          Telerik.Web.UI.Grid.FindPosX(this._firstRow) +
          this._owner._gridDataDiv.scrollLeft +
          "px";
        if (
          parseInt(this._rowSelectorArea.style.left, 10) <
          Telerik.Web.UI.Grid.FindPosX(this._owner.get_element())
        ) {
          this._rowSelectorArea.style.left =
            Telerik.Web.UI.Grid.FindPosX(this._owner.get_element()) + "px";
        }
      } else {
        this._rowSelectorArea.style.top =
          Telerik.Web.UI.Grid.FindPosY(this._firstRow) + "px";
        this._rowSelectorArea.style.left =
          Telerik.Web.UI.Grid.FindPosX(this._firstRow) + "px";
      }
      document.body.appendChild(this._rowSelectorArea);
      Telerik.Web.UI.Grid.ClearDocumentEvents(true);
      var a = document.activeElement;
      if (a && a.tagName && a.tagName.toLowerCase() === "input") {
        document.activeElement.blur();
      }
    }
  },
  _destroyRowSelectorArea: function (c) {
    if (this._rowSelectorArea) {
      var f = this._rowSelectorArea.style.height;
      document.body.removeChild(this._rowSelectorArea);
      this._rowSelectorArea = null;
      Telerik.Web.UI.Grid.RestoreDocumentEvents();
      var a = Telerik.Web.UI.Grid.GetCurrentElement(c);
      var j;
      if (!a || !Telerik.Web.UI.Grid.IsChildOf(a, this._owner.get_element())) {
        return;
      }
      var l = Telerik.Web.UI.Grid.GetFirstParentByTagName(a, "td");
      if (
        a.tagName.toLowerCase() == "td" ||
        a.tagName.toLowerCase() == "tr" ||
        (l && l.tagName.toLowerCase() == "td")
      ) {
        if (a.tagName.toLowerCase() == "td") {
          j = a.parentNode;
        } else {
          if (l.tagName.toLowerCase() == "td") {
            j = l.parentNode;
          } else {
            if (a.tagName.toLowerCase() == "tr") {
              j = a;
            }
          }
        }
        if (
          this._firstRow.parentNode.parentNode.id == j.parentNode.parentNode.id
        ) {
          var k = this._owner;
          var m =
            this._firstRow.rowIndex < j.rowIndex
              ? this._firstRow.rowIndex
              : j.rowIndex;
          var d =
            m == this._firstRow.rowIndex ? j.rowIndex : this._firstRow.rowIndex;
          if (!c.ctrlKey && !c.shiftKey && m !== d) {
            k.clearSelectedItems();
          }
          this._selectionInProgress = true;
          k._keyboardNavigationProperties.lastClickSelectedItem = j;
          for (var g = m; g < d + 1; g++) {
            if (g == d) {
              this._selectionInProgress = false;
            }
            var b = this._firstRow.parentNode.parentNode.rows[g];
            if (b.id == "") {
              continue;
            }
            if (b) {
              if (f != "") {
                var h = $find(b.id);
                if (h) {
                  h.set_selected(true);
                } else {
                  var n = $find(b.id.split("__")[0]);
                  n.selectItem(b);
                }
              }
            }
          }
        }
      }
    }
  },
  _resizeRowSelectorArea: function (c) {
    if (this._rowSelectorArea && this._rowSelectorArea.parentNode) {
      var a = Telerik.Web.UI.Grid.GetCurrentElement(c);
      if (!a || !Telerik.Web.UI.Grid.IsChildOf(a, this._owner.get_element())) {
        return;
      }
      var h = parseInt(this._rowSelectorArea.style.left, 10);
      var f = Telerik.Web.UI.Grid.GetEventPosX(c);
      var i = parseInt(this._rowSelectorArea.style.top, 10);
      var g = Telerik.Web.UI.Grid.GetEventPosY(c);
      if (
        g >=
          $telerik.getLocation(this._rowSelectorArea).y +
            this._rowSelectorArea.offsetHeight &&
        this._rowSelectorArea.dragDirectionTop
      ) {
        this._rowSelectorArea.dragDirectionTop = null;
      }
      if (f - h - 5 > 0) {
        this._rowSelectorArea.style.width = f - h - 5 + "px";
      }
      if (
        this._rowSelectorArea.offsetWidth >
        this._owner.get_element().offsetWidth
      ) {
        this._rowSelectorArea.style.width =
          this._owner.get_element().offsetWidth + "px";
      }
      if (g > i && !this._rowSelectorArea.dragDirectionTop) {
        if (g - i - 5 > 0) {
          this._rowSelectorArea.style.height = g - i - 5 + "px";
        }
      } else {
        if (!this._rowSelectorArea.dragDirectionTop) {
          this._rowSelectorArea.dragDirectionTop = true;
        }
        if (i - g - 5 > 0 || this._rowSelectorArea.dragDirectionTop) {
          this._rowSelectorArea.style.top = g - 5 + "px";
          var d =
            Telerik.Web.UI.Grid.FindPosY(this._firstRow) -
            parseInt(this._rowSelectorArea.style.top, 10) -
            5;
          if (d > 0) {
            if (this._owner._gridDataDiv) {
              if (
                this._owner._gridDataDiv.offsetHeight +
                  this._owner._gridDataDiv.offsetTop >
                parseInt(this._rowSelectorArea.style.top, 10) + d
              ) {
                this._rowSelectorArea.style.height = d + "px";
              } else {
                var b =
                  this._owner._gridDataDiv.offsetHeight +
                  this._owner._gridDataDiv.offsetTop -
                  parseInt(this._rowSelectorArea.style.top, 10) -
                  5;
                this._rowSelectorArea.style.height =
                  b >= 0 ? b + "px" : 0 + "px";
              }
            } else {
              this._rowSelectorArea.style.height = d + "px";
            }
          }
        }
      }
    }
  },
  _shouldRaiseRowEvent: function (b) {
    var d,
      a = $find(b.id);
    if (!a && b.parentNode) {
      a = $find(b.parentNode.id);
    }
    var c =
      b.tagName.toLowerCase() == "input" &&
      b.type.toLowerCase() == "checkbox" &&
      b.id &&
      b.id.indexOf("SelectCheckBox") != -1;
    if (
      (b.tagName.toLowerCase() == "input" && !c) ||
      b.tagName.toLowerCase() == "select" ||
      b.tagName.toLowerCase() == "option" ||
      b.tagName.toLowerCase() == "button" ||
      b.tagName.toLowerCase() == "a" ||
      b.tagName.toLowerCase() == "textarea" ||
      b.tagName.toLowerCase() == "img" ||
      (($telerik.isChrome || Telerik.Web.Browser.edge) &&
        b.tagName.toLowerCase() == "span" &&
        b.parentNode &&
        b.parentNode.tagName.toLowerCase() == "button") ||
      (a &&
        Telerik.Web.UI.RadButton &&
        Telerik.Web.UI.RadButton.isInstanceOfType(a))
    ) {
      d = false;
    } else {
      d = true;
    }
    return d;
  },
  _click: function (b) {
    var c = b.target ? b.target : b.srcElement;
    if ($telerik.isTouchDevice && c.nodeType == 3) {
      c = c.parentNode;
    }
    if (!c.tagName) {
      return;
    }
    if (
      c.tagName.toLowerCase() == "span" &&
      c.className.indexOf("rfdToggleImage") > -1
    ) {
      return;
    }
    if (c.tagName.toLowerCase() == "label" && c.htmlFor) {
      return;
    }
    var g = c.id && c.id.indexOf("RowDragHandle") > -1;
    if (!this._shouldRaiseRowEvent(c) && !g) {
      return;
    }
    var f =
      c.tagName.toLowerCase() == "input" &&
      c.type.toLowerCase() == "checkbox" &&
      c.id &&
      c.id.indexOf("SelectCheckBox") != -1;
    var l = this._owner;
    if (f && l.ClientSettings.AllowKeyboardNavigation) {
      l.get_element().focus();
    }
    if (
      l.ClientSettings.Selecting &&
      l.ClientSettings.Selecting.AllowRowSelect
    ) {
      if (b.ctrlKey) {
        l._keyboardNavigationProperties.holdingCtrl = true;
      }
      if (c.tagName.toLowerCase() != "tr") {
        c = Telerik.Web.UI.Grid.GetFirstParentByTagName(c, "tr");
        while (c && c.id.split("__").length !== 2 && c.parentNode) {
          c = Telerik.Web.UI.Grid.GetFirstParentByTagName(c.parentNode, "tr");
        }
      }
      if (
        !(
          l.ClientSettings.Selecting.UseClientSelectColumnOnly &&
          !f &&
          this._findClientSelectColumn(c) &&
          !g
        )
      ) {
        var k = c;
        var d = false;
        while (c && Telerik.Web.UI.Grid.IsChildOf(c, l.get_element())) {
          if (c.id && c.id.split("__").length == 2) {
            d = true;
            break;
          }
          c = Telerik.Web.UI.Grid.GetFirstParentByTagName(c.parentNode, "tr");
        }
        if (!d) {
          c = k;
        }
        if (
          c &&
          (c.parentNode.parentNode.parentNode == l.get_element() ||
            c.parentNode.parentNode.parentNode == l._gridDataDiv ||
            Array.contains(
              l.get_detailTables(),
              $find(c.parentNode.parentNode.id)
            )) &&
          c.id &&
          c.id.split("__").length == 2
        ) {
          if (l.get_allowMultiRowSelection()) {
            if (b.shiftKey) {
              var a = l._searchRowIndex(c.id);
              var j = this._lastSelectedItemIndex;
              this._selectionInProgress = true;
              if (!isNaN(parseInt(j, 10))) {
                if (j < a) {
                  if (!b.ctrlKey) {
                    l._clearSelectedItemsExcludingInterval(j, a);
                  }
                  l._selectItemsInInterval(j, a, 1);
                } else {
                  if (j > a) {
                    if (!b.ctrlKey) {
                      l._clearSelectedItemsExcludingInterval(a, j);
                    }
                    l._selectItemsInInterval(a, j, 1);
                  } else {
                    l._clearSelectedItemsExcludingInterval(j, j);
                  }
                }
              } else {
                this._lastSelectedItemIndex = a;
              }
            }
            if (b.ctrlKey || (!b.ctrlKey && !b.shiftKey)) {
              this._lastSelectedItemIndex = l._searchRowIndex(c.id);
            }
            this._selectionInProgress = false;
            this._selectRowInternal(c, b, f, true, true);
          } else {
            if (f) {
              var i = Array.contains(l._selectedIndexes, c.id.split("__")[1]);
              this._selectRowInternal(c, b, i, i, true);
            } else {
              this._selectRowInternal(c, b, false, false, true);
            }
          }
          l._keyboardNavigationProperties.lastClickSelectedItem = c;
        }
      }
    }
    if (l.ClientSettings && l.ClientSettings.EnablePostBackOnRowClick && c) {
      if (c && c.tagName.toLowerCase() != "tr") {
        c = Telerik.Web.UI.Grid.GetFirstParentByTagName(c, "tr");
      }
      if (c && c.id != "" && c.id.split("__").length == 2) {
        var n = $find(
          Telerik.Web.UI.Grid.GetFirstParentByTagName(c, "table").id
        );
        if (n && n.get_owner() == this._owner) {
          var h = c.id.split("__")[1];
          var m = l.ClientSettings.PostBackFunction;
          m = m.replace("{0}", l.UniqueID);
          m = m.replace("{1}", "RowClick;" + h);
          eval(m);
        }
      }
    }
  },
  _selectRowInternal: function (s, h, m, x, v, t) {
    if (Sys.UI.DomElement.containsCssClass(s, "rgDeletedRow")) {
      return;
    }
    var u;
    if (typeof t == "undefined") {
      t = true;
      u = false;
    } else {
      u = t;
    }
    var o = s.id.split("__")[1];
    var w = $find(s.id.split("__")[0]);
    w.get_dataItems();
    var f = $find(s.id);
    if (f && !f.get_selectable()) {
      this._selectRowInternalSetActiveRow(s, h);
      return;
    }
    var n, l, p, q, k, b, c, a;
    if (!m) {
      var r = (h.rawEvent && !h.rawEvent.metaKey) || $telerik.isTouchDevice;
      if (
        !this._owner.AllowMultiRowSelection ||
        (this._owner.AllowMultiRowSelection && !(h.ctrlKey || h.shiftKey) && r)
      ) {
        if (!h.shiftKey) {
          this._owner._keyboardNavigationProperties.lastSelectedRowIndex = this._owner._searchRowIndex(
            s.id
          );
        }
        if (this._owner._selectedItemsInternal.length > 0) {
          l = this._owner._selectedItemsInternal.length - 1;
          while (l >= 0) {
            var d = $get(this._owner._selectedItemsInternal[l].id);
            if (d == null) {
              Array.remove(
                this._owner._selectedItemsInternal,
                this._owner._selectedItemsInternal[l]
              );
              Array.remove(
                this._owner._selectedIndexes,
                this._owner._selectedIndexes[l]
              );
              l--;
              continue;
            }
            f = $find(d.id);
            if (f && !f.get_selectable()) {
              l--;
              continue;
            }
            a = new Telerik.Web.UI.GridDataItemCancelEventArgs(d, h);
            this._owner.raise_rowDeselecting(a);
            if (a.get_cancel()) {
              l--;
              continue;
            }
            Sys.UI.DomElement.removeCssClass(
              d,
              w._data._selectedItemStyleClass
            );
            if (w._data._selectedItemStyle) {
              c = d.style.cssText.toLowerCase().replace(/ /g, "");
              b = c.split(";");
              for (p = 0; p < b.length; p++) {
                if (
                  w._data._selectedItemStyle.toLowerCase().indexOf(b[p]) != -1
                ) {
                  b[p] = "";
                }
              }
              d.style.cssText = b.join(";");
            }
            this._checkClientSelectColumn(d, false);
            n = $find(this._owner._selectedItemsInternal[l].id);
            if (n) {
              n._selected = false;
            }
            Array.remove(
              this._owner._selectedItemsInternal,
              this._owner._selectedItemsInternal[l]
            );
            Array.remove(
              this._owner._selectedIndexes,
              this._owner._selectedIndexes[l]
            );
            if (this._owner.get_enableAriaSupport()) {
              d.setAttribute("aria-selected", "false");
            }
            this._owner.raise_rowDeselected(
              new Telerik.Web.UI.GridDataItemEventArgs(d, h)
            );
            l = Math.min(this._owner._selectedItemsInternal.length, l);
            l--;
          }
        }
        k = this._getTableHeaderRow(s.parentNode.parentNode);
        if (k) {
          this._checkClientSelectColumn(k, false);
        }
      }
    }
    if (!Array.contains(this._owner._selectedIndexes, o)) {
      if (
        !this._owner.AllowMultiRowSelection &&
        this._owner._selectedIndexes.length > 0
      ) {
        this._checkClientSelectColumn(s, false);
      } else {
        if (!m || t) {
          a = new Telerik.Web.UI.GridDataItemCancelEventArgs(s, h);
          this._owner.raise_rowSelecting(a);
          if (a.get_cancel()) {
            if (m) {
              this._checkClientSelectColumn(s, false);
              if (
                s.parentNode != null &&
                typeof s.parentNode != "undefined" &&
                s.parentNode.parentNode != null &&
                typeof s.parentNode.parentNode != "undefined"
              ) {
                k = this._getTableHeaderRow(s.parentNode.parentNode);
                if (k) {
                  this._checkClientSelectColumn(k, false);
                }
              }
            }
            return false;
          }
          Sys.UI.DomElement.addCssClass(s, w._data._selectedItemStyleClass);
          if (w._data._selectedItemStyle != "") {
            s.style.cssText =
              s.style.cssText + ";" + w._data._selectedItemStyle;
          }
          Array.add(this._owner._selectedItemsInternal, {
            itemIndex: o,
            id: s.id,
          });
          Array.add(this._owner._selectedIndexes, o);
          this._checkClientSelectColumn(s, true);
          n = $find(s.id);
          if (n) {
            n._selected = true;
          }
          if (this._owner.get_enableAriaSupport()) {
            s.setAttribute("aria-selected", "true");
          }
          this._owner.raise_rowSelected(
            new Telerik.Web.UI.GridDataItemEventArgs(s, h)
          );
          var y = 0;
          var g = w.get_dataItems();
          for (l = 0; (q = g.length), l < q; l++) {
            if (!g[l].get_selectable() && !g[l].get_selected()) {
              y++;
            }
          }
          if (
            !u &&
            w.get_selectedItems().length == w.get_dataItems().length - y
          ) {
            if (
              s.parentNode != null &&
              typeof s.parentNode != "undefined" &&
              s.parentNode.parentNode != null &&
              typeof s.parentNode.parentNode != "undefined"
            ) {
              k = this._getTableHeaderRow(s.parentNode.parentNode);
              if (k) {
                this._checkClientSelectColumn(k, true);
              }
            }
          }
        }
      }
    } else {
      if ((x || (m && !t)) && !h.shiftKey) {
        a = new Telerik.Web.UI.GridDataItemCancelEventArgs(s, h);
        this._owner.raise_rowDeselecting(a);
        if (!a.get_cancel()) {
          Sys.UI.DomElement.removeCssClass(s, w._data._selectedItemStyleClass);
          if (w._data._selectedItemStyle) {
            c = s.style.cssText.toLowerCase().replace(/ /g, "");
            b = c.split(";");
            for (p = 0; p < b.length; p++) {
              if (
                w._data._selectedItemStyle.toLowerCase().indexOf(b[p]) != -1
              ) {
                b[p] = "";
              }
            }
            s.style.cssText = b.join(";");
          }
          for (l = 0; l < this._owner._selectedItemsInternal.length; l++) {
            if (this._owner._selectedItemsInternal[l].itemIndex == o) {
              n = $find(this._owner._selectedItemsInternal[l].id);
              if (n) {
                n._selected = false;
              }
              Array.remove(
                this._owner._selectedItemsInternal,
                this._owner._selectedItemsInternal[l]
              );
              break;
            }
          }
          for (l = 0; l < this._owner._selectedIndexes.length; l++) {
            if (this._owner._selectedIndexes[l] == o) {
              Array.remove(
                this._owner._selectedIndexes,
                this._owner._selectedIndexes[l]
              );
              break;
            }
          }
          this._checkClientSelectColumn(s, false);
          if (this._owner.get_enableAriaSupport()) {
            s.setAttribute("aria-selected", "false");
          }
          this._owner.raise_rowDeselected(
            new Telerik.Web.UI.GridDataItemEventArgs(s, h)
          );
          if (
            s.parentNode != null &&
            typeof s.parentNode != "undefined" &&
            s.parentNode.parentNode != null &&
            typeof s.parentNode.parentNode != "undefined"
          ) {
            k = this._getTableHeaderRow(s.parentNode.parentNode);
            if (k) {
              this._checkClientSelectColumn(k, false);
            }
          }
        }
      }
    }
    if (v) {
      this._owner.updateClientState();
    }
    this._selectRowInternalSetActiveRow(s, h);
    return true;
  },
  _selectRowInternalSetActiveRow: function (b, a) {
    if (this._owner.ClientSettings.AllowKeyboardNavigation) {
      if (
        this._selectionInProgress &&
        this._owner.get_allowMultiRowSelection()
      ) {
        return true;
      }
      if (this._owner._activeRow && b.id != this._owner._activeRow.id) {
        this._owner._setActiveRow(b, a);
      }
    }
  },
  _checkClientSelectColumn: function (e, d) {
    var c = e.getElementsByTagName("input");
    for (var a = 0; a < c.length; a++) {
      var b = c[a];
      if (b.type.toLowerCase() != "checkbox") {
        continue;
      }
      if (b.id && b.id.indexOf("SelectCheckBox") != -1) {
        b.checked = d;
        if (this._owner.get_enableAriaSupport()) {
          b.setAttribute("aria-checked", d.toString());
        }
        if ($telerik.isSafari) {
          b.safarichecked = d;
        }
      }
    }
  },
  _getTableHeaderRow: function (c) {
    var b = Telerik.Web.UI.Grid.getTableHeaderRow(c);
    var a = this._owner.get_masterTableView()._hasMultiHeaders;
    if (b) {
      if (a && b.parentNode.tagName.toLowerCase() == "thead") {
        return b.parentNode;
      }
      return b;
    }
    b = $get(
      String.format(
        "{0}_Header",
        this.get_owner().get_masterTableView().get_id()
      )
    );
    if (b) {
      b = Telerik.Web.UI.Grid.getTableHeaderRow(b);
    }
    if (a && b.parentNode.tagName.toLowerCase() == "thead") {
      return b.parentNode;
    }
    return b;
  },
  _findClientSelectColumn: function (d) {
    if (!d) {
      return;
    }
    var c = d.getElementsByTagName("input");
    if (!c) {
      return;
    }
    for (var a = 0; a < c.length; a++) {
      var b = c[a];
      if (b.type.toLowerCase() != "checkbox") {
        continue;
      }
      if (b.id && b.id.indexOf("SelectCheckBox") != -1) {
        return b;
      }
    }
  },
};
Telerik.Web.UI.GridSelection.registerClass(
  "Telerik.Web.UI.GridSelection",
  Sys.Component
);
Type.registerNamespace("Telerik.Web.UI");
Telerik.Web.UI.GridTableView = function (a) {
  Telerik.Web.UI.GridTableView.initializeBase(this, [a]);
  this._owner = {};
  this._data = {};
  this._hiddenCols = {};
  this._dataItemsCreated = false;
  this._dataItems = [];
  this._cachedItems = [];
  this._columnsInternal = [];
  this._sortExpressions = new Telerik.Web.UI.GridSortExpressions();
  this._filterExpressions = new Telerik.Web.UI.GridFilterExpressions();
  this._firstDataRow = null;
  this._exapndedGroupItemsTemp;
  this._enableGroupsExpandAll;
  this._groupHeadersCount = [];
  this._enableHierarchyExpandAll;
  this._dataSource = null;
  this._preventUpdatePager = false;
  this._virtualItemCount = 0;
  this._pageButtonCount = 10;
  this._hasDetailTables = false;
  this._hasMultiHeaders = false;
  this._hierarchyLoadMode = "ServerOnDemand";
  this.__shouldPerformFiltering = true;
  this._shouldAutoPostBackOnFilter = true;
  this._rangeValidationInProcess = false;
  this._calculatedParentTableCells = false;
  this._groupLevelsCount = 0;
  this._groupColumnIndex = 1;
  this._originalGroupLevel = null;
  this._resizedColumnsData = new Telerik.Web.UI.Grid.ClientStateData();
  this._hidedItemsData = new Telerik.Web.UI.Grid.ClientStateData();
  this._showedItemsData = new Telerik.Web.UI.Grid.ClientStateData();
  this._resizedItemsData = new Telerik.Web.UI.Grid.ClientStateData();
  this._resizedControlData = new Telerik.Web.UI.Grid.ClientStateData();
  this._includeAllHeaderRows;
  this._scrollbarHeight;
};
Telerik.Web.UI.GridTableView.prototype = {
  initialize: function () {
    Telerik.Web.UI.GridTableView.callBaseMethod(this, "initialize");
    if (this._element && this._owner && this._owner._element) {
      var c = this._element.parentNode;
      while (c) {
        if (this._owner._element == c && c.control) {
          this._owner = c.control;
          break;
        }
        c = c.parentNode;
      }
    }
    if (
      $telerik.isIE &&
      this._data &&
      this._data._batchEditingSettings &&
      (this._data._batchEditingSettings.eventType || "").toLowerCase() ==
        "mousedown"
    ) {
      this._data._batchEditingSettings.eventType = "click";
    }
    if (
      this._data._selectedItemStyleClass == "" &&
      this._data._selectedItemStyle == ""
    ) {
      this._data._selectedItemStyle = "background-color:navy;color:white;";
    }
    if (
      this._data._renderActiveItemStyleClass == "" &&
      this._data._renderActiveItemStyle == ""
    ) {
      this._data._renderActiveItemStyle = "background-color:navy;color:white;";
    }
    this.ColGroup = Telerik.Web.UI.Grid.GetTableColGroup(this.get_element());
    if (this.ColGroup) {
      this.ColGroup.Cols = Telerik.Web.UI.Grid.GetTableColGroupCols(
        this.ColGroup
      );
    }
    var p;
    var n;
    if ($telerik.quirksMode) {
      for (p = 0; p < this.ColGroup.Cols.length; p++) {
        if (this.ColGroup.Cols[p].style.display == "none") {
          this.ColGroup.Cols[p].style.display = "";
        }
      }
    }
    this.PageSize = this._data.PageSize;
    this.PageCount = this._data.PageCount;
    this.CurrentPageIndex = this._data.CurrentPageIndex;
    this._virtualItemCount = this._data.VirtualItemCount;
    this._pageButtonCount = this._data.PageButtonCount;
    this._hasDetailTables = this._data.HasDetailTables;
    this._hasMultiHeaders = this._data.HasMultiHeaders;
    if (this._data.GroupLevelsCount) {
      this._groupLevelsCount = this._data.GroupLevelsCount * 1;
      this._exapndedGroupItemsTemp = new Array(this._groupLevelsCount);
    }
    if (this._data.GroupHeadersCount) {
      this._groupHeadersCount = this._data.GroupHeadersCount;
    }
    if (this._data.HierarchyLoadMode) {
      this._hierarchyLoadMode = this._data.HierarchyLoadMode;
    }
    if (this._data.EnableGroupsExpandAll) {
      this._enableGroupsExpandAll = this._data.EnableGroupsExpandAll;
    }
    if (this._data.EnableHierarchyExpandAll) {
      this._enableHierarchyExpandAll = this._data.EnableHierarchyExpandAll;
    }
    var h = null;
    var o =
      this._owner.ClientSettings.Scrolling &&
      this._owner.ClientSettings.Scrolling.AllowScroll &&
      this._owner.ClientSettings.Scrolling.UseStaticHeaders;
    if (
      (this.get_element().id.indexOf("_Header") != -1 && o) ||
      (!o && this.get_element().id.indexOf("_Header") == -1) ||
      this.get_element().id.indexOf("_Detail") != -1
    ) {
      var r = [];
      if (this._hasMultiHeaders) {
        r = Telerik.Web.UI.Grid.getMultiHeaderCells(this);
        this.MultiHeaderCells = r;
      } else {
        h = Telerik.Web.UI.Grid.getTableHeaderRow(this.get_element());
      }
      if (!h) {
        var m = $get(this.get_element().id + "_Header");
        if (m) {
          h = Telerik.Web.UI.Grid.getTableHeaderRow(m);
        }
      }
      this.HeaderRow = h;
      var s = this._owner;
      var v = s.ClientSettings;
      if (
        $telerik.isMobileIE10 &&
        (v.AllowRowsDragDrop || (v.Scrolling && v.Scrolling.AllowScroll))
      ) {
        this.get_element().style.msTouchAction = "none";
        this.get_element().style.touchAction = "none";
      }
      var b = this._data._columnsData;
      for (n = 0; n < b.length; n++) {
        if (!h && (!r || !r[n])) {
          continue;
        }
        var g = b[n];
        var e = this._hasMultiHeaders ? r[n] : h.cells[n];
        if (!e) {
          continue;
        }
        this._owner.raise_columnCreating(new Sys.EventArgs());
        var f = $create(
          Telerik.Web.UI.GridColumn,
          { _owner: this, _data: g },
          null,
          null,
          e
        );
        var d = new Sys.EventArgs();
        d.get_column = function () {
          return f;
        };
        Array.add(this._columnsInternal, f);
        this._owner.raise_columnCreated(d);
      }
      this._setupHeaderRotations();
      if (this._hasMultiHeaders) {
        var w = this.get_element().tHead;
        var u = this._owner.ClientSettings.Scrolling;
        if (
          u &&
          u.AllowScroll &&
          u.UseStaticHeaders &&
          !Telerik.Web.UI.Grid.isDetailTable(this)
        ) {
          w = this.get_owner().GridHeaderDiv.getElementsByTagName("table")[0]
            .tHead;
        }
        var l = [];
        if (w && w.rows) {
          for (var q = 0; q < w.rows.length; q++) {
            var t = w.rows[q];
            if (t.className && t.className.indexOf("rgMultiHeaderRow") > -1) {
              l.push(t);
            }
          }
        }
        if (!this._calculatedParentTableCells) {
          this._calculatedParentTableCells = true;
          this._setParentTableCells(l);
        }
      }
    }
    if ($telerik.isIE && document.documentMode && document.documentMode <= 7) {
      this._setHeaderFooterSpan();
    }
    if (
      this._data.VirtualizationDataAsJSON &&
      this.get_element().parentNode.id.indexOf("_GridData") !== -1
    ) {
      this._virtualization = $create(
        Telerik.Web.UI.GridVirtualization,
        null,
        null,
        { _tableView: this.get_id() },
        null
      );
      this._virtualization._tableView = this;
      if (this._owner.ClientSettings.Virtualization.StartIndex) {
        this._virtualization._startIndex = this._owner.ClientSettings.Virtualization.StartIndex;
      }
      this._virtualization.initialize();
    } else {
      if (
        this._owner.get_events().getHandler("rowCreating") ||
        this._owner.get_events().getHandler("rowCreated")
      ) {
        this.get_dataItems();
      }
    }
    if (this._owner.get_enableAriaSupport()) {
      this._initializeAriaSupport();
    }
  },
  dispose: function () {
    this._owner.raise_tableDestroying(Sys.EventArgs.Empty);
    this._sortExpressions.dispose();
    this._filterExpressions.dispose();
    window.$clearHandlers(this.get_element());
    if (this.get_element().tBodies[0]) {
      window.$clearHandlers(this.get_element().tBodies[0]);
    }
    var a;
    for (a = 0; a < this._dataItems.length; a++) {
      if (this._dataItems[a]) {
        this._dataItems[a].dispose();
        this._dataItems[a] = null;
      }
    }
    if (this._cachedItems) {
      for (a = 0; a < this._cachedItems.length; a++) {
        if (this._cachedItems[a]) {
          this._cachedItems[a].dispose();
          this._cachedItems[a] = null;
        }
      }
    }
    this._dataItems = [];
    if (this.ColGroup != null && this.ColGroup.Cols != null) {
      this.ColGroup.Cols = null;
    }
    if (this.ColGroup != null) {
      this.ColGroup = null;
    }
    this._element.control = null;
    this._owner = null;
    this._data = null;
    this._hiddenCols = null;
    this._dataItems = null;
    this._cachedItems = null;
    this._columnsInternal = null;
    this._groupHeadersCount = null;
    Telerik.Web.UI.GridTableView.callBaseMethod(this, "dispose");
  },
  _setupHeaderRotations: function () {
    var e = this,
      b = e.get_columns(),
      d = 0,
      a;
    var c;
    for (c = 0; c < b.length; c++) {
      a = b[c].get_element();
      if (
        Sys.UI.DomElement.containsCssClass(a, "rgRotateHeader") &&
        a.children[0].offsetWidth > d
      ) {
        d = a.children[0].offsetWidth;
      }
    }
    if (parseInt($telerik.getComputedStyle(a, "height", 0), 10) > d) {
      return;
    }
    if ($telerik.isOpera) {
      d += [
        "paddingTop",
        "paddingBottom",
        "borderTopWidth",
        "borderBottomWidth",
      ].reduce(function (g, f) {
        var h = parseInt($telerik.getCurrentStyle(a, f), 10);
        return g + (isNaN(h) ? 0 : h);
      }, 0);
    }
    if (d != 0) {
      for (c = 0; c < b.length; c++) {
        if (b[c].get_element().style.height == "") {
          b[c].get_element().style.height = d + "px";
        }
      }
    }
  },
  get_columns: function () {
    return this._columnsInternal;
  },
  showFilterItem: function () {
    this._toggleFilterItemVisibility(true);
  },
  hideFilterItem: function () {
    this._toggleFilterItemVisibility(false);
  },
  get_isFilterItemVisible: function () {
    return this._data.isFilterItemExpanded;
  },
  _toggleFilterItemVisibility: function (a) {
    var b = this._getTableFilterRow();
    if (b && a != this._data.isFilterItemExpanded) {
      if (a) {
        b.style.display = "";
      } else {
        b.style.display = "none";
      }
      this._data.isFilterItemExpanded = a;
      Array.add(this._owner._expandedFilterItems, this._data.UniqueID + "!");
      this._owner.updateClientState();
    }
  },
  get_tableFilterRow: function () {
    return this._getTableFilterRow();
  },
  _getTableFilterRow: function () {
    var a = null;
    var e = this.get_element();
    var b;
    var c;
    if (e.tHead && e.tHead.style.display != "none") {
      if (this._hasMultiHeaders) {
        for (b = 0; b < e.tHead.rows.length; b++) {
          c = e.tHead.rows[b];
          if (c.className && c.className.indexOf("rgFilterRow") > -1) {
            return c;
          }
        }
      }
      if (!this.HeaderRow) {
        return null;
      }
      var d = this.HeaderRow ? this.HeaderRow.rowIndex : 1;
      for (b = d; b < e.tHead.rows.length; b++) {
        c = e.tHead.rows[b];
        if (
          c != null &&
          c.cells[0] != null &&
          c.cells[0].tagName != null &&
          c.cells[0].tagName.toLowerCase() != "th" &&
          c.className &&
          c.className.indexOf("rgFilterRow") > -1
        ) {
          a = c;
          break;
        }
      }
    } else {
      if (
        this._owner.get_masterTableViewHeader() &&
        this._owner.get_masterTableViewHeader().get_element()
      ) {
        e = this._owner.get_masterTableViewHeader().get_element();
        if (e.tHead && this._hasMultiHeaders) {
          for (b = 0; b < e.tHead.rows.length; b++) {
            c = e.tHead.rows[b];
            if (c.className && c.className.indexOf("rgFilterRow") > -1) {
              return c;
            }
          }
        }
        for (b = 1; b < e.rows.length; b++) {
          c = e.tHead.rows[b];
          if (
            c != null &&
            c.cells[0] != null &&
            c.cells[0].tagName != null &&
            c.className &&
            c.className.indexOf("rgFilterRow") > -1
          ) {
            a = e.tHead.rows[b];
            break;
          }
        }
      }
    }
    return a;
  },
  _initializeAriaSupport: function () {
    var j = this.get_element();
    if (j.id && j.id.indexOf("Detail") != -1) {
      j.setAttribute("role", "listitem");
      var h = j.parentNode;
      if (h && h.tagName.toLowerCase() == "td") {
        h.setAttribute("role", "group");
      }
      var f = this.get_dataItems();
      if (f.length > 0) {
        var g = f[0].get_element().id.split(":").length;
        j.setAttribute("aria-level", g.toString());
      }
    }
    var a = this.get_tableFilterRow();
    if (a) {
      var d = a.getElementsByTagName("input");
      for (var b = 0; b < d.length; b++) {
        var c = d[b];
        var e = c.style.display != "none" && c.style.visibility != "hidden";
        if (e) {
          var k = c.type.toLowerCase();
          if (k == "text") {
            c.setAttribute("role", "textbox");
          }
          if (k == "submit" || k == "button") {
            c.setAttribute("role", "button");
          }
          if (k == "checkbox") {
            c.setAttribute("role", "checkbox");
          }
        }
      }
    }
    this._initializeTableViewAriaSupport();
  },
  _initializeTableViewAriaSupport: function () {
    var e = this.get_owner().ClientSettings;
    var h = this.get_columns();
    var l = this._data.EditMode;
    var q = this.get_dataItems();
    var m;
    var n;
    var o;
    var b;
    for (m = 0; m < q.length; m++) {
      o = q[m];
      if (
        e &&
        e.AllowRowsDragDrop &&
        e.Selecting &&
        e.Selecting.AllowRowSelect
      ) {
        var p = o.get_element();
        p.setAttribute("aria-dropeffect", "move");
      }
      for (n = 0; n < h.length; n++) {
        var f = h[n];
        var k = null;
        var g = f.get_element();
        if (g.style.display == "none") {
          g.setAttribute("aria-hidden", "true");
        }
        if (e.AllowColumnsReorder) {
          g.setAttribute("aria-dropeffect", "move");
        }
        var r = f.get_uniqueName();
        if (g.childNodes.length > 0) {
          g.setAttribute("aria-label", f._data.UniqueName);
        }
        if (f._data.ColumnType == "GridEditCommandColumn" && l == "PopUp") {
          k = r;
        }
        b = o.get_cell(r);
        if (
          f._data.ColumnType == "GridClientSelectColumn" ||
          f._data.ColumnType == "GridCheckBoxColumn"
        ) {
          var d = b.getElementsByTagName("input");
          if (d.length > 0) {
            var c = d[0];
            if (c && c.id) {
              var a = f._data.UniqueName + " checkbox";
              c.setAttribute("role", "checkbox");
              c.setAttribute("title", a);
              c.setAttribute("aria-label", a);
              c.setAttribute("aria-checked", c.checked);
            }
          }
        }
        if (b.style.display == "none") {
          b.setAttribute("aria-hidden", "true");
        }
        if (f.get_readOnly()) {
          b.setAttribute("aria-readonly", "true");
        }
        if (k && l == "PopUp") {
          if (
            b &&
            b.firstChild &&
            (b.firstChild.tagName.toLowerCase() == "img" ||
              b.firstChild.tagName.toLowerCase() == "a" ||
              b.firstChild.tagName.toLowerCase() == "input")
          ) {
            b.firstChild.setAttribute("aria-haspopup", "true");
          }
        }
      }
    }
  },
  _handleAutoPostBackOnFilterWithoutDelay: function (b, f, c) {
    var a = $find(b);
    if (this._currentFilterTimeoutID) {
      clearTimeout(this._currentFilterTimeoutID);
    }
    try {
      var e = this.get_id();
      this._currentFilterTimeoutID = setTimeout(function () {
        var i = $find(e);
        var g = a.get_textBoxValue();
        var h = a.parseDate(g);
        if (!i._shouldAutoPostBackOnFilter) {
          return;
        }
        if (h != null) {
          a.set_selectedDate(h);
          if (a.get_selectedDate()) {
            i.filter(f, i._getFilterControlValue(f));
          }
        } else {
          if (g == "") {
            if (i.__shouldPerformFiltering) {
              i.filter(f, "");
            } else {
              this.__shouldPerformFiltering = true;
            }
          }
        }
      }, c);
    } catch (d) {}
  },
  _handleAutoPostBackOnFilterWithDelay: function (d, b, g, c) {
    var a = $find(b);
    var e = d ? d : window.event;
    if (this._currentFilterTimeoutID) {
      clearTimeout(this._currentFilterTimeoutID);
    }
    try {
      if (e.keyCode == 13 || e.keyCode == 20) {
        e.cancelBubble = true;
        e.returnValue = false;
        if (e.stopPropagation) {
          e.stopPropagation();
          e.preventDefault();
        }
        this._currentFilterTimeoutID = setTimeout(function () {
          var h = a.get_textBoxValue();
          var i = a.parseDate(h);
          if (i != null) {
            a.set_selectedDate(i);
          } else {
            if (h == "") {
              a.set_selectedDate(h);
            }
          }
        }, 0);
      } else {
        this._currentFilterTimeoutID = setTimeout(function () {
          var h = a.get_textBoxValue();
          var i = a.parseDate(h);
          if (i != null) {
            a.set_selectedDate(i);
          } else {
            if (h == "") {
              a.set_selectedDate(h);
            }
          }
        }, c);
      }
    } catch (f) {}
  },
  _filterOnKeyDownWithDelay: function (b, d, g, a, e) {
    var c = b ? b : window.event;
    if (c.keyCode == 8 || c.keyCode == 46) {
      if (this._currentFilterTimeoutID) {
        clearTimeout(this._currentFilterTimeoutID);
      }
      var f = this.get_id();
      if (!$telerik.isOpera || e) {
        this._currentFilterTimeoutID = setTimeout(function () {
          $find(f).filter(g, $get(d).value);
        }, a);
      } else {
        this._currentFilterTimeoutID = setTimeout(function () {
          $get(d).blur();
        }, a);
      }
    }
  },
  _filterOnKeyPressWithDelay: function (b, d, g, a, e) {
    var c = b ? b : window.event;
    var f = this.get_id();
    if (
      $telerik.isFirefox &&
      ((c.keyCode >= 33 && c.keyCode <= 40) ||
        (c.keyCode >= 112 && c.keyCode <= 123) ||
        (c.keyCode >= 16 && c.keyCode <= 20) ||
        (c.keyCode >= 144 && c.keyCode <= 145) ||
        (c.keyCode >= 92 && c.keyCode <= 93))
    ) {
      return;
    }
    if (this._currentFilterTimeoutID) {
      clearTimeout(this._currentFilterTimeoutID);
    }
    if (c.keyCode == 13) {
      c.cancelBubble = true;
      c.returnValue = false;
      if (c.preventDefault) {
        c.preventDefault();
        c.stopPropagation();
      }
      if (!$telerik.isOpera || e) {
        this._currentFilterTimeoutID = setTimeout(function () {
          $find(f).filter(g, $get(d).value);
        }, 0);
      } else {
        this._currentFilterTimeoutID = setTimeout(function () {
          $get(d).blur();
        }, 0);
      }
      return false;
    } else {
      if (!$telerik.isOpera || e) {
        this._currentFilterTimeoutID = setTimeout(function () {
          $find(f).filter(g, $get(d).value);
        }, a);
      } else {
        this._currentFilterTimeoutID = setTimeout(function () {
          $get(d).blur();
        }, a);
      }
    }
  },
  _filterNoDelay: function (a, c) {
    var b = this.get_id();
    if (this._currentFilterTimeoutID) {
      clearTimeout(this._currentFilterTimeoutID);
    }
    this._currentFilterTimeoutID = setTimeout(function () {
      var e = $get(a).value;
      var d = $find(a);
      if (d && d.get_value) {
        e = d.get_value();
      }
      $find(b).filter(c, e);
    }, 0);
  },
  get_clientDataKeyNames: function () {
    var a = [];
    if (this._data.clientDataKeyNames) {
      a = this._data.clientDataKeyNames;
    }
    return a;
  },
  get_dataItems: function () {
    if (
      this._dataItemsCreated ||
      (this._cachedItems && this._cachedItems.length > 0)
    ) {
      return this._dataItems;
    }
    this._dataItemsCreated = true;
    var p = $telerik.isOpera
      ? this.get_element()
      : this.get_element().tBodies[0];
    var o = p.rows;
    var c, h, k, m;
    for (c = 0, k = o.length; c < k; c++) {
      var n = o[c];
      if (!n.id) {
        continue;
      }
      var b = $find(n.id);
      var a = {};
      this._owner.raise_rowCreating(
        new Telerik.Web.UI.GridDataItemCancelEventArgs(n, null)
      );
      var e = true;
      var g = this._owner._unselectableItemsInternal;
      for (h = 0, m = g.length; h < m; h++) {
        if (g[h].id == n.id) {
          e = false;
          break;
        }
      }
      var f = false;
      for (h = 0; h < this._owner._selectedItemsInternal.length; h++) {
        if (this._owner._selectedItemsInternal[h].id == n.id) {
          f = true;
          break;
        }
      }
      var d = false;
      if (this._owner._expandItems[n.id.split("__")[1]]) {
        d = true;
      }
      for (h = 0; h < this._owner._expandedItems.length; h++) {
        if (this._owner._expandedItems[h] == n.id.split("__")[1]) {
          d = !d;
          break;
        }
      }
      if (!b) {
        b = $create(
          Telerik.Web.UI.GridDataItem,
          { _owner: this, _data: a },
          null,
          null,
          n
        );
      }
      b._selectable = e;
      b._selected = f;
      b._expanded = d;
      b._itemIndexHierarchical = n.id.split("__")[1];
      if (this._virtualization) {
        this._virtualization.updateItemState(b);
      }
      this._dataItems[this._dataItems.length] = b;
      if (c == 0) {
        this._saveCellAttributes(b);
      }
      this._owner.raise_rowCreated(
        new Telerik.Web.UI.GridDataItemEventArgs(n, null)
      );
    }
    if (this._virtualization) {
      this._virtualization.updateItemsCellSelectionState();
    }
    return this._dataItems;
  },
  get_owner: function () {
    return this._owner;
  },
  get_name: function () {
    return this._data.Name;
  },
  get_isItemInserted: function () {
    if (this._data.EditMode == "Batch") {
      var a = this.get_dataItems();
      return a.length > 0 && a[0].get_element().id.indexOf("-") >= 0;
    } else {
      return this._data.IsItemInserted;
    }
  },
  get_insertItem: function () {
    var b = $find(this._owner.get_id());
    var c = null;
    function a(j) {
      for (var g = 0; g < j.length; g++) {
        var h = j[g];
        if (h.className.indexOf("rgEditRow") > -1) {
          return h;
        } else {
          var f = h.getElementsByTagName("div")[0];
          if (f && f.className.indexOf("rgEditForm") > -1) {
            return h;
          }
        }
      }
      return null;
    }
    if (
      this === b.get_masterTableView() &&
      b.ClientSettings.Scrolling.AllowScroll &&
      b.ClientSettings.Scrolling.UseStaticHeaders
    ) {
      if (b.GridHeaderDiv) {
        var e = b.GridHeaderDiv.getElementsByTagName("thead")[0];
        if (e) {
          c = a(e.rows);
        }
        if (!c && b.PagerControl) {
          c = a(b.PagerControl.rows);
        }
      }
    } else {
      var d = this.get_element();
      if (d.tHead) {
        c = a(d.tHead.rows);
      }
      if (!c && d.tFoot) {
        c = a(d.tFoot.rows);
      }
    }
    return c;
  },
  get_editItems: function () {
    var a = [];
    var c = this.get_dataItems();
    for (var b = 0; b < c.length; b++) {
      if (c[b].get_isInEditMode()) {
        a[a.length] = c[b];
      }
    }
    return a;
  },
  _handlerKeyDownInInserItem: function (a) {
    var d = a.keyCode || a.charCode;
    if (a.charCode) {
      d = String.fromCharCode(a.charCode).toUpperCase().charCodeAt(0);
    }
    var b =
      d ==
      this._owner.ClientSettings.KeyboardNavigationSettings
        .ExitEditInsertModeKey;
    var c =
      d ==
      this._owner.ClientSettings.KeyboardNavigationSettings.UpdateInsertItemKey;
    if (!this._owner._canHandleKeyboardAction(a)) {
      return;
    }
    if (b) {
      this.cancelInsert();
      a.cancelBubble = true;
      a.returnValue = false;
      if (a.stopPropagation) {
        a.preventDefault();
        a.stopPropagation();
      }
    } else {
      if (c) {
        this.insertItem();
        a.cancelBubble = true;
        a.returnValue = false;
        if (a.stopPropagation) {
          a.preventDefault();
          a.stopPropagation();
        }
      }
    }
    return false;
  },
  _showNotFrozenColumn: function (a) {
    this._hideShowNotFrozenColumn(a, true, true);
  },
  _hideNotFrozenColumn: function (a) {
    this._hideShowNotFrozenColumn(a, false, true);
  },
  showColumn: function (c) {
    if (this.get_columns()[c].get_visible()) {
      return;
    }
    var a = new Telerik.Web.UI.GridColumnCancelEventArgs(
      this.get_columns()[c],
      null
    );
    this._owner.raise_columnShowing(a);
    if (a.get_cancel()) {
      return false;
    }
    this._hideShowColumn(c, true);
    var b = this._data.UniqueID + "," + this.get_columns()[c].get_uniqueName();
    if (!Array.contains(this._owner._showedColumns, b)) {
      Array.add(this._owner._showedColumns, b);
    }
    if (Array.contains(this._owner._hidedColumns, b)) {
      Array.remove(this._owner._hidedColumns, b);
    }
    this._owner.updateClientState();
    $find(this._owner.get_id()).repaint();
    a = new Telerik.Web.UI.GridColumnEventArgs(this.get_columns()[c], null);
    this._owner.raise_columnShown(a);
  },
  hideColumn: function (d) {
    if (!this.get_columns()[d].get_visible()) {
      return;
    }
    if (this._getVisibleColumnsCount() == 1) {
      var c = this.get_columns()[d]._data.ColumnType;
      if (!this._isHelperColumnType(c)) {
        return;
      }
    }
    var a = new Telerik.Web.UI.GridColumnCancelEventArgs(
      this.get_columns()[d],
      null
    );
    this._owner.raise_columnHiding(a);
    if (a.get_cancel()) {
      return false;
    }
    this._hideShowColumn(d, false);
    var b = this._data.UniqueID + "," + this.get_columns()[d].get_uniqueName();
    if (!Array.contains(this._owner._hidedColumns, b)) {
      Array.add(this._owner._hidedColumns, b);
    }
    if (Array.contains(this._owner._showedColumns, b)) {
      Array.remove(this._owner._showedColumns, b);
    }
    this._owner.updateClientState();
    a = new Telerik.Web.UI.GridColumnEventArgs(this.get_columns()[d], null);
    this._owner.raise_columnHidden(a);
  },
  _getVisibleColumnsCount: function () {
    var c = 0;
    var b = this.get_columns();
    var a = null;
    var d = null;
    for (var e = 0, f = b.length; e < f; e++) {
      a = b[e];
      d = a._data.ColumnType;
      if (
        this._isHelperColumnType(d) ||
        a.get_element().style.display == "none"
      ) {
        continue;
      }
      c++;
    }
    return c;
  },
  _isHelperColumnType: function (a) {
    if (
      a == "GridExpandColumn" ||
      a == "GridGroupSplitterColumn" ||
      a == "GridRowIndicatorColumn" ||
      a == "GridDragDropColumn"
    ) {
      return true;
    }
    return false;
  },
  _hideShowColumn: function (c, a, b) {
    a = this.get_columns()[c].Display = a;
    if (this.get_columns()[c]._data) {
      this.get_columns()[c]._data.Display = a;
    }
    var d = false;
    if (
      this._owner.ClientSettings.Resizing &&
      this._owner.ClientSettings.Resizing.EnableRealTimeResize
    ) {
      d = this._owner.ClientSettings.Resizing.EnableRealTimeResize;
    }
    if (
      this != this._owner.get_masterTableViewHeader() &&
      this != this._owner.get_masterTableViewFooter() &&
      this != this._owner.get_masterTableView()
    ) {
      this._hideShowCol(this, c, a);
      if (!b) {
        Telerik.Web.UI.Grid.hideShowCells(
          this.get_element(),
          c,
          a,
          this.ColGroup.Cols
        );
      }
      this._setHeaderFooterSpan();
      return;
    }
    if (this._owner.get_masterTableViewHeader()) {
      this._hideShowCol(this._owner.get_masterTableViewHeader(), c, a);
      Telerik.Web.UI.Grid.hideShowCells(
        this._owner.get_masterTableViewHeader().get_element(),
        c,
        a,
        this._owner.get_masterTableView().ColGroup.Cols
      );
    }
    if (this._owner.get_masterTableView()) {
      this._hideShowCol(this._owner.get_masterTableView(), c, a);
      if (!b) {
        Telerik.Web.UI.Grid.hideShowCells(
          this._owner.get_masterTableView().get_element(),
          c,
          a,
          this._owner.get_masterTableView().ColGroup.Cols
        );
      }
    }
    if (this._owner.get_masterTableViewFooter() && !b) {
      this._hideShowCol(this._owner.get_masterTableViewFooter(), c, a);
      Telerik.Web.UI.Grid.hideShowCells(
        this._owner.get_masterTableViewFooter().get_element(),
        c,
        a,
        this._owner.get_masterTableViewFooter().ColGroup.Cols
      );
    }
    if (!b) {
      this._setHeaderFooterSpan();
    }
  },
  _setParentTableCells: function (n) {
    var w = [];
    var o = this._data.hiddenColumnHeaderSpans;
    var p = o.split(";");
    var s = 0;
    for (var u = 0; u < n.length - 1; u++) {
      var x = n[u];
      for (var v = 0; v < x.cells.length; v++) {
        var a = x.cells[v];
        if (!a.id) {
          a.actualColSpan = parseInt(p[s], 10);
          s++;
        }
      }
    }
    for (var q = 0; q < n.length; q++) {
      var y = n[q];
      var b = 0;
      var f = 0;
      var h = null;
      var m = 0;
      var g = [];
      if (w.length > 0) {
        h = w[0];
        f = h.actualColSpan ? h.actualColSpan : h.colSpan;
      }
      for (var t = 0; t < y.cells.length; t++) {
        var d = y.cells[t];
        var e = d.actualColSpan ? d.actualColSpan : d.colSpan;
        if (q == 0) {
          d.parentCell = null;
          b += e;
        } else {
          d.parentCell = h;
          if (d.colSpan < f) {
            f -= e;
          } else {
            if (e == f) {
              if (m < w.length - 1) {
                h = w[++m];
                f = h.actualColSpan ? h.actualColSpan : h.colSpan;
              }
            }
          }
        }
        if (!d.id || d.id.indexOf("MultiHeader") == -1) {
          g.push(d);
        }
      }
      w = g;
    }
  },
  _setHeaderFooterSpan: function () {
    var a = function (i) {
      if (!i) {
        return 0;
      }
      var k = 0;
      for (var l = 0, m = i.length; l < m; l++) {
        k += i[l].colSpan;
      }
      return k;
    };
    var g = this.get_element().tFoot;
    var h = this.get_element().tHead;
    var e = Math.max(this._getVisibleColumnsLengthOnly(), 1);
    var c, d, b;
    if (g && g.rows) {
      for (c = 0, d = g.rows.length; c < d; c++) {
        if (g.rows[c].cells && g.rows[c].cells[0]) {
          b = a(g.rows[c].cells);
          if (e > b) {
            g.rows[c].cells[0].colSpan = e;
          }
        }
      }
    }
    if (h && h.rows) {
      for (c = 0, d = h.rows.length; c < d; c++) {
        if (
          h.rows[c] &&
          (h.rows[c] == this.get_element().HeaderRow ||
            (h.rows[c].cells.length > 0 &&
              h.rows[c].cells[0].tagName.toLowerCase() == "th"))
        ) {
          var f =
            this.get_element().tBodies && this.get_element().tBodies[0]
              ? this.get_element().tBodies[0]
              : null;
          if (
            f &&
            f.rows &&
            f.style.display == "none" &&
            f.rows[0].cells.length == 1 &&
            f.rows[0].cells[0].colSpan
          ) {
            f.rows[0].cells[0].colSpan = e;
          }
          break;
        }
        if (
          h.rows[c] &&
          h.rows[c].cells &&
          h.rows[c].cells.length > 0 &&
          h.rows[c].cells[0]
        ) {
          b = a(h.rows[c].cells);
          if (e > b) {
            h.rows[c].cells[0].colSpan = e;
          }
        }
      }
    }
  },
  _getVisibleColumnsLengthOnly: function () {
    var c = 0;
    var b = this.get_columns();
    if (b) {
      for (var d = 0, e = b.length; d < e; d++) {
        var a = b[d];
        if (
          a.get_element().style.visibility != "hidden" &&
          a.get_element().style.display != "none" &&
          (a.Display == null || a.Display)
        ) {
          c++;
        }
      }
    }
    return c;
  },
  _getVisibleColumns: function () {
    var e = [];
    var b = this.get_columns();
    if (b) {
      for (var c = 0, d = b.length; c < d; c++) {
        var a = b[c];
        if (
          a.get_element().style.visibility != "hidden" &&
          a.get_element().style.display != "none" &&
          (a.Display == null || a.Display)
        ) {
          Array.add(e, a);
        }
      }
    }
    return e;
  },
  _hideShowCol: function (e, d, c) {
    if (e && e.ColGroup && e.ColGroup.Cols && e.ColGroup.Cols[d]) {
      var a = e.ColGroup.Cols[d];
      var b = a.style.display == "" ? true : false;
      if (b != c) {
        if (c) {
          a.style.display = "";
          if (this._owner.get_enableAriaSupport()) {
            a.setAttribute("aria-hidden", "false");
          }
        } else {
          a.style.display = "none";
          if (this._owner.get_enableAriaSupport()) {
            a.setAttribute("aria-hidden", "true");
          }
        }
        this._tryAddRemoveColWidth(e, c);
      }
    }
  },
  _tryAddRemoveColWidth: function (f, c) {
    var d = $get(this._owner.ClientID + "_Frozen") != null;
    if ((!$telerik.isIE8 && !$telerik.isChrome && !$telerik.isSafari) || d) {
      return;
    }
    var g = f._getVisibleColumns();
    if (g.length !== 1) {
      return;
    }
    var a = f._getVisibleColumns()[0],
      e = a.get_element().cellIndex,
      b;
    if (f && f.ColGroup && f.ColGroup.Cols && f.ColGroup.Cols[e]) {
      b = f.ColGroup.Cols[e];
      if (c) {
        if (a._bufferWidth) {
          b.style.width = a._bufferWidth;
          a._bufferWidth = null;
        }
      } else {
        a._bufferWidth = b.style.width;
        b.style.width = "";
      }
    }
  },
  _hideShowNotFrozenColumn: function (d, b, j) {
    var g = 10;
    if (!b && this._getVisibleColumnsCount() == 1) {
      var a = this.get_columns()[d]._data.ColumnType;
      if (!this._isHelperColumnType(a)) {
        return;
      }
    }
    if ($telerik.isOpera) {
      g =
        navigator.userAgent.substring(
          navigator.userAgent.indexOf("Version/") + "Version".length + 1
        ) * 1;
    }
    var c, e, h, k;
    if (this._owner.get_masterTableViewHeader()) {
      this._owner.get_masterTableViewHeader().get_columns()[
        d
      ].FrozenDisplay = b;
      this._hideShowCol(this._owner.get_masterTableViewHeader(), d, b);
      Telerik.Web.UI.Grid.hideShowCells(
        this._owner.get_masterTableViewHeader().get_element(),
        d,
        b,
        this._owner.get_masterTableViewHeader().ColGroup.Cols,
        j
      );
      this._setHeaderFooterSpan();
    }
    var f = this._owner.get_masterTableView();
    if (f) {
      f.get_columns()[d].FrozenDisplay = b;
      this._hideShowCol(f, d, b);
      this._hideShowCol(this._owner.get_masterTableView(), d, b);
      Telerik.Web.UI.Grid.hideShowCells(
        f.get_element(),
        d,
        b,
        f.ColGroup.Cols,
        j
      );
      this._setHeaderFooterSpan();
      h = f.get_element().getElementsByTagName("select");
      if (h.length > 0) {
        k = f.get_element();
        setTimeout(function () {
          for (c = 0, e = k.rows.length; c < e; c++) {
            var i = k.rows[c].cells[d];
            Telerik.Web.UI.Grid._hideShowSelect(i, b);
          }
        }, 0);
      }
    }
    if (this._owner.get_masterTableViewFooter()) {
      this._hideShowCol(this._owner.get_masterTableViewFooter(), d, b);
      Telerik.Web.UI.Grid.hideShowCells(
        this._owner.get_masterTableViewFooter().get_element(),
        d,
        b,
        this._owner.get_masterTableViewFooter().ColGroup.Cols,
        j
      );
      this._setHeaderFooterSpan();
      h = this._owner
        .get_masterTableViewFooter()
        .get_element()
        .getElementsByTagName("select");
      if (h.length > 0) {
        k = this._owner.get_masterTableViewFooter().get_element();
        setTimeout(function () {
          for (c = 0, e = k.rows.length; c < e; c++) {
            var i = k.rows[c].cells[d];
            Telerik.Web.UI.Grid._hideShowSelect(i, b);
          }
        }, 0);
      }
    }
  },
  hideItem: function (d) {
    if (!this._canShowHideItem(d)) {
      return false;
    }
    var e = null;
    if (this.get_element() && this.get_element().tBodies.length > 1) {
      var b = $telerik.getFirstChildByTagName(this.get_element(), "tbody", 0);
      if (b && b.rows[d]) {
        e = b.rows[d];
      }
    } else {
      if (
        this.get_element() &&
        this.get_element().tBodies[0] &&
        this.get_element().tBodies[0].rows[d]
      ) {
        e = this.get_element().tBodies[0].rows[d];
      }
    }
    var a = new Telerik.Web.UI.GridDataItemCancelEventArgs(e, null);
    this._owner.raise_rowHiding(a);
    if (a.get_cancel()) {
      return false;
    }
    if (e) {
      e.style.display = "none";
    }
    if (e && e.id != "" && e.id.split("__").length == 2) {
      var f = e.id.split("__")[1];
      var c = this._hidedItemsData;
      c.add(String.format("{0},{1}", this.get_id(), f));
      this._owner._hidedItems = c.toString();
      this._owner.updateClientState();
    }
    $find(this._owner.get_id())._getPositionedDataItems(true);
    a = new Telerik.Web.UI.GridDataItemEventArgs(e, null);
    this._owner.raise_rowHidden(a);
  },
  showItem: function (c) {
    if (!this._canShowHideItem(c)) {
      return false;
    }
    var d = null;
    if (this.get_element() && this.get_element().tBodies.length > 1) {
      var b = $telerik.getFirstChildByTagName(this.get_element(), "tbody", 0);
      if (b && b.rows[c]) {
        d = b.rows[c];
      }
    } else {
      if (
        this.get_element() &&
        this.get_element().tBodies[0] &&
        this.get_element().tBodies[0].rows[c]
      ) {
        d = this.get_element().tBodies[0].rows[c];
      }
    }
    var a = new Telerik.Web.UI.GridDataItemCancelEventArgs(d, null);
    this._owner.raise_rowShowing(a);
    if (a.get_cancel()) {
      return false;
    }
    if (d) {
      if (window.netscape) {
        d.style.display = "table-row";
      } else {
        d.style.display = "";
      }
    }
    if (d && d.id != "" && d.id.split("__").length == 2) {
      var e = d.id.split("__")[1];
      var f = this._showedItemsData;
      f.add(String.format("{0},{1}", this.get_id(), e));
      this._owner._showedItems = f.toString();
      this._owner.updateClientState();
    }
    $find(this._owner.get_id())._getPositionedDataItems(true);
    a = new Telerik.Web.UI.GridDataItemEventArgs(d, null);
    this._owner.raise_rowShown(a);
  },
  _canShowHideItem: function (b) {
    if (isNaN(parseInt(b, 10))) {
      return false;
    }
    if (b < 0) {
      return false;
    }
    if (this.get_element() && this.get_element().tBodies.length > 1) {
      var a = $telerik.getFirstChildByTagName(this.get_element(), "tbody", 0);
      if (a && a.rows[b] && b > a.rows[b].length - 1) {
        return false;
      }
    } else {
      if (
        this.get_element() &&
        this.get_element().tBodies[0] &&
        this.get_element().tBodies[0].rows[b] &&
        b > this.get_element().tBodies[0].rows[b].length - 1
      ) {
        return false;
      }
    }
    return true;
  },
  _getRowsFromBody: function (b) {
    var c = b.length;
    for (var a = 0; a < c; a++) {
      if (b[a].parentNode.tagName.toUpperCase() == "TBODY") {
        return b[a].parentNode.rows;
      }
    }
  },
  _getFirstDataRow: function () {
    if (this._firstDataRow != null) {
      return this._firstDataRow;
    }
    if (this._dataItems.length > 0) {
      return this._dataItems[0].get_element();
    }
    var d = [];
    if ($telerik.isOpera) {
      d = this._getRowsFromBody(this.get_element().rows);
    } else {
      var e = this.get_element().tBodies;
      if (e.length > 0) {
        d = e[0].rows;
      }
    }
    for (var a = 0, b = d.length; a < b; a++) {
      var c = d[a];
      if (c.id != "" && c.id.split("__").length == 2) {
        this._firstRow = c;
        break;
      }
    }
    return this._firstRow;
  },
  _getNextDataRow: function (d) {
    var c = null;
    var e;
    if ($telerik.isOpera) {
      e = this._getRowsFromBody(this.get_element().rows);
    } else {
      e = this.get_element().tBodies[0].rows;
    }
    for (var a = d.sectionRowIndex + 1, b = e.length; a < b; a++) {
      d = e[a];
      if (d.id != "" && d.id.split("__").length == 2) {
        c = d;
        break;
      }
    }
    return c;
  },
  _getNestedTableWhenRowIsInEditMode: function (d) {
    var b = null;
    var c = Telerik.Web.UI.Grid.GetNodeNextSiblingByTagName(d, "tr");
    if (this._data.hasDetailItemTemplate) {
      c = Telerik.Web.UI.Grid.GetNodeNextSiblingByTagName(c, "tr");
    }
    if (c) {
      var a = c.nextSibling.getElementsByTagName("table");
      if (a.length > 0 && a[0].id.indexOf("Detail") != -1) {
        b = a[0];
      }
    }
    return b;
  },
  _getNextNestedDataRow: function (g) {
    var f = null;
    var d = null;
    var b = g.id;
    var a = $find(b);
    if (
      this._owner.ClientSettings.AllowKeyboardNavigation &&
      a &&
      a.get_isInEditMode()
    ) {
      d = this._getNestedTableWhenRowIsInEditMode(g);
    } else {
      if (this._data.hasDetailItemTemplate) {
        var e = Telerik.Web.UI.Grid.GetNodeNextSiblingByTagName(g, "tr");
        d = Telerik.Web.UI.Grid.GetNestedTable(e);
      } else {
        d = Telerik.Web.UI.Grid.GetNestedTable(g);
      }
    }
    if (d) {
      var h;
      if ($telerik.isOpera) {
        h = this._getRowsFromBody(this.get_element().rows);
      } else {
        h = this.get_element().tBodies[0].rows;
      }
      for (var c = 0; c < h.length; c++) {
        g = h[c];
        if (g.id != "" && g.id.split("__").length == 2) {
          f = g;
          break;
        }
      }
    }
    return f;
  },
  _getPreviousDataRow: function (c) {
    var b = null;
    var d;
    if ($telerik.isOpera) {
      d = this._getRowsFromBody(this.get_element().rows);
    } else {
      d = this.get_element().tBodies[0].rows;
    }
    for (var a = c.sectionRowIndex - 1; a >= 0; a--) {
      c = d[a];
      if (c.id != "" && c.id.split("__").length == 2) {
        b = c;
        break;
      }
    }
    return b;
  },
  _getPreviousNestedDataRow: function (d) {
    var c = null;
    var b = Telerik.Web.UI.Grid.GetNestedTable(d);
    if (b) {
      var e;
      if ($telerik.isOpera) {
        e = this._getRowsFromBody(this.get_element().rows);
      } else {
        e = this.get_element().tBodies[0].rows;
      }
      for (var a = d.sectionRowIndex - 1; a >= 0; a--) {
        d = e[a];
        if (d.id != "" && d.id.split("__").length == 2) {
          c = d;
          break;
        }
      }
    }
    return c;
  },
  get_parentView: function () {
    var a = null;
    if (this.get_id() != this._owner.get_masterTableView().get_id()) {
      a = $find(this.get_parentRow().id.split("__")[0]);
    }
    return a;
  },
  get_parentRow: function () {
    var a = null;
    if (this.get_id() != this._owner.get_masterTableView().get_id()) {
      a = this.get_element().parentNode.parentNode.previousSibling;
    }
    return a;
  },
  get_selectedItems: function () {
    var d = [];
    for (var a = 0; a < this._owner._selectedItemsInternal.length; a++) {
      var c = this._owner._selectedItemsInternal[a].id.split("__")[0];
      if (c == this.get_id()) {
        var b = $find(this._owner._selectedItemsInternal[a].id);
        if (b == null) {
          if ($get(this._owner._selectedItemsInternal[a].id)) {
            b = $create(
              Telerik.Web.UI.GridDataItem,
              { _owner: this, _data: this._data, _selected: true },
              null,
              null,
              $get(this._owner._selectedItemsInternal[a].id)
            );
            Array.add(d, b);
          }
        } else {
          if (b && b._owner.get_element().id == this.get_element().id) {
            Array.add(d, b);
          }
        }
      }
    }
    return d;
  },
  selectAllItems: function () {
    if (!this._owner.AllowMultiRowSelection) {
      return;
    }
    var f = $telerik.isOpera
      ? this.get_element()
      : this.get_element().tBodies[0];
    var e = f.rows;
    if (!e) {
      return;
    }
    for (var a = 0, c = e.length; a < c; a++) {
      var d = e[a];
      if (!d.id) {
        continue;
      }
      var b = $find(d.id);
      if (b) {
        b.set_selected(true);
      } else {
        this.selectItem(d);
      }
    }
  },
  clearSelectedItems: function () {
    var h = this,
      d = h._owner,
      a = h.get_element().id,
      g = d._selectedItemsInternal,
      e = d._selectedIndexes,
      b,
      c,
      f;
    if (g.length > 0) {
      b = g.length - 1;
      while (b >= 0) {
        f = g[b];
        c = $find(f.id);
        if (c) {
          if (c._owner.get_element().id == a) {
            c.set_selected(false);
          }
        } else {
          c = $get(f.id);
          if (c && c.parentNode && c.parentNode.parentNode.id == a) {
            h.deselectItem($get(f.id));
          } else {
            Array.remove(g, f);
            Array.remove(e, e[b]);
            h._owner.updateClientState();
          }
        }
        b = Math.min(g.length, b);
        b--;
      }
    }
  },
  clearSelectedCells: function () {
    if (this._owner._cellSelection != null) {
      this._owner._cellSelection._deselectTableViewCells(this);
    }
  },
  selectItem: function (a) {
    a = this._getRowByIndexOrItemIndexHierarchical(a);
    if (this._owner._selection && a && a.id) {
      if (!this._owner.AllowMultiRowSelection) {
        this.clearSelectedItems();
      }
      this._owner._keyboardNavigationProperties.lastClickSelectedItem = a;
      this._owner._selection._selectRowInternal(
        a,
        { ctrlKey: false },
        true,
        false,
        true
      );
    }
  },
  deselectItem: function (a) {
    var b = this;
    a = b._getRowByIndexOrItemIndexHierarchical(a);
    if (
      b._owner._selection &&
      a &&
      a.id &&
      Array.contains(b._owner._selectedIndexes, a.id.split("__")[1])
    ) {
      b._owner._selection._selectRowInternal(
        a,
        { ctrlKey: false },
        true,
        true,
        true
      );
    }
  },
  _getRowByIndexOrItemIndexHierarchical: function (k) {
    var j = null;
    if (typeof k == "number") {
      if (this.get_element().tBodies.length > 0) {
        if (this.get_element().tBodies[0].rows[k]) {
          j = this.get_element().tBodies[0].rows[k];
        }
        if (j && (j.id == "" || !j.id.endsWith(k.toString()))) {
          while (j && !j.id.endsWith(k.toString())) {
            j = this._getNextDataRow(j);
          }
        }
      }
      k = j;
    }
    if (typeof k == "string") {
      var a = k;
      k = $get(this.get_element().id + "__" + k);
      if (!k) {
        var f = a.split(":");
        var b = f.length;
        if (b > 1) {
          var g = this;
          j = g.get_dataItems()[f[0]];
          if (!j) {
            if (g.get_dataItems().length == 1) {
              j = g.get_dataItems()[0];
            } else {
              j = g.get_dataItems()[f[0].split("__")[1]];
            }
          }
          for (var c = 1; c < b; c++) {
            var h = f[c].split("_")[1];
            g = j.get_nestedViews()[0];
            if (!g) {
              g = this;
            }
            if (g.get_dataItems().length == 1) {
              j = g.get_dataItems()[0];
            } else {
              j = g.get_dataItems()[h];
            }
          }
          k = j.get_element();
        } else {
          var d = parseInt(f[0].split("__")[1], 10);
          var e = this.get_dataItems();
          if (!isNaN(d) && d < e.length) {
            k = e[d].get_element();
          } else {
            k = null;
          }
        }
      }
    }
    return k;
  },
  _reorderColumns: function (h, i) {
    var d = this.getColumnByUniqueName(h);
    var e = this.getColumnByUniqueName(i);
    if (!d || !e || h === i) {
      return;
    }
    var n = d.get_element().parentNode;
    var f = this._getCellIndexByColumnUniqueNameFromTableRowElement(n, h);
    var g = this._getCellIndexByColumnUniqueNameFromTableRowElement(n, i);
    if (this._hasMultiHeaders && n.className.indexOf("rgMultiHeaderRow") > -1) {
      var k = this._getMultiHeaderByColumnUniqueName(h);
      if (k) {
        f = k.index;
      }
      var l = this._getMultiHeaderByColumnUniqueName(i);
      if (l) {
        g = l.index;
      }
    }
    var m = this._owner.ClientSettings.ReorderColumnsOnClient;
    this._owner.ClientSettings.ReorderColumnsOnClient = true;
    var j = this._owner.ClientSettings.ColumnsReorderMethod;
    this._owner.ClientSettings.ColumnsReorderMethod = 0;
    var a, b, c;
    if (g > f) {
      a = new Telerik.Web.UI.GridColumnCancelEventArgs(d, null);
      this._owner.raise_columnMovingToLeft(a);
      if (a.get_cancel()) {
        return false;
      }
      while (f < g) {
        b = this.getColumnUniqueNameByCellIndex(n, f + 1);
        c = this.getColumnUniqueNameByCellIndex(n, f);
        this.swapColumns(b, c);
        f++;
      }
      a = new Telerik.Web.UI.GridColumnEventArgs(d, null);
      this._owner.raise_columnMovedToLeft(a);
    } else {
      a = new Telerik.Web.UI.GridColumnCancelEventArgs(d, null);
      this._owner.raise_columnMovingToRight(a);
      if (a.get_cancel()) {
        return false;
      }
      while (g < f) {
        b = this.getColumnUniqueNameByCellIndex(n, f - 1);
        c = this.getColumnUniqueNameByCellIndex(n, f);
        this.swapColumns(b, c);
        f--;
      }
      a = new Telerik.Web.UI.GridColumnEventArgs(d, null);
      this._owner.raise_columnMovedToRight(a);
    }
    this._owner.ClientSettings.ColumnsReorderMethod = j;
    this._owner.ClientSettings.ReorderColumnsOnClient = m;
  },
  reorderColumns: function (a, b) {
    if (!this._owner.ClientSettings.AllowColumnsReorder) {
      return;
    }
    if (this._owner.ClientSettings.ColumnsReorderMethod != 1) {
      return;
    }
    this._reorderColumns(a, b);
    if (!this._owner.ClientSettings.ReorderColumnsOnClient) {
      var c = this._owner.ClientSettings.PostBackFunction;
      c = c.replace("{0}", this._owner.UniqueID);
      eval(c);
      return;
    }
  },
  swapColumns: function (g, h) {
    var e = this.getColumnByUniqueName(g);
    var f = this.getColumnByUniqueName(h);
    if (!e || !f || g === h) {
      return;
    }
    if (!this._owner.ClientSettings.AllowColumnsReorder) {
      return;
    }
    if (!e.get_reorderable() || !f.get_reorderable()) {
      return;
    }
    if (!this._owner.ClientSettings.ReorderColumnsOnClient) {
      var p = this._owner.ClientSettings.PostBackFunction;
      p = p.replace("{0}", this._owner.UniqueID);
      p = p.replace(
        "{1}",
        "ReorderColumns," +
          this._data.UniqueID +
          "," +
          e.get_uniqueName() +
          "," +
          f.get_uniqueName()
      );
      eval(p);
      return;
    }
    if (this._owner.ClientSettings.ColumnsReorderMethod != 0) {
      return;
    }
    var l = this._getCellIndexByColumnUniqueNameFromTableRowElement(
      e.get_element().parentNode,
      g
    );
    var m = this._getCellIndexByColumnUniqueNameFromTableRowElement(
      f.get_element().parentNode,
      h
    );
    var b = new Sys.CancelEventArgs();
    b.get_gridSourceColumn = function () {
      return e;
    };
    b.get_gridTargetColumn = function () {
      return f;
    };
    this._owner.raise_columnSwapping(b);
    if (b.get_cancel()) {
      return false;
    }
    var o = this._owner.get_masterTableView();
    if (
      this.get_id() &&
      this.get_id().indexOf("Detail") != -1 &&
      (!o || (o && o.get_id() != this.get_id()))
    ) {
      this._reorderColumnsInternal(g, h);
      o = null;
    }
    if (this._owner.get_masterTableViewHeader()) {
      this._owner.get_masterTableViewHeader()._reorderColumnsInternal(g, h);
    }
    if (o) {
      o._reorderColumnsInternal(g, h);
    }
    if (this._owner.get_masterTableViewFooter()) {
      var n =
        this._owner.ClientSettings.Scrolling &&
        this._owner.ClientSettings.Scrolling.AllowScroll &&
        this._owner.ClientSettings.Scrolling.UseStaticHeaders;
      if (this.get_id() && this.get_id().indexOf("Detail") == -1 && n) {
        this._owner
          .get_masterTableViewFooter()
          ._reorderFooterInStaticHeaders(g, h);
      } else {
        this._owner.get_masterTableViewFooter()._reorderColumnsInternal(g, h);
      }
    }
    var d = f.get_element().UniqueName;
    var c = e.get_element().UniqueName;
    e.get_element().UniqueName = d;
    f.get_element().UniqueName = c;
    var j = f._data;
    var s = f.populateCell;
    var r = f.Display;
    f._data = e._data;
    f.populateCell = e.populateCell;
    f.Display = e.Display;
    e._data = j;
    e.populateCell = s;
    e.Display = r;
    this.get_columns()[m] = f;
    this.get_columns()[l] = e;
    if (
      this._owner.ClientSettings.AllowKeyboardNavigation &&
      this._owner._cellSelection != null
    ) {
      var q = this.get_element().rows;
      for (var k = 0; k < q.length; k++) {
        if (q[k].id == "" || q[k].id == undefined) {
          continue;
        } else {
          this._owner._cellSelection._setActiveCellElement(q[k].cells[m]);
          break;
        }
      }
    }
    this._copyColAttributes(
      this._owner.get_masterTableView().ColGroup.Cols[l],
      this._owner.get_masterTableView().ColGroup.Cols[m]
    );
    if (
      this._owner.get_masterTableViewHeader() &&
      this._owner.get_masterTableViewHeader().ColGroup
    ) {
      this._copyColAttributes(
        this._owner.get_masterTableViewHeader().ColGroup.Cols[l],
        this._owner.get_masterTableViewHeader().ColGroup.Cols[m]
      );
    }
    if (
      this._owner.get_masterTableViewFooter() &&
      this._owner.get_masterTableViewFooter().ColGroup
    ) {
      this._copyColAttributes(
        this._owner.get_masterTableViewFooter().ColGroup.Cols[l],
        this._owner.get_masterTableViewFooter().ColGroup.Cols[m]
      );
    }
    b = new Sys.EventArgs();
    b.get_gridSourceColumn = function () {
      return e;
    };
    b.get_gridTargetColumn = function () {
      return f;
    };
    this._createColumnsByUniqueNameHash();
    this._owner.raise_columnSwapped(b);
    var a = this._data.UniqueID + "," + g + "," + h;
    Array.add(this._owner._reorderedColumns, a);
    this._owner.updateClientState();
  },
  _copyColAttributes: function (c, d) {
    if (c && d) {
      var i = document.createElement("col");
      var e = false;
      var f = false;
      if (c.style.width == "" && d.style.width != "") {
        f = true;
      }
      if (d.style.width == "" && c.style.width != "") {
        e = true;
      }
      var a = c.style.display;
      var b = d.style.display;
      $telerik.mergeElementAttributes(c, i, false);
      $telerik.mergeElementAttributes(d, c, false);
      $telerik.mergeElementAttributes(i, d, false);
      c.style.display = b;
      d.style.display = a;
      if (e) {
        c.style.width = "";
      }
      if (f) {
        d.style.width = "";
      }
      var g = c.parentNode;
      if (!g) {
        return;
      }
      var h = g.parentNode;
      if (!h) {
        return;
      }
    }
  },
  _reorderFooterInStaticHeaders: function (c, d) {
    for (var e = 0; e < this.get_element().rows.length; e++) {
      var f = this.get_element().rows[e];
      var a = this._getCellByFooterColumnUniqueNameFromTableRowElement(f, c);
      var b = this._getCellByFooterColumnUniqueNameFromTableRowElement(f, d);
      if (!a || !b) {
        continue;
      }
      this._reorderControls(a, b);
    }
  },
  _getCellByFooterColumnUniqueNameFromTableRowElement: function (c, d) {
    for (
      var a = 0, b = this._owner.get_masterTableView().get_columns().length;
      a < b;
      a++
    ) {
      if (
        this._owner
          .get_masterTableView()
          .get_columns()
          [a].get_element()
          .UniqueName.toUpperCase() == d.toUpperCase()
      ) {
        return c.cells[a];
      }
    }
    return null;
  },
  _reorderColumnsInternal: function (c, d) {
    var j = false;
    for (var g = 0; g < this.get_element().rows.length; g++) {
      var k = this.get_element().rows[g];
      if (
        !k.id &&
        k.parentNode.tagName.toLowerCase() == "tbody" &&
        k.className.indexOf("rgFooter") === -1
      ) {
        continue;
      }
      var a = this._getCellByColumnUniqueNameFromTableRowElement(k, c);
      var b = this._getCellByColumnUniqueNameFromTableRowElement(k, d);
      var h =
        this._hasMultiHeaders && k.className.indexOf("rgMultiHeaderRow") > -1;
      if (h) {
        if (j) {
          continue;
        }
        j = true;
        var e = this._getMultiHeaderByColumnUniqueName(c);
        if (e) {
          a = e.cell;
        }
        var f = this._getMultiHeaderByColumnUniqueName(d);
        if (f) {
          b = f.cell;
        }
      }
      if (!a || !b) {
        continue;
      }
      this._reorderControls(a, b);
    }
  },
  _reorderControls: function (f, j) {
    var a = document.createElement("div");
    var b = document.createElement("div");
    document.body.appendChild(a);
    document.body.appendChild(b);
    this._moveNodes(f, b);
    this._moveNodes(j, a);
    var g = f.style.cssText;
    var h = j.style.cssText;
    var c = f.className;
    var d = j.className;
    var e = f.align;
    var i = j.align;
    f.innerHTML = j.innerHTML = "";
    this._moveNodes(b, j);
    this._moveNodes(a, f);
    this._recreateControls(f);
    this._recreateControls(j);
    f.style.cssText = h;
    j.style.cssText = g;
    f.className = d;
    j.className = c;
    f.align = i;
    j.align = e;
    a.parentNode.removeChild(a);
    b.parentNode.removeChild(b);
  },
  _moveNodes: function (b, c) {
    var a = b.childNodes;
    while (a.length > 0) {
      c.appendChild(a[0]);
    }
  },
  _recreateControls: function (f) {
    var e = f.getElementsByTagName("*");
    for (var b = 0, c = e.length; b < c; b++) {
      var d = e[b];
      if (typeof d.id != "undefined" && d.id != "") {
        var a = $find(d.id);
        if (!a) {
          continue;
        }
        a._element = $get(d.id);
      }
    }
  },
  getColumnByUniqueName: function (b) {
    for (var a = 0; a < this.get_columns().length; a++) {
      if (this.get_columns()[a].get_element().UniqueName == b) {
        return this.get_columns()[a];
      }
    }
    return null;
  },
  getCellByColumnUniqueName: function (a, b) {
    return this._getCellByColumnUniqueNameFromTableRowElement(
      a.get_element(),
      b
    );
  },
  _getCellByColumnUniqueNameFromTableRowElement: function (b, d) {
    var c = this,
      a = (c._cellsByUniqueName =
        c._cellsByUniqueName || c._createColumnsByUniqueNameHash());
    return b.cells[a[d]] || null;
  },
  _createColumnsByUniqueNameHash: function () {
    var j = this,
      g = {},
      a = j._columnsInternal,
      f = j._owner,
      e = j.get_id(),
      h = f.get_masterTableView(),
      b = f.get_masterTableViewFooter(),
      c = f.get_masterTableViewHeader();
    for (var d = 0; d < a.length; d++) {
      g[a[d].get_uniqueName()] = d;
    }
    if (e == h.get_id() || (b && e == b.get_id()) || (c && e == c.get_id())) {
      f.get_masterTableView()._cellsByUniqueName = g;
      if (c) {
        c._cellsByUniqueName = g;
      }
      if (b) {
        b._cellsByUniqueName = g;
      }
    } else {
      j._cellsByUniqueName = g;
    }
    return g;
  },
  _getCellIndexByColumnUniqueNameFromTableRowElement: function (b, c) {
    if (!c || c == "") {
      return null;
    }
    for (var a = 0; a < this.get_columns().length; a++) {
      if (
        this.get_columns()[a].get_element().UniqueName.toUpperCase() ==
        c.toUpperCase()
      ) {
        return a;
      }
    }
    return null;
  },
  getColumnUniqueNameByCellIndex: function (d, c) {
    var a = this._toArray(d.cells).sort(function (e, f) {
      return e.cellIndex - f.cellIndex;
    });
    for (var b = 0; b < a.length; b++) {
      if (a[b].UniqueName && b == c) {
        return a[b].UniqueName;
      }
    }
    return null;
  },
  _toArray: function (a) {
    var c = Array(a.length);
    for (var b = 0; b < c.length; b++) {
      c[b] = a[b];
    }
    return c;
  },
  _getMultiHeaderByColumnUniqueName: function (f) {
    if (this._hasMultiHeaders) {
      var c = this.getColumnByUniqueName(f);
      if (c) {
        var e = c.get_element().parentNode;
        var b = e.cells;
        for (var d = 0; d < b.length; d++) {
          var a = b[d];
          if (a.UniqueName == f) {
            return { index: d, cell: a };
          }
        }
      }
    }
    return null;
  },
  _sliderClientValueChanged: function (c, g, e) {
    var b = $get(c);
    var f = $find(g);
    var a = "-2147483648";
    var d = 0;
    if (b && f) {
      d = f.get_value();
      if (!e) {
        this._applyPagerLabelText(b, d, this.get_pageCount());
      }
    }
    if (e) {
      window.location.href = e.replace(a, d + 1);
    }
  },
  _applyPagerLabelText: function (d, f, e) {
    var h = this._owner.ClientSettings.ClientMessages.PagerTooltipFormatString;
    var c = /\{0[^\}]*\}/g;
    var b = /\{1[^\}]*\}/g;
    var g = f == 0 ? 1 : f + 1;
    var a = e;
    h = h.replace(c, g).replace(b, a);
    d.innerHTML = h;
  },
  resizeItem: function (f, e, g) {
    if (!this._owner.ClientSettings.Resizing.AllowRowResize) {
      return;
    }
    var c = this.get_element().rows[f];
    if (c && c.id != "" && c.id.split("__").length == 2) {
      var a = new Telerik.Web.UI.GridDataItemCancelEventArgs(c, null);
      this._owner.raise_rowResizing(a);
      if (a.get_cancel()) {
        return false;
      }
    }
    var b = this.get_element().style.tableLayout;
    this.get_element().style.tableLayout = "";
    var i = this.get_element().parentNode.parentNode.parentNode.parentNode;
    var d = $find(i.id);
    var j;
    if (d != null) {
      j = d.get_element().style.tableLayout;
      d.get_element().style.tableLayout = "";
    }
    if (!g) {
      if (this.get_element()) {
        if (this.get_element().rows[f]) {
          if (this.get_element().rows[f].cells[0]) {
            this.get_element().rows[f].cells[0].style.height = e + "px";
            this.get_element().rows[f].style.height = e + "px";
          }
        }
      }
    } else {
      if (this.get_element()) {
        if (this.get_element().tBodies[0]) {
          if (this.get_element().tBodies[0].rows[f]) {
            if (this.get_element().tBodies[0].rows[f].cells[0]) {
              this.get_element().tBodies[0].rows[f].cells[0].style.height =
                e + "px";
              this.get_element().tBodies[0].rows[f].style.height = e + "px";
            }
          }
        }
      }
    }
    this.get_element().style.tableLayout = b;
    if (d != null) {
      d.get_element().style.tableLayout = j;
    }
    if (c && c.id != "" && c.id.split("__").length == 2) {
      var h = c.id.split("__")[1];
      var k = this._resizedItemsData;
      k.add(String.format("{0},{1}", this.get_id(), h), e);
      this._owner._resizedItems = k.toString();
      this._owner.raise_rowResized(
        new Telerik.Web.UI.GridDataItemEventArgs(c, null)
      );
    }
    if (
      this._owner._isBatchEditingEnabled &&
      this._owner._rowHighlightingForDeletedRows
    ) {
      this._owner.get_batchEditingManager()._adjustBatchDeletedRows();
    }
    this._owner.updateClientState();
  },
  resizeColumn: function (j, s, k) {
    var h = this._hasMultiHeaders;
    if (!this._validateResizeColumnParams(j, s)) {
      return;
    }
    if (typeof j == "string") {
      j = parseInt(j, 10);
    }
    var a = new Telerik.Web.UI.GridColumnCancelEventArgs(
      this.get_columns()[j],
      null
    );
    this._owner.raise_columnResizing(a);
    if (a.get_cancel()) {
      return false;
    }
    var m = this.get_element().offsetWidth;
    var l =
      this._owner.get_element().offsetWidth -
      parseInt(
        $telerik.getCurrentStyle(
          this._owner.get_element(),
          "borderLeftWidth",
          0
        ),
        10
      ) -
      parseInt(
        $telerik.getCurrentStyle(
          this._owner.get_element(),
          "borderRightWidth",
          0
        ),
        10
      );
    if (
      this == this._owner.get_masterTableView() &&
      this._owner.get_masterTableViewHeader()
    ) {
      this._owner.get_masterTableViewHeader().resizeColumn(j, s);
    }
    var d;
    var i;
    if (this.HeaderRow && this.HeaderRow.style.display === "none") {
      var b = this._owner.get_masterTableView().get_element().tBodies;
      if (b && b.length > 0) {
        var p = b[0].rows;
        if (p && p.length > 0) {
          this.HeaderRow = p[0];
        }
      }
    }
    if (this.HeaderRow || this.MultiHeaderCells) {
      var c = j;
      i = h ? this.MultiHeaderCells : this.HeaderRow.cells;
      d = i[c].offsetWidth - s;
    }
    var r =
      this._owner.ClientSettings.Resizing.EnableNextColumnResize &&
      j < this.get_columns().length - 1 &&
      !k;
    var o;
    if (r) {
      var n = this.get_columns()[j + 1];
      o = n.get_element().offsetWidth + d;
      if (o <= 1) {
        return false;
      }
    }
    if (this.ColGroup) {
      if (this.ColGroup.Cols[j]) {
        if (s > 0) {
          this.ColGroup.Cols[j].style.width = s + "px";
        }
      }
    }
    if (
      this._owner.get_masterTableViewHeader() &&
      this.get_id() == this._owner.get_masterTableViewHeader().get_id()
    ) {
      if (this._owner.get_masterTableView().ColGroup) {
        if (this._owner.get_masterTableView().ColGroup.Cols[j]) {
          if (s > 0) {
            this._owner.get_masterTableView().ColGroup.Cols[j].style.width =
              s + "px";
          }
        }
      }
      if (
        this._owner.get_masterTableViewFooter() &&
        this._owner.get_masterTableViewFooter().ColGroup
      ) {
        if (this._owner.get_masterTableViewFooter().ColGroup.Cols[j]) {
          if (s > 0) {
            this._owner.get_masterTableViewFooter().ColGroup.Cols[
              j
            ].style.width = s + "px";
          }
        }
      }
    }
    if (s.toString().indexOf("px") != -1) {
      s = s.replace("px", "");
    }
    if (s.toString().indexOf("%") == -1) {
      s = s + "px";
    }
    this._resizedColumnsData.add(
      String.format(
        "{0},{1}",
        this._data.UniqueID,
        this.get_columns()[j].get_uniqueName()
      ),
      s
    );
    var g = $get(this._owner.ClientID + "_Frozen") != null;
    if (!g) {
      if (this._owner.get_masterTableViewHeader()) {
        this._owner.ClientSettings.Resizing.ResizeGridOnColumnResize = true;
      }
      if (this._owner.ClientSettings.Resizing.ResizeGridOnColumnResize) {
        if (d != null) {
          this._resizeGridOnColumnResize(j, d, m);
        }
      } else {
        this._noResizeGridOnColumnResize(m, j, l);
      }
    }
    this._owner._resizedColumns = this._resizedColumnsData.toString();
    if (
      this._owner.GroupPanelObject &&
      this._owner.GroupPanelObject.Items.length > 0 &&
      navigator.userAgent.toLowerCase().indexOf("msie") != -1
    ) {
      if (
        this._owner.get_masterTableView() &&
        this._owner.get_masterTableViewHeader()
      ) {
        this._owner.get_masterTableView().get_element().style.width =
          this._owner.get_masterTableViewHeader().get_element().offsetWidth +
          "px";
      }
    }
    a = new Telerik.Web.UI.GridColumnEventArgs(this.get_columns()[j], null);
    this._owner.raise_columnResized(a);
    if (
      this._data.EditMode == "Batch" &&
      this._data._batchEditingSettings.highlightDeletedRows
    ) {
      this._owner.get_batchEditingManager()._adjustBatchDeletedRows();
    }
    if (window.netscape) {
      this.get_element().style.cssText = this.get_element().style.cssText;
    }
    if (g && d != null) {
      var e = $get(this._owner.ClientID + "_FrozenScroll");
      e.style.width = e.offsetWidth - d + "px";
      var f = $get(this._owner.ClientID + "_Frozen");
      if (!this._scrollbarHeight) {
        this._scrollbarHeight = Telerik.Web.UI.Grid.getScrollBarHeight();
      }
      var q = this._scrollbarHeight;
      if (f.offsetWidth >= this._owner.GridDataDiv.clientWidth) {
        if ($telerik.isIE) {
          q++;
        }
        f.style.height = q + "px";
        if (
          this._owner.ClientSettings.Scrolling.SaveScrollPosition &&
          typeof this._owner.ClientSettings.Scrolling.ScrollLeft != "undefined"
        ) {
          f.scrollLeft = this._owner.ClientSettings.Scrolling.ScrollLeft;
        }
        if (this._owner.GridDataDiv.style.overflowX != null) {
          this._owner.GridDataDiv.style.overflowX = "hidden";
        } else {
          f.style.marginTop = "-" + q + "px";
          f.style.zIndex = 99999;
          f.style.position = "relative";
        }
        this._isRightToLeft =
          this._isRightToLeft ||
          Telerik.Web.UI.Grid.IsRightToLeft(this._owner.GridHeaderDiv);
        this._isScrollOnLeftSide =
          this._isScrollOnLeftSide || Telerik.Web.UI.Grid.IsScrollOnLeftSide();
        if (this._isRightToLeft && this._isScrollOnLeftSide) {
          f.style.marginLeft = q + "px";
        } else {
          if (!this._isRightToLeft && $telerik.isSafari) {
            f.style.marginRight = q + "px";
          }
        }
        if (this._owner.GridHeaderDiv && this._owner.GridDataDiv) {
          if (
            this._owner.GridDataDiv.clientWidth ==
            this._owner.GridDataDiv.offsetWidth
          ) {
            if (
              typeof f.style.overflowX != "undefined" &&
              typeof f.style.overflowY != "undefined"
            ) {
              f.style.overflowX = "auto";
              f.style.overflowY = "hidden";
            }
          }
        }
        if (($telerik.isIE8 || $telerik.isChrome) && f) {
          f.style.overflowX = "scroll";
        }
      } else {
        f.style.height = 0;
      }
    }
    if (r) {
      if (o > 1) {
        this.resizeColumn(j + 1, o, true);
      }
    }
  },
  _resizeGridOnColumnResize: function (f, c, g) {
    var a;
    if (
      this._owner.get_masterTableViewHeader() &&
      this.get_id() == this._owner.get_masterTableViewHeader().get_id()
    ) {
      this.get_element().style.width = g - c + "px";
      this._owner
        .get_masterTableView()
        .get_element().style.width = this.get_element().style.width;
      for (var e = 0; e < this.ColGroup.Cols.length; e++) {
        if (e != f && this.ColGroup.Cols[e].style.width == "") {
          var b = e;
          var d = this._hasMultiHeaders
            ? this.MultiHeaderCells
            : this.HeaderRow.cells;
          if (d[b].style.display != "none") {
            var j = d[b].offsetWidth;
            this.ColGroup.Cols[e].style.width = j + "px";
            this._owner.get_masterTableView().ColGroup.Cols[
              e
            ].style.width = this.ColGroup.Cols[e].style.width;
            if (
              this._owner.get_masterTableViewFooter() &&
              this._owner.get_masterTableViewFooter().ColGroup
            ) {
              this._owner.get_masterTableViewFooter().ColGroup.Cols[
                e
              ].style.width = this.ColGroup.Cols[e].style.width;
            }
          }
        }
      }
      if (
        this._owner.get_masterTableViewFooter() &&
        this._owner.get_masterTableViewFooter().get_element()
      ) {
        this._owner
          .get_masterTableViewFooter()
          .get_element().style.width = this.get_element().style.width;
      }
      a = this.get_element().offsetWidth + "px";
    } else {
      var h = g || this.get_element().offsetWidth;
      if (h > c) {
        this.get_element().style.width = a = h - c + "px";
      } else {
        this.get_element().style.width = a = h + "px";
      }
      this._owner.get_element().style.width = a;
    }
    this._resizedControlData.add(this._data.UniqueID, a);
    this._owner._resizedControl = this._resizedControlData.toString();
  },
  _noResizeGridOnColumnResize: function (e, c, d) {
    var a = this._hasMultiHeaders
      ? this.MultiHeaderCells
      : this.HeaderRow.cells;
    for (var b = c + 1; b < this.ColGroup.Cols.length; b++) {
      a[b].style.width = "";
      this.ColGroup.Cols[b].style.width = "";
      if (
        this._owner.get_masterTableViewHeader() &&
        this.get_id() == this._owner.get_masterTableViewHeader().get_id()
      ) {
        this._owner.get_masterTableView().ColGroup.Cols[b].style.width = "";
        this._owner.get_masterTableViewHeader().get_element().cells[
          b
        ].style.width = "";
      }
      if (this._owner.get_masterTableViewFooter()) {
        this._owner.get_masterTableViewFooter().ColGroup.Cols[b].style.width =
          "";
        this._owner.get_masterTableViewFooter().get_element().cells[
          b
        ].style.width = "";
      }
      this._resizedColumnsData.add(
        String.format(
          "{0},{1}",
          this._data.UniqueID,
          this.get_columns()[b].get_uniqueName()
        ),
        ""
      );
    }
    if (d > 0) {
      this._owner.get_element().style.width = d + "px";
    }
    this.get_element().style.width = e + "px";
    if (
      this._owner.get_masterTableViewHeader() &&
      this.get_id() == this._owner.get_masterTableViewHeader().get_id()
    ) {
      this._owner
        .get_masterTableView()
        .get_element().style.width = this.get_element().style.width;
    }
    if (this._owner.get_masterTableViewFooter()) {
      this._owner
        .get_masterTableViewFooter()
        .get_element().style.width = this.get_element().style.width;
    }
  },
  _validateResizeColumnParams: function (a, b) {
    if (isNaN(parseInt(a, 10))) {
      return false;
    }
    if (isNaN(parseInt(b, 10))) {
      return false;
    }
    if (a < 0) {
      return false;
    }
    if (b < 0) {
      return false;
    }
    if (a > this.get_columns().length - 1) {
      return false;
    }
    if (!this._owner.ClientSettings.Resizing.AllowColumnResize) {
      return false;
    }
    if (!this.get_columns()) {
      return false;
    }
    if (!this.get_columns()[a].get_resizable()) {
      return false;
    }
    return true;
  },
  resizeColumnToFit: function (a) {
    if (typeof a === "string") {
      a = this.getColumnByUniqueName(a);
    }
    if (typeof a === "number") {
      a = this.get_columns()[a];
    }
    if (typeof a === "object" && a.resizeToFit) {
      a.resizeToFit();
    }
  },
  get_allowPaging: function () {
    return !!this._data.AllowPaging;
  },
  get_pageCount: function () {
    return this.PageCount;
  },
  get_pageSize: function () {
    return this.PageSize;
  },
  set_pageSize: function (b) {
    var a = this.PageSize;
    if (this.PageSize != b) {
      this.PageSize = b;
      this.set_currentPageIndex(0, true);
      if (!this.fireCommand("PageSize", b) && this._preventUpdatePager) {
        this.PageSize = a;
        this._refreshPagerSlider();
        this._refreshAdvancedPageTextBoxes();
        this._refreshDropDownPager();
        this._generateNumericPager();
        this._preventUpdatePager = false;
      } else {
        this._updatePager();
      }
    }
  },
  get_virtualItemCount: function () {
    return this._virtualItemCount;
  },
  set_virtualItemCount: function (a) {
    if (this._virtualItemCount != a || a === 0) {
      this._virtualItemCount = a;
      if (a == 0 && (!this._dataSource || this._dataSource.length == 0)) {
        this.set_currentPageIndex(0, true);
      } else {
        this.set_currentPageIndex(0, false);
      }
      this._updatePager();
      this._initializeVirtualScrollPaging();
      if (this._virtualization) {
        this._virtualization.set_virtualItemCount(a);
      }
    }
  },
  set_pageButtonCount: function (a) {
    this._pageButtonCount = a;
    this._updatePager();
  },
  get_pageButtonCount: function () {
    return this._pageButtonCount;
  },
  _initializeVirtualScrollPaging: function () {
    var a = $find(this._owner.get_id());
    if (a._scrolling) {
      a._scrolling._initializeVirtualScrollPaging(true);
    }
  },
  _updatePager: function () {
    var a = Math.ceil(this.get_virtualItemCount() / this.get_pageSize());
    this.PageCount = a;
    var b = String.format("{0}PCN", this.get_id());
    var c = String.format("{0}FIP", this.get_id());
    var e = String.format("{0}DSC", this.get_id());
    var d = String.format("{0}LIP", this.get_id());
    var f = this._data.pageOfLabelClientID;
    this._populatePagerStatsElements(b, c, d, e, f);
    b = String.format("{0}PCNTop", this.get_id());
    c = String.format("{0}FIPTop", this.get_id());
    e = String.format("{0}DSCTop", this.get_id());
    d = String.format("{0}LIPTop", this.get_id());
    f = this._data.pageOfLabelTopClientID;
    this._populatePagerStatsElements(b, c, d, e, f);
    this._refreshPagerSlider();
    this._refreshAdvancedPageTextBoxes();
    this._refreshDropDownPager();
    this._generateNumericPager();
    this._setPagerVisibility(a > 1 || this._data.PagerAlwaysVisible);
  },
  _refreshPagerSlider: function () {
    if (this._data.sliderClientID && this._data.sliderClientID != "") {
      this._setSliderValue(
        $find(this._data.sliderClientID),
        this.get_pageCount(),
        this._data.sliderLabelClientID
      );
    }
    if (this._data.sliderTopClientID && this._data.sliderTopClientID != "") {
      this._setSliderValue(
        $find(this._data.sliderTopClientID),
        this.get_pageCount(),
        this._data.sliderTopLabelClientID
      );
    }
  },
  _refreshAdvancedPageTextBoxes: function () {
    if (
      this._data.goToPageTextBoxClientID &&
      this._data.goToPageTextBoxClientID != ""
    ) {
      this._setTextBoxValue(
        $find(this._data.goToPageTextBoxClientID),
        this.PageCount || 1
      );
    }
    if (
      this._data.goToPageTextBoxTopClientID &&
      this._data.goToPageTextBoxTopClientID != ""
    ) {
      this._setTextBoxValue(
        $find(this._data.goToPageTextBoxTopClientID),
        this.PageCount || 1
      );
    }
    if (
      this._data.changePageSizeTextBoxClientID &&
      this._data.changePageSizeTextBoxClientID != ""
    ) {
      this._setTextBoxValue(
        $find(this._data.changePageSizeTextBoxClientID),
        this.get_virtualItemCount() || 1,
        this.PageSize
      );
    }
    if (
      this._data.changePageSizeTextBoxTopClientID &&
      this._data.changePageSizeTextBoxTopClientID != ""
    ) {
      this._setTextBoxValue(
        $find(this._data.changePageSizeTextBoxTopClientID),
        this.get_virtualItemCount() || 1,
        this.PageSize
      );
    }
  },
  _refreshDropDownPager: function () {
    if (
      this._data.changePageSizeComboBoxTopClientID &&
      this._data.changePageSizeComboBoxTopClientID != ""
    ) {
      this._setChangePageComboSelectedValue(
        $find(this._data.changePageSizeComboBoxTopClientID),
        this.PageSize
      );
    }
    if (
      this._data.changePageSizeComboBoxClientID &&
      this._data.changePageSizeComboBoxClientID != ""
    ) {
      this._setChangePageComboSelectedValue(
        $find(this._data.changePageSizeComboBoxClientID),
        this.PageSize
      );
    }
  },
  _setChangePageComboSelectedValue: function (a, j) {
    if (a != null) {
      var e = a.findItemByValue(j);
      if (e) {
        a.trackChanges();
        e.select();
        a.commitChanges();
      } else {
        var f = a.get_items();
        var d = f.get_count();
        var h;
        for (var c = 0, g = f.get_count(); c < g; c++) {
          if (f.getItem(c).get_value() > j) {
            h = f.getItem(c).get_attributes().getAttribute("ownerTableViewId");
            d = c;
            break;
          }
        }
        a.trackChanges();
        var b;
        if (a.get_id().indexOf("PageSizeCombo") > -1) {
          b = new Telerik.Web.UI.RadComboBoxItem();
        } else {
          b = new Telerik.Web.UI.DropDownListItem();
        }
        b.set_text(j.toString());
        b.set_value(j);
        f.insert(d, b);
        b.get_attributes().setAttribute("ownerTableViewId", h);
        b.select();
        a.commitChanges();
      }
    }
  },
  _setSliderValue: function (c, a, b) {
    if (c != null) {
      a = Math.max(a - 1, 0);
      c.set_maximumValue(a);
      this._applyPagerLabelText($get(b), 0, a + 1);
    }
  },
  _setTextBoxValue: function (b, a, c) {
    if (b != null) {
      if (typeof a != "undefined") {
        b.set_maxValue(a);
      }
      if (typeof c != "undefined") {
        b.set_value(Math.min(c, a));
      }
    }
  },
  _populatePagerStatsElements: function (a, b, c, d, e) {
    if ($get(a)) {
      $get(a).innerHTML = this.PageCount;
    }
    if (e && e != "" && $get(e)) {
      $get(e).innerHTML = String.format(" of {0}", this.PageCount || 1);
    }
    if ($get(b)) {
      if (this.get_virtualItemCount() == 0) {
        $get(b).innerHTML = 0;
      } else {
        $get(b).innerHTML =
          (this.get_currentPageIndex() + 1) * this.get_pageSize() -
          this.get_pageSize() +
          1;
      }
    }
    if ($get(d)) {
      $get(d).innerHTML = this.get_virtualItemCount();
    }
    if ($get(c)) {
      var g = this.get_virtualItemCount();
      var f = (this.get_currentPageIndex() + 1) * this.get_pageSize();
      if (f > g) {
        f = g;
      }
      $get(c).innerHTML = f;
    }
    if ($get(c) && $get(d)) {
      var h = parseInt($get(c).innerHTML, 10);
      var i = parseInt($get(d).innerHTML, 10);
      if (h > i) {
        $get(c).innerHTML = i;
      }
    }
  },
  _generateNumericPager: function () {
    this._populateNumericPagerDiv(
      $get(String.format("{0}NPPHTop", this.get_id()))
    );
    this._populateNumericPagerDiv(
      $get(String.format("{0}NPPH", this.get_id()))
    );
  },
  _populateNumericPagerDiv: function (e) {
    if (e) {
      e.innerHTML = "";
      var f = new Sys.StringBuilder();
      var g = 1;
      var a = this._pageButtonCount;
      if (this.get_currentPageIndex() + 1 > a) {
        g = Math.floor(this.get_currentPageIndex() / a) * a + 1;
      }
      var b = Math.min(this.PageCount, g + a - 1);
      if (g > a) {
        f.append('<a href="#"');
        f.append(
          String.format(
            " onclick=\"Telerik.Web.UI.Grid.NavigateToPage('{0}',{1}); return false;\"",
            this.get_id(),
            Math.max(g - a, 0)
          )
        );
        f.append("><span>...</span></a>");
      }
      for (var c = g, d = b; c <= d; c++) {
        if (c == this.get_currentPageIndex() + 1) {
          f.append('<a href="#"');
          f.append(' onclick="return false;" class="rgCurrentPage"');
          f.append(String.format("><span>{0}</span></a>", c));
        } else {
          f.append('<a href="#"');
          f.append(
            String.format(
              " onclick=\"Telerik.Web.UI.Grid.NavigateToPage('{0}',{1}); return false;\"",
              this.get_id(),
              c
            )
          );
          f.append(String.format("><span>{0}</span></a>", c));
        }
      }
      if (b < this.PageCount) {
        f.append('<a href="#"');
        f.append(
          String.format(
            " onclick=\"Telerik.Web.UI.Grid.NavigateToPage('{0}',{1}); return false;\"",
            this.get_id(),
            b + 1
          )
        );
        f.append("><span>...</span></a>");
      }
      e.innerHTML = f.toString();
    }
  },
  get_currentPageIndex: function () {
    return this.CurrentPageIndex;
  },
  set_currentPageIndex: function (n, a) {
    if (this.CurrentPageIndex != n) {
      this.CurrentPageIndex = n;
      var b = String.format("{0}CPI", this.get_id());
      var d = String.format("{0}FIP", this.get_id());
      var f = String.format("{0}LIP", this.get_id());
      var h = String.format("{0}DSC", this.get_id());
      var c = String.format("{0}CPITop", this.get_id());
      var e = String.format("{0}FIPTop", this.get_id());
      var g = String.format("{0}LIPTop", this.get_id());
      var i = String.format("{0}DSCTop", this.get_id());
      if ($get(b)) {
        $get(b).innerHTML = n + 1;
      }
      if ($get(d)) {
        $get(d).innerHTML =
          (n + 1) * this.get_pageSize() - this.get_pageSize() + 1;
      }
      var m = 0;
      if ($get(h)) {
        m = parseInt($get(h).innerHTML, 10);
      }
      var j;
      if ($get(f)) {
        j = (n + 1) * this.get_pageSize();
        if (j > m) {
          j = m;
        }
        $get(f).innerHTML = j;
      }
      if ($get(c)) {
        $get(c).innerHTML = n + 1;
      }
      if ($get(e)) {
        $get(e).innerHTML =
          (n + 1) * this.get_pageSize() - this.get_pageSize() + 1;
      }
      m = 0;
      if ($get(i)) {
        m = parseInt($get(i).innerHTML, 10);
      }
      if ($get(g)) {
        j = (n + 1) * this.get_pageSize();
        if (j > m) {
          j = m;
        }
        $get(g).innerHTML = j;
      }
      this._generateNumericPager();
      if (
        this._data.sliderClientID &&
        this._data.sliderClientID != "" &&
        this._data.sliderTopClientID &&
        this._data.sliderTopClientID != ""
      ) {
        var k = $find(this._data.sliderClientID);
        if (k) {
          k.set_value(n);
        }
        k = $find(this._data.sliderTopClientID);
        if (k) {
          k.set_value(n);
        }
      }
      if (
        this._data.goToPageTextBoxClientID &&
        this._data.goToPageTextBoxClientID != "" &&
        this._data.goToPageTextBoxTopClientID &&
        this._data.goToPageTextBoxTopClientID != ""
      ) {
        var l = $find(this._data.goToPageTextBoxClientID);
        if (l != null) {
          l.set_value(n + 1);
        }
        l = $find(this._data.goToPageTextBoxTopClientID);
        if (l != null) {
          l.set_value(n + 1);
        }
      }
      if (!a) {
        this.fireCommand("Page", n);
      }
    }
  },
  get_dataSource: function () {
    return this._dataSource;
  },
  set_dataSource: function (a) {
    if (this._dataSource != a) {
      this._dataSource = a;
    }
  },
  get_allowMultiColumnSorting: function () {
    return this._data.AllowMultiColumnSorting;
  },
  set_allowMultiColumnSorting: function (a) {
    if (this._data.AllowMultiColumnSorting != a) {
      this._data.AllowMultiColumnSorting = a;
    }
  },
  get_allowNaturalSort: function () {
    return this._data.AllowNaturalSort;
  },
  set_allowNaturalSort: function (a) {
    if (this._data.AllowNaturalSort != a) {
      this._data.AllowNaturalSort = a;
    }
  },
  _setPagerVisibility: function (j) {
    var b = j ? "" : "none";
    var c;
    var e;
    var d;
    if (this.get_element().tFoot) {
      var f = this.get_element().tFoot;
      if (f.rows) {
        for (c = 0, d = f.rows.length; c < d; c++) {
          if (f.rows[c].className.indexOf("rgPager") > -1) {
            f.rows[c].style.display = b;
          }
        }
      }
    } else {
      var a = $get(String.format("{0}_Pager", this.get_id()));
      if (a) {
        e = a.rows || (a.tBodies && a.tBodies[0].rows);
        if (e && e.length) {
          for (c = 0, d = e.length; c < d; c++) {
            if (e[c].className.indexOf("rgPager") > -1) {
              e[c].style.display = b;
            }
          }
        }
      }
    }
    var g = this.get_element().tHead;
    if (g) {
      for (c = 0, d = g.rows.length; c < d; c++) {
        if (g.rows[c].className.indexOf("rgPager") > -1) {
          g.rows[c].style.display = b;
        }
      }
    } else {
      var h = $get(String.format("{0}_TopPager", this.get_id()));
      if (h) {
        e = h.rows || (h.tBodies && h.tBodies[0].rows);
        if (e && e.length) {
          for (c = 0, d = e.length; c < d; c++) {
            if (e[c].className.indexOf("rgPager") > -1) {
              e[c].style.display = b;
            }
          }
        }
      }
    }
  },
  _fixRowsClassNames: function () {
    var d = this.get_element().tBodies[0].rows,
      c = 0,
      b;
    for (var a = 0; a < d.length; a++) {
      b = d[a];
      if (
        (b.className.indexOf("rgRow") !== -1 ||
          b.className.indexOf("rgAltRow") !== -1) &&
        b.style.display !== "none"
      ) {
        if (
          c % 2 == 0 ||
          this._owner.ClientSettings.EnableAlternatingItems == false
        ) {
          Sys.UI.DomElement.removeCssClass(b, "rgAltRow");
          Sys.UI.DomElement.addCssClass(b, "rgRow");
        } else {
          Sys.UI.DomElement.removeCssClass(b, "rgRow");
          Sys.UI.DomElement.addCssClass(b, "rgAltRow");
        }
        c++;
      }
    }
  },
  expandItem: function (b) {
    b = this._getRowByIndexOrItemIndexHierarchical(b);
    var a = this._getExpandButton(b);
    this._ensureExpandCollapseButtons(a, false);
    return this._expandRow(b);
  },
  _expandRow: function (l) {
    if (!this._owner.ClientSettings.AllowExpandCollapse) {
      return false;
    }
    var b = l;
    var f = b.id.split("__")[1];
    var h = 1;
    if (!$find(b.id)) {
      var m = $find(b.id.split("__")[0]);
      if (m) {
        m.get_dataItems();
      }
    }
    var d = $find(b.id);
    if (d && d.get_isInEditMode() && this._data.EditMode != "InPlace") {
      h = 2;
    }
    var c = this._data.hasDetailItemTemplate ? 1 : 0;
    var g = b.parentNode.rows[b.sectionRowIndex + h + c];
    if (g && g.style.display == "none") {
      var a = new Telerik.Web.UI.GridDataItemCancelEventArgs(b, null);
      a.get_nestedViewItem = function () {
        return g;
      };
      this._owner.raise_hierarchyExpanding(a);
      if (a.get_cancel()) {
        return false;
      }
      var e = $find(b.id);
      if (e) {
        e._expanded = true;
      }
      g.style.display = window.netscape ? "table-row" : "";
      a = new Telerik.Web.UI.GridDataItemEventArgs(b, null);
      a.get_nestedViewItem = function () {
        return g;
      };
      this._owner.raise_hierarchyExpanded(a);
      if (
        this._data.EditMode == "Batch" &&
        this._data._batchEditingSettings.highlightDeletedRows
      ) {
        this.get_owner().get_batchEditingManager()._adjustBatchDeletedRows();
      }
      Array.add(this._owner._expandedItems, f);
      this._owner.updateClientState();
    }
    if (
      this.get_element().parentNode.parentNode.tagName.toLowerCase() == "tr"
    ) {
      if (this.get_id() != this._owner._masterClientID) {
        var k = this.get_element().parentNode.parentNode.parentNode.parentNode;
        var j = $find(k.id);
        var i = k.rows[this.get_element().parentNode.parentNode.rowIndex - 1];
        if (i) {
          j._expandRow(i);
        }
      }
    }
    return true;
  },
  collapseItem: function (b) {
    b = this._getRowByIndexOrItemIndexHierarchical(b);
    var a = this._getExpandButton(b);
    this._ensureExpandCollapseButtons(a, true);
    return this._collapseRow(b);
  },
  _performCollapseItem: function (c) {
    c = this._getRowByIndexOrItemIndexHierarchical(c);
    var b = 0;
    if (
      this._data._columnsData &&
      this._data._columnsData.length > 0 &&
      this._data._columnsData[0].ColumnType == "GridGroupSplitterColumn"
    ) {
      b = 1;
    }
    var a = c.cells[b].getElementsByTagName("input")[0];
    if (a == undefined) {
      a = c.cells[b].getElementsByTagName("img")[0];
    }
    this._ensureExpandCollapseButtons(a, true);
    if (!$find(c.id)) {
      var d = $find(c.id.split("__")[0]);
      this._owner._ensureDataItemsCreated(d);
    }
    return this._collapseRow(c);
  },
  _collapseRow: function (i) {
    if (!this._owner.ClientSettings.AllowExpandCollapse) {
      return false;
    }
    var c = i;
    var g = c.id.split("__")[1];
    var e = 1;
    if (
      this._owner._editIndexes.length > 0 &&
      (this._hierarchyLoadMode == "Client" ||
        this._hierarchyLoadMode == "Conditional") &&
      this._data.EditMode != "InPlace"
    ) {
      var b = $find(c.id);
      if (b && b.get_isInEditMode()) {
        e += 1;
      }
    }
    var d = this._data.hasDetailItemTemplate ? 1 : 0;
    var h = c.parentNode.rows[c.sectionRowIndex + e + d];
    if (h && h.style.display != "none") {
      var a = new Telerik.Web.UI.GridDataItemCancelEventArgs(c, null);
      a.get_nestedViewItem = function () {
        return h;
      };
      this._owner.raise_hierarchyCollapsing(a);
      if (a.get_cancel()) {
        return false;
      }
      var f = $find(c.id);
      if (f) {
        f._expanded = false;
      }
      h.style.display = "none";
      a = new Telerik.Web.UI.GridDataItemEventArgs(c, null);
      a.get_nestedViewItem = function () {
        return h;
      };
      this._owner.raise_hierarchyCollapsed(a);
      if (
        this._data.EditMode == "Batch" &&
        this._data._batchEditingSettings.highlightDeletedRows
      ) {
        this.get_owner().get_batchEditingManager()._adjustBatchDeletedRows();
      }
      Array.add(this._owner._expandedItems, g);
      this._owner.updateClientState();
    }
    return true;
  },
  _ensureExpandCollapseButtons: function (b, c) {
    if (!b) {
      return;
    }
    var a;
    if (c) {
      if (b.title == this._owner._hierarchySettings.CollapseTooltip) {
        b.title = this._owner._hierarchySettings.ExpandTooltip;
      }
      if (b.src) {
        a = this.get_columns()[b.parentNode.cellIndex];
        if (a) {
          b.src = a._data.ExpandImageUrl;
        }
      } else {
        a = this.get_columns()[b.parentNode.cellIndex];
        if (a && b.className.indexOf("rgCollapse") !== -1) {
          if (this.get_owner()._renderMode == Telerik.Web.UI.RenderMode.Lite) {
            b.className = b.className.replace(/rgCollapse/g, "rgExpand");
            if (
              b.children.length > 0 &&
              b.children[0].tagName.toLowerCase() == "span"
            ) {
              b.children[0].className = b.children[0].className.replace(
                /rgCollapse/g,
                "rgExpand"
              );
            }
          } else {
            b.className = "rgExpand";
          }
        }
        if (b.textContent && b.textContent == "-") {
          b.textContent = "+";
        }
      }
      if (this._owner.get_enableAriaSupport()) {
        b.setAttribute("aria-expanded", "false");
        b.parentNode.parentNode.setAttribute("aria-expanded", "false");
      }
    } else {
      if (b.title == this._owner._hierarchySettings.ExpandTooltip) {
        b.title = this._owner._hierarchySettings.CollapseTooltip;
      }
      if (b.src) {
        a = this.get_columns()[b.parentNode.cellIndex];
        if (a) {
          b.src = a._data.CollapseImageUrl;
        }
      } else {
        a = this.get_columns()[b.parentNode.cellIndex];
        if (a && b.className.indexOf("rgExpand") !== -1) {
          if (this.get_owner()._renderMode == Telerik.Web.UI.RenderMode.Lite) {
            b.className = b.className.replace(/rgExpand/g, "rgCollapse");
            if (
              b.children.length > 0 &&
              b.children[0].tagName.toLowerCase() == "span"
            ) {
              b.children[0].className = b.children[0].className.replace(
                /rgExpand/g,
                "rgCollapse"
              );
            }
          } else {
            b.className = "rgCollapse";
          }
        }
        if (b.textContent && b.textContent == "+") {
          b.textContent = "-";
        }
      }
      if (this._owner.get_enableAriaSupport()) {
        b.setAttribute("aria-expanded", "true");
        b.parentNode.parentNode.setAttribute("aria-expanded", "true");
      }
    }
  },
  _toggleExpand: function (h, c) {
    if (!this._owner.ClientSettings.AllowExpandCollapse) {
      return;
    }
    var a = h.parentNode.parentNode;
    var f = 1;
    if (
      this._owner._editIndexes.length > 0 &&
      (this._hierarchyLoadMode == "Client" ||
        this._hierarchyLoadMode == "Conditional") &&
      this._data.EditMode != "InPlace"
    ) {
      if ($find(a.id).get_isInEditMode()) {
        f += 1;
      }
    }
    var b = this._data.hasDetailItemTemplate ? 1 : 0;
    var g = a.parentNode.rows[a.sectionRowIndex + f + b];
    var d = $find(this._owner.get_id());
    if (g.style.display != "none") {
      if (!this._collapseRow(a)) {
        return false;
      }
      this._ensureExpandCollapseButtons(h, true);
    } else {
      if (!this._expandRow(a)) {
        return false;
      }
      this._ensureExpandCollapseButtons(h, false);
    }
    if (d._scrolling && d._scrolling.UseStaticHeaders) {
      d.repaint();
    }
    if (d.ClientSettings.AllowKeyboardNavigation) {
      d.get_element().focus();
    }
    if (
      d.ClientSettings.AllowKeyboardNavigation ||
      d.get_allowMultiRowSelection()
    ) {
      d._getPositionedDataItems(true);
    }
    if (this._enableHierarchyExpandAll) {
      this._toggleHierarchyExpandAllHeaderButtons();
    }
  },
  _toggleExpandByRowElement: function (b, a) {
    if (!this._owner.ClientSettings.AllowExpandCollapse) {
      return;
    }
    var f = 1;
    if (
      this._owner._editIndexes.length > 0 &&
      (this._hierarchyLoadMode == "Client" ||
        this._hierarchyLoadMode == "Conditional") &&
      this._data.EditMode != "InPlace"
    ) {
      if ($find(b.id).get_isInEditMode()) {
        f += 1;
      }
    }
    var e = $find(this._owner.get_id());
    var d = 0;
    if (
      this._data._columnsData &&
      this._data._columnsData.length > 0 &&
      this._data._columnsData[0].ColumnType == "GridGroupSplitterColumn"
    ) {
      d = 1;
    }
    var c =
      b.cells[d].getElementsByTagName("input")[0] ||
      b.cells[d].getElementsByTagName("img")[0] ||
      b.cells[d].getElementsByTagName("button")[0];
    if (a) {
      if (!this._collapseRow(b)) {
        return false;
      }
      this._ensureExpandCollapseButtons(c, true);
    } else {
      if (!this._expandRow(b)) {
        return false;
      }
      this._ensureExpandCollapseButtons(c, false);
    }
    if (e.ClientSettings.AllowKeyboardNavigation) {
      e.get_element().focus();
    }
    if (
      e.ClientSettings.AllowKeyboardNavigation ||
      e.get_allowMultiRowSelection()
    ) {
      e._getPositionedDataItems(true);
    }
  },
  _expandAll: function (d) {
    var f = d ? d : window.event;
    var n = f.srcElement ? f.srcElement : f.target;
    var a;
    f.returnValue = false;
    f.cancelBubble = true;
    if (f.preventDefault) {
      f.preventDefault();
      f.stopPropagation();
    }
    var c = this.get_columns()[n.parentNode.cellIndex];
    var b =
      n.className.indexOf("rgCollapse") > -1 ||
      (n.src && n.src.indexOf(c._data.CollapseImageUrl) > -1)
        ? true
        : false;
    var j = this.get_element();
    var o = $telerik.isOpera ? j : j.tBodies[0];
    var m = o.rows;
    for (var g = 0, h = m.length; g < h; g++) {
      var k = m[g];
      if (!k.id) {
        continue;
      } else {
        this._toggleExpandByRowElement(k, b);
      }
    }
    if (b) {
      if (n.src) {
        n.src = c._data.ExpandImageUrl;
      } else {
        if (this.get_owner()._renderMode == Telerik.Web.UI.RenderMode.Lite) {
          a = Telerik.Web.UI.Grid.GetFirstParentByTagName(
            n,
            "th"
          ).getElementsByTagName("button")[0];
          a.className = "t-button rgActionButton rgExpand";
          a.children[0].className = "t-font-icon rgIcon rgExpandIcon";
        } else {
          n.className = "rgExpand";
        }
      }
      this._owner.get_hierarchyColsExpandedState()[this._data.UniqueID] = false;
    } else {
      if (n.src) {
        n.src = c._data.CollapseImageUrl;
      } else {
        if (this.get_owner()._renderMode == Telerik.Web.UI.RenderMode.Lite) {
          a = Telerik.Web.UI.Grid.GetFirstParentByTagName(
            n,
            "th"
          ).getElementsByTagName("button")[0];
          a.className = "t-button rgActionButton rgCollapse";
          a.children[0].className = "t-font-icon rgIcon rgCollapseIcon";
        } else {
          n.className = "rgCollapse";
        }
      }
      this._owner.get_hierarchyColsExpandedState()[this._data.UniqueID] = true;
    }
    this._owner.updateClientState();
  },
  _toggleHierarchyExpandAllHeaderButtons: function () {
    var c = this.get_dataItems();
    var a = this._getHierarchyColExpButtons();
    var b;
    var d = c[0].get_expanded();
    var g = true;
    var e;
    for (e = 0; e < c.length; e++) {
      if (d != c[e].get_expanded()) {
        g = false;
        break;
      }
    }
    if (g) {
      var f = this.get_owner()._renderMode == Telerik.Web.UI.RenderMode.Lite;
      for (e = 0; e < a.length; e++) {
        if (d) {
          if (a[e].src) {
            b = this.get_columns()[a[e].parentNode.cellIndex];
            if (b) {
              a[e].src = b._data.CollapseImageUrl;
            }
          } else {
            if (f) {
              a[e].className = "t-button rgActionButton rgCollapse";
              if (
                a[e].children.length > 0 &&
                a[e].children[0].tagName.toLowerCase() == "span"
              ) {
                a[e].children[0].className =
                  "t-font-icon rgIcon rgCollapseIcon";
              }
            } else {
              a[e].className = "rgCollapse";
            }
          }
        } else {
          if (a[e].src) {
            b = this.get_columns()[a[e].parentNode.cellIndex];
            if (b) {
              a[e].src = b._data.ExpandImageUrl;
            }
          } else {
            if (f) {
              a[e].className = "t-button rgActionButton rgExpand";
              if (
                a[e].children.length > 0 &&
                a[e].children[0].tagName.toLowerCase() == "span"
              ) {
                a[e].children[0].className = "t-font-icon rgIcon rgExpandIcon";
              }
            } else {
              a[e].className = "rgExpand";
            }
          }
        }
      }
      this._owner.get_hierarchyColsExpandedState()[this._data.UniqueID] = d;
      this._owner.updateClientState();
    }
  },
  _toggleDisplayHierarchyExpandAllButtons: function () {
    var b = this._isLastLevelGroupAllButtonOpen() ? "" : "none";
    var a = this._getHeaderHierarchyExpandAllButtons();
    for (var c = 0; c < a.length; c++) {
      a[c].style.display = b;
    }
  },
  _getHeaderHierarchyExpandAllButtons: function () {
    var a = [];
    var c = this.get_columns();
    var b =
      this.get_owner()._renderMode == Telerik.Web.UI.RenderMode.Lite
        ? "button"
        : "input";
    for (var f = 0; f < c.length; f++) {
      var e = c[f].get_element();
      if (e.className.indexOf("rgExpandCol") > -1) {
        var d = e.getElementsByTagName(b)[0];
        if (d) {
          Array.add(a, d);
          continue;
        }
        d = e.getElementsByTagName("img")[0];
        if (d) {
          Array.add(a, d);
        }
      }
    }
    return a;
  },
  _isLastLevelGroupAllButtonOpen: function () {
    var c = false;
    var a = this._getGroupColExpButtons();
    var b = a[a.length - 1];
    if (b.style.display != "none" && b.className.indexOf("rgCollapse") > -1) {
      c = true;
    }
    return c;
  },
  _expandAllGroups: function (a, c) {
    var b = a ? a : window.event;
    var d = b.target || b.srcElement;
    if (d.tagName.toLocaleLowerCase() == "span") {
      d = d.parentNode;
    }
    this._groupExpandAll(d, c);
    this._toggleDisplayHierarchyExpandAllButtons();
  },
  _createFakeElement: function (c, a) {
    var b = document.createElement(c);
    b.className = a;
    return b;
  },
  _getGroupColExpButtons: function () {
    var a = [];
    var b = this.get_columns();
    var f = this.get_owner()._renderMode == Telerik.Web.UI.RenderMode.Lite;
    for (var e = 0; e < b.length; e++) {
      var d = b[e].get_element();
      if (d.className.indexOf("rgGroupCol") > -1) {
        var c = f
          ? d.getElementsByTagName("button")[0]
          : d.getElementsByTagName("input")[0];
        if (c) {
          Array.add(a, c);
          continue;
        }
        c = d.getElementsByTagName("img")[0];
        if (!c) {
          c = this._createFakeElement("input", "rgExpand");
        }
        if (c) {
          Array.add(a, c);
        }
      }
    }
    return a;
  },
  _getHierarchyColExpButtons: function () {
    var a = [];
    var b = this.get_columns();
    var f = this.get_owner()._renderMode == Telerik.Web.UI.RenderMode.Lite;
    for (var e = 0; e < b.length; e++) {
      var d = b[e].get_element();
      if (d.className.indexOf("rgExpandCol") > -1) {
        var c = f
          ? d.getElementsByTagName("button")[0]
          : d.getElementsByTagName("input")[0] ||
            d.getElementsByTagName("img")[0];
        Array.add(a, c);
      }
    }
    return a;
  },
  _showGroupColExpButtonsOnCollapse: function (d, b) {
    var a = this._getGroupColExpButtons();
    for (var c = b + 1; c < a.length; c++) {
      if (d.className.indexOf("rgCollapse") > -1 && d.style.display != "none") {
        a[c].style.display = "";
      }
      d = a[c];
    }
  },
  _hideGroupColExpButtonsOnCollapse: function (d, b) {
    var a = this._getGroupColExpButtons();
    for (var c = b + 1; c < a.length; c++) {
      a[c].style.display = "none";
    }
  },
  _updateGroupsColState: function (a, b) {
    if (this._owner._groupColsState[this._data.UniqueID]) {
      this._owner._groupColsState[this._data.UniqueID][b] = a;
    } else {
      this._owner._groupColsState[this._data.UniqueID] = new Array(
        this._data.GroupLevelsCount * 1
      );
      this._owner._groupColsState[this._data.UniqueID][b] = a;
    }
  },
  _groupExpandAll: function (k, c) {
    if (!this._owner.ClientSettings.AllowExpandCollapse) {
      return;
    }
    this._owner._shouldUpdateClientState = false;
    var g = this.get_element();
    var m = $telerik.isOpera ? g : g.tBodies[0];
    var j = m.rows;
    for (var d = 0, f = j.length; d < f; d++) {
      var h = j[d];
      if (h.id || h.className.indexOf("rgGroupHeader") !== -1) {
        var a = this._getGroupExpandButton(h);
        if (a) {
          var b = a.id.split("__")[2];
          if (b == c) {
            if (k.className.indexOf("rgCollapse") > -1) {
              this._toggleGroupsExpandAll(a, {}, true);
              this._hideGroupColExpButtonsOnCollapse(a, c);
              this._updateGroupsColState(false, c);
            } else {
              this._toggleGroupsExpandAll(a, {}, false);
              this._showGroupColExpButtonsOnCollapse(a, c);
              this._updateGroupsColState(true, c);
            }
          }
        }
      }
    }
    var e = this.get_owner()._renderMode == Telerik.Web.UI.RenderMode.Lite;
    if (k.className.indexOf("rgCollapse") > -1) {
      if (e) {
        k.className = "t-button rgActionButton rgExpand";
        k.title = this.get_owner()._groupingSettings.ExpandAllTooltip;
        if (
          k.children.length > 0 &&
          k.children[0].tagName.toLowerCase() == "span"
        ) {
          k.children[0].className = "t-font-icon rgIcon rgExpandIcon";
        }
      } else {
        k.className = "rgExpand";
        k.title = this.get_owner()._groupingSettings.ExpandAllTooltip;
      }
    } else {
      if (e) {
        k.className = "t-button rgActionButton rgCollapse";
        k.title = this.get_owner()._groupingSettings.CollapseAllTooltip;
        if (
          k.children.length > 0 &&
          k.children[0].tagName.toLowerCase() == "span"
        ) {
          k.children[0].className = "t-font-icon rgIcon rgCollapseIcon";
        }
      } else {
        k.className = "rgCollapse";
        k.title = this.get_owner()._groupingSettings.CollapseAllTooltip;
      }
    }
    this._owner._shouldUpdateClientState = true;
    this._owner.updateClientState();
  },
  _shouldSkipOtherRows: function (b, d) {
    if (b.className.indexOf("rgNoRecords") > -1) {
      return true;
    }
    if (
      b.className.indexOf("rgRow") > -1 ||
      b.className.indexOf("rgAltRow") > -1
    ) {
      var c = b.id.split("__");
      if (c.length > 1) {
        var a = parseInt(c[1], 10);
        if (a >= d) {
          return true;
        }
      }
    }
    return false;
  },
  _toggleGroupsExpandAll: function (F, n, v, B) {
    var H = false;
    if (!B) {
      H = true;
    }
    var o = F;
    var x = typeof B === "undefined" ? false : true;
    if (typeof B === "undefined") {
      B = o;
    }
    if (!this._owner.ClientSettings.AllowGroupExpandCollapse) {
      return;
    }
    var L = o.id.split("__")[0];
    var K = $find(L);
    var G = o.id.split("__")[1];
    var s = o.id.split("__")[2];
    var t = false;
    if (!this._originalGroupLevel) {
      this._originalGroupLevel = s;
    }
    if (parseInt(s, 10) < parseInt(this._originalGroupLevel, 10) || H) {
      this._originalGroupLevel = s;
    }
    var g = o.parentNode.cellIndex;
    var E = o.parentNode.parentNode.sectionRowIndex;
    var J = K.get_element().tBodies[0];
    var k = this.get_columns()[g];
    var a = new Sys.CancelEventArgs();
    if (!x) {
      if (v) {
        this._owner.raise_groupCollapsing(a);
      } else {
        this._owner.raise_groupExpanding(a);
      }
    }
    if (a.get_cancel()) {
      return false;
    }
    if (o === B) {
      if (k) {
        if (o.src) {
          if (!v && o.src !== k._data.CollapseImageUrl) {
            t = true;
            o.src = k._data.CollapseImageUrl;
            o.title = K._owner._groupingSettings.CollapseTooltip;
            if (this._owner.get_enableAriaSupport()) {
              o.setAttribute("aria-expanded", "true");
              o.parentNode.parentNode.setAttribute("aria-expanded", "true");
            }
          } else {
            if (v && o.src !== k._data.ExpandImageUrl) {
              t = true;
              o.src = k._data.ExpandImageUrl;
              o.title = K._owner._groupingSettings.ExpandTooltip;
              if (this._owner.get_enableAriaSupport()) {
                o.setAttribute("aria-expanded", "false");
                o.parentNode.parentNode.setAttribute("aria-expanded", "false");
              }
            }
          }
        } else {
          var w =
            this.get_owner()._renderMode == Telerik.Web.UI.RenderMode.Lite;
          if (!v && o.className.indexOf("rgCollapse") === -1) {
            t = true;
            o.className = w
              ? "t-button rgActionButton rgCollapse"
              : "rgCollapse";
            if (w) {
              if (
                o.children.length > 0 &&
                o.children[0].tagName.toLowerCase() == "span"
              ) {
                o.children[0].className = "t-font-icon rgIcon rgCollapseIcon";
              }
            }
            o.title = K._owner._groupingSettings.CollapseTooltip;
            if (this._owner.get_enableAriaSupport()) {
              o.setAttribute("aria-expanded", "true");
              o.setAttribute("aria-label", o.title);
              o.parentNode.parentNode.setAttribute("aria-expanded", "true");
            }
          } else {
            if (v && o.className.indexOf("rgExpand") === -1) {
              t = true;
              if (w) {
                o.className = "t-button rgActionButton rgExpand";
                if (
                  o.children.length > 0 &&
                  o.children[0].tagName.toLowerCase() == "span"
                ) {
                  o.children[0].className = "t-font-icon rgIcon rgExpandIcon";
                }
              } else {
                o.className = "rgExpand";
              }
              o.title = K._owner._groupingSettings.ExpandTooltip;
              if (this._owner.get_enableAriaSupport()) {
                o.setAttribute("aria-expanded", "false");
                o.setAttribute("aria-label", o.title);
                o.parentNode.parentNode.setAttribute("aria-expanded", "false");
              }
            }
          }
        }
      }
    }
    var m = "none";
    if (!v && o.offsetHeight !== 0 && this._isGroupButtonCollapse(o)) {
      m = window.netscape ? "table-row" : "";
    }
    if (
      this._owner._groupingSettings.RetainGroupFootersVisibility &&
      !n.groupLevel
    ) {
      n.groupLevel = s;
    }
    var A = s;
    var c = false;
    var l =
      parseInt(this._groupLevelsCount, 10) -
      parseInt(this._originalGroupLevel, 10);
    var I = parseInt(this._groupLevelsCount, 10) - parseInt(s, 10);
    var u;
    var D;
    var y;
    var b;
    var M = this.get_virtualItemCount();
    for (u = E + 1; u < J.rows.length; u++) {
      D = J.rows[u];
      if (M && !v && this._shouldSkipOtherRows(D, M)) {
        continue;
      }
      var C = this._previousRow(J.rows[u]);
      if (
        D.className.indexOf("rgRow") < 0 &&
        D.className.indexOf("rgAltRow") < 0 &&
        C &&
        C.id
      ) {
        var q = this._getExpandButton(C);
        if (
          q &&
          !this._isGroupButtonCollapse(q) &&
          D.className.indexOf("rgFooter") == -1
        ) {
          continue;
        }
      }
      var f;
      if (D.id || D.className.indexOf("rgGroupHeader") !== -1) {
        f = this._getGroupExpandButton(D);
      }
      if (!f) {
        if (A == s) {
          if (l > 0) {
            D.style.display = m;
          }
          if (D.className.indexOf("rgFooter") != -1) {
            l--;
          } else {
            D.style.display = m;
          }
        }
        if (m == "" || m == "table-row") {
          if (D.className.indexOf("rgFooter") != -1) {
            var d = 1;
            if (this._owner._groupingSettings.RetainGroupFootersVisibility) {
              d = 2;
            }
            if (I <= d) {
              D.style.display = m;
            }
            I--;
          }
        }
      } else {
        A = f.id.split("__")[2];
        if (A == s || parseInt(A, 10) < parseInt(s, 10)) {
          if (n.groupLevel && s == n.groupLevel && m == "none") {
            b = s - A + 1;
            for (y = 0; y < b; y++) {
              D = J.rows[u - y - 1];
              if (!D.id) {
                D.style.display = "";
              }
            }
          }
          break;
        } else {
          if (parseInt(A, 10) - parseInt(s, 10) == 1) {
            if (f.src == o.src || o.className == f.className) {
              if (f === B) {
                if (m == "none") {
                  if (o.src) {
                    f.src = k._data.CollapseImageUrl;
                  } else {
                    if (
                      this.get_owner()._renderMode ==
                      Telerik.Web.UI.RenderMode.Lite
                    ) {
                      f.className = "t-button rgActionButton rgCollapse";
                      if (
                        f.children.length > 0 &&
                        f.children[0].tagName.toLowerCase() == "span"
                      ) {
                        f.children[0].className =
                          "t-font-icon rgIcon rgCollapseIcon";
                      }
                    } else {
                      f.className = "rgCollapse";
                    }
                  }
                }
              }
              var h = false;
              if (!v) {
                if (!this._isGroupButtonCollapse(o)) {
                  h = true;
                }
              } else {
                h = v;
              }
              D.style.display = m;
              this._toggleGroupsExpand(f, n, o, h);
              I = parseInt(this._groupLevelsCount, 10) - parseInt(s, 10);
            }
            D.style.display = m;
          }
        }
      }
      if (u == J.rows.length - 1) {
        c = true;
      }
    }
    if (n.groupLevel && c && n.groupLevel == s && m == "none") {
      b = s * 1 + 1;
      for (y = 0; y < b; y++) {
        D = J.rows[J.rows.length - y - 1];
        if (!D.id) {
          D.style.display = "";
        }
      }
    }
    if (o === B && t) {
      var p = this._owner._expandedGroupItems;
      var z = K._data.UniqueID + "!" + G;
      l = 0;
      for (u = 0; u < p.length; u++) {
        if (p[u] == z) {
          l++;
        }
      }
      if (l === 2) {
        Array.remove(p, z);
      } else {
        Array.add(p, z);
      }
    }
    this._owner.updateClientState();
    a = new Sys.EventArgs();
    if (!x) {
      if (v) {
        this._owner.raise_groupCollapsed(a);
      } else {
        this._owner.raise_groupExpanded(a);
      }
    }
    var r = $find(this._owner.get_id());
    r._getPositionedDataItems(true);
  },
  _previousRow: function (b) {
    var a = b.previousSibling;
    if (
      this._data.hasDetailItemTemplate &&
      a.className &&
      (a.className.indexOf("rgRow") != -1 ||
        a.className.indexOf("rgAltRow") != -1)
    ) {
      a = b.previousSibling;
    }
    return a;
  },
  _previousDataItemElement: function (a) {
    var b = this;
    if (b._isDataItemElement(a)) {
      return a;
    }
    while (!b._isDataItemElement(a) && a) {
      a = a.previousSibling;
    }
    if (!b._isDataItemElement(a)) {
      return null;
    }
    return a;
  },
  _isDataItemElement: function (a) {
    return (
      a &&
      a.className &&
      (a.className.indexOf("rgRow") != -1 ||
        a.className.indexOf("rgAltRow") != -1) &&
      a.id.indexOf("__") != -1
    );
  },
  _expandCollapseGroup: function (l, k, i) {
    var e = {
      expandChildren: false,
      expandParents: true,
      collapseChildren: false,
      collapseParents: false,
      toggleChildren: false,
      toggleParents: false,
      findClosestGroup: true,
    };
    var o = this;
    k = k || {};
    var n = l.parentNode.parentNode.rows,
      m,
      g,
      d,
      h = !i,
      b,
      f;
    for (var j in e) {
      if (typeof k[j] === "undefined") {
        k[j] = e[j];
      }
    }
    if (k.findClosestGroup) {
      m = l.rowIndex;
      while (
        n[m] &&
        !Sys.UI.DomElement.containsCssClass(n[m], "rgGroupHeader")
      ) {
        m--;
      }
      l = n[m];
      if (!l) {
        return;
      }
    }
    g = o._getGroupExpandButton(l);
    f = g.className.indexOf("rgExpand") !== -1;
    if (i === true || f) {
      b = "rgExpand";
    } else {
      if (i === false || !f) {
        b = "rgCollapse";
      }
    }
    if (this.get_owner()._renderMode == Telerik.Web.UI.RenderMode.Lite) {
      b = "t-button rgActionButton " + b;
    }
    if (!g) {
      g = $telerik.getElementByClassName(l, "rgGroupCol");
      if (g) {
        g = $telerik.getElementByClassName(g, "rgExpand");
      }
    }
    if (!g) {
      g = $telerik.getElementByClassName(l, "rgGroupCol");
      if (g) {
        g = $telerik.getElementByClassName(g, "rgCollapse");
      }
    }
    if (g) {
      if (!b || g.className.indexOf(b) > -1) {
        if (!b) {
          b = g.className;
        }
        o._toggleGroupsExpand(g, {});
      } else {
        return false;
      }
      if (
        (k.expandParents && i && i !== undefined) ||
        (k.collapseParents && h && i !== undefined) ||
        k.toggleParents
      ) {
        d = $telerik.getElementsByClassName(l, "rgGroupCol").length - 1;
        m = l.rowIndex - 1;
        while (d > 0 && n[m]) {
          if (
            $telerik.getElementsByClassName(n[m], "rgGroupCol").length === d
          ) {
            o._expandCollapseGroup(
              n[m],
              { expandParents: false, findClosestGroup: false },
              i
            );
            d--;
          }
          m--;
        }
      }
      if (
        (k.expandChildren && i) ||
        (k.collapseChildren && h) ||
        k.toggleChildren
      ) {
        d = $telerik.getElementsByClassName(l, "rgGroupCol").length;
        m = l.rowIndex + 1;
        while (n[m]) {
          if (
            $telerik.getElementsByClassName(n[m], "rgGroupCol").length === d
          ) {
            break;
          }
          o._expandCollapseGroup(
            n[m],
            { expandParents: false, findClosestGroup: false },
            i
          );
          m++;
        }
      }
      if (this._data.GroupLoadMode === "Server") {
        var c = "",
          a = g.id.split("__");
        if (k.expandChildren || (k.toggleChildren && b.indexOf("rgExpand"))) {
          c = "expandChildren;" + a[1] + ";" + a[2];
        }
        this.fireCommand("GroupsCustomExpandCollapse", c);
      }
      return true;
    }
    return false;
  },
  toggleGroup: function (b, a) {
    return this._expandCollapseGroup(b, a);
  },
  expandGroup: function (b, a) {
    return this._expandCollapseGroup(b, a, true);
  },
  collapseGroup: function (b, a) {
    return this._expandCollapseGroup(b, a, false);
  },
  _expandCollapseAllGroups: function (f, b) {
    f = parseInt(f, 10);
    var g = isNaN(f) || f === 0;
    var d = this._getGroupColExpButtons();
    var c = g
      ? b.indexOf("rgExpand") > -1
        ? "expandToLevel"
        : "collapseToLevel"
      : b.indexOf("rgExpand") > -1
      ? "expandLevel"
      : "collapseLevel";
    var a;
    if (g) {
      for (var e = 0; e < d.length; e++) {
        a = d[e];
        a.className = b;
        this._groupExpandAll(a, e);
        f = e;
      }
    } else {
      a = d[f];
      if (!a) {
        return false;
      }
      a.className = b;
      this._groupExpandAll(a, f);
    }
    if (this._data.GroupLoadMode === "Server") {
      this.fireCommand(
        "GroupsCustomExpandCollapse",
        String.format("{0};{1}", c, f)
      );
    }
    return true;
  },
  expandAllGroups: function (a) {
    return this._expandCollapseAllGroups(a, "rgExpand");
  },
  collapseAllGroups: function (a) {
    return this._expandCollapseAllGroups(a, "rgCollapse");
  },
  _toggleGroupsExpand: function (H, n, D, x) {
    var J = false;
    if (!D) {
      J = true;
    }
    var o = H;
    var z = typeof D === "undefined" ? false : true;
    if (typeof D === "undefined") {
      D = o;
    }
    if (!this._owner.ClientSettings.AllowGroupExpandCollapse) {
      return;
    }
    var P = o.id.split("__")[0];
    var O = $find(P);
    var I = o.id.split("__")[1];
    var t = o.id.split("__")[2];
    var u = false;
    if (!this._originalGroupLevel) {
      this._originalGroupLevel = t;
    }
    if (parseInt(t, 10) < parseInt(this._originalGroupLevel, 10) || J) {
      this._originalGroupLevel = t;
    }
    var g = o.parentNode.cellIndex;
    var G = o.parentNode.parentNode.sectionRowIndex;
    var N = O.get_element().tBodies[0];
    var k = this.get_columns()[g];
    var a = new Sys.CancelEventArgs();
    var w = false;
    if (this._isGroupButtonCollapse(o)) {
      w = true;
    }
    if (typeof x !== "undefined") {
      w = x;
    }
    if (!z) {
      if (w) {
        this._owner.raise_groupCollapsing(a);
      } else {
        this._owner.raise_groupExpanding(a);
      }
    }
    if (a.get_cancel()) {
      return false;
    }
    var K = this._owner._shouldUpdateClientState;
    this._owner._shouldUpdateClientState = false;
    if (o === D) {
      if (k) {
        if (o.src) {
          if (!w && o.src !== k._data.CollapseImageUrl) {
            u = true;
            o.src = k._data.CollapseImageUrl;
            o.title = O._owner._groupingSettings.CollapseTooltip;
            if (this._owner.get_enableAriaSupport()) {
              o.setAttribute("aria-expanded", "true");
              o.parentNode.parentNode.setAttribute("aria-expanded", "true");
            }
          } else {
            if (w && o.src !== k._data.ExpandImageUrl) {
              u = true;
              o.src = k._data.ExpandImageUrl;
              o.title = O._owner._groupingSettings.ExpandTooltip;
              if (this._owner.get_enableAriaSupport()) {
                o.setAttribute("aria-expanded", "false");
                o.parentNode.parentNode.setAttribute("aria-expanded", "false");
              }
            }
          }
        } else {
          var y =
            this.get_owner()._renderMode == Telerik.Web.UI.RenderMode.Lite;
          var M;
          if (!w && o.className.indexOf("rgCollapse") === -1) {
            u = true;
            o.title = O._owner._groupingSettings.CollapseTooltip;
            if (y) {
              M = o.children[0];
              o.value = o.value.replace(/Expand/g, "Collapse");
              o.className = o.className.replace(/rgExpand/g, "rgCollapse");
              if (M && M.className.indexOf("t-font-icon rgIcon") > -1) {
                M.className = M.className.replace(/Expand/g, "Collapse");
              }
            } else {
              o.className = "rgCollapse";
            }
            if (this._owner.get_enableAriaSupport()) {
              o.setAttribute("aria-expanded", "true");
              o.setAttribute("aria-label", o.title);
              o.parentNode.parentNode.setAttribute("aria-expanded", "true");
            }
          } else {
            if (w && o.className.indexOf("rgExpand") === -1) {
              u = true;
              o.title = O._owner._groupingSettings.ExpandTooltip;
              if (y) {
                M = o.children[0];
                o.value = o.value.replace(/Collapse/g, "Expand");
                o.className = o.className.replace(/rgCollapse/g, "rgExpand");
                if (M && M.className.indexOf("t-font-icon rgIcon") > -1) {
                  M.className = M.className.replace(/Collapse/g, "Expand");
                }
              } else {
                o.className = "rgExpand";
              }
              if (this._owner.get_enableAriaSupport()) {
                o.setAttribute("aria-expanded", "false");
                o.setAttribute("aria-label", o.title);
                o.parentNode.parentNode.setAttribute("aria-expanded", "false");
              }
            }
          }
        }
      }
    }
    var m = "none";
    if (!w && o.offsetHeight !== 0 && this._isGroupButtonCollapse(o)) {
      m = window.netscape ? "table-row" : "";
    }
    if (
      this._owner._groupingSettings.RetainGroupFootersVisibility &&
      !n.groupLevel
    ) {
      n.groupLevel = t;
    }
    var C = t;
    var c = false;
    var l =
      parseInt(this._groupLevelsCount, 10) -
      parseInt(this._originalGroupLevel, 10);
    var L = parseInt(this._groupLevelsCount, 10) - parseInt(t, 10);
    var v, A;
    var F;
    var b;
    var Q = this.get_virtualItemCount();
    for (v = G + 1; v < N.rows.length; v++) {
      F = N.rows[v];
      if (Q && !w && this._shouldSkipOtherRows(F, Q)) {
        continue;
      }
      var E = this._previousRow(N.rows[v]);
      if (
        F.className.indexOf("rgRow") < 0 &&
        F.className.indexOf("rgAltRow") < 0 &&
        E &&
        E.id
      ) {
        var q = this._getExpandButton(E);
        if (
          q &&
          !this._isGroupButtonCollapse(q) &&
          F.className.indexOf("rgFooter") == -1
        ) {
          continue;
        }
      }
      var f;
      if (F.id || F.className.indexOf("rgGroupHeader") !== -1) {
        f = this._getGroupExpandButton(F);
      }
      if (!f) {
        if (C == t) {
          if (l > 0) {
            F.style.display = m;
          }
          if (F.className.indexOf("rgFooter") != -1) {
            l--;
          } else {
            F.style.display = m;
          }
        }
        if (m == "" || m == "table-row") {
          if (F.className.indexOf("rgFooter") != -1) {
            var d = 1;
            if (this._owner._groupingSettings.RetainGroupFootersVisibility) {
              d = 2;
            }
            if (L <= d) {
              F.style.display = m;
            }
            L--;
          }
        }
      } else {
        C = f.id.split("__")[2];
        if (C == t || parseInt(C, 10) < parseInt(t, 10)) {
          if (n.groupLevel && t == n.groupLevel && m == "none") {
            b = t - C + 1;
            for (A = 0; A < b; A++) {
              F = N.rows[v - A - 1];
              if (!F.id) {
                F.style.display = "";
              }
            }
          }
          break;
        } else {
          if (parseInt(C, 10) - parseInt(t, 10) == 1) {
            if (f.src == o.src || o.className == f.className) {
              if (f === D) {
                if (m == "none") {
                  if (o.src) {
                    f.src = k._data.CollapseImageUrl;
                  } else {
                    if (
                      this.get_owner()._renderMode ==
                      Telerik.Web.UI.RenderMode.Lite
                    ) {
                      f.className = "t-button rgActionButton rgCollapse";
                      if (
                        f.children.length > 0 &&
                        f.children[0].tagName.toLowerCase() == "span"
                      ) {
                        f.children[0].className =
                          "t-font-icon rgIcon rgCollapseIcon";
                      }
                    } else {
                      f.className = "rgCollapse";
                    }
                  }
                }
              }
              var h = false;
              if (!w) {
                if (!this._isGroupButtonCollapse(o)) {
                  h = true;
                }
              } else {
                h = w;
              }
              F.style.display = m;
              this._toggleGroupsExpand(f, n, o, h);
              L = parseInt(this._groupLevelsCount, 10) - parseInt(t, 10);
            }
            F.style.display = m;
          }
        }
      }
      if (v == N.rows.length - 1) {
        c = true;
      }
    }
    if (n.groupLevel && c && n.groupLevel == t && m == "none") {
      b = t * 1 + 1;
      for (A = 0; A < b; A++) {
        F = N.rows[N.rows.length - A - 1];
        if (!F.id) {
          F.style.display = "";
        }
      }
    }
    if (o === D && u) {
      var p = this._owner._expandedGroupItems,
        B = O._data.UniqueID + "!" + I + "!" + t;
      l = 0;
      for (var r = 0; r < p.length; r++) {
        if (p[r] == B) {
          l++;
        }
      }
      if (l === 2) {
        Array.remove(p, B);
        if (this._enableGroupsExpandAll) {
          this._toggleGroupsExpandAllButton(t * 1);
        }
      } else {
        Array.add(p, B);
        if (this._enableGroupsExpandAll) {
          this._toggleGroupsExpandAllButton(t * 1);
        }
      }
    }
    this._owner._shouldUpdateClientState = K;
    this._owner.updateClientState();
    a = new Sys.EventArgs();
    if (!z) {
      if (w) {
        this._owner.raise_groupCollapsed(a);
      } else {
        this._owner.raise_groupExpanded(a);
      }
    }
    var s = $find(this._owner.get_id());
    s._getPositionedDataItems(true);
    if (
      this._data.EditMode == "Batch" &&
      this._data._batchEditingSettings.highlightDeletedRows
    ) {
      this.get_owner().get_batchEditingManager()._adjustBatchDeletedRows();
    }
  },
  _arrayContains: function (b, d) {
    var c = b.length;
    while (c--) {
      if (b[c] === d) {
        return true;
      }
    }
    return false;
  },
  _toggleGroupsExpandAllButton: function (c) {
    var b = this._owner._expandedGroupItems;
    var d = this._getGroupColExpButtons()[c];
    var f = d.className.indexOf("rgCollapse") > -1;
    var g = this.get_owner()._renderMode == Telerik.Web.UI.RenderMode.Lite;
    var h = this._groupHeadersCount[c];
    var j = h;
    var k = [];
    for (var e = 0; e < b.length; e++) {
      var a = b[e].split("!")[2];
      if (a == c) {
        if (this._arrayContains(k, b[e])) {
          j--;
        }
        Array.add(k, b[e]);
      }
    }
    if (
      j == 0 &&
      this._exapndedGroupItemsTemp[c] != k.length &&
      (k.length == h || k.length == h * 2)
    ) {
      this._exapndedGroupItemsTemp[c] = k.length;
      if (!f) {
        if (g) {
          d.className = "t-button rgActionButton rgCollapse";
          d.title = this.get_owner()._groupingSettings.CollapseAllTooltip;
          if (
            d.children.length > 0 &&
            d.children[0].tagName.toLowerCase() == "span"
          ) {
            d.children[0].className = "t-font-icon rgIcon rgCollapseIcon";
          }
        } else {
          d.className = "rgCollapse";
          d.title = this.get_owner()._groupingSettings.CollapseAllTooltip;
        }
        this._showGroupColExpButtonsOnCollapse(d, c * 1);
        this._updateGroupsColState(true, c);
        this._toggleDisplayHierarchyExpandAllButtons();
      } else {
        if (g) {
          d.className = "t-button rgActionButton rgExpand";
          d.title = this.get_owner()._groupingSettings.ExpandAllTooltip;
          if (
            d.children.length > 0 &&
            d.children[0].tagName.toLowerCase() == "span"
          ) {
            d.children[0].className = "t-font-icon rgIcon rgExpandIcon";
          }
        } else {
          d.className = "rgExpand";
          d.title = this.get_owner()._groupingSettings.ExpandAllTooltip;
        }
        this._hideGroupColExpButtonsOnCollapse(d, c * 1);
        this._updateGroupsColState(false, c);
        this._toggleDisplayHierarchyExpandAllButtons();
      }
    }
  },
  _isGroupButtonCollapse: function (a) {
    var b = a.parentNode.cellIndex;
    var d = this.get_columns()[b];
    var c = d._data.CollapseImageUrl;
    if (
      (a.className && a.className.indexOf("rgCollapse") !== -1) ||
      (a.src && a.src.indexOf(c) !== -1)
    ) {
      return true;
    }
    return false;
  },
  _getGroupExpandButton: function (b) {
    var a = this._findButtonByClickScript(b, "_toggleGroupsExpand");
    if (!a && b.className.indexOf("rgGroupHeader") != -1) {
      return (
        $telerik.getElementByClassName(b, "rgCollapse") ||
        $telerik.getElementByClassName(b, "rgExpand")
      );
    }
    return a;
  },
  _getExpandButton: function (a) {
    return this._findButtonByClickScript(a, "_toggleExpand");
  },
  _findButtonByClickScript: function (b, f) {
    var g = ["img", "input", "button"];
    var a;
    var c;
    for (var d = 0; d < g.length; d++) {
      a = b.getElementsByTagName(g[d]);
      for (var e = 0; e < a.length; e++) {
        c = a[e];
        if (c.onclick != null && c.onclick.toString().indexOf(f) != -1) {
          return c;
        }
      }
    }
    return null;
  },
  editItem: function (b) {
    b = this._getRowByIndexOrItemIndexHierarchical(b);
    var a = b.id.split("__")[1];
    if (!this.fireCommand("Edit", a)) {
      return false;
    }
  },
  updateItem: function (b) {
    b = this._getRowByIndexOrItemIndexHierarchical(b);
    var a = b.id.split("__")[1];
    if (!this.fireCommand("Update", a)) {
      return false;
    }
  },
  deleteItem: function (b) {
    b = this._getRowByIndexOrItemIndexHierarchical(b);
    var a = b.id.split("__")[1];
    if (!this.fireCommand("Delete", a)) {
      return false;
    }
  },
  rebind: function () {
    this._forceRebind = true;
    if (!this.fireCommand("RebindGrid", "")) {
      return false;
    }
  },
  insertItem: function () {
    if (!this.fireCommand("PerformInsert", "")) {
      return false;
    }
  },
  showInsertItem: function () {
    if (!this.fireCommand("InitInsert", "")) {
      return false;
    }
  },
  cancelInsert: function () {
    if (!this.fireCommand("CancelInsert", "")) {
      return false;
    }
  },
  sort: function (b) {
    var f = new Telerik.Web.UI.GridSortExpression();
    var c = b.split(" ")[0];
    var g = Telerik.Web.UI.GridSortOrder.Ascending;
    var a = -1;
    var d = this._sortExpressions.find(c);
    if (d != null) {
      a = d.get_sortOrder();
    }
    if (b.toUpperCase().indexOf(" ASC") != -1) {
      g = Telerik.Web.UI.GridSortOrder.Ascending;
    } else {
      if (b.toUpperCase().indexOf(" DESC") != -1) {
        g = Telerik.Web.UI.GridSortOrder.Descending;
      } else {
        if (d != null) {
          if (a == Telerik.Web.UI.GridSortOrder.None) {
            g = Telerik.Web.UI.GridSortOrder.Ascending;
          } else {
            if (a == Telerik.Web.UI.GridSortOrder.Ascending) {
              g = Telerik.Web.UI.GridSortOrder.Descending;
            } else {
              if (this.get_allowNaturalSort()) {
                g = Telerik.Web.UI.GridSortOrder.None;
              } else {
                g = Telerik.Web.UI.GridSortOrder.Ascending;
              }
            }
          }
        } else {
          g = Telerik.Web.UI.GridSortOrder.Ascending;
        }
      }
    }
    if (d != null) {
      this._sortExpressions.remove(d);
    }
    if (!this.get_allowMultiColumnSorting()) {
      for (var e = 0; e < this._sortExpressions._array.length; e++) {
        this._showSortIconForField(
          this._sortExpressions._array[e].get_fieldName(),
          Telerik.Web.UI.GridSortOrder.None
        );
        this._styleSortedColumnElements(
          this._sortExpressions._array[e].get_fieldName(),
          Telerik.Web.UI.GridSortOrder.None
        );
      }
      this._sortExpressions.clear();
    }
    if (g != a) {
      this._showSortIconForField(c, g);
    }
    if (g != Telerik.Web.UI.GridSortOrder.None) {
      f.set_fieldName(c);
      f.set_sortOrder(g);
      this._sortExpressions.add(f);
    }
    if (!this.fireCommand("Sort", b)) {
      this._styleSortedColumnElements(c, g);
      return false;
    }
  },
  _styleSortedColumnElements: function (d, h) {
    var c = this.get_columns();
    var e = this.get_dataItems();
    var j =
      h != Telerik.Web.UI.GridSortOrder.None
        ? Sys.UI.DomElement.addCssClass
        : Sys.UI.DomElement.removeCssClass;
    var g = this.get_owner().SortingSettings.EnableSkinSortStyles;
    var a;
    for (var b = 0; b < c.length; b++) {
      if (c[b]._data.SortExpression == d) {
        if (g) {
          j(c[b].get_element(), "rgSorted");
        }
        for (var f = 0; f < e.length; f++) {
          a = e[f].get_cell(c[b].get_uniqueName());
          if (g) {
            j(a, "rgSorted");
          }
          if (this.get_owner().SortingSettings.SortedBackColor) {
            if (h != Telerik.Web.UI.GridSortOrder.None) {
              a.style.backgroundColor = this.get_owner().SortingSettings.SortedBackColor.Name;
            } else {
              a.style.backgroundColor = "";
            }
          }
        }
        break;
      }
    }
  },
  _showSortIconForField: function (f, g) {
    if (!f || f == "") {
      return;
    }
    if (typeof g == "undefined") {
      return;
    }
    var b = g == Telerik.Web.UI.GridSortOrder.Ascending ? "" : "none";
    var e = g == Telerik.Web.UI.GridSortOrder.Descending ? "" : "none";
    var d = this.get_columns();
    for (var c = 0; c < d.length; c++) {
      if (d[c]._data.SortExpression == f) {
        var a = $telerik.getChildrenByClassName(d[c].get_element(), "rgSort");
        if (a && a.length > 1) {
          a[0].style.display = b;
          a[1].style.display = e;
        }
      }
    }
  },
  clearSort: function (b) {
    if (!b) {
      var a = this.get_sortExpressions();
      for (var c = 0; c < a.get_count(); c++) {
        this._showSortIconForField(
          a.getItem(c).get_fieldName(),
          Telerik.Web.UI.GridSortOrder.None
        );
      }
      this.get_sortExpressions().clear();
      return this.fireCommand("ClearSort", "");
    }
    var d = this.get_sortExpressions().find(b);
    if (d) {
      this._showSortIconForField(b, Telerik.Web.UI.GridSortOrder.None);
      this.get_sortExpressions().remove(d);
    }
    return this.fireCommand("ClearSort", b);
  },
  get_sortExpressions: function () {
    return this._sortExpressions;
  },
  filter: function (b, m, g, l, j) {
    var f = new Telerik.Web.UI.GridFilterExpression(),
      e = "rgFiltered",
      d = $telerik.getElementByClassName(
        this._getFilterCellByColumnUniqueName(b),
        "rgFilter"
      );
    var a = this.getColumnByUniqueName(b);
    if (!a) {
      return;
    }
    this._owner._resetCheckListFilterOfColumn(a);
    var i = false;
    if (typeof g == "undefined") {
      g = a.get_filterFunction();
      i = true;
    } else {
      if (typeof g == "string") {
        a.set_filterFunction(g);
      }
    }
    if (
      ((typeof g == "number" &&
        Telerik.Web.UI.GridFilterFunction.NoFilter == g) ||
        (typeof g == "string" &&
          Telerik.Web.UI.GridFilterFunction.parse(g) ==
            Telerik.Web.UI.GridFilterFunction.NoFilter)) &&
      (a.get_filterDelay() != null || (m != null && m !== "" && i))
    ) {
      if (i) {
        if (a._data.Acff && a._data.Acff != "NoFilter") {
          g = a._data.Acff;
        } else {
          g = a.get_dataType() == "System.String" ? "Contains" : "EqualTo";
        }
      }
      if (a._data.EnableRangeFiltering) {
        g = "Between";
      }
    }
    if (d) {
      if (
        g === "NoFilter" ||
        (m === "" &&
          !(
            g === "IsEmpty" ||
            g === "IsNull" ||
            g === "NotIsNull" ||
            g === "NotIsEmpty"
          ))
      ) {
        Sys.UI.DomElement.removeCssClass(d, e);
      } else {
        if (d.className.indexOf(e) < 0) {
          Sys.UI.DomElement.addCssClass(d, e);
        }
      }
    }
    var c = "";
    switch (a._data.ColumnType) {
      case "GridHyperLinkColumn":
        c = a._data.DataTextField;
        break;
      case "GridImageColumn":
        c = a._data.DataAlternateTextField;
        break;
      case "GridBinaryImageColumn":
        c = a._data.DataAlternateTextField;
        break;
      case "GridCalculatedColumn":
        c = String.format("{0}Result", a._data.UniqueName);
        break;
      case "GridAttachmentColumn":
        c =
          a._data.DataTextField + "" != ""
            ? a._data.DataTextField
            : a._data.FileNameTextField;
        break;
      default:
        c = a._data.DataField;
        break;
    }
    if (l) {
      this._updateFilterControlValue(m, b, g);
    }
    f.set_fieldName(c);
    f.set_columnUniqueName(b);
    f.set_dataTypeName(a._data.DataTypeName);
    if (m && m.replace) {
      m = m.replace(/\\/g, "\\\\");
      m = m.replace(/'/g, "\\'");
      m = m.replace(/;/g, "^#");
    }
    var h = this._filterExpressions.find(f.get_columnUniqueName());
    if (h != null && !j) {
      if (
        Telerik.Web.UI.GridFilterFunction.parse(g) ==
        Telerik.Web.UI.GridFilterFunction.NoFilter
      ) {
        this._filterExpressions.remove(h);
      }
      h.set_filterFunction(g);
      h.set_fieldValue(m);
    } else {
      f.set_filterFunction(g);
      f.set_fieldValue(m);
      this._filterExpressions.add(f);
    }
    this.set_currentPageIndex(0, true);
    if (!j) {
      if (!this.fireCommand("Filter", b + "|?" + m + "|?" + g)) {
        var k = "NoFilter" == g;
        if (k && a._data.ColumnType == "GridDateTimeColumn") {
          this._updateFilterControlValue(m, b, g);
        }
        return false;
      }
    }
  },
  _updateFilterControlValue: function (j, b, f) {
    var i = Array.contains(
      ["NoFilter", "IsNull", "NotIsNull", "IsEmpty", "NotIsEmpty"],
      f
    );
    var e = this._getFilterCellByColumnUniqueName(b);
    var g = e.getElementsByTagName("input")[0];
    if (!g) {
      return;
    }
    var a = this.getColumnByUniqueName(b);
    if (typeof j == "object" && j === null) {
      j = "";
    }
    if (a && a._data.ColumnType == "GridDateTimeColumn") {
      var d = $find(g.id);
      if (
        d &&
        (Object.getType(d).getName() == "Telerik.Web.UI.RadDateTimePicker" ||
          Object.getType(d).getName() == "Telerik.Web.UI.RadDatePicker")
      ) {
        if (a._data.EnableRangeFiltering) {
          var h = $telerik.findControl(e, String.format("RDIPF2{0}", b));
          if (h) {
            h.get_dateInput().clear();
          }
        }
        if (i) {
          d.get_dateInput().clear();
        } else {
          if (typeof j == "string") {
            d.set_selectedDate(new Date(j));
          } else {
            d.set_selectedDate(j);
          }
        }
      } else {
        if (!d) {
          d = $find(g.id.replace("_text", ""));
          if (
            d &&
            Object.getType(d).getName() == "Telerik.Web.UI.RadDateInput"
          ) {
            if (i) {
              d.clear();
            } else {
              if (typeof j == "string") {
                d.set_selectedDate(new Date(j));
              } else {
                d.set_selectedDate(j);
              }
            }
          }
        }
      }
    } else {
      if (a && a._data.ColumnType == "GridNumericColumn") {
        var c = $find(g.id.replace("_text", ""));
        if (
          c &&
          Object.getType(c).getName() == "Telerik.Web.UI.RadNumericTextBox"
        ) {
          if (i) {
            c.clear();
          } else {
            c.set_value(j);
          }
        }
      } else {
        if (g.type && g.type == "checkbox") {
          g.checked = i ? false : !!j;
        } else {
          if (g.type && g.type == "text") {
            g.value = i ? "" : j;
          }
        }
      }
    }
  },
  _getFilterControlValue: function (a) {
    var d = this._getFilterControlValueByIndex(a, 0);
    if (this.getColumnByUniqueName(a)._data.EnableRangeFiltering) {
      var c = this._getFilterCellByColumnUniqueName(a);
      var b;
      var e = $telerik.findControl(c, String.format("RDIPF2{0}", a));
      if (e) {
        if (this._owner._clientDataSourceID) {
          return [d, e.get_dateInput().get_selectedDate()];
        }
        b = e.get_dateInput();
      } else {
        b = $telerik.findControl(c, String.format("RDIF2{0}", a));
      }
      var f = b.get_value();
      if (d == null || d == "" || f == null || f == "") {
        return null;
      }
      d = d.replace(/\s/g, ",");
      f = f.replace(/\s/g, ",");
      d += " " + f;
    }
    return d;
  },
  _getFilterControlValueByIndex: function (a, e, f) {
    var c = this._getFilterCellByColumnUniqueName(a);
    var d = c.getElementsByTagName("input")[e];
    if (!d) {
      return null;
    }
    if (d.type == "checkbox") {
      return d.checked;
    }
    var b = d.id.endsWith("_text")
      ? $find(d.id.substr(0, d.id.length - 5))
      : d.id.endsWith("_ClientState")
      ? $find(d.id.substr(0, d.id.length - 12))
      : d.id.endsWith("_Input")
      ? $find(d.id.substr(0, d.id.length - 6))
      : $find(d.id);
    if (b) {
      switch (Object.getType(b).getName()) {
        case "Telerik.Web.UI.RadAutoCompleteBox":
          return b.get_text();
        case "Telerik.Web.UI.RadDatePicker":
        case "Telerik.Web.UI.RadDateTimePicker":
        case "Telerik.Web.UI.RadTimePicker":
          return this._owner._clientDataSourceID
            ? b.get_dateInput().get_selectedDate()
            : b.get_dateInput().get_value();
        default:
          if (typeof b.get_value === "function") {
            return b.get_value();
          }
      }
    }
    if (f && !b) {
      return null;
    }
    return d.value;
  },
  _rangeValidationHandler: function (i, e, b) {
    if (this._rangeValidationInProcess) {
      return;
    }
    this._rangeValidationInProcess = true;
    var f = this._getFilterCellByColumnUniqueName(b);
    var d = $telerik.findControl(f, String.format("RDIPF{0}", b));
    var c;
    var g;
    var h;
    if (d) {
      c = d.get_dateInput();
      h = $telerik.findControl(f, String.format("RDIPF2{0}", b));
      g = h.get_dateInput();
    } else {
      c = $telerik.findControl(f, String.format("RDIF{0}", b));
      g = $telerik.findControl(f, String.format("RDIF2{0}", b));
    }
    if (Telerik.Web.UI.DatePickerPopupOpeningEventArgs.isInstanceOfType(e)) {
      this._setControlsRangeValidation(i, d, h);
    } else {
      if (Telerik.Web.UI.DatePickerPopupClosingEventArgs.isInstanceOfType(e)) {
        this._clearControlsRangeValidation(d, h);
      } else {
        if (Telerik.Web.UI.InputValueChangingEventArgs.isInstanceOfType(e)) {
          var a = true;
          if (d.get_dateInput && i.get_id() === d.get_dateInput().get_id()) {
            if (!e.get_newValue() || !g.get_selectedDate()) {
              a = false;
            }
          } else {
            if (!d.get_selectedDate() || !e.get_newValue()) {
              a = false;
            }
          }
          this._shouldAutoPostBackOnFilter = a;
          this._setControlsRangeValidation(i, c, g);
        } else {
          if (
            Telerik.Web.UI.DateInputValueChangedEventArgs.isInstanceOfType(e)
          ) {
            this._clearControlsRangeValidation(c, g);
          }
        }
      }
    }
    this._rangeValidationInProcess = false;
  },
  _getFilterCellByColumnUniqueName: function (a) {
    var b = this._getTableFilterRow();
    if (!b) {
      return null;
    }
    var c = this._getCellIndexByColumnUniqueNameFromTableRowElement(b, a);
    if (c == null) {
      return null;
    }
    return b.cells[c];
  },
  _setControlsRangeValidation: function (e, a, c) {
    this._clearControlsRangeValidation(a, c);
    if (e.get_id() === a.get_id()) {
      var d = c.get_selectedDate();
      if (d) {
        e.set_maxDate(c.get_selectedDate());
      } else {
        if (c.set_value) {
          c.set_value(c.get_textBoxValue());
        }
      }
    } else {
      if (e.get_id() === c.get_id()) {
        var b = a.get_selectedDate();
        if (b) {
          c.set_minDate(b);
        } else {
          if (a.set_value) {
            a.set_value(a.get_textBoxValue());
          }
        }
      }
    }
  },
  _clearControlsRangeValidation: function (a, d) {
    var c = new Date(1900, 1, 1);
    var b = new Date(2099, 12, 31);
    a.set_maxDate(b);
    d.set_minDate(c);
  },
  clearSelectedColumns: function () {
    var a = this.get_columns();
    for (var b = 0; b < a.length; b++) {
      if (a[b].get_selected()) {
        a[b].set_selected(false);
      }
    }
  },
  clearFilter: function (b) {
    var a;
    if (!b) {
      for (var e = 0; e < this._filterExpressions.get_count(); e++) {
        var c = this._filterExpressions.getItem(e);
        this._updateFilterControlValue(
          null,
          c.get_columnUniqueName(),
          Telerik.Web.UI.GridFilterFunction.NoFilter
        );
        a = this.getColumnByUniqueName(c.get_columnUniqueName());
        if (a) {
          a.set_filterFunction("NoFilter");
        }
      }
      this._filterExpressions.clear();
      return this.fireCommand("ClearFilter", "");
    }
    a = this.getColumnByUniqueName(b);
    if (!a) {
      return false;
    }
    var d = this._filterExpressions.find(b);
    if (!d) {
      d = new Telerik.Web.UI.GridFilterExpression();
      d.set_columnUniqueName(b);
      d.set_filterFunction("NoFilter");
      this._filterExpressions.add(d);
    }
    return this.filter(b, "", "NoFilter", true);
  },
  get_filterExpressions: function () {
    return this._filterExpressions;
  },
  page: function (a) {
    var c = this.get_currentPageIndex();
    var b = c;
    if (a == "Next") {
      b++;
    } else {
      if (a == "Prev") {
        b--;
      } else {
        if (a == "First") {
          b = 0;
        } else {
          if (a == "Last") {
            b = this.get_pageCount() - 1;
          } else {
            b = parseInt(a, 10) - 1;
          }
        }
      }
    }
    if (b < 0 || b > this.get_pageCount() - 1) {
      return false;
    }
    this.set_currentPageIndex(b, true);
    if (!this.fireCommand("Page", a)) {
      if (this._preventUpdatePager) {
        this.set_currentPageIndex(c, true);
        this._preventUpdatePager = false;
      }
      return false;
    }
  },
  exportToExcel: function () {
    if (!this.fireCommand("ExportToExcel", "")) {
      return false;
    }
  },
  exportToWord: function () {
    if (!this.fireCommand("ExportToWord", "")) {
      return false;
    }
  },
  exportToCsv: function () {
    if (!this.fireCommand("ExportToCsv", "")) {
      return false;
    }
  },
  exportToPdf: function () {
    if (!this.fireCommand("ExportToPdf", "")) {
      return false;
    }
  },
  editSelectedItems: function () {
    if (!this.fireCommand("EditSelected", "")) {
      return false;
    }
  },
  updateEditedItems: function () {
    if (!this.fireCommand("UpdateEdited", "")) {
      return false;
    }
  },
  deleteSelectedItems: function () {
    if (!this.fireCommand("DeleteSelected", "")) {
      return false;
    }
  },
  editAllItems: function () {
    if (!this.fireCommand("EditAll", "")) {
      return false;
    }
  },
  cancelAll: function () {
    if (!this.fireCommand("CancelAll", "")) {
      return false;
    }
  },
  cancelUpdate: function (b) {
    b = this._getRowByIndexOrItemIndexHierarchical(b);
    var a = b.id.split("__")[1];
    if (!this.fireCommand("CancelUpdate", a)) {
      return false;
    }
  },
  groupColumn: function (a) {
    if (!a || !this.fireCommand("GroupByColumn", a)) {
      return false;
    }
  },
  ungroupColumn: function (a) {
    if (!a || !this.fireCommand("UnGroupByColumn", a)) {
      return false;
    }
  },
  _ungroupByExpression: function (a) {
    if (!this.fireCommand("UnGroupByExpression", a)) {
      return false;
    }
  },
  _deleteRow: function (d, c) {
    var g = d.parentNode.parentNode,
      b = $find(d.id),
      e = d.rowIndex,
      a = d.cells.length,
      f;
    g.deleteRow(e);
    f = g.rows[e];
    while (
      f &&
      f.style.display !== "none" &&
      f.cells.length !== a &&
      !Sys.UI.DomElement.containsCssClass(f, "rgGroupHeader")
    ) {
      g.deleteRow(e);
      e++;
      f = g.rows[e];
    }
    if (
      g.tBodies[0].rows.length === 1 &&
      g.tBodies[0].rows[0].style.display == "none"
    ) {
      g.tBodies[0].rows[0].style.display = "";
    }
    this.deselectItem(d);
    if (c !== undefined) {
      Array.add(this._owner._deletedItems, c);
    }
    if (b) {
      b.dispose();
      Array.remove(this._dataItems, b);
    }
    this._fixRowsClassNames();
  },
  _clientDelete: function (c) {
    var b = Telerik.Web.UI.Grid.GetCurrentElement(c),
      f = Telerik.Web.UI.Grid.GetFirstParentByTagName(b, "tr"),
      d = f.id.split("__")[1],
      a = new Telerik.Web.UI.GridDataItemCancelEventArgs(f, c);
    this._owner.raise_rowDeleting(a);
    if (a.get_cancel()) {
      return false;
    }
    if (this._owner.get_events().getHandler("command") != null) {
      this.fireCommand("Delete", d);
    }
    this._deleteRow(f, d);
    this._owner.raise_rowDeleted(
      new Telerik.Web.UI.GridDataItemEventArgs(f, c)
    );
    this._owner.updateClientState();
  },
  fireCommand: function (b, a) {
    if (this._raiseCommandEvent(b, a)) {
      this._executePostBackEvent(
        "FireCommand:" + this._data.UniqueID + ";" + b + ";" + a
      );
    } else {
      return false;
    }
  },
  _raiseCommandEvent: function (c, b) {
    var a = new Sys.CancelEventArgs();
    a.get_commandName = function () {
      return c;
    };
    a.get_commandArgument = function () {
      return b;
    };
    var d = this;
    a.get_tableView = function () {
      return d;
    };
    this._owner.raise_command(a);
    if (a.get_cancel()) {
      return false;
    }
    return true;
  },
  _executePostBackEvent: function (a) {
    var b = this._owner.ClientSettings.PostBackFunction;
    b = b.replace("{0}", this._owner.UniqueID);
    b = b.replace(/\{1\}/, a.replace(/\$/g, "$$$$"));
    eval(b);
  },
  _raiseAction: function (a, b) {
    var e = this,
      c = new Sys.CancelEventArgs(),
      d;
    if (b) {
      for (d in b) {
        (function (f) {
          c["_" + f] = b[f];
          c["get_" + f] = function () {
            return b[f];
          };
          c["set_" + f] = function (g) {
            b[f] = g;
          };
        })(d);
      }
    }
    c.get_actionName = function () {
      return a;
    };
    c.get_tableView = function () {
      return e;
    };
    e._owner.raise_userAction(c);
    return c;
  },
};
Telerik.Web.UI.GridTableView.registerClass(
  "Telerik.Web.UI.GridTableView",
  Sys.UI.Control
);
Telerik.Web.UI.GridFilterFunction = function () {};
Telerik.Web.UI.GridFilterFunction.prototype = {
  NoFilter: 0,
  Contains: 1,
  DoesNotContain: 2,
  StartsWith: 3,
  EndsWith: 4,
  EqualTo: 5,
  NotEqualTo: 6,
  GreaterThan: 7,
  LessThan: 8,
  GreaterThanOrEqualTo: 9,
  LessThanOrEqualTo: 10,
  Between: 11,
  NotBetween: 12,
  IsEmpty: 13,
  NotIsEmpty: 14,
  IsNull: 15,
  NotIsNull: 16,
  Custom: 17,
};
Telerik.Web.UI.GridFilterFunction.registerEnum(
  "Telerik.Web.UI.GridFilterFunction",
  false
);
Telerik.Web.UI.GridFilterFunction._wrapMethod = function (a, c, d) {
  var b = a[c];
  a[c] = function () {
    var e = Array.prototype.slice.call(arguments);
    var f = function () {
      return b.apply(a, e);
    };
    return d.apply(a, [f].concat(e));
  };
};
Telerik.Web.UI.GridFilterFunction._enumParseMethod = function (c, d, b) {
  if (typeof d == "number") {
    return d;
  }
  try {
    return c(d, !!b);
  } catch (a) {
    return null;
  }
};
Telerik.Web.UI.GridFilterFunction._wrapMethod(
  Telerik.Web.UI.GridFilterFunction,
  "parse",
  Telerik.Web.UI.GridFilterFunction._enumParseMethod
);
Telerik.Web.UI.GridSortOrder = function () {};
Telerik.Web.UI.GridSortOrder.prototype = {
  None: 0,
  Ascending: 1,
  Descending: 2,
};
Telerik.Web.UI.GridSortOrder.registerEnum(
  "Telerik.Web.UI.GridSortOrder",
  false
);
Telerik.Web.UI.GridSortExpression = function () {
  this._fieldName = "";
  this._sortOrder = null;
};
Telerik.Web.UI.GridSortExpression.prototype = {
  get_fieldName: function () {
    return this._fieldName;
  },
  set_fieldName: function (a) {
    if (this._fieldName != a) {
      this._fieldName = a;
      this.FieldName = a;
    }
  },
  get_sortOrder: function () {
    return this._sortOrder;
  },
  set_sortOrder: function (a) {
    if (this._sortOrder != a) {
      this._sortOrder = a;
      this.SortOrder = a;
    }
  },
  dispose: function () {
    this._fieldName = null;
    this._sortOrder = null;
  },
};
Telerik.Web.UI.GridSortExpression.registerClass(
  "Telerik.Web.UI.GridSortExpression",
  null,
  Sys.IDisposable
);
Telerik.Web.UI.GridFilterFunctionsOqlFormat = function () {
  var a = {};
  a[Telerik.Web.UI.GridFilterFunction.Contains] = "{0} LIKE '*{1}*'";
  a[Telerik.Web.UI.GridFilterFunction.DoesNotContain] = "NOT ({0} LIKE '*{1}*'";
  a[Telerik.Web.UI.GridFilterFunction.StartsWith] = "{0} LIKE '{1}*'";
  a[Telerik.Web.UI.GridFilterFunction.EndsWith] = "{0} LIKE '*{1}";
  a[Telerik.Web.UI.GridFilterFunction.EqualTo] = "{0} = {1}";
  a[Telerik.Web.UI.GridFilterFunction.NotEqualTo] = "{0} <> {1}";
  a[Telerik.Web.UI.GridFilterFunction.GreaterThan] = "{0} > {1}";
  a[Telerik.Web.UI.GridFilterFunction.LessThan] = "{0} < {1}";
  a[Telerik.Web.UI.GridFilterFunction.GreaterThanOrEqualTo] = "{0} >= {1}";
  a[Telerik.Web.UI.GridFilterFunction.LessThanOrEqualTo] = "{0} <= {1}";
  a[Telerik.Web.UI.GridFilterFunction.Between] =
    "({0} >= {1}) AND ({0} <= {2})";
  a[Telerik.Web.UI.GridFilterFunction.NotBetween] =
    "({0} < {1}) OR ({0} > {2})";
  a[Telerik.Web.UI.GridFilterFunction.IsEmpty] = "{0} = ''";
  a[Telerik.Web.UI.GridFilterFunction.NotIsEmpty] = "{0} <> ''";
  a[Telerik.Web.UI.GridFilterFunction.IsNull] = "{0} == nil";
  a[Telerik.Web.UI.GridFilterFunction.NotIsNull] = "({0} != nil)";
  return a;
};
Telerik.Web.UI.GridFilterFunctionsSqlFormat = function () {
  var a = {};
  a[Telerik.Web.UI.GridFilterFunction.Contains] = "[{0}] LIKE '%{1}%'";
  a[Telerik.Web.UI.GridFilterFunction.DoesNotContain] =
    "[{0}] NOT LIKE '%{1}%'";
  a[Telerik.Web.UI.GridFilterFunction.StartsWith] = "[{0}] LIKE '{1}%'";
  a[Telerik.Web.UI.GridFilterFunction.EndsWith] = "[{0}] LIKE '%{1}'";
  a[Telerik.Web.UI.GridFilterFunction.EqualTo] = "[{0}] = {1}";
  a[Telerik.Web.UI.GridFilterFunction.NotEqualTo] = "[{0}] <> {1}";
  a[Telerik.Web.UI.GridFilterFunction.GreaterThan] = "[{0}] > {1}";
  a[Telerik.Web.UI.GridFilterFunction.LessThan] = "[{0}] < {1}";
  a[Telerik.Web.UI.GridFilterFunction.GreaterThanOrEqualTo] = "[{0}] >= {1}";
  a[Telerik.Web.UI.GridFilterFunction.LessThanOrEqualTo] = "[{0}] <= {1}";
  a[Telerik.Web.UI.GridFilterFunction.Between] =
    "([{0}] >= {1}) AND ([{0}] <= {2})";
  a[Telerik.Web.UI.GridFilterFunction.NotBetween] =
    "([{0}] < {1}) OR ([{0}] > {2})";
  a[Telerik.Web.UI.GridFilterFunction.IsEmpty] = "[{0}] = ''";
  a[Telerik.Web.UI.GridFilterFunction.NotIsEmpty] = "[{0}] <> ''";
  a[Telerik.Web.UI.GridFilterFunction.IsNull] = "[{0}] IS NULL";
  a[Telerik.Web.UI.GridFilterFunction.NotIsNull] = "NOT ([{0}] IS NULL)";
  return a;
};
Telerik.Web.UI.GridFilterFunctionsDynamicLinqFormat = function () {
  var a = {};
  a[Telerik.Web.UI.GridFilterFunction.Contains] = "{0}.Contains({1}){2}";
  a[Telerik.Web.UI.GridFilterFunction.DoesNotContain] = "!{0}.Contains({1}){2}";
  a[Telerik.Web.UI.GridFilterFunction.StartsWith] = "{0}.StartsWith({1}){2}";
  a[Telerik.Web.UI.GridFilterFunction.EndsWith] = "{0}.EndsWith({1}){2}";
  a[Telerik.Web.UI.GridFilterFunction.EqualTo] = "{0} = {1}{2}";
  a[Telerik.Web.UI.GridFilterFunction.NotEqualTo] = "{0} <> {1}{2}";
  a[Telerik.Web.UI.GridFilterFunction.GreaterThan] = "{0} > {1}{2}";
  a[Telerik.Web.UI.GridFilterFunction.LessThan] = "{0} < {1}{2}";
  a[Telerik.Web.UI.GridFilterFunction.GreaterThanOrEqualTo] = "{0} >= {1}{2}";
  a[Telerik.Web.UI.GridFilterFunction.LessThanOrEqualTo] = "{0} <= {1}{2}";
  a[Telerik.Web.UI.GridFilterFunction.Between] =
    "({0} >= {1}) AND ({0} <= {2})";
  a[Telerik.Web.UI.GridFilterFunction.NotBetween] =
    "({0} < {1}) OR ({0} > {2})";
  a[Telerik.Web.UI.GridFilterFunction.IsEmpty] = '{0} = ""{1}{2}';
  a[Telerik.Web.UI.GridFilterFunction.NotIsEmpty] = '{0} <> ""{1}{2}';
  a[Telerik.Web.UI.GridFilterFunction.IsNull] = "{0} == null{1}{2}";
  a[Telerik.Web.UI.GridFilterFunction.NotIsNull] = "({0} != null){1}{2}";
  return a;
};
Telerik.Web.UI.GridFilterFunctionsADONetDataServices = function () {
  var a = {};
  a[Telerik.Web.UI.GridFilterFunction.Contains] = "substringof({1},{0}){2}";
  a[Telerik.Web.UI.GridFilterFunction.DoesNotContain] =
    "not substringof({1},{0}){2}";
  a[Telerik.Web.UI.GridFilterFunction.StartsWith] = "startswith({0},{1}){2}";
  a[Telerik.Web.UI.GridFilterFunction.EndsWith] = "endswith({0},{1}){2}";
  a[Telerik.Web.UI.GridFilterFunction.EqualTo] = "{0} eq {1}{2}";
  a[Telerik.Web.UI.GridFilterFunction.NotEqualTo] = "{0} ne {1}{2}";
  a[Telerik.Web.UI.GridFilterFunction.GreaterThan] = "{0} gt {1}{2}";
  a[Telerik.Web.UI.GridFilterFunction.LessThan] = "{0} lt {1}{2}";
  a[Telerik.Web.UI.GridFilterFunction.GreaterThanOrEqualTo] = "{0} ge {1}{2}";
  a[Telerik.Web.UI.GridFilterFunction.LessThanOrEqualTo] = "{0} le {1}{2}";
  a[Telerik.Web.UI.GridFilterFunction.Between] = "({0} ge {1} and {0} le {2})";
  a[Telerik.Web.UI.GridFilterFunction.NotBetween] =
    "({0} le {1} or {0} ge {2})";
  a[Telerik.Web.UI.GridFilterFunction.IsEmpty] = "{0} eq ''{2}";
  a[Telerik.Web.UI.GridFilterFunction.NotIsEmpty] = "{0} ne ''{2}";
  a[Telerik.Web.UI.GridFilterFunction.IsNull] = "{0} eq null{2}";
  a[Telerik.Web.UI.GridFilterFunction.NotIsNull] = "{0} ne null{2}";
  return a;
};
Telerik.Web.UI.GridFilterExpression = function () {
  this._fieldName = "";
  this._fieldValue = null;
  this._filterFunction = null;
  this._columnUniqueName = null;
  this._dataTypeName = null;
};
Telerik.Web.UI.GridFilterExpression.prototype = {
  get_columnUniqueName: function () {
    return this._columnUniqueName;
  },
  set_columnUniqueName: function (a) {
    if (this._columnUniqueName != a) {
      this._columnUniqueName = a;
      this.ColumnUniqueName = a;
    }
  },
  get_fieldName: function () {
    return this._fieldName;
  },
  set_fieldName: function (a) {
    if (this._fieldName != a) {
      this._fieldName = a;
      this.FieldName = a;
    }
  },
  get_fieldValue: function () {
    return this._fieldValue;
  },
  set_fieldValue: function (a) {
    if (this._fieldValue != a) {
      this._fieldValue = a;
      this.FieldValue = a;
    }
  },
  get_filterFunction: function () {
    return this._filterFunction;
  },
  set_filterFunction: function (a) {
    if (this._filterFunction != a) {
      this._filterFunction = a;
      this.FilterFunction = a;
    }
  },
  get_dataTypeName: function () {
    return this._dataTypeName;
  },
  set_dataTypeName: function (a) {
    if (this._dataTypeName != a) {
      this._dataTypeName = a;
      this.DataTypeName = a;
    }
  },
  toString: function (g) {
    var e = "";
    if (typeof g != "undefined") {
      e = g;
    }
    var b = this._fieldName;
    if (e != "") {
      b = String.format("{0}.{1}", e, b);
    }
    var i = "";
    if (this._filterFunction != null) {
      var d = Telerik.Web.UI.GridFilterFunctionsSqlFormat();
      var h = Telerik.Web.UI.GridFilterFunction.parse(this._filterFunction);
      var c = d[h];
      if (c != null) {
        if (
          this._checkListFilterValues &&
          this._checkListFilterValues.length > 0 &&
          h == Telerik.Web.UI.GridFilterFunction.EqualTo
        ) {
          i = [];
          for (var a = 0; a < this._checkListFilterValues.length; a++) {
            var f = this.getQuotedValue(this._checkListFilterValues[a]);
            i[i.length] = String.format(c, this._fieldName, f, "");
          }
          return "(" + i.join(" OR ") + ")";
        } else {
          if (
            h != Telerik.Web.UI.GridFilterFunction.Between &&
            h != Telerik.Web.UI.GridFilterFunction.NotBetween
          ) {
            if (
              ((this.get_dataTypeName() == "System.String" ||
                this.get_dataTypeName() == "System.Char") &&
                h == Telerik.Web.UI.GridFilterFunction.Contains) ||
              h == Telerik.Web.UI.GridFilterFunction.DoesNotContain ||
              h == Telerik.Web.UI.GridFilterFunction.StartsWith ||
              h == Telerik.Web.UI.GridFilterFunction.EndsWith
            ) {
              i = String.format(c, b, this._fieldValue);
            } else {
              i = String.format(c, b, this.getQuotedValue(this._fieldValue));
            }
          } else {
            var j = this._fieldValue.split(" ")[0];
            var k =
              this._fieldValue.split(" ").length > 0
                ? this._fieldValue.split(" ")[1]
                : "";
            i = String.format(
              c,
              b,
              this.getQuotedValue(j),
              this.getQuotedValue(k)
            );
          }
        }
      }
    }
    return i;
  },
  toOql: function (f) {
    var e = "";
    if (typeof f != "undefined") {
      e = f;
    }
    var b = this._fieldName;
    if (e != "") {
      b = String.format("{0}.{1}", e, b);
    }
    var h = "";
    if (this._filterFunction != null) {
      var d = Telerik.Web.UI.GridFilterFunctionsOqlFormat();
      var g = Telerik.Web.UI.GridFilterFunction.parse(this._filterFunction);
      var c = d[g];
      if (c != null) {
        if (
          this._checkListFilterValues &&
          this._checkListFilterValues.length > 0 &&
          g == Telerik.Web.UI.GridFilterFunction.EqualTo
        ) {
          h = [];
          for (var a = 0; a < this._checkListFilterValues.length; a++) {
            h[h.length] = String.format(
              c,
              b,
              this.getQuotedValue(this._fieldValue)
            );
          }
          return "(" + h.join(" OR ") + ")";
        } else {
          if (
            g != Telerik.Web.UI.GridFilterFunction.Between &&
            g != Telerik.Web.UI.GridFilterFunction.NotBetween
          ) {
            if (
              ((this.get_dataTypeName() == "System.String" ||
                this.get_dataTypeName() == "System.Char") &&
                g == Telerik.Web.UI.GridFilterFunction.Contains) ||
              g == Telerik.Web.UI.GridFilterFunction.DoesNotContain ||
              g == Telerik.Web.UI.GridFilterFunction.StartsWith ||
              g == Telerik.Web.UI.GridFilterFunction.EndsWith
            ) {
              h = String.format(c, b, this._fieldValue);
            } else {
              h = String.format(c, b, this.getQuotedValue(this._fieldValue));
            }
          } else {
            var i = this._fieldValue.split(" ")[0];
            var j =
              this._fieldValue.split(" ").length > 0
                ? this._fieldValue.split(" ")[1]
                : "";
            h = String.format(
              c,
              b,
              this.getQuotedValue(i),
              this.getQuotedValue(j)
            );
          }
        }
      }
    }
    return h;
  },
  getQuotedValue: function (a) {
    if (
      this.get_dataTypeName() == "System.String" ||
      this.get_dataTypeName() == "System.Char" ||
      this.get_dataTypeName() == "System.DateTime" ||
      this.get_dataTypeName() == "System.TimeSpan" ||
      this.get_dataTypeName() == "System.Guid"
    ) {
      return String.format("'{0}'", a);
    }
    return a;
  },
  getDataServiceValue: function (d) {
    if (
      this.get_dataTypeName() == "System.String" ||
      this.get_dataTypeName() == "System.Char"
    ) {
      return String.format("'{0}'", d);
    } else {
      if (this.get_dataTypeName() == "System.DateTime") {
        var b = "yyyy-MM-ddThh:mm:ss";
        var c = Date.parseLocale(d);
        var a;
        if (c) {
          a = c.format(b);
        }
        if (!c || a.indexOf("NaN") >= 0) {
          a = new Date(d).format(b);
        }
        return String.format("datetime'{0}'", a);
      } else {
        if (this.get_dataTypeName() == "System.TimeSpan") {
          return String.format("time'{0}'", d);
        } else {
          if (this.get_dataTypeName() == "System.Guid") {
            return String.format("guid'{0}'", d);
          }
        }
      }
    }
    return d;
  },
  getDynamicLinqValue: function (a) {
    if (this.get_dataTypeName() == "System.String") {
      return String.format('"{0}"', a);
    } else {
      if (this.get_dataTypeName().indexOf("DateTime") != -1) {
        return String.format('DateTime.Parse("{0}")', a);
      } else {
        if (this.get_dataTypeName().indexOf("TimeSpan") != -1) {
          return String.format('TimeSpan.Parse("{0}")', a);
        } else {
          if (this.get_dataTypeName().indexOf("Guid") != -1) {
            return String.format('Guid("{0}")', a);
          }
        }
      }
    }
    return a;
  },
  toDynamicLinq: function (h) {
    var e = "";
    if (typeof h != "undefined") {
      e = h;
    }
    var j = "";
    if (this._filterFunction != null) {
      var d = Telerik.Web.UI.GridFilterFunctionsDynamicLinqFormat();
      var i = Telerik.Web.UI.GridFilterFunction.parse(this._filterFunction);
      var c = d[i];
      var f;
      if (c != null) {
        if (
          this._checkListFilterValues &&
          this._checkListFilterValues.length > 0 &&
          i == Telerik.Web.UI.GridFilterFunction.EqualTo
        ) {
          j = [];
          for (var a = 0; a < this._checkListFilterValues.length; a++) {
            f = this.getDynamicLinqValue(this._checkListFilterValues[a]);
            j[j.length] = String.format(c, this._fieldName, f, "");
          }
          return "(" + j.join(" OR ") + ")";
        } else {
          f = "";
          var g = "";
          if (
            i == Telerik.Web.UI.GridFilterFunction.IsNull ||
            i == Telerik.Web.UI.GridFilterFunction.NotIsNull
          ) {
            f = "";
          } else {
            if (
              i == Telerik.Web.UI.GridFilterFunction.Between ||
              i == Telerik.Web.UI.GridFilterFunction.NotBetween
            ) {
              g = this.getDynamicLinqValue(this._fieldValue.split(" ")[1]);
              f = this.getDynamicLinqValue(this._fieldValue.split(" ")[0]);
            } else {
              f = this.getDynamicLinqValue(this._fieldValue);
            }
          }
          var b = this._fieldName;
          if (e != "") {
            b = String.format("{0}.{1}", e, b);
          }
          j = String.format(c, b, f, g);
        }
      }
    }
    return j;
  },
  toDataService: function () {
    var g = "";
    if (this._filterFunction != null) {
      var c = Telerik.Web.UI.GridFilterFunctionsADONetDataServices();
      var f = Telerik.Web.UI.GridFilterFunction.parse(this._filterFunction);
      var b = c[f];
      if (b != null) {
        if (
          this._checkListFilterValues &&
          this._checkListFilterValues.length > 0 &&
          f == Telerik.Web.UI.GridFilterFunction.EqualTo
        ) {
          g = [];
          for (var a = 0; a < this._checkListFilterValues.length; a++) {
            g[g.length] = String.format(
              b,
              this._fieldName,
              this.getDataServiceValue(this._checkListFilterValues[a])
            );
          }
          return "(" + g.join(" or ") + ")";
        } else {
          var d = "";
          var e = "";
          if (
            f == Telerik.Web.UI.GridFilterFunction.IsNull ||
            f == Telerik.Web.UI.GridFilterFunction.NotIsNull
          ) {
            d = "";
          } else {
            if (
              f == Telerik.Web.UI.GridFilterFunction.Between ||
              f == Telerik.Web.UI.GridFilterFunction.NotBetween
            ) {
              e = this._fieldValue.split(" ")[1];
              d = this._fieldValue.split(" ")[0];
            } else {
              d = this._fieldValue;
            }
          }
          g = String.format(
            b,
            this._fieldName,
            this.getDataServiceValue(d),
            e != "" ? this.getDataServiceValue(e) : e
          );
        }
      }
    }
    return g;
  },
  dispose: function () {
    this._fieldName = null;
    this._fieldValue = null;
    this._filterFunction = null;
    this._columnUniqueName = null;
    this._dataTypeName = null;
  },
};
Telerik.Web.UI.GridFilterExpression.registerClass(
  "Telerik.Web.UI.GridFilterExpression",
  null,
  Sys.IDisposable
);
Telerik.Web.UI.Collection = function () {
  this._array = [];
};
Telerik.Web.UI.Collection.prototype = {
  add: function (b) {
    var a = this._array.length;
    this.insert(a, b);
  },
  insert: function (a, b) {
    Array.insert(this._array, a, b);
  },
  remove: function (a) {
    Array.remove(this._array, a);
  },
  removeAt: function (a) {
    var b = this.getItem(a);
    if (b) {
      this.remove(b);
    }
  },
  clear: function () {
    this._array = [];
  },
  toList: function () {
    return this._array;
  },
  get_count: function () {
    return this._array.length;
  },
  getItem: function (a) {
    return this._array[a];
  },
  indexOf: function (a) {
    return Array.indexOf(this._array, a);
  },
  forEach: function (c) {
    for (var b = 0, a = this.get_count(); b < a; b++) {
      c(this._array[b]);
    }
  },
  dispose: function () {
    this._array = null;
  },
};
Telerik.Web.UI.Collection.registerClass(
  "Telerik.Web.UI.Collection",
  null,
  Sys.IDisposable
);
Telerik.Web.UI.GridSortExpressions = function () {
  Telerik.Web.UI.GridSortExpressions.initializeBase(this);
};
Telerik.Web.UI.GridSortExpressions.prototype = {
  find: function (b) {
    for (var c = 0, a = this.get_count(); c < a; c++) {
      var d = this.getItem(c);
      if (d.get_fieldName() == b) {
        return d;
      }
    }
    return null;
  },
  sortOrderAsString: function (a) {
    if (a == 0) {
      return "";
    } else {
      if (a == 1) {
        return "ASC";
      } else {
        if (a == 2) {
          return "DESC";
        }
      }
    }
  },
  toString: function () {
    var d = [];
    for (var b = 0, a = this.get_count(); b < a; b++) {
      var c = this.getItem(b);
      d[d.length] = String.format(
        "{0} {1}",
        c.get_fieldName(),
        this.sortOrderAsString(c.get_sortOrder())
      );
    }
    return d.join(",");
  },
  toClientDataSourceList: function () {
    var a = [];
    Array.forEach(this._array, function (c, b) {
      a[b] = { fieldName: c.FieldName, sortOrder: c.SortOrder };
    });
    return a;
  },
};
Telerik.Web.UI.GridSortExpressions.registerClass(
  "Telerik.Web.UI.GridSortExpressions",
  Telerik.Web.UI.Collection
);
Telerik.Web.UI.GridFilterExpressions = function () {
  Telerik.Web.UI.GridFilterExpressions.initializeBase(this);
};
Telerik.Web.UI.GridFilterExpressions.prototype = {
  find: function (a) {
    for (var c = 0, b = this.get_count(); c < b; c++) {
      var d = this.getItem(c);
      if (d.get_columnUniqueName() == a) {
        return d;
      }
    }
    return null;
  },
  toString: function (e) {
    var c = "";
    if (typeof e != "undefined") {
      c = e;
    }
    var f = [];
    for (var b = 0, a = this.get_count(); b < a; b++) {
      var d = this.getItem(b);
      f[f.length] = d.toString(c);
    }
    return f.join(" AND ");
  },
  toOql: function (e) {
    var c = "";
    if (typeof e != "undefined") {
      c = e;
    }
    var f = [];
    for (var b = 0, a = this.get_count(); b < a; b++) {
      var d = this.getItem(b);
      f[f.length] = d.toOql(c);
    }
    return f.join(" AND ");
  },
  toDynamicLinq: function (e) {
    var c = "";
    if (typeof e != "undefined") {
      c = e;
    }
    var f = [];
    for (var b = 0, a = this.get_count(); b < a; b++) {
      var d = this.getItem(b);
      f[f.length] = d.toDynamicLinq(c);
    }
    return f.join(" AND ");
  },
  toDataService: function () {
    var d = [];
    for (var b = 0, a = this.get_count(); b < a; b++) {
      var c = this.getItem(b);
      d[d.length] = c.toDataService();
    }
    return d.join(" and ");
  },
  toClientDataSourceList: function () {
    var b = [];
    var a = [];
    Array.forEach(this._array, function (g, f) {
      if (g.FilterFunction != "NoFilter") {
        var d = g._checkListFilterValues;
        if (d && d.length > 0) {
          a = [];
          for (var e = 0; e < d.length; e++) {
            a[e] = {
              field: g.FieldName,
              operator: Telerik.Web.UI.ClientDataSource.FilterOperator.EqualTo,
              value: d[e],
            };
          }
          b[f] = {
            logicOperator:
              Telerik.Web.UI.ClientDataSource.FilterLogicOperator.Or,
            filters: a,
          };
        } else {
          var c =
            g.FilterFunction === 11 || g.FilterFunction == "Between"
              ? 1
              : g.FilterFunction === 12 || g.FilterFunction == "NotBetween"
              ? 2
              : 0;
          if (c) {
            a = [];
            var h = g.FieldValue;
            a[0] = {
              field: g.FieldName,
              operator:
                c === 1
                  ? Telerik.Web.UI.ClientDataSource.FilterOperator
                      .GreaterThanOrEqualTo
                  : Telerik.Web.UI.ClientDataSource.FilterOperator.LessThan,
              value: h[0],
            };
            a[1] = {
              field: g.FieldName,
              operator:
                c === 1
                  ? Telerik.Web.UI.ClientDataSource.FilterOperator.LessThan
                  : Telerik.Web.UI.ClientDataSource.FilterOperator
                      .GreaterThanOrEqualTo,
              value: h[1],
            };
            b[f] = {
              logicOperator:
                c === 1
                  ? Telerik.Web.UI.ClientDataSource.FilterLogicOperator.And
                  : Telerik.Web.UI.ClientDataSource.FilterLogicOperator.Or,
              filters: a,
            };
          } else {
            b[f] = {
              field: g.FieldName,
              operator:
                Telerik.Web.UI.ClientDataSource.FilterOperator[
                  g.FilterFunction
                ],
              value: g.FieldValue,
            };
          }
        }
      }
    });
    return {
      logicOperator: Telerik.Web.UI.ClientDataSource.FilterLogicOperator.And,
      filters: b,
    };
  },
};
Telerik.Web.UI.GridFilterExpressions.registerClass(
  "Telerik.Web.UI.GridFilterExpressions",
  Telerik.Web.UI.Collection
);
Type.registerNamespace("Telerik.Web.UI");
Telerik.Web.UI.GridGroupPanel = function (a) {
  Telerik.Web.UI.GridGroupPanel.initializeBase(this, [a]);
  this._owner = {};
  this._isLightweight = false;
  this._lightCellPlaceHolders = {};
};
Telerik.Web.UI.GridGroupPanel.prototype = {
  initialize: function () {
    Telerik.Web.UI.GridGroupPanel.callBaseMethod(this, "initialize");
    var b = this;
    b.groupPanelItemCounter = 0;
    var a = this._owner;
    b._isLightweight = a._renderMode == Telerik.Web.UI.RenderMode.Lite;
    if (b._isLightweight) {
      b._createLightWeightGroupPanelItems(this.get_element(), 0);
      $telerik
        .$(b.get_element())
        .find(".rgGroupItem")
        .each(function () {
          b._lightCellPlaceHolders[this] = this.parentNode;
        });
    } else {
      b._createGroupPanelItems(this.get_element(), 0);
    }
    b._initializeEvents();
  },
  dispose: function () {
    window.$clearHandlers(this.get_element());
    this._element.control = null;
    this._groupTouchItems = [];
    Telerik.Web.UI.GridGroupPanel.callBaseMethod(this, "dispose");
  },
  _initializeEvents: function () {
    if (this._owner._clientDataSourceID) {
      window.$addHandler(
        this.get_element(),
        "click",
        Function.createDelegate(this, this._click)
      );
    }
  },
  _click: function (b) {
    var f = Telerik.Web.UI.Grid.GetCurrentElement(b);
    if (
      this._owner._renderMode == Telerik.Web.UI.RenderMode.Lite &&
      f.tagName.toLowerCase() == "span"
    ) {
      f = f.parentNode;
    }
    if (Sys.UI.DomElement.containsCssClass(f, "rgUngroup")) {
      this._ungroup(f);
    } else {
      if (
        Sys.UI.DomElement.containsCssClass(f, "rgSortAsc") ||
        Sys.UI.DomElement.containsCssClass(f, "rgSortDesc")
      ) {
        var a = f.parentNode;
        var c = "";
        var d = f.className;
        c = this._getFieldNameFromTarget(a);
        if (this._owner._renderMode == Telerik.Web.UI.RenderMode.Lite) {
          if (
            f.children.length > 0 &&
            f.children[0].tagName.toLowerCase() == "span"
          ) {
            f.children[0].className = "t-font-icon rgIcon ";
            f.children[0].className +=
              f.className.indexOf("rgSortAsc") > -1
                ? "rgSortDescIcon"
                : "rgSortAscIcon";
          }
          f.className = "t-button rgActionButton ";
        } else {
          f.className = "";
        }
        f.className += d.indexOf("rgSortAsc") > -1 ? "rgSortDesc" : "rgSortAsc";
        f.title = d.indexOf("rgSortAsc") > -1 ? "Sorted asc" : "Sorted desc";
        this._sort(c);
        $telerik.preventDefault(b);
      }
    }
  },
  _getFieldNameFromTarget: function (g) {
    var e = $telerik.getElementsByClassName(this.get_element(), "rgGroupItem");
    var d = null;
    var a = "";
    for (var f = 0; f < e.length; f++) {
      var c = e[f];
      if (c == g) {
        d = f;
      }
    }
    var b = this._owner.get_masterTableView()._data.GroupByExpressions;
    if (d != null && d < b.length) {
      a = b[d].field;
    }
    return a;
  },
  _sort: function (a) {
    this._owner.get_masterTableView().fireCommand("SortGroup", a);
  },
  _ungroup: function (j) {
    var b;
    if (this._isLightweight) {
      var i = j.parentNode,
        d = i.parentNode || this._lightCellPlaceHolders[i],
        c = this.get_element();
      b = this._getFieldNameFromTarget(i);
      this._owner.get_masterTableView().ungroupColumn(b);
      if (d.children.length > 0) {
        d.removeChild(i);
      }
      if (d.children.length == 0 && d.parentNode == c) {
        c.removeChild(d);
        c.innerHTML = this._owner._groupPanelText;
      }
    } else {
      var a = j.parentNode,
        h = a.parentNode,
        f = h.parentNode.parentNode.parentNode;
      b = this._getFieldNameFromTarget(a);
      var g = $telerik.previousElement(a),
        e = $telerik.nextElement(a);
      this._owner.get_masterTableView().ungroupColumn(b);
      if (g) {
        h.removeChild(g);
      } else {
        if (e) {
          h.removeChild(e);
        }
      }
      h.removeChild(a);
      if (h.cells.length <= 1) {
        f.removeChild(f.childNodes[0]);
        f.innerHTML = this._owner._groupPanelText;
      }
    }
  },
  _createLightItems: function (b, a) {
    var c = this.get_element();
    var d;
    if (c.innerHTML.indexOf("div") > -1) {
      d = c.children[0];
    } else {
      c.innerHTML = "";
      d = document.createElement("div");
    }
    var e = Telerik.Web.UI.GridGroupPanelItem.CreateLightItem(
      this._owner,
      b,
      a
    );
    d.appendChild(e);
    c.appendChild(d);
  },
  _create: function (c, b) {
    var g = this.get_element().getElementsByTagName("table"),
      f = g[g.length - 1],
      e = f.tBodies[0].rows[0],
      d = Telerik.Web.UI.GridGroupPanelItem.Create(
        this._owner,
        c,
        g.length != 1,
        b
      ),
      a;
    if (g.length == 1) {
      f = document.createElement("table");
      f.cellPadding = 2;
      f.style.cssText = "border-style:None;width:100%;border-spacing:0;";
      f.appendChild(document.createElement("tbody"));
      e.cells[0].innerHTML = "";
      e.cells[0].appendChild(f);
      e = f.tBodies[0].appendChild(document.createElement("tr"));
      e.appendChild(d);
      a = document.createElement("td");
      a.style.width = "100%";
      e.appendChild(a);
    } else {
      e.insertBefore(d, e.cells[e.cells.length - 1]);
    }
  },
  _createLightWeightGroupPanelItems: function (b) {
    this._itemsInternal = eval(this._owner._groupPanelItems);
    this._items = [];
    var c = this;
    var a = $telerik.$;
    a(b)
      .children("div")
      .each(function (e, f) {
        var d = false;
        a(f)
          .children("span")
          .each(function (j, k) {
            var h;
            var g;
            if (c._itemsInternal[c.groupPanelItemCounter]) {
              h = c._itemsInternal[c.groupPanelItemCounter].HierarchicalIndex;
              g = c._itemsInternal[c.groupPanelItemCounter].DataField;
            }
            if (h) {
              c._items[c._items.length] = $create(
                Telerik.Web.UI.GridGroupPanelItem,
                { _hierarchicalIndex: h, _owner: c, _dataField: g },
                null,
                null,
                k
              );
              d = true;
              c.groupPanelItemCounter++;
            }
          });
      });
  },
  _createGroupPanelItems: function (k) {
    this._itemsInternal = eval(this._owner._groupPanelItems);
    this._items = [];
    var h = k.tBodies[0].rows;
    for (var e = 0; e < h.length; e++) {
      var c = false;
      var g = h[e];
      for (var f = 0; f < g.cells.length; f++) {
        var a = g.cells[f];
        if (a.tagName.toLowerCase() == "th") {
          var d;
          var b;
          if (this._itemsInternal[this.groupPanelItemCounter]) {
            d = this._itemsInternal[this.groupPanelItemCounter]
              .HierarchicalIndex;
            b = this._itemsInternal[this.groupPanelItemCounter].DataField;
          }
          if (d) {
            this._items[this._items.length] = $create(
              Telerik.Web.UI.GridGroupPanelItem,
              { _hierarchicalIndex: d, _owner: this, _dataField: b },
              null,
              null,
              a
            );
            c = true;
            this.groupPanelItemCounter++;
          }
        }
        if (a.firstChild && a.firstChild.tagName) {
          if (a.firstChild.tagName.toLowerCase() == "table") {
            this._createGroupPanelItems(a.firstChild);
          }
        }
      }
    }
  },
  _isItem: function (a) {
    for (var b = 0; b < this._items.length; b++) {
      if (this._items[b].get_element() == a) {
        return this._items[b];
      }
    }
    return null;
  },
};
Telerik.Web.UI.GridGroupPanel.registerClass(
  "Telerik.Web.UI.GridGroupPanel",
  Sys.UI.Control
);
Telerik.Web.UI.GridGroupPanelItem = function (a) {
  Telerik.Web.UI.GridGroupPanelItem.initializeBase(this, [a]);
  this._hierarchicalIndex = null;
  this._owner = {};
  this._dataField = null;
};
Telerik.Web.UI.GridGroupPanelItem.Create = function (g, e, a, c) {
  g = $find(g.get_id());
  var f = document.createDocumentFragment();
  var b = document.createElement("th");
  b.setAttribute("scope", "col");
  b.title = g._unGroupTooltip || "Drag out of the bar to ungroup";
  b.className = "rgGroupItem";
  b.style.cssText = "white-space: nowrap; cursor: move;";
  b.appendChild(document.createTextNode(e + " "));
  var h = document.createElement("input");
  h.setAttribute("type", "submit");
  h.value = " ";
  h.title = "Sorted asc";
  h.className = "rgSortAsc";
  b.appendChild(h);
  if (g._showUnGroupButton) {
    var i = document.createElement("input");
    i.setAttribute("type", "submit");
    i.title = g._unGroupButtonTooltip || "Click here to ungroup";
    i.value = " ";
    i.className = "rgUngroup";
    b.appendChild(i);
  }
  if (a) {
    var d = document.createElement("td");
    d.innerHTML = "-";
    f.appendChild(d);
  }
  f.appendChild(b);
  g._groupPanel._items[g._groupPanel._items.length] = $create(
    Telerik.Web.UI.GridGroupPanelItem,
    {
      _hierarchicalIndex:
        "0:" + (g.get_masterTableView()._data.GroupByExpressions.length - 1),
      _owner: g._groupPanel,
      _dataField: c,
    },
    null,
    null,
    b
  );
  return f;
};
Telerik.Web.UI.GridGroupPanelItem.CreateLightItem = function (d, b, a) {
  d = $find(d.get_id());
  var c = document.createDocumentFragment();
  var e = document.createElement("span");
  e.title = d._unGroupTooltip || "Drag out of the bar to ungroup";
  e.className = "rgGroupItem";
  e.style.cssText = "white-space: nowrap; cursor: move;";
  e.appendChild(document.createTextNode(b + " "));
  var f = document.createElement("button");
  f.setAttribute("type", "submit");
  f.className = "t-button rgActionButton rgSortAsc";
  f.title = "Sort Ascending";
  var g = document.createElement("span");
  g.className = "t-font-icon rgIcon rgSortAscIcon";
  f.appendChild(g);
  e.appendChild(f);
  if (d._showUnGroupButton) {
    var h = document.createElement("button");
    h.setAttribute("type", "submit");
    h.className = "t-button rgActionButton rgUngroup";
    h.title = "Ungroup";
    g = document.createElement("span");
    g.className = "t-font-icon rgIcon rgUngroupIcon";
    h.appendChild(g);
    e.appendChild(h);
  }
  c.appendChild(e);
  d._groupPanel._items[d._groupPanel._items.length] = $create(
    Telerik.Web.UI.GridGroupPanelItem,
    {
      _hierarchicalIndex:
        "0:" + (d.get_masterTableView()._data.GroupByExpressions.length - 1),
      _owner: d._groupPanel,
      _dataField: a,
    },
    null,
    null,
    e
  );
  return c;
};
Telerik.Web.UI.GridGroupPanelItem.prototype = {
  initialize: function () {
    Telerik.Web.UI.GridGroupPanelItem.callBaseMethod(this, "initialize");
    this.get_element().style.cursor = "move";
    this._onMouseDownDelegate = $telerik.addMobileHandler(
      this,
      this.get_element(),
      "mousedown",
      this._onMouseDownHandler
    );
  },
  dispose: function () {
    window.$clearHandlers(this.get_element());
    this._element.control = null;
    Telerik.Web.UI.GridGroupPanelItem.callBaseMethod(this, "dispose");
  },
  _onMouseDownHandler: function (a) {
    var b = $telerik.isTouchDevice ? a : a.rawEvent;
    if (b.currentTarget !== b.target) {
      return;
    }
    this._onMouseUpDelegate = $telerik.addMobileHandler(
      this,
      document,
      "mouseup",
      this._onMouseUpHandler,
      null,
      true
    );
    this._onMouseMoveDelegate = $telerik.addMobileHandler(
      this,
      document,
      "mousemove",
      this._onMouseMoveHandler,
      null,
      true
    );
    Telerik.Web.UI.Grid.CreateDragDrop(a, this, false);
    Telerik.Web.UI.Grid.CreateReorderIndicators(
      this.get_element(),
      this._owner._owner.Skin,
      this._owner._owner.ImagesPath,
      false,
      this._owner._owner.get_id()
    );
  },
  _onMouseUpHandler: function (b) {
    $telerik.removeMobileHandler(
      document,
      "mouseup",
      this._onMouseUpDelegate,
      null,
      true
    );
    $telerik.removeMobileHandler(
      document,
      "mousemove",
      this._onMouseMoveDelegate,
      null,
      true
    );
    var d = this._fireDropAction(b);
    var c = this._owner._owner;
    var a =
      c.ClientSettings.Animation &&
      c.ClientSettings.Animation.AllowColumnRevertAnimation;
    if (a && !d) {
      Telerik.Web.UI.Grid.AnimateRevertDragDrop(
        this,
        c.ClientSettings.Animation.ColumnRevertAnimationDuration
      );
    } else {
      Telerik.Web.UI.Grid.DestroyDragDrop();
    }
  },
  _onMouseMoveHandler: function (a) {
    if ($telerik.isTouchDevice) {
      a.preventDefault();
    }
    Telerik.Web.UI.Grid.MoveDragDrop(a, this, false);
  },
  _fireDropAction: function (f) {
    var d;
    if ($telerik.isTouchDevice) {
      d = $telerik.getTouchTarget(f);
    } else {
      d = Telerik.Web.UI.Grid.GetCurrentElement(f);
    }
    if (d != null) {
      var g = this._owner._owner;
      var h = null;
      var l = false;
      var o = this._owner._isLightweight ? "span" : "th";
      var j = $telerik.getElementsByClassName(
        g.get_element(),
        "rgGroupItem",
        o
      );
      for (var k = 0; k < j.length; k++) {
        if ($telerik.isMouseOverElement(j[k], f)) {
          l = true;
          h = j[k];
          break;
        }
      }
      if ($telerik.isMouseOverElement(this._owner.get_element(), f)) {
        l = true;
      }
      var n = this._owner._owner.ClientSettings.PostBackFunction;
      n = n.replace("{0}", this._owner._owner.UniqueID);
      var a;
      var b;
      var c;
      if (
        !l &&
        !(
          Telerik.Web.UI.Grid.IsChildOf(d, this._owner.get_element()) ||
          ($telerik.isTouchDevice && d == this._owner.get_element())
        )
      ) {
        c = "UnGroupByExpression";
        b = this._hierarchicalIndex;
        a = new Sys.CancelEventArgs();
        a.get_commandName = function () {
          return c;
        };
        a.get_commandArgument = function () {
          return b;
        };
        if (this._owner._owner._clientDataSourceID) {
          a.set_cancel(true);
        } else {
          this._owner._owner.raise_command(a);
        }
        if (a.get_cancel()) {
          if (this._owner._owner._clientDataSourceID) {
            this._owner._ungroup(this.get_element().childNodes[0]);
          }
          return false;
        }
        n = n.replace("{1}", "UnGroupByExpression," + this._hierarchicalIndex);
        eval(n);
        return true;
      } else {
        var m = this._owner._isItem(d);
        if (m == null && h != null) {
          d = h;
          m = this._owner._isItem(d);
        }
        if (
          d != this.get_element() &&
          m != null &&
          d.parentNode == this.get_element().parentNode
        ) {
          c = "ReorderGroupByExpression";
          b = this._hierarchicalIndex + "," + m._hierarchicalIndex;
          a = new Sys.CancelEventArgs();
          a.get_commandName = function () {
            return c;
          };
          a.get_commandArgument = function () {
            return b;
          };
          this._owner._owner.raise_command(a);
          if (a.get_cancel()) {
            return false;
          }
          n = n.replace(
            "{1}",
            "ReorderGroupByExpression," +
              this._hierarchicalIndex +
              "," +
              m._hierarchicalIndex
          );
          eval(n);
          return true;
        }
      }
    }
    return false;
  },
};
Telerik.Web.UI.GridGroupPanelItem.registerClass(
  "Telerik.Web.UI.GridGroupPanelItem",
  Sys.UI.Control
);
Type.registerNamespace("Telerik.Web.UI");
$telerik.findGrid = $find;
$telerik.toGrid = function (a) {
  return a;
};
Telerik.Web.UI.RadGrid = function (a) {
  var b = [
    "gridCreating",
    "gridCreated",
    "gridDestroying",
    "masterTableViewCreating",
    "masterTableViewCreated",
    "tableCreating",
    "tableCreated",
    "tableDestroying",
    "cellDeselected",
    "cellDeselecting",
    "cellSelected",
    "cellSelecting",
    "columnCreating",
    "columnCreated",
    "columnDestroying",
    "columnResizing",
    "columnResized",
    "columnSwapping",
    "columnSwapped",
    "columnMovingToLeft",
    "columnMovedToLeft",
    "columnMovingToRight",
    "columnMovedToRight",
    "columnHiding",
    "columnHidden",
    "columnShowing",
    "columnShown",
    "rowCreating",
    "rowCreated",
    "rowDestroying",
    "rowResizing",
    "rowResized",
    "rowHiding",
    "rowHidden",
    "rowShowing",
    "rowShown",
    "rowClick",
    "rowDblClick",
    "columnClick",
    "columnDblClick",
    "rowSelecting",
    "rowSelected",
    "rowDeselecting",
    "rowDeselected",
    "rowMouseOver",
    "rowMouseOut",
    "columnMouseOver",
    "columnMouseOut",
    "columnContextMenu",
    "rowContextMenu",
    "scroll",
    "keyPress",
    "hierarchyExpanding",
    "hierarchyExpanded",
    "hierarchyCollapsing",
    "hierarchyCollapsed",
    "groupExpanding",
    "groupExpanded",
    "groupCollapsing",
    "groupCollapsed",
    "activeRowChanging",
    "activeRowChanged",
    "rowDeleting",
    "rowDeleted",
    "filterMenuShowing",
    "rowDropping",
    "rowDropped",
    "rowDragStarted",
    "rowDragging",
    "popUpShowing",
    "command",
    "userAction",
    "rowDataBound",
    "dataBinding",
    "dataBound",
    "headerMenuShowing",
    "dataBindingFailed",
    "dataSourceResolved",
    "batchEditGetEditorValue",
    "batchEditSetEditorValue",
    "batchEditGetCellValue",
    "batchEditSetCellValue",
    "batchEditCellValueChanging",
    "batchEditCellValueChanged",
    "batchEditOpening",
    "batchEditOpened",
    "batchEditClosing",
    "batchEditClosed",
  ];
  this._initializeEvents(b);
  Telerik.Web.UI.RadGrid.initializeBase(this, [a]);
  this.Skin = "Default";
  this._imagesPath = "";
  this._embeddedSkin = true;
  this.ClientID = null;
  this.UniqueID = null;
  this._clientDataSourceID = null;
  this._activeRowIndex = "";
  this._activeRow = null;
  this.ShowGroupPanel = false;
  this._groupPanel = null;
  this._groupPanelClientID = "";
  this._groupPanelItems = "";
  this._groupPanelText = "";
  this._showUnGroupButton = false;
  this._unGroupTooltip = "";
  this._unGroupButtonTooltip = "";
  this._freezeText = "";
  this._unfreezeText = "";
  this._gridTableViewsData = "";
  this._popUpIds = "";
  this._popUpSettings = {};
  this.ClientSettings = {};
  this.SortingSettings = {};
  this._selection = null;
  this._cellSelection = null;
  this._selectedCellsIndexes = [];
  this._selectedCellsInternal = [];
  this._selectedIndexes = [];
  this._selectedItemsInternal = [];
  this._unselectableItemsInternal = [];
  this._unselectableItemsIndexes = [];
  this._masterClientID = "";
  this._scrolling = null;
  this._gridItemResizer = null;
  this._resizedItems = "";
  this._resizedColumns = "";
  this._resizedControl = "";
  this._hidedItems = "";
  this._showedItems = "";
  this._hidedColumns = [];
  this._showedColumns = [];
  this._reorderedColumns = [];
  this._groupColsState = {};
  this._hierarchyColsExpandedState = {};
  this._filterMenuData = {};
  this._filterMenu = null;
  this._headerContextMenu = null;
  this._detailTables = [];
  this._clientKeyValues = {};
  this._onKeyDownDelegate = null;
  this._onMouseMoveDelegate = null;
  this._hierarchySettings = {};
  this._groupingSettings = {};
  this._currentPageIndex = null;
  this._expandItems = {};
  this._expandedItems = [];
  this._expandedGroupItems = [];
  this._deletedItems = [];
  this._expandedFilterItems = [];
  this._initializeRequestHandler = null;
  this._endRequestHandler = null;
  this._statusLabelID = null;
  this._loadingText = null;
  this._readyText = null;
  this._onFilterMenuClick = null;
  this._popUpLocations = {};
  this._submitControls = [];
  this._allowSubmitOnEnter = false;
  this._validationGroup = "";
  window[this.ClientID] = this;
  this._canMoveRow = false;
  this._originalDragItem = null;
  this._dropClue = null;
  this._draggedItems = [];
  this._draggedItemsIndexes = [];
  this._draggingPosition = "above";
  this._editIndexes = null;
  this._controlToFocus = null;
  this._documentKeyDownDelegate = null;
  this._dataDivMouseDownDelegate = null;
  this._dataDivMouseUpDelegate = null;
  this._dataDivMouseMoveDelegate = null;
  this._swipeStartDelegate = null;
  this._swipeUpDelegate = null;
  this._swipeMoveDelegate = null;
  this._isTouchScrollInProgress = false;
  this._documentMouseUpDelegate = null;
  this._documentMouseMoveDelegate = null;
  this._onBatchRowDeleteDelegate = null;
  this._shouldFocusOnPage = null;
  this._lastSelectedItemIndex = null;
  this._filterCheckListClientID = null;
  this._checkListFilterActiveColumn = "";
  this._checkListFilterKeys = [];
  this._checkListFilterValues = [];
  this._filterApplyButton = null;
  this._invisibleParentsArray = [];
  this._modalPopupWrapper = null;
  this._animation = null;
  this.ValidationSettings = {};
  this._enableAriaSupport = false;
  this._positionedDataItems = null;
  this._positionedDataItemsIndexes = null;
  this._keyboardNavigationProperties = {
    positionedDataItems: null,
    positionedDataItemsIndexes: null,
    lastClickSelectedItem: null,
    currentSelectedIndex: 0,
    initialRowIndex: 0,
    directionIndex: 0,
    lastSelectedRowIndex: null,
    holdingCtrl: false,
    firstSelection: true,
    unselectableItemsCount: 0,
    setInitialState: function () {
      this.initialRowIndex = this.currentSelectedIndex;
      this.directionIndex = 0;
    },
  };
  this.odataClientSettings = null;
  this._dataBindingWithSelectMethod = false;
  this._isBatchEditingEnabled = false;
  this._rowHighlightingForDeletedRows = false;
  this._batchEditingOpenForEditEvents = {};
  this._defaultDateTimeFormat = null;
  this._startTouchPoints = {};
  this._endTouchPoints = {};
  this._currentTouchPoints = {};
  this._currentMovement = null;
  this._validSwipe = true;
  this._swipeThreshold = 20;
};
Telerik.Web.UI.RadGrid.prototype = {
  initialize: function () {
    Telerik.Web.UI.RadGrid.callBaseMethod(this, "initialize");
    if (!this._masterClientID || !$get(this._masterClientID)) {
      return;
    }
    if (this.ClientSettings) {
      if (!this.ClientSettings.PostBackFunction) {
        this.ClientSettings.PostBackFunction = "__doPostBack('{0}','{1}')";
      }
      if (!this.ClientSettings.AllowExpandCollapse) {
        this.ClientSettings.AllowExpandCollapse = true;
      }
      if (this.ClientSettings.AllowGroupExpandCollapse == null) {
        this.ClientSettings.AllowGroupExpandCollapse = true;
      }
      if (typeof this.ClientSettings.EnableAlternatingItems == "undefined") {
        this.ClientSettings.EnableAlternatingItems = true;
      }
      if (!this.ClientSettings.ColumnsReorderMethod) {
        this.ClientSettings.ColumnsReorderMethod = 0;
      }
      if (this.ClientSettings.ClientMessages) {
        if (
          typeof this.ClientSettings.ClientMessages.DragToGroupOrReorder ==
            "undefined" ||
          this.ClientSettings.ClientMessages.DragToGroupOrReorder == null
        ) {
          this.ClientSettings.ClientMessages.DragToGroupOrReorder =
            "Drag to group or reorder";
        }
        if (
          typeof this.ClientSettings.ClientMessages.DragToResize ==
            "undefined" ||
          this.ClientSettings.ClientMessages.DragToResize == null
        ) {
          this.ClientSettings.ClientMessages.DragToResize = "Drag to resize";
        }
        if (
          typeof this.ClientSettings.ClientMessages.DropHereToReorder ==
            "undefined" ||
          this.ClientSettings.ClientMessages.DropHereToReorder == null
        ) {
          this.ClientSettings.ClientMessages.DropHereToReorder =
            "Drop here to reorder";
        }
        if (
          typeof this.ClientSettings.ClientMessages.PagerTooltipFormatString ==
            "undefined" ||
          this.ClientSettings.ClientMessages.PagerTooltipFormatString == null
        ) {
          this.ClientSettings.ClientMessages.PagerTooltipFormatString =
            "Page <strong>{0}</strong> of <strong>{1}</strong>";
        }
        if (
          typeof this.ClientSettings.ClientMessages
            .ColumnResizeTooltipFormatString == "undefined" ||
          this.ClientSettings.ClientMessages.ColumnResizeTooltipFormatString ==
            null
        ) {
          this.ClientSettings.ClientMessages.ColumnResizeTooltipFormatString =
            "Width: <strong>{0}</strong> <em>pixels</em>";
        }
      }
      if (this.ClientSettings.DataBinding) {
        if (!this.ClientSettings.DataBinding.MaximumRowsParameterName) {
          this.ClientSettings.DataBinding.MaximumRowsParameterName =
            "maximumRows";
        }
        if (!this.ClientSettings.DataBinding.StartRowIndexParameterName) {
          this.ClientSettings.DataBinding.StartRowIndexParameterName =
            "startRowIndex";
        }
        if (!this.ClientSettings.DataBinding.SortParameterName) {
          this.ClientSettings.DataBinding.SortParameterName = "sortExpression";
        }
        if (!this.ClientSettings.DataBinding.FilterParameterName) {
          this.ClientSettings.DataBinding.FilterParameterName =
            "filterExpression";
        }
      }
      if (this.ClientSettings.KeyboardNavigationSettings.AllowSubmitOnEnter) {
        this._allowSubmitOnEnter = this.ClientSettings.KeyboardNavigationSettings.AllowSubmitOnEnter;
      }
      if (this.ClientSettings.KeyboardNavigationSettings.ValidationGroup) {
        this._validationGroup = this.ClientSettings.KeyboardNavigationSettings.ValidationGroup;
      }
    }
    if (
      this.ClientSettings.Animation &&
      ((this.ClientSettings.Animation.AllowColumnReorderAnimation &&
        this.ClientSettings.ColumnsReorderMethod === 1) ||
        this.ClientSettings.Animation.AllowColumnRevertAnimation)
    ) {
      this._animation = {};
      this._animation.ColumnAnimation = $create(
        Telerik.Web.UI.GridColumnAnimation,
        {
          reorderDuration: this.ClientSettings.Animation
            .ColumnReorderAnimationDuration,
          revertDuration: this.ClientSettings.Animation
            .ColumnRevertAnimationDuration,
        },
        null,
        { owner: this.ClientID }
      );
    }
    if (this._editIndexes != null) {
      this._editIndexes = eval(this._editIndexes);
    }
    if (this.ClientSettings.AllowKeyboardNavigation) {
      this._documentKeyDownDelegate = Function.createDelegate(
        this,
        this._documentKeyDown
      );
      $telerik.addExternalHandler(
        document,
        "keydown",
        this._documentKeyDownDelegate
      );
    }
    if (
      this.ClientSettings.AllowRowsDragDrop ||
      (this.get_events().getHandler("rowDblClick") && $telerik.isTouchDevice)
    ) {
      this._onMouseDownDelegate = $telerik.addMobileHandler(
        this,
        this.get_element(),
        "mousedown",
        this._mouseDown
      );
    }
    if (this.ClientSettings.AllowRowsDragDrop) {
      this._documentMouseUpDelegate = $telerik.addMobileHandler(
        this,
        document,
        "mouseup",
        this._mouseUp,
        null,
        true
      );
      this._documentMouseMoveDelegate = $telerik.addMobileHandler(
        this,
        document,
        "mousemove",
        this._mouseMove,
        null,
        true
      );
    }
    if (
      !this.ClientSettings.AllowRowsDragDrop &&
      this.get_events().getHandler("rowDblClick") &&
      $telerik.isTouchDevice
    ) {
      this._documentMouseUpDelegate = $telerik.addMobileHandler(
        this,
        document,
        "mouseup",
        this._mouseUp,
        null,
        true
      );
    }
    window.$addHandlers(this.get_element(), {
      click: Function.createDelegate(this, this._click),
    });
    window.$addHandlers(this.get_element(), {
      dblclick: Function.createDelegate(this, this._dblclick),
    });
    if ($telerik.isTouchDevice && $telerik.$ && $telerik.$.fn.doubletap) {
      var a = $telerik.$;
      var b = a.proxy(this._dblclick, this);
      a(this.get_element()).doubletap(b);
    }
    if ($telerik.isOpera) {
      window.$addHandlers(this.get_element(), {
        mousedown: Function.createDelegate(this, this._contextmenu),
      });
    } else {
      window.$addHandlers(this.get_element(), {
        contextmenu: Function.createDelegate(this, this._contextmenu),
      });
    }
    if (!$telerik.isTouchDevice) {
      this._attachMouseHandlers();
    }
    this._initializeSubmitControls();
    this.raise_gridCreating(new Sys.EventArgs());
    this.Control = this.get_element();
    this.get_element().tabIndex = 0;
    if (this.ShowGroupPanel) {
      var f = $get(this._groupPanelClientID);
      if (f) {
        this._groupPanel = $create(
          Telerik.Web.UI.GridGroupPanel,
          { _owner: this },
          null,
          null,
          $get(this._groupPanelClientID)
        );
      }
    }
    this._gridDataDiv = $get(this.get_id() + "_GridData");
    this._fillSelectedCellsIndexes();
    this._fillUnselectableItemsIndexes();
    if (
      this.ClientSettings &&
      this.ClientSettings.Selecting &&
      this.get_allowCellSelection()
    ) {
      this._cellSelection = $create(
        Telerik.Web.UI.GridCellSelection,
        {
          _owner: this,
          multiple: this.get_allowMutliCellSelection(),
          columnSelect: this.get_allowColumnSelection(),
          multiColumnSelect: this.get_allowMultiColumnSelection(),
        },
        null,
        { owner: this.ClientID }
      );
    }
    if (
      (this.ClientSettings &&
        this.ClientSettings.Selecting &&
        this.ClientSettings.Selecting.AllowRowSelect) ||
      this.ClientSettings.EnablePostBackOnRowClick
    ) {
      this._selection = $create(
        Telerik.Web.UI.GridSelection,
        { _owner: this },
        null,
        { owner: this.ClientID }
      );
    }
    this.GridDataDiv = $get(this.ClientID + "_GridData");
    this.GridHeaderDiv = $get(this.ClientID + "_GridHeader");
    this.GridFooterDiv = $get(this.ClientID + "_GridFooter");
    this.PagerControl = $get(this._masterClientID + "_Pager");
    this.TopPagerControl = $get(this._masterClientID + "_TopPager");
    this._initializeTableViews();
    this._getFilterMenu();
    if (this._filterMenu) {
      this._filterApplyButton = $telerik.getElementByClassName(
        this._filterMenu.get_element(),
        "rgFilterApply"
      );
      if (this._filterApplyButton) {
        this._checkListFilterApplyButtonDelegate = $telerik.addMobileHandler(
          this,
          this._filterApplyButton,
          "click",
          this._checkListFilterApplyButtonHandler
        );
        this._filterCancelButton = $telerik.getElementByClassName(
          this._filterMenu.get_element(),
          "rgFilterCancel"
        );
        this._checkListFilterCancelButtonDelegate = $telerik.addMobileHandler(
          this,
          this._filterCancelButton,
          "click",
          this._checkListFilterCancelButtonHandler
        );
      }
    }
    if (!this._filterApplyButton && this._getHeaderContextMenu()) {
      var e = $telerik.getElementByClassName(
        this._getHeaderContextMenu().get_element(),
        "rgFilterMenu"
      );
      if (e) {
        this._filterApplyButton = $telerik.getElementByClassName(
          e,
          "rgHCMFilter"
        );
        if (this._filterApplyButton) {
          this._checkListIsInHeaderContextMenu = true;
          this._checkListFilterApplyButtonDelegate = $telerik.addMobileHandler(
            this,
            this._filterApplyButton,
            "click",
            this._checkListFilterApplyButtonHandler
          );
          this._filterCancelButton = $telerik.getElementByClassName(
            this._getHeaderContextMenu().get_element(),
            "rgHCMClear"
          );
          this._checkListFilterCancelButtonDelegate = $telerik.addMobileHandler(
            this,
            this._filterCancelButton,
            "click",
            this._checkListFilterCancelButtonHandler
          );
          this._filterCheckListSearch = $telerik.findElement(
            this._getHeaderContextMenu().get_element(),
            "filterCheckListSearch"
          );
        }
      }
    }
    if (this._checkListFilterKeys && this._checkListFilterKeys.length > 0) {
      this.updateClientState();
    }
    var d = $find(this._filterCheckListClientID || "");
    if (d) {
      this._checkListItemsRequestedDelegate = Function.createDelegate(
        this,
        this._checkListItemsRequestedHandler
      );
      d.add_itemsRequested(this._checkListItemsRequestedDelegate);
    }
    if ($telerik.isMobileIE10) {
      if (this.get_events().getHandler("rowDblClick")) {
        this.get_element().style.msTouchAction = "none";
        this.get_element().style.touchAction = "none";
      }
      if (this._groupPanel) {
        this._groupPanel.get_element().style.msTouchAction = "none";
        this._groupPanel.get_element().style.touchAction = "none";
      }
    }
    if (this.ClientSettings.Scrolling.AllowScroll && $telerik.isTouchDevice) {
      this._dataDivMouseDownDelegate = $telerik.addMobileHandler(
        this,
        this.GridDataDiv,
        "mousedown",
        this._dataDivMouseDown
      );
      this._dataDivMouseUpDelegate = $telerik.addMobileHandler(
        this,
        this.GridDataDiv,
        "mouseup",
        this._dataDivMouseUp
      );
      this._dataDivMouseMoveDelegate = $telerik.addMobileHandler(
        this,
        this.GridDataDiv,
        "mousemove",
        this._dataDivMouseMove
      );
    }
    if (
      this.get_masterTableView().get_allowPaging() &&
      $telerik.isTouchDevice
    ) {
      var m = this.ClientSettings.Scrolling.AllowScroll
        ? this.GridDataDiv
        : $telerik.getChildrenByTagName(
            this.get_masterTableView().get_element(),
            "tbody"
          )[0];
      this._swipeStartDelegate = $telerik.addMobileHandler(
        this,
        m,
        "mousedown",
        this._swipeStart
      );
      this._swipeEndDelegate = $telerik.addMobileHandler(
        this,
        m,
        "mouseup",
        this._swipeEnd
      );
      this._swipeMoveDelegate = $telerik.addMobileHandler(
        this,
        m,
        "mousemove",
        this._swipeMove
      );
    }
    var h = Telerik.Web.UI.Grid.IsRightToLeft(
      this.get_masterTableView().get_element()
    );
    if (h) {
      this.get_element().className = String.format(
        "{0} RadGridRTL RadGridRTL_{1}",
        this.get_element().className,
        this.Skin
      );
    }
    if (
      this.ClientSettings &&
      this.ClientSettings.Scrolling &&
      (this.ClientSettings.Scrolling.AllowScroll ||
        (this.ClientSettings.Scrolling.AllowScroll &&
          (this.ClientSettings.Scrolling.UseStaticHeaders ||
            this.ClientSettings.Scrolling.EnableVirtualScrollPaging)))
    ) {
      this._scrolling = $create(
        Telerik.Web.UI.GridScrolling,
        { _owner: this },
        null,
        { owner: this.ClientID }
      );
    } else {
      this.repaint();
    }
    var g;
    if (this._activeRowIndex) {
      var k = this.get_masterTableView()._getRowByIndexOrItemIndexHierarchical(
        this._activeRowIndex
      );
      if (k) {
        var l = this._selectedItemsInternal;
        for (g = 0; g < l.length; g++) {
          Array.add(this._selectedIndexes, l[g].itemIndex);
        }
        this.set_activeRow(k);
      }
    }
    if (this._lastSelectedItemIndex != null && this._selection) {
      this._selection._lastSelectedItemIndex = this._lastSelectedItemIndex;
    }
    if (this._isBatchEditingEnabled) {
      this._batchEditing = $create(
        Telerik.Web.UI.GridBatchEditing,
        null,
        null,
        { _owner: this.get_id() },
        null
      );
      if (!this._scrolling) {
        this._onBatchRowDeleteDelegate = Function.createDelegate(
          this,
          this._adjustBatchDeletedRows
        );
        window.$addHandler(window, "resize", this._onBatchRowDeleteDelegate);
        $telerik.$(this.get_element()).css({ position: "relative" });
      } else {
        $telerik
          .$(this.get_element())
          .find(".rgDataDiv")
          .css({ position: "relative" });
      }
    }
    this._attachDomEvents();
    if (Sys.WebForms && Sys.WebForms.PageRequestManager) {
      var j = Sys.WebForms.PageRequestManager.getInstance();
      if (j) {
        this._initializeRequestHandler = Function.createDelegate(
          this,
          this._initializeRequest
        );
        j.add_initializeRequest(this._initializeRequestHandler);
      }
    }
    if (this._clientDataSourceID) {
      this._clientSideBinding = new Telerik.Web.UI.GridClientSideBinding(this);
    }
    this.raise_gridCreated(new Sys.EventArgs());
    if (this._shouldFocusOnPage) {
      try {
        this._shouldFocusOnPage = false;
        this.get_element().focus();
      } catch (c) {}
    }
    this._initializePopUpEditForm();
    if (
      typeof this.ClientSettings.DataBinding.Location != "undefined" &&
      this.ClientSettings.DataBinding.Location != "" &&
      !this.get_masterTableView()._virtualization
    ) {
      this._onCommandDelegate = Function.createDelegate(this, this._onCommand);
      this.add_command(this._onCommandDelegate);
      if (!this._onSuccessDelegate && !this._onFailDelegate) {
        this._onSuccessDelegate = Function.createDelegate(
          this,
          this._onSuccess
        );
        this._onFailDelegate = Function.createDelegate(this, this._onFail);
      }
      if (
        typeof this.ClientSettings.DataBinding.SelectMethod != "undefined" &&
        this.ClientSettings.DataBinding.SelectMethod != ""
      ) {
        this._dataBindingWithSelectMethod = true;
        this._getData(
          this.ClientSettings.DataBinding.Location,
          this.ClientSettings.DataBinding.SelectMethod,
          this._getRequestData(),
          this._onSuccessDelegate,
          this._onFailDelegate
        );
      } else {
        if (
          typeof this.ClientSettings.DataBinding.DataService != "undefined" &&
          typeof this.ClientSettings.DataBinding.DataService.TableName !=
            "undefined" &&
          this.ClientSettings.DataBinding.DataService.TableName != ""
        ) {
          this._getDataServiceData(
            this._onSuccessDelegate,
            this._onFailDelegate
          );
        }
      }
    }
    if (this.ClientSettings.Virtualization.EnableVirtualization) {
      Telerik.Web.UI.GridVirtualization._handleRowHeightChangingEvents(this);
      this._onVirtualizationCommandDelegate = Function.createDelegate(
        this,
        this._onVirtualizationCommand
      );
      this.add_command(this._onVirtualizationCommandDelegate);
      if (this.get_masterTableView()._virtualization) {
        this.get_masterTableView()._virtualization.repaint();
      }
    }
    if (this.get_isUsingODataSource()) {
      this._initializeODataSourceBinder();
      this._onCommandODataSourceDelegate = Function.createDelegate(
        this,
        this._onCommandODataSource
      );
      this.add_command(this._onCommandODataSourceDelegate);
    }
    var n = this._controlToFocus;
    if (this.ClientSettings.AllowKeyboardNavigation && n != null && n != "") {
      setTimeout(function () {
        try {
          var p = false;
          var i = $find(n);
          if (i == null) {
            i = $get(n);
          } else {
            p = true;
          }
          if (i == null) {
            i = document.getElementsByName(n.replace(/_/gi, "$"))[0];
          }
          if (i != null) {
            if (i.focus) {
              i.focus();
            } else {
              if (p) {
                if (i._focused != undefined) {
                  i._focused = true;
                }
                if (i.setFocus) {
                  i.setFocus();
                }
              }
            }
            if (i.select) {
              i.select();
            }
          }
        } catch (o) {}
      }, 0);
    }
    if (this.get_enableAriaSupport()) {
      this._initializeAriaSupport();
    }
  },
  _initializePopUpEditForm: function () {
    var u = this;
    var r;
    var o = 20;
    var l = o;
    var v = o;
    var q;
    var p;
    var n;
    var m;
    var d;
    var f;
    var s;
    var h;
    var b;
    var c;
    var j;
    if (u._popUpIds && u._popUpIds != "") {
      r = eval(u._popUpIds);
      for (var k = 0; k < r.length; k++) {
        q = r[k];
        p = $get(q);
        if (p) {
          var a = new Sys.CancelEventArgs();
          a.get_popUp = function () {
            return p;
          };
          u.raise_popUpShowing(a);
          if (a.get_cancel()) {
            continue;
          }
          if (u._popUpSettings.Modal) {
            n = String.format("modalDivId_{0}", u.get_id());
            if (!$get(n)) {
              m = document.createElement("div");
              m.id = n;
              m.style.width = document.documentElement.scrollWidth + "px";
              m.style.height = document.documentElement.scrollHeight + "px";
              m.className = String.format("GridModal_{0}", u.Skin);
              u._onResizeDelegate = Function.createDelegate(
                u,
                u.onWindowResize
              );
              if (navigator.userAgent.toLowerCase().indexOf("msie") != -1) {
                setTimeout(function () {
                  window.$addHandler(window, "resize", u._onResizeDelegate);
                }, 0);
              } else {
                window.$addHandler(window, "resize", u._onResizeDelegate);
              }
              m.style.top = m.style.left = 0;
              m.style.position = "absolute";
              m.style.backgroundColor = "threedshadow";
              m.style.zIndex = u._popUpSettings.ZIndex - 10;
              try {
                m.style.opacity = "0.5";
              } catch (g) {}
              if (typeof m.style.filter != "undefined") {
                m.style.filter = "alpha(opacity=50);";
              } else {
                if (typeof m.style.MozOpacity != "undefined") {
                  m.style.MozOpacity = 1 / 2;
                }
              }
              document.getElementsByTagName("form")[0].appendChild(m);
            }
          }
          p.style.zIndex = u._popUpSettings.ZIndex;
          l = v += 20;
          f = p.getElementsByTagName("div")[0];
          setTimeout(function () {
            if (u._popUpSettings.KeepInScreenBounds) {
              p.style.visibility = "hidden";
              p.style.display = "";
              var i = $get(
                p.querySelector("div.rgHeader").id.replace("_PEF", "")
              );
              if (i) {
                p.style.left = Telerik.Web.UI.Grid.FindPosX(i) + "px";
                p.style.top =
                  Telerik.Web.UI.Grid.FindPosY(i) +
                  $telerik.$(i).height() +
                  "px";
              } else {
                p.style.left =
                  Telerik.Web.UI.Grid.FindPosX(u.get_element()) + l + "px";
                p.style.top =
                  Telerik.Web.UI.Grid.FindPosY(u.get_element()) + v + "px";
              }
              d = Telerik.Web.UI.Grid.GetNonOverflowingCoordinates(
                p,
                u._popUpSettings.OverflowPosition,
                $telerik.$
              );
              p.style.left = d.x + "px";
              p.style.top = d.y + "px";
              p.style.visibility = "visible";
            } else {
              if (p.style.left == "") {
                p.style.left =
                  Telerik.Web.UI.Grid.FindPosX(u.get_element()) + l + "px";
              }
              if (p.style.top == "") {
                p.style.top =
                  Telerik.Web.UI.Grid.FindPosY(u.get_element()) + v + "px";
              }
              p.style.display = "";
            }
            if (u._enableRippleEffect) {
              var w = $telerik.findElement(p, "UpdateButton");
              var e = $telerik.findElement(p, "CancelButton");
              if (w) {
                Telerik.Web.UI.MaterialRippleManager.getInstance().initializeRipple(
                  w,
                  {
                    rippleType: Telerik.Web.UI.MaterialRippleType.Icon,
                    maxRippleSize: 50,
                  }
                );
              }
              if (e) {
                Telerik.Web.UI.MaterialRippleManager.getInstance().initializeRipple(
                  e,
                  {
                    rippleType: Telerik.Web.UI.MaterialRippleType.Icon,
                    maxRippleSize: 50,
                  }
                );
              }
            }
            u._popUpLocations[f.id] =
              parseInt(p.style.left, 10) +
              "px," +
              parseInt(p.style.top, 10) +
              "px";
            u.updateClientState();
          }, 100);
          p.tabIndex = 0;
          u.resizeModalBackground();
          if (p.offsetHeight != 0) {
            p.getElementsByTagName("div")[4].style.height =
              p.offsetHeight - f.offsetHeight + "px";
          }
          if (u.get_enableAriaSupport()) {
            s = p.querySelectorAll(".rgEditForm.rgEditPopup table");
            h = p.querySelector("div.rgHeader .rgPopupHeaderAria");
            b = p.querySelector("caption");
            c = b
              ? (b.textContent || b.innerText).replace(/^\s+|\s+$/g, "")
              : "";
            j = h
              ? (h.textContent || h.innerText).replace(/^\s+|\s+$/g, "")
              : "";
            p.setAttribute("role", "dialog");
            p.setAttribute("aria-label", c);
            if (h) {
              h.setAttribute("aria-live", "polite");
              h.setAttribute("aria-atomic", "true");
              h.setAttribute("aria-relevant", "text");
              setTimeout(function () {
                h.setAttribute("aria-label", j);
                h.innerHTML = j;
              }, 1000);
            }
            if (b) {
              b.setAttribute("aria-label", c);
            }
            if (u._popUpSettings.Modal) {
              u.get_element().setAttribute("aria-hidden", "true");
            }
            for (var t = 0; t < s.length; t++) {
              s[t].setAttribute("role", "presentation");
            }
          }
          window.$addHandlers(f, {
            mousedown: Function.createDelegate(p, u._popUpMouseDown),
          });
          window.$addHandlers(document, {
            mouseup: Function.createDelegate(p, u._popUpMouseUp),
          });
          window.$addHandlers(document, {
            mouseout: Function.createDelegate(p, u._popUpMouseOut),
          });
          if (
            u.ClientSettings.AllowKeyboardNavigation &&
            u.ClientSettings.KeyboardNavigationSettings.EnableKeyboardShortcuts
          ) {
            window.$addHandler(
              p,
              "keypress",
              Function.createDelegate(
                {
                  popUpForm: p,
                  keyMappings: u.ClientSettings.KeyboardNavigationSettings,
                },
                u._popUpKeyDown
              )
            );
          }
          $telerik.addExternalHandler(
            document,
            "mousemove",
            Function.createDelegate(p, u._popUpMouseMove)
          );
          if (u.get_enableAriaSupport()) {
            u._restrictTabNavigation(p);
            u._stopDefaultSubmit();
          }
          $telerik.repaintChildren(u);
        }
      }
    }
  },
  get_rippleZonesConfiguration: function () {
    var c =
      ".rgGroupCol:not('.rgHeader') .t-button, .rgFilterRow .t-button, .rgRow .t-button, .rgAltRow .t-button, .rgEditRow .t-button, .rgPager .rgPageLast, .rgPager .rgPageFirst, .rgPager .rgPagePrev, .rgPager .rgPageNext, .rgEditForm .t-button, .rgDragIcon";
    var a = $telerik.$(c)[0];
    var b = 60;
    if (a) {
      b = a.offsetWidth / 0.6;
    }
    return [
      {
        element: this.get_element(),
        rippleConfigurations: [
          {
            containerSelector: c,
            rippleType: Telerik.Web.UI.MaterialRippleType.Icon,
            maxRippleSize: b,
          },
          {
            containerSelector: ".rgPager .rgNumPart a:not('.rgCurrentPage')",
            rippleType: Telerik.Web.UI.MaterialRippleType.Icon,
            maxRippleSize: b,
            boundToElementSize: true,
          },
          {
            containerSelector:
              ".rgCommandCell .t-button, .rgPager .rgPagerButton, .rgGroupItem",
          },
        ],
      },
    ];
  },
  _stopDefaultSubmit: function () {
    var a = "_preventDefaultButton_" + this.get_id();
    var b = $get(a);
    if (!b) {
      b = document.createElement("input");
      b.setAttribute("type", "submit");
      b.setAttribute("name", a);
      b.style.display = "none";
      b.onclick = function () {
        return false;
      };
      window.theForm.insertBefore(b, window.theForm.firstChild);
    }
  },
  _modalPopupEditFormBlurHandler: function (a) {
    var b = this._modalPopupWrapper;
    setTimeout(function () {
      if (!$telerik.isDescendantOrSelf(b, document.activeElement)) {
        b.focus();
      }
    }, 1);
  },
  _restrictTabNavigation: function (a) {
    var b = this;
    a.tabIndex = 0;
    a.getElementsByTagName("input")[0].focus();
    b._modalPopupWrapper = a;
    a.addEventListener(
      "blur",
      $telerik.$.proxy(b._modalPopupEditFormBlurHandler, b),
      true
    );
  },
  _initializeCallback: function (a, b) {
    WebForm_DoCallback(this.UniqueID, a, b, "", null, false);
  },
  _dataDivMouseDown: function (a) {
    this._isTouchScrollInProgress = false;
    var c = $telerik.getTouchTarget(a);
    if (this._scrolling) {
      if (c) {
        var b =
          c.tagName.toLowerCase() == "td" &&
          Telerik.Web.UI.Grid.IsChildOf(c, this.GridDataDiv);
        var d =
          a.changedTouches ||
          (a.originalEvent
            ? a.originalEvent.touches
            : a.rawEvent
            ? a.rawEvent.touches
            : false);
        if (!b || (d && d.length > 1)) {
          this._scrolling._dropDownTouchScroll.disable();
        }
      }
      if (this.get_allowCellSelection()) {
        this._scrolling._dropDownTouchScroll.enable();
      }
    }
  },
  _dataDivMouseUp: function (a) {
    if (this._scrolling) {
      if (this.get_allowCellSelection() && !this._isTouchScrollInProgress) {
        this._scrolling._dropDownTouchScroll.disable();
      } else {
        this._scrolling._dropDownTouchScroll.enable();
      }
    }
  },
  _dataDivMouseMove: function (a) {
    if (this.get_allowCellSelection() && this._scrolling) {
      this._isTouchScrollInProgress = true;
      this._scrolling._dropDownTouchScroll.enable();
    }
  },
  _swipeStart: function (a) {
    this._startTouchPoints = {};
    this._endTouchPoints = {};
    this._currentTouchPoints = {};
    this._currentMovement = null;
    this._validSwipe = true;
    var d =
      a.changedTouches ||
      (a.originalEvent
        ? a.originalEvent.touches
        : a.rawEvent
        ? a.rawEvent.touches
        : false);
    if (d && d.length > 1) {
      for (var b = 0; b < d.length; b++) {
        var c = d[b];
        this._startTouchPoints[c.identifier] = {
          x: c.clientX,
          y: c.clientY,
          direction: Telerik.Web.UI.Grid.TouchPointDirection.None,
          movement: Telerik.Web.UI.Grid.TouchPointMovement.None,
        };
      }
      this._currentTouchPoints = $telerik.$.extend({}, this._startTouchPoints);
    }
  },
  _swipeMove: function (f) {
    var g = f.originalEvent || f.rawEvent || f;
    var n = g.touches || g.changedTouches;
    var c = false;
    var h = null;
    if (n && n.length > 1) {
      for (var j = 0; j < n.length; j++) {
        var d = n[j];
        if (this._currentTouchPoints[d.identifier]) {
          var m = this._currentTouchPoints[d.identifier];
          if (
            !m ||
            m.movement == Telerik.Web.UI.Grid.TouchPointMovement.Inconsistent
          ) {
            continue;
          }
          d = {
            identifier: n[j].identifier,
            x: n[j].clientX,
            y: n[j].clientY,
            direction: Telerik.Web.UI.Grid.TouchPointDirection.None,
            movement: Telerik.Web.UI.Grid.TouchPointMovement.None,
          };
          var a = Math.abs(d.x - m.x);
          var b = Math.abs(d.y - m.y);
          if (a <= this._swipeThreshold && b <= this._swipeThreshold) {
            continue;
          }
          var k = Telerik.Web.UI.Grid.detectTouchPointDirection(m, d, a - b);
          var l = Telerik.Web.UI.Grid.detectTouchPointMovement(k);
          d.movement = l;
          if (m && m.movement != Telerik.Web.UI.Grid.TouchPointMovement.None) {
            if (m.movement != l) {
              d.movement = Telerik.Web.UI.Grid.TouchPointMovement.Inconsistent;
            }
          }
          d.direction = k;
          this._currentTouchPoints[d.identifier] = d;
          if (j == 0) {
            h = d.movement;
          } else {
            if (h == d.movement) {
              c = true;
            }
          }
        }
      }
    }
    if (c) {
      $telerik.cancelRawEvent(f.originalEvent);
      return false;
    }
  },
  _swipeEnd: function (f) {
    var h = f.originalEvent || f.rawEvent || f;
    var k = h.changedTouches;
    if (k && k.length > 0 && Object.keys(this._currentTouchPoints).length > 0) {
      var d = k[0];
      var c = d.identifier;
      if (!this._currentMovement) {
        this._currentMovement = this._currentTouchPoints[c].movement;
      }
      if (!this._validSwipe) {
        return;
      }
      if (this._currentTouchPoints[c] && this._startTouchPoints[c]) {
        var g = this._currentTouchPoints[c];
        this._endTouchPoints[c] = g;
        var j = this._startTouchPoints[c];
        var a = Math.abs(g.x - j.x);
        var b = Math.abs(g.y - j.y);
        var i =
          (a > this._swipeThreshold || b > this._swipeThreshold) &&
          g.movement != Telerik.Web.UI.Grid.TouchPointMovement.Inconsistent &&
          g.movement == this._currentMovement;
        this._validSwipe = this._validSwipe && i;
      }
      if (
        this._validSwipe &&
        Object.keys(this._startTouchPoints).length ==
          Object.keys(this._endTouchPoints).length
      ) {
        if (
          this._currentMovement == Telerik.Web.UI.Grid.TouchPointMovement.Left
        ) {
          this.get_masterTableView().page("Next");
        }
        if (
          this._currentMovement == Telerik.Web.UI.Grid.TouchPointMovement.Right
        ) {
          this.get_masterTableView().page("Prev");
        }
      }
    }
  },
  _initializeSubmitControls: function () {
    this._submitControls = [{ Name: "input", Type: "text" }];
  },
  _shouldFocusGridOnDocumentKeyDown: function (a, b) {
    var c = a.srcElement || a.explicitOriginalTarget;
    if (
      (a.ctrlKey &&
        b == this.ClientSettings.KeyboardNavigationSettings.FocusKey) ||
      ((b ==
        this.ClientSettings.KeyboardNavigationSettings.ExpandDetailTableKey ||
        b ==
          this.ClientSettings.KeyboardNavigationSettings
            .CollapseDetailTableKey) &&
        this.ClientSettings &&
        this.ClientSettings.AllowKeyboardNavigation &&
        c &&
        c.id == this.get_element().id)
    ) {
      return true;
    }
    return false;
  },
  _shouldFocusGridOnDocKeyDownWithCellSelection: function (a, b) {
    return (
      a.ctrlKey && b == this.ClientSettings.KeyboardNavigationSettings.FocusKey
    );
  },
  _documentKeyDown: function (b) {
    b = b || window.event;
    var c = b.keyCode || b.charCode;
    if (b.charCode) {
      c = String.fromCharCode(b.charCode).toUpperCase().charCodeAt(0);
    }
    if (this.get_allowCellSelection()) {
      if (this._shouldFocusGridOnDocKeyDownWithCellSelection(b, c)) {
        this.get_element().focus();
      }
      return;
    }
    if (this._shouldFocusGridOnDocumentKeyDown(b, c)) {
      if (this.get_element().focus) {
        this.get_element().focus();
        if (this.ClientSettings.AllowKeyboardNavigation && !this._activeRow) {
          if (this.get_masterTableView().get_dataItems().length > 0) {
            var a = null;
            if (this._selectedItemsInternal.length > 0) {
              a = $find(this._selectedItemsInternal[0].id);
            } else {
              a = this.get_masterTableView().get_dataItems()[0];
            }
            if (a != null) {
              this._setActiveRow(a.get_element(), b);
              if (
                this.ClientSettings.Selecting &&
                this.ClientSettings.Selecting.AllowRowSelect
              ) {
                this._selection._selectRowInternal(
                  a.get_element(),
                  b,
                  false,
                  true,
                  true,
                  false
                );
              }
            }
          }
        }
      }
    }
  },
  _attachMouseHandlers: function () {
    window.$addHandlers(this.get_element(), {
      mouseover: Function.createDelegate(this, this._mouseover),
    });
    window.$addHandlers(this.get_element(), {
      mouseout: Function.createDelegate(this, this._mouseout),
    });
  },
  _getDataServiceData: function (j, i, o) {
    var b = new Sys.CancelEventArgs();
    var h = this.ClientSettings.DataBinding.Location;
    b.get_location = function () {
      return h;
    };
    b.set_location = function (e) {
      h = e;
    };
    var n = this.ClientSettings.DataBinding.DataService.TableName;
    b.get_tableName = function () {
      return n;
    };
    b.set_tableName = function (e) {
      n = e;
    };
    var g = this.ClientSettings.DataBinding.DataService.FilterQueryOption;
    b.get_filterQueryOption = function () {
      return g;
    };
    b.set_filterQueryOption = function (e) {
      g = e;
    };
    var m = this.ClientSettings.DataBinding.DataService.SortQueryOption;
    b.get_sortQueryOption = function () {
      return m;
    };
    b.set_sortQueryOption = function (e) {
      m = e;
    };
    var k = this.get_masterTableView().getDataServiceQuery(
      b.get_tableName(),
      b.get_filterQueryOption(),
      b.get_sortQueryOption()
    );
    b.get_query = function () {
      return k;
    };
    b.set_query = function (e) {
      k = e;
    };
    var l = this._getDataResponseType();
    b.get_responseType = function () {
      return l;
    };
    b.set_responseType = function (e) {
      l = e;
    };
    var c = this._isBoundToServiceType(
      Telerik.Web.UI.GridClientDataServiceType.OData
    )
      ? "$callback"
      : null;
    b.get_callback = function () {
      return c;
    };
    b.set_callback = function (e) {
      c = e;
    };
    this.raise_dataBinding(b);
    if (b.get_cancel()) {
      return false;
    }
    var p =
      typeof o != "undefined"
        ? o
        : String.format("{0}/{1}", b.get_location(), b.get_query());
    try {
      var d = function (e, q) {
        return e.replace(/\\'/g, "'");
      };
      if (l === "jsonp") {
        d = null;
      }
      var a = {
        type: "GET",
        url: p,
        contentType: "application/json; charset=utf-8",
        dataFilter: d,
        dataType: l,
        jsonp: c,
        success: j,
        error: i,
      };
      $telerik.$.ajax(a);
    } catch (f) {
      throw new Error(f);
    }
  },
  _getData: function (d, g, f, i, h) {
    var b = Sys.Serialization.JavaScriptSerializer.deserialize(f);
    var a = new Sys.CancelEventArgs();
    a.get_location = function () {
      return d;
    };
    a.set_location = function (e) {
      d = e;
    };
    a.get_methodName = function () {
      return g;
    };
    a.set_methodName = function (e) {
      g = e;
    };
    a.get_methodArguments = function () {
      return b;
    };
    a.set_methodArguments = function (e) {
      b = e;
    };
    this.raise_dataBinding(a);
    if (a.get_cancel()) {
      return false;
    }
    try {
      $telerik.$.ajax({
        type: "POST",
        url: a.get_location() + "/" + a.get_methodName(),
        data: Sys.Serialization.JavaScriptSerializer.serialize(b),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: i,
        error: h,
      });
    } catch (c) {
      throw new Error(c);
    }
  },
  _getCacheKey: function (a) {
    return String.format(
      "{0}{1}{2}{3}",
      a.get_currentPageIndex(),
      a.get_pageSize(),
      a.get_sortExpressions().toString(),
      a.get_filterExpressions().toString()
    );
  },
  _getRequestData: function (e, b) {
    var f = this.get_masterTableView(),
      c = {};
    if (typeof e !== "undefined" && typeof b !== "undefined") {
      c[this.ClientSettings.DataBinding.StartRowIndexParameterName] = e;
      c[this.ClientSettings.DataBinding.MaximumRowsParameterName] = b;
    } else {
      c[this.ClientSettings.DataBinding.StartRowIndexParameterName] =
        f.get_currentPageIndex() * f.get_pageSize();
      if (f._data && f._data.AllowPaging) {
        c[
          this.ClientSettings.DataBinding.MaximumRowsParameterName
        ] = f.get_pageSize();
      } else {
        c[this.ClientSettings.DataBinding.MaximumRowsParameterName] =
          Math.pow(2, 31) - 1;
      }
    }
    var d = null;
    if (
      typeof this.ClientSettings.DataBinding.SortParameterType == "undefined"
    ) {
      d = f.get_sortExpressions().toList();
    } else {
      if (
        this.ClientSettings.DataBinding.SortParameterType ==
        Telerik.Web.UI.GridClientDataBindingParameterType.String
      ) {
        d = f.get_sortExpressions().toString();
      } else {
        if (
          this.ClientSettings.DataBinding.SortParameterType ==
          Telerik.Web.UI.GridClientDataBindingParameterType.Linq
        ) {
          d = f.get_sortExpressions().toString();
        } else {
          if (
            this.ClientSettings.DataBinding.SortParameterType ==
            Telerik.Web.UI.GridClientDataBindingParameterType.Oql
          ) {
            d = f.get_sortExpressions().toString();
          }
        }
      }
    }
    c[this.ClientSettings.DataBinding.SortParameterName] = d;
    var a = null;
    if (
      typeof this.ClientSettings.DataBinding.FilterParameterType == "undefined"
    ) {
      a = f.get_filterExpressions().toList();
    } else {
      if (
        this.ClientSettings.DataBinding.FilterParameterType ==
        Telerik.Web.UI.GridClientDataBindingParameterType.String
      ) {
        a = f.get_filterExpressions().toString();
      } else {
        if (
          this.ClientSettings.DataBinding.FilterParameterType ==
          Telerik.Web.UI.GridClientDataBindingParameterType.Linq
        ) {
          a = f.get_filterExpressions().toDynamicLinq();
        } else {
          if (
            this.ClientSettings.DataBinding.FilterParameterType ==
            Telerik.Web.UI.GridClientDataBindingParameterType.Oql
          ) {
            a = f.get_filterExpressions().toOql();
          }
        }
      }
    }
    c[this.ClientSettings.DataBinding.FilterParameterName] = a;
    return Sys.Serialization.JavaScriptSerializer.serialize(c);
  },
  _isBoundToServiceType: function (a) {
    if (
      this.ClientSettings &&
      this.ClientSettings.DataBinding &&
      this.ClientSettings.DataBinding.DataService
    ) {
      if (
        typeof this.ClientSettings.DataBinding.DataService.Type !== "undefined"
      ) {
        return this.ClientSettings.DataBinding.DataService.Type === a;
      } else {
        return a === Telerik.Web.UI.GridClientDataServiceType.ADONet;
      }
    }
    return false;
  },
  _getDataResponseType: function () {
    if (
      this.ClientSettings &&
      this.ClientSettings.DataBinding &&
      this.ClientSettings.DataBinding.ResponseType
    ) {
      switch (this.ClientSettings.DataBinding.ResponseType) {
        case Telerik.Web.UI.GridClientDataResponseType.JSONP:
          return "jsonp";
        default:
          return "json";
      }
    }
    return "json";
  },
  _onSuccess: function (f) {
    if (typeof f != "object" || f == null) {
      return;
    }
    if (typeof f.d != "undefined") {
      f = f.d;
    }
    var i = this.get_masterTableView();
    if (this.ClientSettings.DataBinding.EnableCaching && !i._virtualization) {
      var h = this._getCacheKey(i);
      if (!this._cache) {
        this._cache = {};
      }
      if (!this._cache[h]) {
        this._cache[h] = f;
      }
    }
    var g = true;
    var d = f;
    if (d.get_data) {
      d = d.get_data();
    }
    var b = 0;
    var e;
    var c;
    if (
      typeof this.ClientSettings.DataBinding.DataPropertyName == "undefined"
    ) {
      e = "Data";
    } else {
      e = this.ClientSettings.DataBinding.DataPropertyName;
    }
    if (
      typeof this.ClientSettings.DataBinding.CountPropertyName == "undefined"
    ) {
      c = "Count";
    } else {
      c = this.ClientSettings.DataBinding.CountPropertyName;
    }
    if (
      this._isBoundToServiceType(
        Telerik.Web.UI.GridClientDataServiceType.OData
      ) &&
      f.results
    ) {
      d = f.results;
      if (!isNaN(f.__count)) {
        b = f.__count;
        g = false;
      } else {
        if (!i.get_allowPaging()) {
          b = 0;
          g = false;
        }
      }
    } else {
      if (typeof f[e] != "undefined" && typeof f[c] != "undefined") {
        g = false;
        d = f[e];
        b = f[c];
      }
    }
    if (g) {
      if (
        typeof this.ClientSettings.DataBinding.SelectCountMethod !=
          "undefined" &&
        this.ClientSettings.DataBinding.SelectCountMethod != ""
      ) {
        this._onSelectCountSuccessDelegate = Function.createDelegate(
          this,
          this._onSelectCountSuccess
        );
        if (
          typeof this.ClientSettings.DataBinding.DataService != "undefined" &&
          typeof this.ClientSettings.DataBinding.DataService.TableName !=
            "undefined" &&
          this.ClientSettings.DataBinding.DataService.TableName != ""
        ) {
          var k = i
            .get_filterExpressions()
            .toString("it")
            .replace(/'/g, '"')
            .replace(/\[/g, "")
            .replace(/\]/g, "");
          var j = String.format(
            "{0}/{1}?where='{2}'",
            this.ClientSettings.DataBinding.Location,
            this.ClientSettings.DataBinding.SelectCountMethod,
            k
          );
          this._getDataServiceData(
            this._onSelectCountSuccessDelegate,
            this._onFailDelegate,
            j
          );
        } else {
          this._getData(
            this.ClientSettings.DataBinding.Location,
            this.ClientSettings.DataBinding.SelectCountMethod,
            "{}",
            this._onSelectCountSuccessDelegate,
            this._onFailDelegate
          );
        }
      }
    } else {
      i.set_virtualItemCount(b);
    }
    var a = new Telerik.Web.UI.GridDataSourceResolvedEventArgs(d);
    this.raise_dataSourceResolved(a);
    d = a.get_data();
    if (i.get_virtualItemCount() == 0) {
      i._updatePager();
    }
    if (!i._virtualization) {
      i.set_dataSource(d);
      i.dataBind();
    }
  },
  _onFail: function (g) {
    var c = new Sys.EventArgs();
    if (typeof g != "undefined") {
      if (typeof g.responseText != "undefined") {
        var f;
        try {
          f = Sys.Serialization.JavaScriptSerializer.deserialize(
            g.responseText
          );
        } catch (a) {
          f = null;
        }
        if (!f) {
          return;
        }
        if (f.error) {
          var b = f.error;
          var d = b.message && b.message.value ? b.message.value : "";
          c = this._constructErrorArgsObject(d, "", "");
        } else {
          c = this._constructErrorArgsObject(
            f.Message,
            f.ExceptionType,
            f.StackTrace
          );
        }
      }
    }
    this.raise_dataBindingFailed(c);
  },
  _constructErrorArgsObject: function (c, b, d) {
    var a = new Sys.EventArgs();
    a.get_message = function () {
      return c;
    };
    a.get_exceptionType = function () {
      return b;
    };
    a.get_stackTrace = function () {
      return d;
    };
    return a;
  },
  _onSelectCountSuccess: function (a) {
    if (typeof a.d != "undefined") {
      a = a.d;
    }
    if (
      typeof a[this.ClientSettings.DataBinding.SelectCountMethod] != "undefined"
    ) {
      a = a[this.ClientSettings.DataBinding.SelectCountMethod];
    }
    var b = this.get_masterTableView();
    b.set_virtualItemCount(a);
  },
  _onCommandODataSource: function (b, a) {
    a.set_cancel(true);
    if (this.get_isUsingODataSource()) {
      this._onDataNeeded();
    }
  },
  _onCommand: function (b, a) {
    a.set_cancel(true);
    var d = this.get_masterTableView();
    if (this.ClientSettings.DataBinding.EnableCaching) {
      var c = this._getCacheKey(d);
      if (!this._cache) {
        this._cache = {};
      }
      if (this._cache[c]) {
        this._onSuccess(this._cache[c]);
        return;
      }
    }
    if (
      typeof this.ClientSettings.DataBinding.SelectMethod != "undefined" &&
      this.ClientSettings.DataBinding.SelectMethod != ""
    ) {
      this._getData(
        this.ClientSettings.DataBinding.Location,
        this.ClientSettings.DataBinding.SelectMethod,
        this._getRequestData(),
        this._onSuccessDelegate,
        this._onFailDelegate
      );
    } else {
      if (
        typeof this.ClientSettings.DataBinding.DataService != "undefined" &&
        typeof this.ClientSettings.DataBinding.DataService.TableName !=
          "undefined" &&
        this.ClientSettings.DataBinding.DataService.TableName != ""
      ) {
        d.getDataServiceQuery(
          this.ClientSettings.DataBinding.DataService.TableName,
          this.ClientSettings.DataBinding.DataService.FilterQueryOption,
          this.ClientSettings.DataBinding.DataService.SortQueryOption
        );
        this._getDataServiceData(this._onSuccessDelegate, this._onFailDelegate);
      }
    }
  },
  _onVirtualizationCommand: function (d, a) {
    var e = a.get_tableView(),
      f = e._virtualization,
      c = e.get_pageSize(),
      b = e.get_currentPageIndex();
    if (f && a.get_commandName() === "Page") {
      a.set_cancel(true);
      f.scrollToIndex(c * b);
      f.select(c * b);
    }
  },
  _getHeadLinksForPrint: function () {
    var a = $telerik.$("link[type='text/css']");
    var c = "";
    var b = "";
    for (var d = 0; d < a.length; d++) {
      c = a[d].getAttribute("href");
      c = c.replace(/&amp;amp;t/g, "&t");
      c = c.replace(/&amp;t/g, "&t");
      b += "<link rel='Stylesheet' type='text/css' href='" + c + "'>";
    }
    return b;
  },
  print: function () {
    if (!this.ClientSettings.EnableClientPrint) {
      return false;
    }
    var d = this;
    var b = window.kendo;
    var a;
    var c = window.open();
    if (!c) {
      return false;
    }
    a = $telerik.$("<div>");
    b.drawing
      .drawDOM(d.get_element())
      .then(function (e) {
        return b.drawing.Surface.create(a, { type: "svg" }).draw(e);
      })
      .done(function (e) {
        var f =
          "<html><head>" +
          d._getHeadLinksForPrint() +
          "</head><body><form style='height:" +
          d.get_element().scrollHeight +
          "px;'>" +
          a.get(0).innerHTML +
          "</form></body></html>";
        c.document.open();
        c.document.write(f);
        c.document.close();
        setTimeout(function () {
          c.print();
        }, 1);
        a.remove();
      });
  },
  repaint: function () {
    var a = this.get_element();
    var d = this._scrolling;
    var b = this.get_masterTableView();
    if (!this.canRepaint()) {
      if (a) {
        this.add_parentShown(a);
      }
      return;
    } else {
      this._clearParentShowHandlers();
    }
    if (!d && this.GridDataDiv) {
      d = $find(this.get_id())._scrolling;
    }
    if (Telerik.Web.UI.GridScrolling && d) {
      if (d._shouldInitializeLayoutAndScroll) {
        d._shouldInitializeLayoutAndScroll = false;
        d._initializeDimensions();
        d._initializeScroll();
      } else {
        d.onWindowResize();
      }
    } else {
      if (this._repaintWidthFlag) {
        a.style.width = "";
      }
      var c = 0;
      if (!!this._masterClientID && b != null) {
        c = b.get_element().offsetWidth;
      }
      if (a.offsetWidth < c) {
        a.style.width = c + "px";
        this._repaintWidthFlag = true;
      }
    }
    if (this._masterClientID && b && b._virtualization) {
      b._virtualization.repaint();
    }
    if (
      this._isBatchEditingEnabled &&
      this._rowHighlightingForDeletedRows &&
      this.get_batchEditingManager()
    ) {
      this.get_batchEditingManager()._adjustBatchDeletedRows();
    }
  },
  onWindowResize: function () {
    this.resizeModalBackground();
  },
  resizeModalBackground: function () {
    var d = String.format("modalDivId_{0}", this.get_id());
    var c = $get(d);
    if (c) {
      c.style.width = "1px";
      c.style.height = "1px";
      var b = document.documentElement;
      var a = document.body;
      c.style.width =
        Math.max(
          Math.max(b.scrollWidth, a.scrollWidth),
          Math.max(b.offsetWidth, a.offsetWidth)
        ) + "px";
      c.style.height =
        Math.max(
          Math.max(b.scrollHeight, a.scrollHeight),
          Math.max(b.offsetHeight, a.offsetHeight)
        ) + "px";
    }
  },
  _popUpKeyDown: function (b) {
    var d = b.keyCode || b.charCode;
    if (b.charCode) {
      d = String.fromCharCode(b.charCode).toUpperCase().charCodeAt(0);
    }
    var c = d == this.keyMappings.ExitEditInsertModeKey;
    var i = d == this.keyMappings.UpdateInsertItemKey;
    var h = Telerik.Web.UI.Grid.GetFirstParentByTagName(this.popUpForm, "tr")
      .previousSibling;
    if (h.id == "") {
      return;
    }
    var g = h.id.split("__")[0];
    var f = $find(g);
    if (!f) {
      return;
    }
    if (!f.get_owner()._canHandleKeyboardAction(b)) {
      return;
    }
    var a;
    if (c) {
      a = new Telerik.Web.UI.GridKeyPressEventArgs(b);
      f.get_owner().raise_keyPress(a);
      if (!a.get_cancel()) {
        f.cancelUpdate(h);
      }
      b.preventDefault();
      b.stopPropagation();
    } else {
      if (i) {
        a = new Telerik.Web.UI.GridKeyPressEventArgs(b);
        f.get_owner().raise_keyPress(a);
        if (!a.get_cancel()) {
          f.updateItem(h);
        }
        b.preventDefault();
        b.stopPropagation();
      }
    }
  },
  _popUpMouseDown: function (a) {
    this.canMove = true;
    this.originalLeft = this.offsetLeft - a.clientX;
    this.originalTop = this.offsetTop - a.clientY;
    if (
      !(
        $telerik.isFirefox &&
        a.button == 2 &&
        navigator.userAgent.indexOf("Mac")
      )
    ) {
      Telerik.Web.UI.Grid.ClearDocumentEvents();
    }
    return false;
  },
  _popUpMouseOut: function (a) {
    if (!this.canMove) {
      return;
    }
    var b;
    if (a.rawEvent.relatedTarget) {
      b = a.rawEvent.relatedTarget;
    } else {
      b = a.rawEvent.toElement;
    }
    if (!b) {
      this.canMove = false;
      Telerik.Web.UI.Grid.RestoreDocumentEvents();
    }
    return false;
  },
  _popUpMouseUp: function (b) {
    if (!this.canMove) {
      return;
    }
    this.canMove = false;
    var a = this.getElementsByTagName("div")[0];
    var d = a.id;
    var g = d.split("__")[0];
    var f = $find(g);
    if (f) {
      var c = f._owner;
      c._popUpLocations[d] =
        parseInt(this.style.left, 10) +
        "px," +
        parseInt(this.style.top, 10) +
        "px";
      c.updateClientState();
      c.resizeModalBackground();
    }
    Telerik.Web.UI.Grid.RestoreDocumentEvents();
  },
  _popUpMouseMove: function (a) {
    if (this.canMove) {
      this.style.left = a.clientX + this.originalLeft + "px";
      this.style.top = a.clientY + this.originalTop + "px";
      return false;
    }
  },
  _isRowDragged: function (a) {
    return $get(String.format("{0}_DraggedRows", this.get_id())) != null;
  },
  _mouseDown: function (d) {
    if (
      !$telerik.isTouchDevice &&
      d.rawEvent.button != Sys.UI.MouseButton.leftButton &&
      this._draggedRow
    ) {
      if (!this.get_masterTableView()) {
        this._clearDrag();
        return;
      }
      this._draggedRow.parentNode.removeChild(this._draggedRow);
      this._draggedRow = null;
      this._clearDrag();
      return;
    }
    var s;
    if ($telerik.isTouchDevice) {
      s = $telerik.getTouchTarget(d);
      if (
        s.tagName &&
        s.tagName.toLowerCase() == "td" &&
        this.get_events().getHandler("rowDblClick")
      ) {
        $telerik.cancelRawEvent(d);
      }
    } else {
      s = Telerik.Web.UI.Grid.GetCurrentElement(d);
    }
    var k = s.id && s.id.indexOf("RowDragHandle") > -1;
    if (
      this.ClientSettings.Scrolling.AllowScroll &&
      $telerik.isTouchDevice &&
      this.ClientSettings.AllowRowsDragDrop &&
      !k &&
      s.tagName.toLowerCase() == "td" &&
      Telerik.Web.UI.Grid.IsChildOf(s, this.GridDataDiv)
    ) {
      return $telerik.cancelRawEvent();
    }
    var p = Telerik.Web.UI.Grid.GetFirstParentByTagName(s, "tr");
    if (!p || p.id == "") {
      return;
    }
    var l = this.get_masterTableView()._getRowByIndexOrItemIndexHierarchical(p);
    var o = l.id.split("__")[0];
    var n = $find(o);
    if (!n || (n._data._useDragColumn && !k)) {
      return;
    }
    if (
      (!this._canRiseRowEvent(d) && !k) ||
      (this._isRowResize && this._isRowResize == true)
    ) {
      return;
    }
    if (
      this._selectedIndexes.length == 0 &&
      this.get_allowMultiRowSelection() &&
      this.ClientSettings.Selecting.EnableDragToSelectRows &&
      !k
    ) {
      return;
    }
    if (
      this.get_allowMultiRowSelection() &&
      (d.ctrlKey || (d.rawEvent && d.rawEvent.metaKey))
    ) {
      return;
    }
    if (this._draggedItems) {
      this._draggedItems = [];
    }
    var g = false;
    var j;
    for (j = 0; j < this._selectedItemsInternal.length; j++) {
      if (this._selectedItemsInternal[j].id == p.id) {
        g = true;
        break;
      }
    }
    if (!g) {
      var m =
        this.get_allowMultiRowSelection() &&
        !this.ClientSettings.Selecting.EnableDragToSelectRows;
      if (
        Telerik.Web.UI.GridSelection &&
        this._selection &&
        (m || !this.get_allowMultiRowSelection() || k)
      ) {
        var f = this.ClientSettings.EnablePostBackOnRowClick;
        this.ClientSettings.EnablePostBackOnRowClick = false;
        this._selection._click(d);
        this.ClientSettings.EnablePostBackOnRowClick = f;
        if (
          this._selectedItemsInternal.length == 0 ||
          this._selectedItemsInternal[0].id != p.id
        ) {
          return;
        }
      } else {
        return;
      }
    }
    this._canMoveRow = true;
    this._originalDragItem = p;
    var a = new Telerik.Web.UI.GridDataItemCancelEventArgs(p, d);
    this.raise_rowDragStarted(a);
    if (a.get_cancel()) {
      return;
    }
    this._draggedRow = document.createElement("div");
    this._draggedRow.id = String.format("{0}_DraggedRows", this.get_id());
    this._draggedRow.style.position = "absolute";
    this._draggedRow.className = this.get_element().className;
    var b = [];
    var q = n.get_selectedItems();
    for (j = 0; j < q.length; j++) {
      if (Array.contains(n.get_dataItems(), q[j])) {
        var c = q[j].get_element();
        if (this.get_enableAriaSupport()) {
          c.removeAttribute("aria-dropeffect");
          c.setAttribute("aria-grabbed", "true");
        }
        b[b.length] = String.format("<tr class='{0}'>", c.className);
        b[b.length] = c.innerHTML;
        b[b.length] = "</tr>";
        Array.add(this._draggedItems, q[j]);
      }
    }
    var h = p.parentNode.parentNode;
    this._draggedRow.innerHTML = String.format(
      "<table class='{0}'>{1}<tbody>{2}</tbody></table>",
      h.className,
      h.getElementsByTagName("colgroup")[0].outerHTML,
      b.join("")
    );
    var r = this._draggedRow.getElementsByTagName("table")[0];
    if (this._draggedRow.mergeAttributes) {
      this._draggedRow.mergeAttributes(this.get_element());
    } else {
      Telerik.Web.UI.Grid.CopyAttributes(this._draggedRow, this.get_element());
    }
    this._draggedRow.className += String.format(
      " GridDraggedRows GridDraggedRows_{0}",
      this.Skin
    );
    this._draggedRow.style.height = "";
    if (r.mergeAttributes) {
      r.mergeAttributes(h);
    } else {
      Telerik.Web.UI.Grid.CopyAttributes(r, h);
    }
    r.style.height = "";
    r.style.margin = "";
    this._draggedRow.style.zIndex = 99999;
    this._draggedRow.style.display = "none";
    this._draggedRow.style.width = this.get_element().offsetWidth + "px";
    document.body.insertBefore(this._draggedRow, document.body.firstChild);
    this._createDropClue();
    if (
      !(
        $telerik.isFirefox &&
        d.button == 2 &&
        navigator.userAgent.indexOf("Mac")
      )
    ) {
      Telerik.Web.UI.Grid.ClearDocumentEvents();
    }
    return false;
  },
  _createDropClue: function () {
    this._dropClue = document.createElement("div");
    document.body.appendChild(this._dropClue);
    this._dropClue.style.position = "absolute";
    this._dropClue.style.height = "5px";
  },
  _positionDropClue: function (c) {
    if (this._dropClue == c.target) {
      return;
    }
    if (!this.get_masterTableView()) {
      return;
    }
    var a;
    if ($telerik.isTouchDevice) {
      a = $telerik.getTouchTarget(c);
    } else {
      a = Telerik.Web.UI.Grid.GetCurrentElement(c);
    }
    var b = null;
    if (a) {
      var i = Telerik.Web.UI.Grid.GetFirstParentByTagName(a, "tr");
      if (i && i.id != "") {
        var h = this._getParentRadGridControl(a);
        if (Telerik.Web.UI.Grid.IsChildOf(a, this.get_element())) {
          if (i != this._originalDragItem) {
            b = this.get_masterTableView()._getRowByIndexOrItemIndexHierarchical(
              i
            );
          }
        } else {
          if (h) {
            if (!h.get_masterTableView()) {
              return;
            }
            i = Telerik.Web.UI.Grid.GetFirstParentByTagName(a, "tr");
            b = h
              .get_masterTableView()
              ._getRowByIndexOrItemIndexHierarchical(i);
          }
        }
      } else {
        if (i && i.className && i.className.indexOf("rgNoRecords") != -1) {
          b = i;
        }
      }
    }
    if (!b) {
      if (!$telerik.isDescendantOrSelf(this._draggedRow, a)) {
        this._dropClue.style.visibility = "hidden";
      }
      return;
    }
    this._dropClue.row = b;
    this._dropClue.style.width = b.offsetWidth + "px";
    var g = b;
    var d = $telerik.getLocation(g);
    this._dropClue.style.left = d.x + "px";
    var f;
    if ($telerik.isTouchDevice) {
      f = $telerik.getTouchEventLocation(c);
    } else {
      f = this._getMousePosition(c);
    }
    this._dropClue.style.display = "";
    this._dropClue.style.visibility = "visible";
    if (f.y < d.y + g.offsetHeight / 2) {
      this._dropClue.style.top = d.y + "px";
      if (this.Skin != "") {
        this._dropClue.className = String.format(
          "GridItemDropIndicator GridItemDropIndicator_{0}",
          this.Skin
        );
      } else {
        this._dropClue.style.borderTop = "1px dotted black";
        this._dropClue.style["font-size"] = "3px";
        this._dropClue.style["line-height"] = "3px";
        this._dropClue.style.height = "1px";
        this._dropClue.className = "GridItemDropIndicator";
      }
      this._draggingPosition = "above";
    } else {
      this._dropClue.style.top = d.y + g.offsetHeight + "px";
      if (this.Skin != "") {
        this._dropClue.className = String.format(
          "GridItemDropIndicator GridItemDropIndicator_{0}",
          this.Skin
        );
      } else {
        this._dropClue.style.borderTop = "1px dotted black";
        this._dropClue.style["font-size"] = "3px";
        this._dropClue.style["line-height"] = "3px";
        this._dropClue.style.height = "1px";
        this._dropClue.className = "GridItemDropIndicator";
      }
      this._draggingPosition = "below";
    }
  },
  _getMousePosition: function (a) {
    var d = $telerik.getScrollOffset(document.body, true);
    var b = a.clientX;
    var c = a.clientY;
    b += d.x;
    c += d.y;
    return { x: b, y: c };
  },
  _mouseUp: function (m) {
    this._canMoveRow = false;
    var q;
    var t;
    var w;
    var a = null;
    var h;
    if (this._draggedRow) {
      if (!this.get_masterTableView()) {
        this._clearDrag();
        return;
      }
      this._draggedRow.parentNode.removeChild(this._draggedRow);
      this._draggedRow = null;
      var c;
      if ($telerik.isTouchDevice) {
        c = $telerik.getTouchTarget(m);
      } else {
        c = Telerik.Web.UI.Grid.GetCurrentElement(m);
      }
      if (c) {
        if (c == this._dropClue) {
          c = this._dropClue.row;
        } else {
          if (c.id && c.id.indexOf("_GridData") != -1) {
            var F = $find(c.id.replace("_GridData", ""));
            if (F && Object.getType(F).getName() == "Telerik.Web.UI.RadGrid") {
              var x = F.get_masterTableView().get_element().rows;
              if (x.length > 0) {
                c = x[x.length - 1].cells[0];
                this._draggingPosition = "below";
              }
            }
          }
        }
        h = this._draggedItems;
        var C = Telerik.Web.UI.Grid.GetFirstParentByTagName(c, "tr");
        var B = this._draggingPosition;
        if (C && C.id == "") {
          C = null;
          B = null;
        }
        var o = new Telerik.Web.UI.GridDragDropCancelEventArgs(
          C,
          m,
          h,
          c,
          null,
          B
        );
        this.raise_rowDropping(o);
        if (!o.get_cancel()) {
          if (C == this._originalDragItem) {
            if (this.get_enableAriaSupport()) {
              for (t = 0; t < h.length; t++) {
                var l = h[t].get_element();
                l.removeAttribute("aria-grabbed");
                l.setAttribute("aria-dropeffect", "move");
              }
            }
            this._clearDrag();
            this.raise_rowDropped(o);
            return;
          }
          var b;
          var A = this._getParentRadGridControl(c);
          if (A) {
            var D = Telerik.Web.UI.Grid.GetFirstParentByTagName(c, "tr");
            if (!D || D == this._originalDragItem || !A.get_masterTableView()) {
              this._clearDrag();
              return;
            }
            var d = D;
            var y = A.get_masterTableView()._data.UniqueID;
            if (D.id != "") {
              d = A.get_masterTableView()._getRowByIndexOrItemIndexHierarchical(
                D
              );
              var g = $find(d.id.split("__")[0]);
              if (g) {
                y = g._data.UniqueID;
              }
            } else {
              var n = false;
              if (A.get_masterTableView().get_element().tBodies.length > 0) {
                for (
                  t = 0,
                    w = A.get_masterTableView().get_element().tBodies[0].rows
                      .length;
                  t < w;
                  t++
                ) {
                  if (
                    D ==
                    A.get_masterTableView().get_element().tBodies[0].rows[t]
                  ) {
                    n = true;
                    break;
                  }
                  var s = A.get_masterTableView()
                    .get_element()
                    .tBodies[0].rows[t].getElementsByTagName("table");
                  for (var u = 0, v = s.length; u < v; u++) {
                    if (s[u] && this._isChildRowElement(D, s[u])) {
                      var E = $find(s[u].id);
                      if (E) {
                        y = E._data.UniqueID;
                      }
                      n = true;
                      break;
                    }
                  }
                  if (n) {
                    break;
                  }
                }
              }
              if (!n) {
                return;
              }
            }
            h = this._draggedItems;
            a = null;
            if (d.id != "") {
              a = new Telerik.Web.UI.GridDragDropCancelEventArgs(
                d,
                m,
                h,
                null,
                A,
                this._draggingPosition
              );
            } else {
              var z = Telerik.Web.UI.Grid.GetFirstParentRowWithID(d);
              if (z != null && z.id != "") {
                d = z;
                a = new Telerik.Web.UI.GridDragDropCancelEventArgs(
                  d,
                  m,
                  h,
                  null,
                  A,
                  this._draggingPosition
                );
              } else {
                a = new Telerik.Web.UI.GridDragDropCancelEventArgs(
                  null,
                  m,
                  h,
                  null,
                  A,
                  this._draggingPosition
                );
              }
            }
            this.raise_rowDropped(a);
            this._draggedItemsIndexes = [];
            for (q = 0; q < h.length; q++) {
              Array.add(this._draggedItemsIndexes, h[q]._itemIndexHierarchical);
            }
            this.updateClientState();
            var f = d.id.split("__")[1];
            b = String.format(
              "{0},{1},{2},{3}",
              f,
              A.UniqueID,
              this._draggingPosition,
              y
            );
            this.get_masterTableView().fireCommand("RowDropped", b);
          } else {
            var p = o.get_destinationHtmlElement();
            h = this._draggedItems;
            a = new Telerik.Web.UI.GridDragDropCancelEventArgs(
              null,
              m,
              h,
              p,
              null,
              null
            );
            this.raise_rowDropped(a);
            this._draggedItemsIndexes = [];
            for (q = 0; q < h.length; q++) {
              Array.add(this._draggedItemsIndexes, h[q]._itemIndexHierarchical);
            }
            this.updateClientState();
            if (p.id) {
              b = String.format("{0},{1},{2},{3}", p.id, "", "", "");
            }
            this.get_masterTableView().fireCommand("RowDroppedHtml", b);
          }
        }
      }
      Telerik.Web.UI.Grid.RestoreDocumentEvents();
    }
    this._clearDrag();
  },
  _clearDrag: function () {
    if (this._dropClue) {
      document.body.removeChild(this._dropClue);
      this._dropClue = null;
    }
    if (this._draggedItems) {
      this._draggedItems = [];
    }
    this._draggingPosition = "above";
    Telerik.Web.UI.Grid.RestoreDocumentEvents();
  },
  _isChildRowElement: function (c, d) {
    for (var a = 0, b = d.tBodies[0].rows.length; a < b; a++) {
      if (c == d.tBodies[0].rows[a]) {
        return true;
      }
    }
    return false;
  },
  _getParentRadGridControl: function (b) {
    while (b) {
      if (b.id && b.id != "") {
        try {
          var c = $find(b.id);
          if (c && Object.getType(c).getName() == "Telerik.Web.UI.RadGrid") {
            return c;
          }
        } catch (a) {}
      }
      b = b.parentNode;
    }
    return null;
  },
  _cancelEvent: function (a) {
    return false;
  },
  _mouseMove: function (b) {
    if (this._canMoveRow && this._draggedRow) {
      var a = new Sys.EventArgs();
      a.get_domEvent = function () {
        return b;
      };
      this.raise_rowDragging(a);
      this._draggedRow.style.display = "";
      this._draggedRow.style.position = "absolute";
      Telerik.Web.UI.Grid.PositionDragElement(this._draggedRow, b);
      this._positionDropClue(b);
      if (
        this.ClientSettings.Scrolling.AllowScroll &&
        this.GridDataDiv &&
        this.ClientSettings.AllowAutoScrollOnDragDrop
      ) {
        this._autoScroll();
      }
      if ($telerik.isTouchDevice) {
        $telerik.cancelRawEvent(b);
      }
      return false;
    }
  },
  _autoScroll: function () {
    var j, a;
    var d = this.GridDataDiv;
    if (!this._draggedRow || !this.GridDataDiv) {
      return;
    }
    var b = $telerik.getLocation(this._draggedRow);
    j = $telerik.getLocation(d).y;
    a = j + d.offsetHeight;
    var h = d.scrollTop <= 0;
    var g = d.scrollTop >= d.scrollHeight - d.offsetHeight + 16;
    var f = b.y - j;
    var e = a - b.y;
    var c = this;
    var i;
    if (f < 50 && !h) {
      i = 10 - f / 5;
      d.scrollTop = d.scrollTop - i;
      window.setTimeout(function () {
        c._autoScroll();
      }, 100);
    } else {
      if (e < 50 && !g) {
        i = 10 - e / 5;
        d.scrollTop = d.scrollTop + i;
        window.setTimeout(function () {
          c._autoScroll(this._mousePos);
        }, 100);
      }
    }
  },
  _fillSelectedCellsIndexes: function () {
    if (this._selectedCellsInternal.length > 0) {
      var a = null;
      for (var b = 0; b < this._selectedCellsInternal.length; b++) {
        a = this._selectedCellsInternal[b].cellIndex;
        if (!Array.contains(this._selectedCellsIndexes, a)) {
          Array.add(this._selectedCellsIndexes, a);
        }
      }
    }
  },
  _fillUnselectableItemsIndexes: function () {
    var c = this._unselectableItemsInternal;
    if (c.length > 0) {
      var a = null;
      for (var b = 0, d = c.length; b < d; b++) {
        a = c[b].itemIndex;
        if (!Array.contains(c, a)) {
          Array.add(this._unselectableItemsIndexes, a);
        }
      }
    }
  },
  dispose: function () {
    var k = $get(String.format("modalDivId_{0}", this.get_id()));
    var j = false;
    if (k) {
      j = true;
      k.parentNode.removeChild(k);
    }
    if (this._onResizeDelegate) {
      try {
        window.$removeHandler(window, "resize", this._onResizeDelegate);
        this._onResizeDelegate = null;
      } catch (d) {}
    }
    if (
      this._isBatchEditingEnabled &&
      this._rowHighlightingForDeletedRows &&
      this._onBatchRowDeleteDelegate
    ) {
      window.$removeHandler(window, "resize", this._onBatchRowDeleteDelegate);
      this._onBatchRowDeleteDelegate = null;
    }
    if (this._gridItemResizer) {
      this._gridItemResizer.dispose();
    }
    if (this._popUpIds && this._popUpIds != "") {
      var a = eval(this._popUpIds);
      for (var h = 0; h < a.length; h++) {
        var f = $get(a[h]);
        if (f) {
          if (this.get_enableAriaSupport() && j) {
            var c = "_preventDefaultButton_" + this.get_id();
            if (theForm.firstChild.name == c) {
              window.theForm.removeChild(theForm.firstChild);
            }
            f.removeEventListener(
              "blur",
              this._modalPopupEditFormBlurHandler,
              true
            );
          }
          var b = f.getElementsByTagName("div");
          if (b.length > 0) {
            window.$clearHandlers(b[0]);
          }
        }
      }
    }
    this.raise_gridDestroying(new Sys.EventArgs());
    if (
      this._filterCheckListClientID &&
      this._checkListItemsRequestedDelegate
    ) {
      var g = $find(this._filterCheckListClientID);
      if (g) {
        g.remove_itemsRequested(this._checkListItemsRequestedDelegate);
        this._checkListItemsRequestedDelegate = null;
      }
    }
    this._detachDomEvents();
    window.$clearHandlers(this.get_element());
    this._events = null;
    if (this._batchEditing) {
      this._batchEditing.dispose();
    }
    if (this._selection) {
      this._selection.dispose();
    }
    if (this._scrolling) {
      this._scrolling.dispose();
    }
    if (this._clientSideBinding) {
      this._clientSideBinding.dispose();
      this._clientSideBinding = null;
    }
    if (this._filterMenu) {
      if (this._onFilterMenuClick) {
        this._filterMenu.remove_itemClicked(this._onFilterMenuClicking);
        this._filterMenu.remove_itemClicked(this._onFilterMenuClick);
        this._filterMenu.remove_hidden(this._onFilterMenuHiddenDelegate);
        this._onFilterMenuHiddenDelegate = null;
      }
      if (this._onFilterMenuShown) {
        this._filterMenu.remove_expandAnimationEnded(this._onFilterMenuShown);
        this._onFilterMenuShown = null;
      }
      this._filterMenu = null;
    }
    if (this._headerContextMenu) {
      this._headerContextMenu = null;
    }
    if (Sys.WebForms && Sys.WebForms.PageRequestManager) {
      var l = Sys.WebForms.PageRequestManager.getInstance();
      if (l && this._initializeRequestHandler) {
        l.remove_initializeRequest(this._initializeRequestHandler);
      }
    }
    this._initializeRequestHandler = null;
    if (this.GridDataDiv) {
      window.$clearHandlers(this.GridDataDiv);
    }
    if (this.GridHeaderDiv) {
      window.$clearHandlers(this.GridHeaderDiv);
    }
    if (this.GridFooterDiv) {
      window.$clearHandlers(this.GridFooterDiv);
    }
    if (this._groupPanel && this._groupPanel.get_element()) {
      window.$clearHandlers(this._groupPanel.get_element());
    }
    this._draggedItems = null;
    this.Control = null;
    this.GridDataDiv = null;
    this.GridHeaderDiv = null;
    this.GridFooterDiv = null;
    this.PagerControl = null;
    this.TopPagerControl = null;
    this.MasterTableView = null;
    this.MasterTableViewHeader = null;
    this.MasterTableViewFooter = null;
    this._hidedColumns = [];
    this._showedColumns = [];
    if (this.get_isUsingODataSource()) {
      this._flatBinder._source.remove_requestSucceeded(
        this._oDataRequestSucceededDelegate
      );
      this._oDataRequestSucceededDelegate = null;
    }
    if (
      this.ClientSettings.AllowKeyboardNavigation &&
      this._documentKeyDownDelegate
    ) {
      $telerik.removeExternalHandler(
        document,
        "keydown",
        this._documentKeyDownDelegate
      );
      this._documentKeyDownDelegate = null;
    }
    if (this.ClientSettings.AllowRowsDragDrop) {
      if ($telerik.isTouchDevice) {
        $telerik.removeMobileHandler(
          this.get_element(),
          "mousedown",
          this._onMouseDownDelegate
        );
        this._onMouseDownDelegate = null;
      }
      $telerik.removeMobileHandler(
        document,
        "mouseup",
        this._documentMouseUpDelegate,
        null,
        true
      );
      this._documentMouseUpDelegate = null;
      $telerik.removeMobileHandler(
        document,
        "mousemove",
        this._documentMouseMoveDelegate,
        null,
        true
      );
      this._documentMouseMoveDelegate = null;
    }
    if (
      !this.ClientSettings.AllowRowsDragDrop &&
      this._documentMouseUpDelegate &&
      $telerik.isTouchDevice
    ) {
      $telerik.removeMobileHandler(
        document,
        "mouseup",
        this._documentMouseUpDelegate,
        null,
        true
      );
      this._documentMouseUpDelegate = null;
    }
    if (this.ClientSettings.Scrolling.AllowScroll && $telerik.isTouchDevice) {
      $telerik.removeMobileHandler(
        this.GridDataDiv,
        "mousedown",
        this._dataDivMouseDownDelegate
      );
      this._dataDivMouseDownDelegate = null;
      $telerik.removeMobileHandler(
        this.GridDataDiv,
        "mouseup",
        this._dataDivMouseUpDelegate
      );
      this._dataDivMouseUpDelegate = null;
      $telerik.removeMobileHandler(
        this.GridDataDiv,
        "mousemove",
        this._dataDivMouseMoveDelegate
      );
      this._dataDivMouseMoveDelegate = null;
    }
    if ($telerik.isTouchDevice) {
      $telerik.removeMobileHandler(
        this.GridDataDiv,
        "mousedown",
        this._swipeStartDelegate
      );
      this._swipeStartDelegate = null;
      $telerik.removeMobileHandler(
        this.GridDataDiv,
        "mouseup",
        this._swipeEndDelegate
      );
      this._swipeEndDelegate = null;
      $telerik.removeMobileHandler(
        this.GridDataDiv,
        "mousemove",
        this._swipeMoveDelegate
      );
      this._swipeMoveDelegate = null;
    }
    window[this.ClientID] = null;
    Telerik.Web.UI.RadGrid.callBaseMethod(this, "dispose");
  },
  _initializeRequest: function (g, a) {
    var f = a.get_postBackElement();
    if (
      a.get_postBackElement() == this.get_element() ||
      Telerik.Web.UI.Grid.IsChildOf(f, this.get_element())
    ) {
      if (this._statusLabelID) {
        var j = ["rgExpXLS", "rgExpDOC", "rgExpPDF", "rgExpCSV"];
        var h = true;
        var b = f.className;
        for (var c = 0, e = j.length; c < e; c++) {
          if (b.indexOf(j[c]) != -1) {
            h = false;
            break;
          }
        }
        if (h) {
          var d = $get(this._statusLabelID);
          if (d) {
            d.title = this._loadingText;
            d.style.visibility = "visible";
          }
        }
      }
      this._isAjaxRequest = true;
    }
  },
  _initializeODataSourceBinder: function () {
    var d = this,
      b = d.get_odataClientSettings().ODataSourceID,
      a = $find(b);
    if (!a) {
      var c = String.format(
        "DataSource with id {0} was not found on the page",
        b
      );
      alert(c);
    } else {
      d._flatBinder = new Telerik.Web.UI.RadODataDataSource.Binder.Flat(a, d);
      d._flatBinder.initialize();
      d._oDataRequestSucceededDelegate = Function.createDelegate(
        d,
        d._onODataRequestSucceeded
      );
      a.add_requestSucceeded(d._oDataRequestSucceededDelegate);
      d._onDataNeeded();
    }
  },
  _onDataNeeded: function (f) {
    var e = {
      events: {
        fail: function (i) {
          this._onFail(i);
        },
      },
    };
    var a = {};
    a.filter = {};
    a.filter.filters = [];
    var c = this.get_masterTableView().get_filterExpressions();
    var b;
    var d;
    for (d = 0; d < c.get_count(); d++) {
      b = c.getItem(d);
      var h = b.get_fieldValue();
      var j = [];
      if (h.split) {
        j = h.split(" ");
      }
      if (b.FilterFunction == "Between") {
        b.set_filterFunction("GreaterThanOrEqualTo");
        b.set_fieldValue(j[0]);
        a.filter.filters.push(this._convertToODataFilterExprJson(b));
        b.set_filterFunction("LessThanOrEqualTo");
        b.set_fieldValue(j[1]);
        a.filter.filters.push(this._convertToODataFilterExprJson(b));
      } else {
        if (b.FilterFunction == "NotBetween") {
          b.set_filterFunction("LessThanOrEqualTo");
          b.set_fieldValue(j[0]);
          a.filter.filters.push(this._convertToODataFilterExprJson(b));
          b.set_filterFunction("GreaterThanOrEqualTo");
          b.set_fieldValue(j[1]);
          a.filter.filters.push(this._convertToODataFilterExprJson(b));
          a.filter.logic = "or";
        } else {
          if (b.FilterFunction == "DoesNotContain") {
            return;
          } else {
            a.filter.filters.push(this._convertToODataFilterExprJson(b));
          }
        }
      }
    }
    var g = this.get_masterTableView().get_sortExpressions();
    a.sort = [];
    for (d = 0; d < g.get_count(); d++) {
      b = g.getItem(d);
      a.sort.push({
        field: b.FieldName,
        dir: b.SortOrder == 1 ? "asc" : "desc",
      });
    }
    a.page = this.get_masterTableView().get_currentPageIndex();
    a.pageSize = this.get_masterTableView().get_pageSize();
    if (e != undefined) {
      e.data = a;
      this._flatBinder.fetch(e);
    } else {
      this._flatBinder.fetch();
    }
  },
  _onODataRequestSucceeded: function (e, b) {
    var g = this.get_masterTableView();
    if (this.ClientSettings.DataBinding.EnableCaching) {
      var f = this._getCacheKey(g);
      if (!this._cache) {
        this._cache = {};
      }
      if (!this._cache[f]) {
        this._cache[f] = b;
      }
    }
    var d = b.get_data();
    var c = b.get_count();
    var a = new Telerik.Web.UI.GridDataSourceResolvedEventArgs(d);
    g.set_virtualItemCount(c);
    this.raise_dataSourceResolved(a);
    if (g.get_virtualItemCount() == 0) {
      g._updatePager();
    }
    g.set_dataSource(d);
    g.dataBind();
  },
  _convertToODataFilterExprJson: function (a) {
    var c = {},
      b = a.get_fieldName();
    switch (a.FilterFunction) {
      case "EqualTo":
        c = this._getODataFilterExpressionJson(b, "eq", a.FieldValue);
        break;
      case "NotEqualTo":
        c = this._getODataFilterExpressionJson(b, "neq", a.FieldValue);
        break;
      case "GreaterThan":
        c = this._getODataFilterExpressionJson(b, "gt", a.FieldValue);
        break;
      case "LessThan":
        c = this._getODataFilterExpressionJson(b, "lt", a.FieldValue);
        break;
      case "GreaterThanOrEqualTo":
        c = this._getODataFilterExpressionJson(b, "gte", a.FieldValue);
        break;
      case "LessThanOrEqualTo":
        c = this._getODataFilterExpressionJson(b, "lte", a.FieldValue);
        break;
      case "StartsWith":
        c = this._getODataFilterExpressionJson(b, "startswith", a.FieldValue);
        break;
      case "EndsWith":
        c = this._getODataFilterExpressionJson(b, "endswith", a.FieldValue);
        break;
      case "Contains":
        c = this._getODataFilterExpressionJson(b, "contains", a.FieldValue);
        break;
      case "Between":
        c = this._getODataFilterExpressionJson(b, "contains", a.FieldValue);
        break;
      case "IsEmpty":
        c = this._getODataFilterExpressionJson(b, "eq", "");
        break;
      case "NotIsEmpty":
        c = this._getODataFilterExpressionJson(b, "neq", "");
        break;
      case "IsNull":
        c = this._getODataFilterExpressionJson(b, "eq", null);
        break;
      case "NotIsNull":
        c = this._getODataFilterExpressionJson(b, "neq", null);
        break;
    }
    return c;
  },
  _getODataFilterExpressionJson: function (b, a, c) {
    return { field: b, operator: a, value: c };
  },
  get_flatModel: function () {
    var b = this.get_odataClientSettings();
    var a = Telerik.Web.UI.RadODataDataSource.Binder.Flat.Model(b);
    a.parse = function (c) {
      return c;
    };
    return a;
  },
  get_allowActiveRowCycle: function () {
    return this.ClientSettings.KeyboardNavigationSettings.AllowActiveRowCycle;
  },
  set_allowActiveRowCycle: function (a) {
    this.ClientSettings.KeyboardNavigationSettings.AllowActiveRowCycle = a;
  },
  get_odataClientSettings: function () {
    return this._odataClientSettings;
  },
  set_odataClientSettings: function (a) {
    this._odataClientSettings = a;
  },
  get_isUsingODataSource: function () {
    return this._odataClientSettings != null;
  },
  get_selectedCellsIndexes: function () {
    return this._selectedCellsIndexes;
  },
  get_selectedItemsInternal: function () {
    return this._selectedItemsInternal;
  },
  set_selectedItemsInternal: function (a) {
    if (this._selectedItemsInternal != a) {
      this._selectedItemsInternal = a;
    }
  },
  get_expandItems: function () {
    return this._expandItems;
  },
  set_expandItems: function (a) {
    if (this._expandItems != a) {
      this._expandItems = a;
    }
  },
  get_hidedColumns: function () {
    return this._hidedColumns;
  },
  set_hidedColumns: function (a) {
    if (this._hidedColumns != a) {
      this._hidedColumns = a;
      this.updateClientState();
    }
  },
  get_showedColumns: function () {
    return this._showedColumns;
  },
  set_showedColumns: function (a) {
    if (this._showedColumns != a) {
      this._showedColumns = a;
      this.updateClientState();
    }
  },
  get_groupColsState: function () {
    return this._groupColsState;
  },
  set_groupColsState: function (a) {
    if (this._groupColsState != a) {
      this._groupColsState = a;
      this.updateClientState();
    }
  },
  get_hierarchyColsExpandedState: function () {
    return this._hierarchyColsExpandedState;
  },
  set_hierarchyColsExpandedState: function (a) {
    if (this._hierarchyColsExpandedState != a) {
      this._hierarchyColsExpandedState = a;
      this.updateClientState();
    }
  },
  get_selectedCellsInternal: function () {
    return this._selectedCellsInternal;
  },
  set_selectedCellsInternal: function (a) {
    if (this._selectedCellsInternal != a) {
      this._selectedCellsInternal = a;
    }
  },
  get_unselectableItemsInternal: function () {
    return this._unselectableItemsInternal;
  },
  set_unselectableItemsInternal: function (a) {
    if (this._unselectableItemsInternal != a) {
      this._unselectableItemsInternal = a;
    }
  },
  get_allowCellSelection: function () {
    return (
      this.ClientSettings.Selecting.CellSelectionMode >
      Telerik.Web.UI.GridCellSelectionMode.None
    );
  },
  get_allowMutliCellSelection: function () {
    return (
      this.ClientSettings.Selecting.CellSelectionMode >
      Telerik.Web.UI.GridCellSelectionMode.SingleCell
    );
  },
  get_allowColumnSelection: function () {
    return (
      this.ClientSettings.Selecting.CellSelectionMode >
      Telerik.Web.UI.GridCellSelectionMode.MultiCell
    );
  },
  get_allowMultiColumnSelection: function () {
    return (
      this.ClientSettings.Selecting.CellSelectionMode >
      Telerik.Web.UI.GridCellSelectionMode.Column
    );
  },
  get_allowMultiRowSelection: function () {
    return this.AllowMultiRowSelection;
  },
  set_allowMultiRowSelection: function (a) {
    if (this.AllowMultiRowSelection != a) {
      this.AllowMultiRowSelection = a;
    }
  },
  get_masterTableView: function () {
    return $find(this._masterClientID);
  },
  get_masterTableViewHeader: function () {
    return $find(this._masterClientID + "_Header");
  },
  get_masterTableViewFooter: function () {
    return $find(this._masterClientID + "_Footer");
  },
  get_selectedItems: function () {
    var b = [];
    for (var a = 0; a < this._selectedItemsInternal.length; a++) {
      Array.add(b, this._getRow(this._selectedItemsInternal[a].id));
    }
    return b;
  },
  get_editIndexes: function () {
    return this._editIndexes;
  },
  get_editItems: function () {
    var a = [];
    var h = this.get_masterTableView();
    function b(k, i) {
      var j = document.getElementById(k.get_id() + "__" + i);
      if (j) {
        k.get_dataItems();
        return $find(j.id);
      }
      return null;
    }
    var e;
    for (var c = 0, g = this._editIndexes.length; c < g; c++) {
      var d = this._editIndexes[c];
      if (d.indexOf(":") > -1) {
        for (var f = 0; f < this._detailTables.length; f++) {
          e = b(this._detailTables[f], d);
          if (e) {
            a[a.length] = e;
            break;
          }
        }
      } else {
        e = b(h, d);
        if (e) {
          a[a.length] = e;
        }
      }
    }
    return a;
  },
  get_batchEditingManager: function () {
    return this._batchEditing;
  },
  clearSelectedItems: function () {
    var g = this,
      f = g._selectedItemsInternal,
      d = g._selectedIndexes;
    if (f.length > 0) {
      var a = f.length - 1;
      while (a >= 0) {
        var e = f[a],
          b = $find(e.id);
        if (b) {
          b.set_selected(false);
        } else {
          var c = $get(e.id);
          if (c) {
            g._selection._selectRowInternal(
              c,
              { ctrlKey: false },
              true,
              true,
              true
            );
          } else {
            Array.remove(f, e);
            Array.remove(d, d[a]);
            g.updateClientState();
          }
        }
        a--;
      }
    }
  },
  clearSelectedCells: function () {
    if (this._cellSelection != null) {
      this._cellSelection._clear();
    }
  },
  _initializeTableViews: function () {
    var a = eval(this._gridTableViewsData);
    for (var d = 0; d < a.length; d++) {
      var c = a[d];
      if (!c.ClientID) {
        continue;
      }
      if ($find(c.ClientID) != null) {
        continue;
      }
      if ($get(c.ClientID) == null) {
        continue;
      }
      if (this._masterClientID != c.ClientID) {
        this.raise_tableCreating(new Sys.EventArgs());
      }
      var e = $create(
        Telerik.Web.UI.GridTableView,
        { _owner: this, _data: c },
        null,
        null,
        $get(c.ClientID)
      );
      if (this._masterClientID != c.ClientID) {
        var b = new Sys.EventArgs();
        b.get_tableView = function () {
          return e;
        };
        Array.add(this._detailTables, e);
        this.raise_tableCreated(b);
      }
      if (this._masterClientID == c.ClientID) {
        this.raise_masterTableViewCreating(new Sys.EventArgs());
        this.MasterTableView = e;
        this.raise_masterTableViewCreated(new Sys.EventArgs());
        if ($get(c.ClientID + "_Header")) {
          this.MasterTableViewHeader = $create(
            Telerik.Web.UI.GridTableView,
            { _owner: this, _data: c },
            null,
            null,
            $get(c.ClientID + "_Header")
          );
          this.MasterTableView._columnsInternal = this.MasterTableViewHeader._columnsInternal;
        }
        if ($get(c.ClientID + "_Footer")) {
          this.MasterTableViewFooter = $create(
            Telerik.Web.UI.GridTableView,
            { _owner: this, _data: c },
            null,
            null,
            $get(c.ClientID + "_Footer")
          );
        }
      }
    }
  },
  get_detailTables: function () {
    return this._detailTables;
  },
  get_enableAriaSupport: function () {
    return this._enableAriaSupport;
  },
  _initializeAriaSupport: function () {
    var z = this.get_element();
    var r = this._renderMode === Telerik.Web.UI.RenderMode.Lite;
    var e = this.ClientSettings;
    if (e.Selecting.AllowRowSelect && this.get_allowMultiRowSelection()) {
      z.setAttribute("aria-multiselectable", "true");
    }
    var n;
    var s;
    var t;
    var w;
    var b;
    var m;
    var a = false;
    var o = function (i) {
      i.setAttribute("role", "columnheader");
      if (!i.parentNode.getAttribute("role")) {
        i.parentNode.setAttribute("role", "row");
      }
      var A = i.getElementsByTagName("a")[0];
      if (A) {
        var j = i.getElementsByTagName("input")[0];
        if (j) {
          if (j.className.indexOf("rgSortAsc") > -1) {
            i.setAttribute("aria-sort", "ascending");
          } else {
            if (j.className.indexOf("rgSortDesc") > -1) {
              i.setAttribute("aria-sort", "descending");
            }
          }
        } else {
          i.setAttribute("aria-sort", "none");
        }
      }
    };
    if (z.querySelectorAll) {
      m = z.querySelectorAll("th.rgHeader");
      for (n = 0, t = m.length; n < t; n++) {
        o(m[n]);
      }
    } else {
      m = z.getElementsByTagName("th");
      for (n = 0, t = m.length; n < t; n++) {
        var l = m[n];
        if (l.className.indexOf("rgHeader") > -1) {
          o(l);
        }
      }
    }
    var c = z.getElementsByTagName("td");
    for (n = 0, t = c.length; n < t; n++) {
      b = c[n];
      w = b.parentNode;
      var x = w.className;
      if (
        b.className.indexOf("rgExpandCol") > -1 ||
        b.className.indexOf("rgGroupCol") > -1
      ) {
        b.setAttribute("role", "presentation");
        if (x.indexOf("rgGroupHeader") > -1 || w.id) {
          var k = b.getElementsByTagName(r ? "button" : "input")[0];
          if (k) {
            if (!r) {
              k.setAttribute("role", "button");
            }
            if (k.className.indexOf("rgCollapse") > -1) {
              w.setAttribute("aria-expanded", "true");
              k.setAttribute("aria-expanded", "true");
            } else {
              if (k.className.indexOf("rgExpand") > -1) {
                w.setAttribute("aria-expanded", "false");
                k.setAttribute("aria-expanded", "false");
              }
            }
          }
          if (x.indexOf("rgGroupHeader") > -1 && !w.getAttribute("role")) {
            w.setAttribute("role", "rowgroup");
          }
        }
      } else {
        if (
          x.indexOf("rgRow") > -1 ||
          x.indexOf("rgAltRow") > -1 ||
          x.indexOf("rgFooter") > -1
        ) {
          b.setAttribute("role", "gridcell");
          if (!w.getAttribute("role")) {
            w.setAttribute("role", "row");
            if (x.indexOf("rgSelectedRow") > -1) {
              w.setAttribute("aria-selected", "true");
              w.tabIndex = 1;
            }
          }
        } else {
          if (
            b.className.indexOf("rgCommandCell") > -1 &&
            !w.getAttribute("role")
          ) {
            b.setAttribute("role", "presentation");
            w.setAttribute("role", "presentation");
          } else {
            if (
              w.className.indexOf("rgPager") > -1 &&
              !w.getAttribute("role")
            ) {
              w.setAttribute("role", "presentation");
              var h = w.getElementsByTagName("div");
              var u = w.querySelector(".rgPager .RadComboBox .rcbInner button");
              if (u) {
                var v = $telerik.findElement(
                  u.parentNode,
                  "PageSizeComboBox_Input"
                );
                u.value = v.title;
              }
              for (var f = 0; f < h.length; f++) {
                var g = h[f];
                if (g.className && g.className.indexOf("rgWrap") > -1) {
                  var q = g.getElementsByTagName("input");
                  for (s = 0; s < q.length; s++) {
                    var p = q[s];
                    var d = p.className;
                    if (
                      p.type == "submit" &&
                      d &&
                      (d.indexOf("PagePrev") > -1 ||
                        d.indexOf("PageFirst") > -1 ||
                        d.indexOf("PageNext") > -1 ||
                        d.indexOf("PageLast") > -1 ||
                        d.indexOf("PagerButton") > -1)
                    ) {
                      p.setAttribute("role", "button");
                    }
                  }
                }
              }
            } else {
              if (
                w.className.indexOf("rgEditRow") > -1 &&
                !w.getAttribute("role")
              ) {
                w.setAttribute("role", "row");
                w.setAttribute("aria-readonly", "false");
                a = true;
              } else {
                if (!w.id) {
                  var y =
                    w.parentNode.tagName.toLowerCase() === "table"
                      ? w.parentNode
                      : w.parentNode.parentNode;
                  if (
                    (y && y.className.indexOf("rgMasterTable") > -1) ||
                    y.className.indexOf("rgDetailTable") > -1
                  ) {
                    if (!w.getAttribute("role")) {
                      w.setAttribute("role", "presentation");
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (this._groupPanel) {
      this._groupPanel.get_element().setAttribute("role", "presentation");
    }
    z.setAttribute(
      "role",
      a ? "form" : this._detailTables.length ? "treegrid" : "grid"
    );
    z.setAttribute("aria-readonly", !a);
  },
  _initializeEvents: function (a) {
    if (a) {
      for (var b = 0, c = a.length; b < c; b++) {
        var d = a[b];
        this["add_" + d] = (function (e) {
          return function (f) {
            this.get_events().addHandler(e, f);
          };
        })(d);
        this["remove_" + d] = (function (e) {
          return function (f) {
            this.get_events().removeHandler(e, f);
          };
        })(d);
        this["raise_" + d] = (function (e) {
          return function (f) {
            this.raiseEvent(e, f);
          };
        })(d);
      }
    }
  },
  _selectAllRows: function (l, d, a) {
    var b = a.srcElement ? a.srcElement : a.target;
    var k = $find(l);
    var j = k.get_element();
    var h = b.checked ? true : false;
    for (var c = 0, f = j.rows.length; c < f; c++) {
      var g = j.rows[c];
      if (!g.id || g.style.display == "none") {
        continue;
      }
      this._selection._selectRowInternal(g, a, true, false, false, h);
    }
    if (j.rows.length > 0) {
      this.updateClientState();
    }
  },
  _showFilterMenu: function (m, o, f) {
    var l = $find(m);
    var d = l.getColumnByUniqueName(o);
    var k = this._getFilterMenu();
    if (k) {
      k.hide();
      var b = new Sys.CancelEventArgs();
      b.get_menu = function () {
        return k;
      };
      b.get_tableView = function () {
        return l;
      };
      b.get_column = function () {
        return d;
      };
      b.get_domEvent = function () {
        return f;
      };
      this.raise_filterMenuShowing(b);
      if (b.get_cancel()) {
        return;
      }
      var i = this._filterMenu;
      this._buildFilterMenuItemList(
        i,
        d._data.FilterListOptions,
        d._data.DataTypeName,
        d._data.CurrentFilterFunction,
        d
      );
      this._onFilterMenuClicking = Function.createDelegate(
        this,
        this._filterMenuClickingHandler
      );
      i.add_itemClicking(this._onFilterMenuClicking);
      this._onFilterMenuShown = Function.createDelegate(
        this,
        this._onFilterMenuShownHandler
      );
      i.add_expandAnimationEnded(this._onFilterMenuShown);
      var g = Telerik.Web.UI.Grid.GetCurrentElement(f);
      if (g) {
        $telerik.addCssClasses(g, ["rgFilterActive"]);
      }
      this._onFilterMenuHiddenDelegate = Function.createDelegate(
        { opener: g, context: this },
        this._onFilterMenuHidden
      );
      i.add_hidden(this._onFilterMenuHiddenDelegate);
      if ($telerik.isTouchDevice) {
        var j = $telerik.getTouchEventLocation(f).x;
        var n = $telerik.getTouchEventLocation(f).y;
        i.showAt(j, n);
        $telerik.preventDefault(f);
      } else {
        var h = $telerik.getLocation(g);
        i.showAt(h.x + g.offsetWidth / 2, h.y + g.offsetHeight / 2);
        $telerik.preventDefault(f);
      }
      i._shown = false;
      window.setTimeout(function () {
        i._shown = true;
      });
      if (l._owner._enableRippleEffect) {
        var a = $telerik
          .$(i.get_contextMenuElement())
          .find(".rgFilterApply")[0];
        var c = $telerik
          .$(i.get_contextMenuElement())
          .find(".rgFilterCancel")[0];
        if (a) {
          Telerik.Web.UI.MaterialRippleManager.getInstance().initializeRipple(
            a
          );
        }
        if (c) {
          Telerik.Web.UI.MaterialRippleManager.getInstance().initializeRipple(
            c
          );
        }
      }
    }
  },
  _onFilterMenuShownHandler: function (d, a) {
    var b = this._filterMenu;
    var c = b.get_focusedItem() || b.get_items().getItem(0);
    if (c._linkElement) {
      c._linkElement.focus();
    } else {
      if (c._templateElement) {
        c._templateElement.focus();
      }
    }
  },
  _onFilterMenuHidden: function (b, a) {
    if (this.opener) {
      $telerik.removeCssClasses(this.opener, ["rgFilterActive"]);
      this.opener = null;
    }
    if (this.context && this.context._filterMenu) {
      if (this.context._onFilterMenuClicking) {
        this.context._filterMenu.remove_itemClicking(
          this.context._onFilterMenuClicking
        );
      }
      if (this.context._onFilterMenuHiddenDelegate) {
        this.context._filterMenu.remove_hidden(
          this.context._onFilterMenuHiddenDelegate
        );
      }
      if (this.context._onFilterMenuShown) {
        this.context._filterMenu.remove_expandAnimationEnded(
          this.context._onFilterMenuShown
        );
      }
      this.context._onFilterMenuHiddenDelegate = null;
      this.context._onFilterMenuShown = null;
    }
  },
  _getFilterMenu: function () {
    if (Telerik.Web.UI.RadContextMenu && !this._filterMenu) {
      this._filterMenu = $find(this.ClientID + "_rfltMenu");
    }
    return this._filterMenu;
  },
  get_headerMenu: function () {
    return this._getHeaderContextMenu();
  },
  _getHeaderContextMenu: function () {
    if (Telerik.Web.UI.RadContextMenu && !this._headerContextMenu) {
      this._headerContextMenu = $find(this.ClientID + "_rghcMenu");
    }
    return this._headerContextMenu;
  },
  _filterMenuClickingHandler: function (g, c) {
    var i = c.get_item()._filterMenu_tableID;
    if (!i) {
      c.set_cancel(true);
      return;
    }
    var h = $find(i);
    if (!h) {
      c.set_cancel(true);
      return;
    }
    var d = c.get_item().get_value();
    var b = c.get_item()._filterMenu_column_uniqueName;
    var e = h._getFilterControlValue(b);
    var a = h._raiseAction("Filter", {
      filterFunction: d,
      columnUniqueName: b,
      filterValue: e,
    });
    if (a.get_cancel()) {
      c.get_item().set_focused(false);
      c.set_cancel(true);
      return;
    }
    d = a.get_filterFunction();
    b = a.get_columnUniqueName();
    e = a.get_filterValue();
    if (d == "NoFilter") {
      h._updateFilterControlValue(e, b, d);
    } else {
      if (
        (e == null || e === "") &&
        d != "IsEmpty" &&
        d != "NotIsEmpty" &&
        d != "IsNull" &&
        d != "NotIsNull"
      ) {
        g.hide();
        return;
      }
    }
    if (!h.filter(b, e, d)) {
      var f = this.get_masterTableView();
      if (f) {
        f.__shouldPerformFiltering = false;
      }
      c.set_cancel(true);
      this._filterMenu.remove_itemClicking(this._onFilterMenuClicking);
    }
    g.hide();
  },
  _checkListItemsRequestedHandler: function () {
    if (
      this._checkListFilterActiveColumn &&
      this._checkListFilterActiveColumn
    ) {
      var e = $find(this._filterCheckListClientID);
      e.set_visible(true);
      var c =
        this._checkListFilterActiveColumn.get_owner()._data.UniqueID +
        "," +
        this._checkListFilterActiveColumn.get_uniqueName();
      var b = -1;
      var f;
      for (f = 0; f < this._checkListFilterKeys.length; f++) {
        if (this._checkListFilterKeys[f] == c) {
          b = f;
          break;
        }
      }
      var h;
      var g;
      var d;
      if (
        b >= 0 &&
        b < this._checkListFilterValues.length &&
        this._checkListFilterValues[b] &&
        this._checkListFilterValues[b].length > 0
      ) {
        var j = {};
        for (f = 0; f < this._checkListFilterValues[b].length; f++) {
          j[this._checkListFilterValues[b][f]] = true;
        }
        d = e.get_items().get_count();
        for (g = 0; g < d; g++) {
          h = e.get_items().getItem(g);
          if (j[h.get_value()]) {
            h.check();
          }
        }
      }
      d = e.get_items().get_count();
      for (g = 0; g < d; g++) {
        h = e.get_items().getItem(g);
        if (h.get_text() === "") {
          h.set_text("(null)");
        }
        h.get_element().title = h.get_text();
      }
    }
  },
  _checkListFilterCancelButtonHandler: function () {
    this._filterMenu.hide();
  },
  _resetCheckListFilterOfColumn: function (b) {
    var d = b.get_owner()._data.UniqueID + "," + b.get_uniqueName();
    var c = this._checkListFilterKeys.length;
    for (var a = 0; a < this._checkListFilterKeys.length; a++) {
      if (this._checkListFilterKeys[a] == d) {
        c = a;
        break;
      }
    }
    this._checkListFilterKeys[c] = d;
    this._checkListFilterValues[c] = [];
    return c;
  },
  _checkListFilterApplyButtonHandler: function () {
    var f = $find(this._filterCheckListClientID);
    var b = this._checkListFilterActiveColumn;
    var c = this._resetCheckListFilterOfColumn(b);
    var l = $find(b.get_owner().get_id().replace("_Header", ""));
    var g = "rgFiltered";
    var e = l._getFilterCellByColumnUniqueName(b.get_uniqueName());
    var d = e ? $telerik.getElementByClassName(e, "rgFilter") : null;
    var a = f.get_items()._array;
    if (!f._allChecked) {
      for (var k = 0; k < a.length; k++) {
        if (a[k].get_checkBoxElement().checked) {
          var j = a[k].get_value();
          if (j === "(null)") {
            j = "";
          }
          this._checkListFilterValues[c][
            this._checkListFilterValues[c].length
          ] = j;
        }
      }
    }
    var h = l._filterExpressions.find(b.get_uniqueName());
    if (this._checkListFilterValues[c].length > 0) {
      if (!h) {
        h = new Telerik.Web.UI.GridFilterExpression();
        h.set_fieldName(b._data.DataField);
        h.set_dataTypeName(b._data.DataTypeName);
        h.set_columnUniqueName(b.get_uniqueName());
        l._filterExpressions.add(h);
      }
      if (d) {
        Sys.UI.DomElement.addCssClass(d, g);
      }
      h.set_filterFunction(Telerik.Web.UI.GridFilterFunction.EqualTo);
      h._checkListFilterValues = this._checkListFilterValues[c];
    } else {
      if (h) {
        h.set_filterFunction(Telerik.Web.UI.GridFilterFunction.NoFilter);
        h._checkListFilterValues = this._checkListFilterValues[c];
        l._filterExpressions.remove(h);
      }
      if (d) {
        Sys.UI.DomElement.removeCssClass(d, g);
      }
    }
    this._filterMenu.hide();
    this.updateClientState();
    if (!this._checkListIsInHeaderContextMenu) {
      l.fireCommand(
        "Filter",
        b.get_uniqueName() +
          "|?|?" +
          (h
            ? Telerik.Web.UI.GridFilterFunction.EqualTo
            : Telerik.Web.UI.GridFilterFunction.NoFilter)
      );
    }
  },
  _buildFilterMenuItemList: function (p, l, h, f, b) {
    var c = b._data.ColumnType;
    var j = b._data.EnableRangeFiltering;
    var o = null;
    var k = $find(this._filterCheckListClientID || "");
    if (k) {
      this._checkListFilterActiveColumn = b;
      k.get_items().clear();
      var a = "";
      if (
        b._owner._data.CheckListWebServicePath &&
        b._data.FilterCheckListWebServiceMethod
      ) {
        k.set_visible(true);
        k.get_webServiceSettings().set_path(
          b._owner._data.CheckListWebServicePath
        );
        k.get_webServiceSettings().set_method(
          b._data.FilterCheckListWebServiceMethod
        );
        k.requestItems();
      } else {
        if (b._data.FilterCheckListEnableLoadOnDemand) {
          k.set_visible(true);
          var g = { startIndex: 0, count: 0 };
          var d = b.get_uniqueName();
          var e = {
            columnUniqueName: d,
            tableViewUniqueId: b._owner._data.UniqueID,
          };
          k._doLoadOnDemandWithCallBack(e, g);
        } else {
          k.set_visible(false);
          a = "None";
        }
      }
      this._filterApplyButton.style.display = a;
      this._filterCancelButton.style.display = a;
    }
    if (
      p.get_items().get_count() > 0 &&
      p.get_items().getItem(0).get_items().get_count() > 0
    ) {
      p = p.get_items().getItem(0);
    }
    for (var m = 0; m < p.get_items().get_count(); m++) {
      var n = p.get_items().getItem(m);
      o = n.get_value();
      n._filterMenu_column_uniqueName = b.get_uniqueName();
      n._filterMenu_tableID = b._owner._data.ClientID;
      if (
        this._clientSideBinding &&
        this._clientSideBinding._clientDataSource
      ) {
        if (
          o == "DoesNotContain" ||
          o == "IsEmpty" ||
          o == "NotIsEmpty" ||
          o == "IsNull" ||
          o == "NotIsNull" ||
          (o == "Between" && (c != "GridDateTimeColumn" || !j)) ||
          (o == "NotBetween" && (c != "GridDateTimeColumn" || !j))
        ) {
          n.set_visible(false);
          continue;
        }
      }
      if (h == "System.Boolean") {
        if (
          o == "GreaterThan" ||
          o == "LessThan" ||
          o == "GreaterThanOrEqualTo" ||
          o == "LessThanOrEqualTo" ||
          o == "Between" ||
          o == "NotBetween"
        ) {
          n.set_visible(false);
          continue;
        }
      }
      if (h != "System.String") {
        if (
          o == "StartsWith" ||
          o == "EndsWith" ||
          o == "Contains" ||
          o == "DoesNotContain" ||
          o == "IsEmpty" ||
          o == "NotIsEmpty"
        ) {
          n.set_visible(false);
          continue;
        }
      }
      if (l == 0) {
        if (o == "Custom") {
          n.set_visible(false);
          continue;
        }
      }
      if (
        c == "GridDateTimeColumn" &&
        j &&
        (o == "EqualTo" ||
          o == "GreaterThan" ||
          o == "GreaterThanOrEqualTo" ||
          o == "LessThan" ||
          o == "LessThanOrEqualTo" ||
          o == "NotEqualTo")
      ) {
        n.set_visible(false);
        continue;
      }
      if (
        ((c == "GridDateTimeColumn" && !j) ||
          c == "GridMaskedColumn" ||
          c == "GridNumericColumn" ||
          c == "GridRatingColumn") &&
        (o == "Between" || o == "NotBetween")
      ) {
        n.set_visible(false);
        continue;
      }
      if (o == b._data.CurrentFilterFunctionName) {
        n._focused = true;
        p._focusedItem = n;
        n._updateLinkClass();
      } else {
        n._focused = false;
        n._updateLinkClass();
      }
      n.set_visible(true);
    }
  },
  saveClientState: function () {
    var d = {};
    d.selectedIndexes = this._selectedIndexes;
    d.selectedCellsIndexes = this._selectedCellsIndexes;
    d.unselectableItemsIndexes = this._unselectableItemsIndexes;
    d.reorderedColumns = this._reorderedColumns;
    d.expandedItems = this._expandedItems;
    d.expandedGroupItems = this._expandedGroupItems;
    if (this._expandedFilterItems) {
      d.expandedFilterItems = this._expandedFilterItems;
    }
    d.deletedItems = this._deletedItems;
    if (this._resizedColumns != "") {
      d.resizedColumns = this._resizedColumns;
    }
    if (this._resizedControl != "") {
      d.resizedControl = this._resizedControl;
    }
    if (this._resizedItems != "") {
      d.resizedItems = this._resizedItems;
    }
    if (this._hidedItems != "") {
      d.hidedItems = this._hidedItems;
    }
    if (this._showedItems != "") {
      d.showedItems = this._showedItems;
    }
    if (this._hidedColumns) {
      d.hidedColumns = this._hidedColumns;
    }
    if (this._showedColumns) {
      d.showedColumns = this._showedColumns;
    }
    if (this._groupColsState) {
      d.groupColsState = this._groupColsState;
    }
    if (this._hierarchyColsExpandedState) {
      d.hierarchyState = this._hierarchyColsExpandedState;
    }
    if (this._activeRow) {
      d.activeRowIndex = this._activeRow.id;
    }
    if (this._gridDataDiv) {
      var a = this.get_masterTableView(),
        e = a._virtualization;
      var b =
        e && e._haveCustomScrollbar && e._scrollbar
          ? e._scrollbar.scrollTop
          : this._gridDataDiv.scrollTop;
      if ($get(this.ClientID + "_Frozen")) {
        d.scrolledPosition =
          b + "," + $get(this.ClientID + "_Frozen").scrollLeft;
      } else {
        d.scrolledPosition = b + "," + this._gridDataDiv.scrollLeft;
      }
      if (e && a.get_allowPaging() && a.get_currentPageIndex() > 0) {
        d.currentPageIndex = a.get_currentPageIndex();
      }
      if (e && e._itemAtTop) {
        d.itemAtTop = e._itemAtTop;
        d.startIndex = e._startIndex;
      }
    }
    if (this._popUpLocations) {
      d.popUpLocations = this._popUpLocations;
    }
    if (this._draggedItemsIndexes) {
      d.draggedItemsIndexes = this._draggedItemsIndexes;
    }
    if (this._shouldFocusOnPage) {
      d.shouldFocusOnPage = this._shouldFocusOnPage;
    }
    var c = this._selection;
    if (c && c._lastSelectedItemIndex != null) {
      d.lastSelectedItemIndex = c._lastSelectedItemIndex;
    }
    if (this._checkListFilterKeys && this._checkListFilterKeys.length > 0) {
      d.checkListFilterKeys = this._checkListFilterKeys;
      d.checkListFilterValues = this._checkListFilterValues;
    }
    return Sys.Serialization.JavaScriptSerializer.serialize(d);
  },
  _attachDomEvents: function () {
    this._onKeyDownDelegate = Function.createDelegate(
      this,
      this._onKeyDownHandler
    );
    this._onKeyPressDelegate = Function.createDelegate(
      this,
      this._onKeyPressHandler
    );
    this._onMouseMoveDelegate = Function.createDelegate(
      this,
      this._onMouseMoveHandler
    );
    window.$addHandler(this.get_element(), "keydown", this._onKeyDownDelegate);
    window.$addHandler(
      this.get_element(),
      "keypress",
      this._onKeyPressDelegate
    );
    window.$addHandler(
      this.get_element(),
      "mousemove",
      this._onMouseMoveDelegate
    );
  },
  _detachDomEvents: function () {
    if (this._onKeyDownDelegate) {
      window.$removeHandler(
        this.get_element(),
        "keydown",
        this._onKeyDownDelegate
      );
      this._onKeyDownDelegate = null;
    }
    if (this._onKeyPressDelegate) {
      window.$removeHandler(
        this.get_element(),
        "keypress",
        this._onKeyPressDelegate
      );
      this._onKeyPressDelegate = null;
    }
    if (this._onMouseMoveDelegate) {
      window.$removeHandler(
        this.get_element(),
        "mousemove",
        this._onMouseMoveDelegate
      );
      this._onMouseMoveDelegate = null;
    }
  },
  _onMouseMoveHandler: function (b) {
    var a = Telerik.Web.UI.Grid.GetCurrentElement(b);
    if (this.ClientSettings && this.ClientSettings.Resizing.AllowRowResize) {
      if (this._gridItemResizer == null) {
        this._gridItemResizer = new Telerik.Web.UI.GridItemResizer(this);
      }
      this._gridItemResizer._detectResizeCursorsOnItems(b, a);
      this._gridItemResizer._moveItemResizer(b);
    }
  },
  _onKeyDownHandler: function (c) {
    var d = c.keyCode || c.charCode;
    if (c.charCode) {
      d = String.fromCharCode(c.charCode).toUpperCase().charCodeAt(0);
    }
    if (this._isShortCutKeyPressed(c)) {
      this._raiseKeyPressInternal(c);
    }
    var b = d == this.ClientSettings.KeyboardNavigationSettings.DeleteActiveRow;
    if (b) {
      this._raiseKeyPressInternal(c);
    }
    var a = d >= 37 && d <= 40;
    var f = d == 33 || d == 34;
    if (
      (($telerik.isChrome ||
        (Telerik.Web.Browser.ff &&
          parseInt(Telerik.Web.Browser.fullVersion) >= 65) ||
        Telerik.Web.Browser.edge ||
        $telerik.isIE ||
        $telerik.isSafari ||
        $telerik.isOpera) &&
        (a || f)) ||
      (($telerik.isChrome || $telerik.isSafari || $telerik.isOpera) &&
        d ==
          this.ClientSettings.KeyboardNavigationSettings.ExitEditInsertModeKey)
    ) {
      this._raiseKeyPressInternal(c);
    }
    if (
      this.ClientSettings &&
      this.ClientSettings.AllowKeyboardNavigation &&
      this.get_batchEditingManager()
    ) {
      this.get_batchEditingManager()._handleKeyboardNavigation(c);
    }
  },
  _onKeyPressHandler: function (a) {
    this._raiseKeyPressInternal(a);
  },
  _raiseKeyPressInternal: function (b) {
    var a = new Telerik.Web.UI.GridKeyPressEventArgs(b);
    this.raise_keyPress(a);
    if (a.get_cancel()) {
      return;
    }
    this._handleGridKeyboardAction(b);
  },
  _validateEditInsertForm: function (a) {
    if (this.ValidationSettings.EnableValidation) {
      var b = this.ValidationSettings.CommandsToValidate;
      if (b.toString().indexOf(a) > -1) {
        var c = this._validationGroup;
        if (typeof Page_ClientValidate == "function") {
          var d = Page_ClientValidate(c);
          if (d != true) {
            return false;
          }
        }
      }
    }
    return true;
  },
  _getTableViewByControlIntoIt: function (a) {
    var h = a.id.split("_");
    var f = 0;
    var e;
    for (e = 0; e < h.length; e++) {
      if (h[e].indexOf("Detail") > -1) {
        f = e;
      }
    }
    var c = "";
    var d = [];
    if (f > 0) {
      for (e = 0; e < f + 1; e++) {
        d.push(h[e]);
      }
      c = d.join("_");
    }
    if (!c) {
      var g = Telerik.Web.UI.Grid.GetFirstParentByTagName(a, "table");
      while (g && g.id.indexOf(this.ClientID) == -1) {
        g = Telerik.Web.UI.Grid.GetFirstParentByTagName(g.parentNode, "table");
      }
      if (g) {
        c = g.id;
      }
    }
    var b = $find(c);
    if (!b) {
      b = this.get_masterTableView();
    }
    return b;
  },
  _cancelDefaultAction: function (a) {
    if (a.preventDefault) {
      a.preventDefault();
    }
    a.returnValue = false;
    if (a.stopPropagation) {
      a.stopPropagation();
      a.cancelBubble = true;
    }
  },
  _handleGridKeyboardAction: function (f) {
    var l = f.keyCode || f.charCode;
    if (f.charCode) {
      l = String.fromCharCode(f.charCode).toUpperCase().charCodeAt(0);
    }
    if (
      this.ClientSettings &&
      this.ClientSettings.AllowKeyboardNavigation &&
      this.ClientSettings.Selecting.CellSelectionMode ==
        Telerik.Web.UI.GridCellSelectionMode.None
    ) {
      var p = Telerik.Web.UI.Grid.GetCurrentElement(f);
      var a = this._allowSubmitOnEnter;
      var b = this._canHandleKeyboardAction(f);
      if (!b && !a) {
        return;
      } else {
        if (a && l == 13) {
          if (p.type && p.type.toLowerCase() == "textarea") {
            return;
          }
          var j = false;
          for (var k = 0; k < this._submitControls.length; k++) {
            if (
              p.tagName.toLowerCase() == this._submitControls[k].Name &&
              p.type.toLowerCase() == this._submitControls[k].Type
            ) {
              j = true;
            }
          }
          if (p.type && !j && p.type.toLowerCase() == "checkbox") {
            this._cancelDefaultAction(f);
            return;
          }
          if (!j && this._editIndexes.length > 0) {
            return;
          }
          var d = this._getTableViewByControlIntoIt(p);
          if (j && d.get_isItemInserted()) {
            if (this._validateEditInsertForm("PerformInsert")) {
              d.insertItem();
              this._cancelDefaultAction(f);
              return;
            }
          }
        }
      }
      var n =
        l == this.ClientSettings.KeyboardNavigationSettings.MoveUpKey ||
        l == this.ClientSettings.KeyboardNavigationSettings.MoveDownKey;
      var o = this._shouldSelectOnSpace(f, l);
      var h =
        l ==
          this.ClientSettings.KeyboardNavigationSettings.ExpandDetailTableKey ||
        l ==
          this.ClientSettings.KeyboardNavigationSettings.CollapseDetailTableKey;
      var m = (l == 33 || l == 34) && b;
      var g =
        this.ClientSettings.KeyboardNavigationSettings
          .EnableKeyboardShortcuts &&
        (l ==
          this.ClientSettings.KeyboardNavigationSettings
            .ExitEditInsertModeKey ||
          l ==
            this.ClientSettings.KeyboardNavigationSettings.UpdateInsertItemKey);
      var c =
        this.ClientSettings.KeyboardNavigationSettings
          .EnableKeyboardShortcuts &&
        l == this.ClientSettings.KeyboardNavigationSettings.DeleteActiveRow;
      if (n) {
        this._handleActiveRowNavigation(f);
      } else {
        if (h) {
          if (
            this.get_id() === f.target.id ||
            (this.get_enableAriaSupport() &&
              this._activeRow &&
              this._activeRow.id === f.target.id)
          ) {
            this._handleActiveRowExpandCollapse(f);
          }
        } else {
          if (o) {
            this._handleActiveRowSelection(f);
          } else {
            if (g) {
              this._handleExitEditModeOrUpdateItem(f, l);
              if (
                (typeof f.rawEvent.returnValue == "undefined" ||
                  (typeof f.rawEvent.returnValue == "boolean" &&
                    f.rawEvent.returnValue)) &&
                l ==
                  this.ClientSettings.KeyboardNavigationSettings
                    .UpdateInsertItemKey
              ) {
                this._handleActiveRowEdit(f);
                this._cancelDefaultAction(f);
              }
            } else {
              if (c) {
                if (
                  p.type &&
                  (p.type.toLowerCase() == "text" ||
                    p.type.toLowerCase() == "textarea")
                ) {
                  return;
                }
                this._handleDeleteActiveRow();
              } else {
                if (m) {
                  this._handlePaging(f);
                } else {
                  if (f.ctrlKey) {
                    this._handleShortCutKey(f);
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  _shouldSelectOnSpace: function (a, b) {
    var d = a.target.tagName.toUpperCase();
    var c = this.ClientSettings.Selecting;
    if (b == 32 && c && c.AllowRowSelect && d != "INPUT" && d != "TEXTAREA") {
      return true;
    }
    return false;
  },
  _canHandleKeyboardAction: function (a) {
    var c = a.keyCode || a.charCode;
    if (
      (c == 32 || c == 13 || c == 33 || c == 34 || c == 127) &&
      this.ClientSettings.KeyboardNavigationSettings.EnableKeyboardShortcuts
    ) {
      var d = Telerik.Web.UI.Grid.GetCurrentElement(a);
      var b =
        d.tagName.toLowerCase() == "input" &&
        d.type.toLowerCase() == "checkbox" &&
        d.id &&
        d.id.indexOf("SelectCheckBox") != -1;
      if (c == 127 && d.tagName.toLowerCase() == "input" && d.type == "text") {
        return false;
      }
      if (c == 33 || c == 34) {
        if (
          d.tagName.toLowerCase() == "input" ||
          d.tagName.toLowerCase() == "textarea"
        ) {
          return false;
        }
      } else {
        if (
          (d.tagName.toLowerCase() == "input" && !b) ||
          d.tagName.toLowerCase() == "select" ||
          d.tagName.toLowerCase() == "option" ||
          d.tagName.toLowerCase() == "button" ||
          d.tagName.toLowerCase() == "a" ||
          d.tagName.toLowerCase() == "textarea" ||
          d.tagName.toLowerCase() == "img"
        ) {
          return false;
        }
      }
    }
    return true;
  },
  _handleShortCutKey: function (a) {
    var b = a.keyCode || a.charCode;
    if (a.charCode) {
      b = String.fromCharCode(a.charCode).toUpperCase().charCodeAt(0);
    }
    switch (b) {
      case this.ClientSettings.KeyboardNavigationSettings.InitInsertKey:
        if (this._activeRow) {
          this._getRow(this._activeRow.id).get_owner().showInsertItem();
          a.preventDefault();
        }
        break;
      case this.ClientSettings.KeyboardNavigationSettings.RebindKey:
        if (this._activeRow) {
          this._getRow(this._activeRow.id).get_owner().rebind();
          a.preventDefault();
        }
        break;
      default:
        break;
    }
  },
  _isShortCutKeyPressed: function (a) {
    var b = a.keyCode || a.charCode;
    if (a.charCode) {
      b = String.fromCharCode(a.charCode).toUpperCase().charCodeAt(0);
    }
    if (a.ctrlKey) {
      switch (b) {
        case this.ClientSettings.KeyboardNavigationSettings.InitInsertKey:
          return true;
        case this.ClientSettings.KeyboardNavigationSettings.RebindKey:
          return true;
        default:
          return false;
      }
    }
  },
  _handleDeleteActiveRow: function () {
    if (this._activeRow) {
      var a = $find(this._activeRow.id.split("__")[0]);
      if (a) {
        a.deleteItem(this._activeRow);
      }
    }
  },
  _getRow: function (b) {
    var a = $find(b);
    if (!a) {
      var d = b.split("__")[0];
      var c = $find(d);
      this._ensureDataItemsCreated(c);
      a = $find(b);
    }
    return a;
  },
  _handlePaging: function (a) {
    var c = null;
    var d = null;
    var b = a.keyCode || a.charCode;
    var f = null;
    if (this._activeRow) {
      f = this._getRow(this._activeRow.id).get_owner();
      c = f.get_currentPageIndex();
      d = f.get_pageCount();
    }
    if (b == 33) {
      c++;
      if (c < d) {
        this._shouldFocusOnPage = true;
        this.updateClientState();
        if (this._activeRow) {
          f.page("Next");
        }
      }
    } else {
      c--;
      if (c > -1) {
        this._shouldFocusOnPage = true;
        this.updateClientState();
        if (this._activeRow) {
          f.page("Prev");
        }
      }
    }
    a.rawEvent.returnValue = false;
    a.rawEvent.cancelBubble = true;
    if (a.stopPropagation) {
      a.preventDefault();
      a.stopPropagation();
    }
  },
  _handleExitEditModeOrUpdateItem: function (f, h) {
    var d = Telerik.Web.UI.Grid.GetCurrentElement(f);
    var n = Telerik.Web.UI.Grid.GetFirstParentByTagName(d, "tr");
    if (n && !this.isGridDataRow(n) && n.parentNode) {
      var j = n;
      n = Telerik.Web.UI.Grid.GetFirstParentByTagName(n.parentNode, "tr");
      if (!n) {
        n = j;
      }
    }
    if (
      h ==
        this.ClientSettings.KeyboardNavigationSettings.ExitEditInsertModeKey &&
      this._activeRow &&
      this._getRow(this._activeRow.id)._owner.get_isItemInserted()
    ) {
      this._getRow(this._activeRow.id)._owner.cancelInsert();
      f.rawEvent.returnValue = false;
      f.rawEvent.cancelBubble = true;
      if (f.stopPropagation) {
        f.preventDefault();
        f.stopPropagation();
      }
      return false;
    }
    if (
      h == this.ClientSettings.KeyboardNavigationSettings.ExitEditInsertModeKey
    ) {
      if (this._activeRow) {
        var c = this._activeRow.id;
        var a = $find(c);
        if (!a) {
          var p = $find(c.split("__")[0]);
          this._owner._ensureDataItemsCreated(p);
          a = $find(c);
        }
        if (a.get_isInEditMode()) {
          var b = a.get_element();
          var k = this.isGridDataRow(b);
          k.cancelUpdate(b);
          f.rawEvent.returnValue = false;
          f.rawEvent.cancelBubble = true;
          if (f.stopPropagation) {
            f.preventDefault();
            f.stopPropagation();
          }
        }
      }
      return false;
    }
    if (n == null || typeof n == "undefined") {
      return false;
    }
    var o = this.isGridDataRow(n);
    if (o != null && typeof o != "undefined") {
      if (this.isInEditModeByHierarchicalIndex(n.id.split("__")[1])) {
        if (
          h ==
          this.ClientSettings.KeyboardNavigationSettings.ExitEditInsertModeKey
        ) {
          o.cancelUpdate(n);
        } else {
          if (
            h ==
            this.ClientSettings.KeyboardNavigationSettings.UpdateInsertItemKey
          ) {
            if (this._validateEditInsertForm("Update")) {
              o.updateItem(n);
            }
          }
        }
        f.rawEvent.returnValue = false;
        f.rawEvent.cancelBubble = true;
        if (f.stopPropagation) {
          f.preventDefault();
          f.stopPropagation();
        }
        return false;
      }
    } else {
      var l = $telerik.$(d).parents("tr");
      var m;
      for (var g = 0; g < l.length; g++) {
        m = l[g].previousSibling;
        if (m != null && typeof m != "undefined" && m.tagName == "TR") {
          o = this.isGridDataRow(m);
          if (o != null && typeof o != "undefined") {
            if (
              h ==
              this.ClientSettings.KeyboardNavigationSettings
                .ExitEditInsertModeKey
            ) {
              o.cancelUpdate(m);
            } else {
              if (
                h ==
                this.ClientSettings.KeyboardNavigationSettings
                  .UpdateInsertItemKey
              ) {
                if (this._validateEditInsertForm("Update")) {
                  o.updateItem(m);
                }
              }
            }
            f.rawEvent.returnValue = false;
            f.rawEvent.cancelBubble = true;
            if (f.stopPropagation) {
              f.preventDefault();
              f.stopPropagation();
            }
            break;
          }
        }
      }
      return false;
    }
  },
  isGridDataRow: function (d) {
    if (d.id == "") {
      return;
    }
    var a = this.get_masterTableView()._getRowByIndexOrItemIndexHierarchical(d);
    var c = a.id.split("__")[0];
    var b = $find(c);
    if (b != null && typeof b != "undefined") {
      return b;
    } else {
      return;
    }
  },
  isInEditModeByHierarchicalIndex: function (a) {
    if (this._editIndexes != null && typeof this._editIndexes != "undefined") {
      for (var b = 0; b < this._editIndexes.length; b++) {
        if (this._editIndexes[b] == a) {
          return true;
        }
      }
      return false;
    } else {
      return false;
    }
  },
  _shouldSkipNavigation: function (a) {
    var b =
      a.tagName.toLowerCase() == "input" &&
      a.type.toLowerCase() == "checkbox" &&
      a.id &&
      a.id.indexOf("SelectCheckBox") != -1;
    var c = a && a.className && a.className.indexOf("RadDropDownList") != -1;
    if (
      a != null &&
      a.tagName &&
      !b &&
      (a.tagName.toLowerCase() == "input" ||
        a.tagName.toLowerCase() == "textarea" ||
        a.tagName.toLowerCase() == "select" ||
        c)
    ) {
      return true;
    }
    return false;
  },
  _handleActiveRowNavigation: function (m) {
    var q = m.keyCode || m.charCode;
    if (m.charCode) {
      q = String.fromCharCode(m.charCode).toUpperCase().charCodeAt(0);
    }
    var c = Telerik.Web.UI.Grid.GetCurrentElement(m);
    if (this._shouldSkipNavigation(c)) {
      return;
    }
    var A = this._getPositionedDataItems();
    if (A.length <= 0) {
      return;
    }
    var z = this._keyboardNavigationProperties;
    var F = this.ClientSettings.KeyboardNavigationSettings.MoveUpKey;
    var k = this.ClientSettings.KeyboardNavigationSettings.MoveDownKey;
    var h = this.get_allowActiveRowCycle();
    var a = this._activeRow;
    var b = this.ClientSettings;
    if (a && b.Selecting && !b.Selecting.AllowRowSelect) {
      z.currentSelectedIndex = this._searchRowIndex(a.id);
    }
    var D;
    var y;
    var x;
    var j;
    var C = [];
    var w = null;
    if (b.Selecting && b.Selecting.AllowRowSelect) {
      this._selection._selectionInProgress = true;
      D = this._selection;
      var E = false;
      j = true;
      for (var o = 0, t = A.length; o < t; o++) {
        if (A[o].get_selected()) {
          C[C.length] = A[o];
        }
      }
      if (z.firstSelection) {
        if (a) {
          z.currentSelectedIndex = this._searchRowIndex(a.id);
          this._clearSelectedItemsExcludingInterval(
            z.currentSelectedIndex,
            z.currentSelectedIndex
          );
          z.lastSelectedRowIndex = z.currentSelectedIndex;
          this._selection._lastSelectedItemIndex = z.currentSelectedIndex;
        } else {
          if (C.length > 0) {
            z.currentSelectedIndex = this._searchRowIndex(C[0].get_id());
            z.lastSelectedRowIndex = z.currentSelectedIndex;
            this._selection._lastSelectedItemIndex = z.currentSelectedIndex;
          }
        }
        z.setInitialState();
      }
      if (C.length > 1 && z.currentSelectedIndex !== undefined) {
        if (z.lastClickSelectedItem) {
          var s = this._searchRowIndex(z.lastClickSelectedItem.id);
          if (s) {
            z.currentSelectedIndex = s;
          }
        }
      } else {
        if (C.length > 0 && z.lastClickSelectedItem) {
          z.currentSelectedIndex = this._searchRowIndex(
            z.lastClickSelectedItem.id
          );
          z.setInitialState();
        } else {
          if (!a) {
            if (q == F) {
              z.currentSelectedIndex = 1;
            }
          }
        }
      }
      if (
        z.currentSelectedIndex == "undefined" ||
        isNaN(z.currentSelectedIndex) ||
        z.currentSelectedIndex == null
      ) {
        if (q == F) {
          z.currentSelectedIndex = 1;
        } else {
          if (q == k) {
            z.currentSelectedIndex = 0;
          }
        }
      }
      z.lastClickSelectedItem = null;
      if (z.holdingCtrl && m.shiftKey && !m.ctrlKey && !E) {
        z.setInitialState();
        if (
          (a && $find(a.id).get_selected()) ||
          (C.length > 1 && !z.holdingCtrl)
        ) {
          this._clearSelectedItemsExcludingInterval(
            z.initialRowIndex,
            z.initialRowIndex
          );
          if (!A[z.initialRowIndex].get_selected()) {
            D._selectRowInternal(
              A[z.initialRowIndex].get_element(),
              m,
              true,
              true,
              false
            );
          }
        } else {
          var r = z.lastSelectedRowIndex;
          z.initialRowIndex = r;
          if ((z.currentSelectedIndex < r || h) && (q == F || (!h && q == k))) {
            if (r > z.currentSelectedIndex) {
              this._clearSelectedItemsExcludingInterval(
                z.currentSelectedIndex,
                r
              );
            } else {
              this._clearSelectedItemsInInterval(r, z.currentSelectedIndex);
            }
            this._selectItemsInInterval(r, z.currentSelectedIndex, -1);
          } else {
            if (q == k || !h) {
              if (z.currentSelectedIndex > r) {
                this._clearSelectedItemsExcludingInterval(
                  r,
                  z.currentSelectedIndex
                );
              } else {
                this._clearSelectedItemsInInterval(z.currentSelectedIndex, r);
              }
              this._selectItemsInInterval(r, z.currentSelectedIndex, 1);
            }
          }
        }
      }
      y = A[z.currentSelectedIndex];
      w = z.directionIndex;
      x = z.currentSelectedIndex;
      var f = q;
      if (f == F) {
        f = k;
      } else {
        f = F;
      }
      while (y && !y.get_selectable()) {
        x = this._getNextIndex(f, false, x);
        y = A[x];
      }
      var v =
        (z.directionIndex > 0 && q == k) || (z.directionIndex < 0 && q == F);
      if (
        z.currentSelectedIndex === z.initialRowIndex &&
        v &&
        A.length - z.unselectableItemsCount === C.length
      ) {
        j = false;
      }
    }
    z.currentSelectedIndex = this._getNextIndex(q, true);
    if (b.Selecting && b.Selecting.AllowRowSelect) {
      if (!m.shiftKey || C.length === 0) {
        if (A[z.currentSelectedIndex].get_selectable()) {
          z.setInitialState();
        }
      }
      var G = z.directionIndex > 0 && q == F;
      var l = z.directionIndex < 0 && q == k;
      var u = z.currentSelectedIndex;
      var n;
      while (!A[u].get_selectable()) {
        u = this._getNextIndex(q, false, u);
      }
      if (
        u === z.initialRowIndex &&
        (G || l || (w !== 0 && z.directionIndex === 0))
      ) {
        if (A.length - z.unselectableItemsCount === C.length) {
          j = false;
        } else {
          if (
            y.get_selected() &&
            A[z.currentSelectedIndex].get_selectable() &&
            !m.ctrlKey
          ) {
            n = { ctrlKey: false };
            D._selectRowInternal(y.get_element(), n, true, true, false);
          }
          var p = z.currentSelectedIndex;
          z.currentSelectedIndex = u;
          z.setInitialState();
          z.currentSelectedIndex = p;
        }
      }
      if (
        y &&
        y.get_selected() &&
        A[z.currentSelectedIndex].get_selected() &&
        j
      ) {
        var d = z.currentSelectedIndex;
        while (A[d] && !A[d].get_selectable()) {
          d = this._getNextIndex(q, false, d);
        }
        if (
          !m.ctrlKey &&
          m.shiftKey &&
          A[d] &&
          A[d].get_selected() &&
          A[d].get_selectable()
        ) {
          if (y.get_selected()) {
            n = { ctrlKey: false };
            D._selectRowInternal(y.get_element(), n, true, true, false);
          }
        }
      } else {
        if (y && !y.get_selected() && m.ctrlKey && m.shiftKey) {
          n = { ctrlKey: m.ctrlKey };
          D._selectRowInternal(y.get_element(), n, true, true, false);
        } else {
          if (m.shiftKey && a && z.firstSelection) {
            var g = z.currentSelectedIndex;
            z.currentSelectedIndex = x;
            z.setInitialState();
            z.currentSelectedIndex = g;
            if (!y.get_selected()) {
              n = { ctrlKey: false };
              D._selectRowInternal(a, n, true, true, false);
            }
          }
        }
      }
      if (m.ctrlKey) {
        z.holdingCtrl = true;
      } else {
        z.holdingCtrl = false;
      }
      this._selection._selectionInProgress = false;
      if (!m.shiftKey && !m.ctrlKey) {
        this._selection._lastSelectedItemIndex = z.currentSelectedIndex;
      }
    }
    this._setActiveRow(A[z.currentSelectedIndex].get_element(), m);
    var B = false;
    if (b.Selecting && b.Selecting.AllowRowSelect) {
      if (!m.ctrlKey || (m.ctrlKey && m.shiftKey)) {
        B = true;
        D._selectRowInternal(
          A[z.currentSelectedIndex].get_element(),
          m,
          false,
          true,
          true,
          false
        );
      }
      if (!B) {
        this.updateClientState();
      }
      if (
        a &&
        $find(a.id) &&
        $find(a.id).get_selected() &&
        !m.shiftKey &&
        m.ctrlKey &&
        B
      ) {
        z.lastSelectedRowIndex = z.currentSelectedIndex;
      }
    }
    z.firstSelection = false;
    m.preventDefault();
  },
  _getNextIndex: function (g, b, f) {
    var j = this._getPositionedDataItems(),
      i = this._keyboardNavigationProperties,
      d = this.get_allowActiveRowCycle(),
      l = this.ClientSettings.KeyboardNavigationSettings.MoveUpKey,
      e = this.ClientSettings.KeyboardNavigationSettings.MoveDownKey,
      c = i.currentSelectedIndex,
      h = this.get_masterTableView(),
      m = h._virtualization,
      k = m && m._haveCustomScrollbar ? m._getScrollInfo() : null,
      a = 0;
    if (f) {
      c = f;
    }
    if (g == l) {
      c--;
      if (c < 0) {
        if (k) {
          m.select(
            Math.max(
              m.get_startIndex() -
                j.length +
                Math.floor(k.itemAtBottom - k.itemAtTop),
              0
            )
          );
          c = Math.floor(k.itemAtTop) - m.get_startIndex() - 1;
        } else {
          if (d) {
            c = j.length - 1;
          } else {
            c = 0;
          }
        }
      }
      if (
        k &&
        m.get_startIndex() + c < h.get_currentPageIndex() * h.get_pageSize()
      ) {
        c++;
      } else {
        if (k && m.get_startIndex() + c <= Math.floor(k.itemAtTop)) {
          m.scrollToIndex(m.get_startIndex() + c);
        }
      }
      if (b) {
        i.directionIndex++;
      }
    } else {
      if (g == e) {
        c++;
        if (c > j.length - 1) {
          if (k) {
            c = Math.min(
              Math.floor(k.itemAtBottom - k.itemAtTop),
              m.get_virtualItemCount()
            );
            a = j.length - Math.floor(k.itemAtBottom - k.itemAtTop);
          } else {
            if (d) {
              c = 0;
            } else {
              c = j.length - 1;
            }
          }
        }
        if (
          k &&
          m.get_startIndex() + c >=
            (h.get_currentPageIndex() + 1) * h.get_pageSize()
        ) {
          c--;
        } else {
          if (
            k &&
            (m.get_startIndex() + c >= Math.floor(k.itemAtBottom) || a > 0)
          ) {
            m.scrollToIndex(m.get_startIndex() + c + a, true);
          }
        }
        if (b) {
          i.directionIndex--;
        }
      }
    }
    return c;
  },
  _clearSelectedItemsExcludingInterval: function (e, c) {
    var a = 0;
    var b = [];
    var d;
    for (d = 0; d < this._selectedItemsInternal.length; d++) {
      a = this._searchRowIndex(this._selectedItemsInternal[d].id);
      if (a < e || a > c) {
        b.push(a);
      }
    }
    for (d = 0; d < b.length; d++) {
      this._positionedDataItems[b[d]].set_selected(false);
    }
  },
  _clearSelectedItemsInInterval: function (e, c) {
    var a = 0;
    var b = [];
    var d;
    for (d = 0; d < this._selectedItemsInternal.length; d++) {
      a = this._searchRowIndex(this._selectedItemsInternal[d].id);
      if (a > e && a < c) {
        b.push(a);
      }
    }
    for (d = 0; d < b.length; d++) {
      this._positionedDataItems[b[d]].set_selected(false);
    }
  },
  _selectItemsInInterval: function (f, c, b) {
    var e = this._getPositionedDataItems();
    var a = f;
    c += b;
    do {
      if (a < 0) {
        a = e.length - 1;
      } else {
        if (a > e.length - 1) {
          a = 0;
        }
      }
      if (e[a] && !e[a].get_selected()) {
        var d = { ctrlKey: false };
        this._selection._selectRowInternal(
          e[a].get_element(),
          d,
          true,
          true,
          false
        );
      }
      a += b;
    } while (a !== c);
  },
  _getPositionedDataItems: function (b) {
    var a = this._positionedDataItems;
    if (a && a.length > 0 && !b) {
      return a;
    }
    this._keyboardNavigationProperties.unselectableItemsCount = 0;
    a = this._getAllChildItemsRecursive(this.get_masterTableView());
    this._positionedDataItemsIndexes = {};
    for (var c = 0, d = a.length; c < d; c++) {
      this._positionedDataItemsIndexes[a[c].get_id()] = c;
    }
    this._keyboardNavigationProperties.firstSelection = true;
    this._positionedDataItems = a;
    return a;
  },
  _getAllChildItemsRecursive: function (m) {
    if (
      !m ||
      (m && m.get_element().parentNode.parentNode.style.display === "none")
    ) {
      return [];
    }
    var a = [];
    var f = m.get_dataItems();
    for (var d = 0, h = f.length; d < h; d++) {
      var e = f[d];
      if (e.get_element().style.display === "none") {
        continue;
      }
      if (!e.get_selectable() && !e.get_selected()) {
        this._keyboardNavigationProperties.unselectableItemsCount++;
      }
      a[a.length] = e;
      var l = e.get_nestedViews();
      if (l.length) {
        for (var g = 0, k = l.length; g < k; g++) {
          var c = l[g];
          var b = this._getAllChildItemsRecursive(c);
          if (b.length) {
            Array.addRange(a, b);
          }
        }
      }
    }
    return a;
  },
  _searchRowIndex: function (a) {
    this._getPositionedDataItems();
    return this._positionedDataItemsIndexes[a];
  },
  _setActiveRow: function (f, b) {
    if (
      f &&
      this.ClientSettings &&
      this.ClientSettings.AllowKeyboardNavigation
    ) {
      var a = new Telerik.Web.UI.GridDataItemCancelEventArgs(
        this._activeRow || f,
        b
      );
      this.raise_activeRowChanging(a);
      if (a.get_cancel()) {
        return;
      }
      if (this._activeRow) {
        var e = $find(this._activeRow.id.split("__")[0]);
        Telerik.Web.UI.Grid.ClearItemStyle(
          this._activeRow,
          e._data._renderActiveItemStyle,
          e._data._renderActiveItemStyleClass
        );
      }
      this._activeRow = f;
      var c = $find(f.id.split("__")[0]);
      Telerik.Web.UI.Grid.SetItemStyle(
        f,
        c._data._renderActiveItemStyle,
        c._data._renderActiveItemStyleClass
      );
      Telerik.Web.UI.Grid.ScrollIntoView(f);
      this.updateClientState();
      if (this.get_enableAriaSupport()) {
        var d = f.tabIndex;
        f.tabIndex = 1;
        f.focus();
        f.tabIndex = d;
      }
      this.raise_activeRowChanged(
        new Telerik.Web.UI.GridDataItemEventArgs(this._activeRow, b)
      );
    }
  },
  clearActiveRow: function () {
    if (this._activeRow) {
      var a = $find(this._activeRow.id.split("__")[0]);
      Telerik.Web.UI.Grid.ClearItemStyle(
        this._activeRow,
        a._data._renderActiveItemStyle,
        a._data._renderActiveItemStyleClass
      );
      this._activeRow = null;
      this.updateClientState();
    }
  },
  set_activeRow: function (a) {
    this._setActiveRow(a, null);
  },
  _ensureDataItemsCreated: function (a) {
    if (a._dataItems.length == 0) {
      a.get_dataItems();
    }
  },
  _isClientSideExpandCollapse: function (g) {
    var b = g.cells;
    for (var d = 0, f = b.length; d < f; d++) {
      var a = b[d],
        c = a.className;
      if (c && c.indexOf("rgExpandCol") > -1) {
        var e = a.getElementsByTagName("input")[0];
        if (
          e &&
          e.onclick &&
          e.onclick.toString().indexOf("_toggleExpand") > -1
        ) {
          return true;
        }
      }
    }
    return false;
  },
  _handleActiveRowExpandCollapse: function (d) {
    var i = d.keyCode || d.charCode;
    if (d.charCode) {
      i = String.fromCharCode(d.charCode).toUpperCase().charCodeAt(0);
    }
    if (!this._activeRow) {
      return;
    }
    var n = $find(this._activeRow.id.split("__")[0]);
    this._ensureDataItemsCreated(n);
    var j = n._hierarchyLoadMode;
    var h = j == "ServerOnDemand" || j == "ServerBind";
    var g = j == "Conditional";
    var f = g && this._isClientSideExpandCollapse(this._activeRow);
    var c = "";
    if (
      i == this.ClientSettings.KeyboardNavigationSettings.CollapseDetailTableKey
    ) {
      var k = n._getNextNestedDataRow(this._activeRow);
      if (((h && k) || !f) && j != "Client") {
        this._shouldFocusOnPage = true;
        c = this._activeRow.id + "##";
        n.fireCommand("ExpandCollapse", c);
      }
      if (
        (k && k.parentNode.style.display != "none") ||
        (k &&
          $find(this._activeRow.id).get_isInEditMode() &&
          k.parentNode.style.display != "none")
      ) {
        n._performCollapseItem(this._activeRow);
        this._getPositionedDataItems(true);
      }
    } else {
      if (
        i == this.ClientSettings.KeyboardNavigationSettings.ExpandDetailTableKey
      ) {
        var m = Telerik.Web.UI.Grid.GetNodeNextSiblingByTagName(
          this._activeRow,
          "tr"
        );
        if ($find(this._activeRow.id).get_isInEditMode()) {
          m = Telerik.Web.UI.Grid.GetNodeNextSiblingByTagName(m, "tr");
        }
        if (!n._isDataItemElement(m) && n._data.hasDetailItemTemplate) {
          m = Telerik.Web.UI.Grid.GetNodeNextSiblingByTagName(m, "tr");
        }
        if (
          m &&
          m.style.display == "none" &&
          m.className.indexOf("rgNoRecords") === -1
        ) {
          n.expandItem(this._activeRow);
          this._getPositionedDataItems(true);
          this.get_element().focus();
        } else {
          if (n._hasDetailTables && (h || !f)) {
            var a = $find(this._activeRow.id);
            var l = a.get_nestedViews()[0];
            var b = this._activeRow.id;
            if (a) {
              n = $find(b.split("__")[0]);
              this._ensureDataItemsCreated(n);
            }
            if (
              (l &&
                i ==
                  this.ClientSettings.KeyboardNavigationSettings
                    .CollapseDetailTableKey) ||
              (!l &&
                i ==
                  this.ClientSettings.KeyboardNavigationSettings
                    .ExpandDetailTableKey)
            ) {
              this._shouldFocusOnPage = true;
              c = this._activeRow.id + "##";
              n.fireCommand("ExpandCollapse", c);
            }
          }
        }
      }
    }
  },
  _handleActiveRowSelection: function (b) {
    if (this._activeRow) {
      this._selection._selectRowInternal(
        this._activeRow,
        { ctrlKey: this.get_allowMultiRowSelection() && b.ctrlKey },
        false,
        true,
        true
      );
      if (this.ClientSettings.AllowKeyboardNavigation) {
        var c = this._keyboardNavigationProperties;
        var a = this._getPositionedDataItems()[c.currentSelectedIndex];
        if (a && a.get_selected()) {
          c.lastSelectedRowIndex = c.currentSelectedIndex;
        }
        c.lastClickSelectedItem = this._getPositionedDataItems()[
          c.currentSelectedIndex
        ].get_element();
        this._setActiveRow(this._activeRow, b);
      }
      b.preventDefault();
    }
  },
  _handleActiveRowEdit: function (a) {
    if (this._activeRow) {
      a.preventDefault();
      var b = $find(this._activeRow.id.split("__")[0]);
      if (b) {
        b.editItem(this._activeRow);
      }
    }
  },
  _adjustBatchDeletedRows: function () {
    this.get_batchEditingManager()._adjustBatchDeletedRows();
  },
  _getGridRow: function (a) {
    var c = Telerik.Web.UI.Grid.GetFirstParentByTagName(
        Telerik.Web.UI.Grid.GetCurrentElement(a),
        "tr"
      ),
      b = c;
    if (c && c.id != "" && c.id.split("__").length == 2) {
      do {
        if (Telerik.Web.UI.RadGrid.isInstanceOfType($find(b.id))) {
          break;
        }
        b = b.parentNode;
      } while (b);
      if (b && $find(b.id) === this) {
        return c;
      }
    }
    return false;
  },
  _click: function (b) {
    if (!this._canRiseRowEvent(b)) {
      return;
    }
    var a = b.target.className;
    if (
      this._renderMode === Telerik.Web.UI.RenderMode.Lite &&
      a.indexOf &&
      (a.indexOf("rgExpandIcon") > -1 || a.indexOf("rgCollapseIcon") > -1)
    ) {
      return;
    }
    if (
      !this.get_enableAriaSupport() &&
      !!this.ClientSettings.AllowKeyboardNavigation &&
      this.ClientSettings.Selecting.CellSelectionMode ==
        Telerik.Web.UI.GridCellSelectionMode.None
    ) {
      if ($telerik.isIE) {
        if (this.get_element().setActive) {
          try {
            this.get_element().setActive();
          } catch (c) {}
        }
      } else {
        if (this.get_element().focus) {
          this.get_element().focus();
        }
      }
    }
    var d = this._getGridRow(b);
    if (d) {
      this.raise_rowClick(new Telerik.Web.UI.GridDataItemEventArgs(d, b));
    }
  },
  _dblclick: function (a) {
    if ($telerik.isTouchDevice) {
      $telerik.cancelRawEvent(a);
    }
    if (!this._canRiseRowEvent(a)) {
      return;
    }
    var b = this._getGridRow(a);
    if (b) {
      this.raise_rowDblClick(new Telerik.Web.UI.GridDataItemEventArgs(b, a));
    }
  },
  _contextmenu: function (b) {
    if ($telerik.isOpera && b.button != 2) {
      return;
    }
    var c = this._getGridRow(b);
    var a = null;
    if (c) {
      a = new Telerik.Web.UI.GridDataItemCancelEventArgs(c, b);
      this.raise_rowContextMenu(a);
    }
    if (
      a &&
      !a.get_cancel() &&
      this.get_events().getHandler("rowContextMenu")
    ) {
      if (b.preventDefault) {
        b.preventDefault();
      } else {
        b.returnValue = false;
        return false;
      }
    }
  },
  _mouseover: function (a) {
    if (this._overRow) {
      this.raise_rowMouseOut(
        new Telerik.Web.UI.GridDataItemEventArgs(this._overRow, a)
      );
      if (this.Skin != "" && this.ClientSettings.EnableRowHoverStyle) {
        Sys.UI.DomElement.removeCssClass(this._overRow, "rgHoveredRow");
      }
    }
    var b = this._getGridRow(a);
    if (b) {
      this.raise_rowMouseOver(new Telerik.Web.UI.GridDataItemEventArgs(b, a));
      if (this.Skin != "" && this.ClientSettings.EnableRowHoverStyle) {
        Sys.UI.DomElement.addCssClass(b, "rgHoveredRow");
      }
      this._overRow = b;
    }
  },
  _mouseout: function (a) {
    if (
      this._overRow &&
      ((!$telerik.isIE8 && !document.documentMode) ||
        !$telerik.isMouseOverElement(this._overRow, a))
    ) {
      this.raise_rowMouseOut(
        new Telerik.Web.UI.GridDataItemEventArgs(this._overRow, a)
      );
      if (this.Skin != "" && this.ClientSettings.EnableRowHoverStyle) {
        Sys.UI.DomElement.removeCssClass(this._overRow, "rgHoveredRow");
      }
      this._overRow = null;
    }
  },
  _canRiseRowEvent: function (a) {
    var b;
    if ($telerik.isTouchDevice) {
      b = $telerik.getTouchTarget(a);
    } else {
      b = Telerik.Web.UI.Grid.GetCurrentElement(a);
    }
    if (
      !b ||
      !b.tagName ||
      b.tagName.toLowerCase() == "input" ||
      b.tagName.toLowerCase() == "select" ||
      b.tagName.toLowerCase() == "option" ||
      b.tagName.toLowerCase() == "button" ||
      b.tagName.toLowerCase() == "a" ||
      b.tagName.toLowerCase() == "textarea" ||
      b.tagName.toLowerCase() == "img" ||
      ($telerik.isChrome &&
        b.tagName.toLowerCase() == "span" &&
        b.parentNode &&
        b.parentNode.tagName.toLowerCase() == "button")
    ) {
      return false;
    }
    if (
      this.get_masterTableView() &&
      !Telerik.Web.UI.Grid.IsChildOf(
        b,
        this.get_masterTableView().get_element()
      )
    ) {
      return false;
    }
    return true;
  },
  confirm: function (j, b, f, k, l, g) {
    if (window.confirmResult) {
      window.confirmResult = false;
      return true;
    }
    if (typeof window.GetRadWindowManager == "undefined") {
      return window.confirm(j);
    }
    var i = window.GetRadWindowManager();
    if (!i) {
      return window.confirm(j);
    }
    var d = $find(f);
    var c = b.srcElement ? b.srcElement : b.target;
    if (
      c.tagName.toLowerCase() !== "input" &&
      c.tagName.toLowerCase() !== "a" &&
      c.tagName.toLowerCase() !== "button"
    ) {
      c = c.parentNode;
    }
    var h = d.get_masterTableView();
    function a(e) {
      if (e) {
        if (!$telerik.isIE) {
          if (c.onclick.toString().indexOf("_clientDelete(event)") > -1) {
            h._clientDelete(b);
            return false;
          }
        }
        window.confirmResult = true;
        if (c.href && !c.onclick && (window.netscape || $telerik.isSafari)) {
          eval(c.href);
          window.confirmResult = false;
          return;
        }
        if (
          window.netscape &&
          c.type &&
          (c.type.toLowerCase() == "image" ||
            c.type.toLowerCase() == "submit" ||
            c.type.toLowerCase() == "button") &&
          !c.click
        ) {
          __doPostBack(c.name, "");
          window.confirmResult = false;
          return;
        }
        if (c.click) {
          setTimeout(function () {
            c.click(b);
          });
        }
      }
      return false;
    }
    window.radconfirm(
      j,
      a,
      typeof l != "undefined" ? l : 280,
      typeof g != "undefined" ? g : 200,
      this,
      typeof k != "undefined" ? k : "Confirm"
    );
    return false;
  },
};
Telerik.Web.UI.RadGrid.registerClass(
  "Telerik.Web.UI.RadGrid",
  Telerik.Web.UI.RadWebControl
);
Telerik.Web.UI.GridKeyPressEventArgs = function (a) {
  Telerik.Web.UI.GridKeyPressEventArgs.initializeBase(this);
  this._keyCode = a.keyCode || a.charCode;
  this._isShiftPressed = a.shiftKey;
  this._isCtrlPressed = a.ctrlKey;
  this._isAltPressed = a.altKey;
  this._domEvent = a;
};
Telerik.Web.UI.GridKeyPressEventArgs.prototype = {
  get_keyCode: function () {
    return this._keyCode;
  },
  get_isShiftPressed: function () {
    return this._isShiftPressed;
  },
  get_isCtrlPressed: function () {
    return this._isCtrlPressed;
  },
  get_isAltPressed: function () {
    return this._isAltPressed;
  },
  get_domEvent: function () {
    return this._domEvent;
  },
};
Telerik.Web.UI.GridKeyPressEventArgs.registerClass(
  "Telerik.Web.UI.GridKeyPressEventArgs",
  Sys.CancelEventArgs
);
Telerik.Web.UI.GridDragDropCancelEventArgs = function (e, a, b, d, f, c) {
  Telerik.Web.UI.GridDragDropCancelEventArgs.initializeBase(this);
  this._targetItemId = "";
  this._targetItemIndexHierarchical = "";
  this._targetGridDataItem = null;
  this._targetItemTableView = null;
  this._targetItemDataKeyValues = null;
  if (e) {
    this._targetItemId = e.id;
    this._targetItemIndexHierarchical = this._targetItemId.split("__")[1];
    this._targetItemTableView = $find(this._targetItemId.split("__")[0]);
    if (
      this._targetItemTableView &&
      this._targetItemTableView._owner._clientKeyValues &&
      this._targetItemTableView._owner._clientKeyValues[
        this._targetItemIndexHierarchical
      ]
    ) {
      this._targetItemDataKeyValues = this._targetItemTableView._owner._clientKeyValues[
        this._targetItemIndexHierarchical
      ];
    }
  }
  this._domEvent = a;
  this._dragedItems = b;
  this._htmlElement = d;
  this._targetRadGrid = f;
  this._dropPosition = c;
};
Telerik.Web.UI.GridDragDropCancelEventArgs.prototype = {
  get_targetGridDataItem: function () {
    if (this._targetItemTableView && !this._targetGridDataItem) {
      this._targetItemTableView.get_dataItems();
      this._targetGridDataItem = $find(this._targetItemId);
    }
    return this._targetGridDataItem;
  },
  get_targetItemIndexHierarchical: function () {
    return this._targetItemIndexHierarchical;
  },
  get_targetItemId: function () {
    return this._targetItemId;
  },
  get_targetItemTableView: function () {
    return this._targetItemTableView;
  },
  get_domEvent: function () {
    return this._domEvent;
  },
  get_TargetDataKeyValue: function (a) {
    return this._targetItemDataKeyValues
      ? this._targetItemDataKeyValues[a]
      : null;
  },
  get_draggedItems: function () {
    return this._dragedItems;
  },
  get_destinationHtmlElement: function () {
    return this._htmlElement;
  },
  set_destinationHtmlElement: function (a) {
    this._htmlElement = a;
  },
  get_targetRadGrid: function () {
    return this._targetRadGrid;
  },
  get_dropPosition: function () {
    return this._dropPosition;
  },
};
Telerik.Web.UI.GridDragDropCancelEventArgs.registerClass(
  "Telerik.Web.UI.GridDragDropCancelEventArgs",
  Sys.CancelEventArgs
);
Telerik.Web.UI.GridDataItemEventArgs = function (b, a) {
  Telerik.Web.UI.GridDataItemEventArgs.initializeBase(this);
  this._id = "";
  this._itemIndexHierarchical = "";
  this._gridDataItem = null;
  this._tableView = null;
  this._dataKeyValues = null;
  if (b) {
    this._id = b.id;
    this._itemIndexHierarchical = this._id.split("__")[1];
    this._tableView = $find(this._id.split("__")[0]);
    if (
      this._tableView &&
      this._tableView._owner._clientKeyValues &&
      this._tableView._owner._clientKeyValues[this._itemIndexHierarchical]
    ) {
      this._dataKeyValues = this._tableView._owner._clientKeyValues[
        this._itemIndexHierarchical
      ];
    }
  }
  this._domEvent = a;
};
Telerik.Web.UI.GridDataItemEventArgs.prototype = {
  get_item: function () {
    return this.get_gridDataItem();
  },
  get_gridDataItem: function () {
    if (this._tableView && !this._gridDataItem) {
      this._gridDataItem = $find(this._id);
      if (!this._gridDataItem) {
        this._tableView.get_dataItems();
        this._gridDataItem = $find(this._id);
      }
    }
    return this._gridDataItem;
  },
  get_itemIndexHierarchical: function () {
    return this._itemIndexHierarchical;
  },
  get_id: function () {
    return this._id;
  },
  get_tableView: function () {
    return this._tableView;
  },
  get_domEvent: function () {
    return this._domEvent;
  },
  getDataKeyValue: function (a) {
    return this._dataKeyValues ? this._dataKeyValues[a] : null;
  },
};
Telerik.Web.UI.GridDataItemEventArgs.registerClass(
  "Telerik.Web.UI.GridDataItemEventArgs",
  Sys.EventArgs
);
Telerik.Web.UI.GridDataItemCancelEventArgs = function (b, a) {
  Telerik.Web.UI.GridDataItemCancelEventArgs.initializeBase(this);
  this._id = "";
  this._itemIndexHierarchical = "";
  this._gridDataItem = null;
  this._tableView = null;
  this._dataKeyValues = null;
  if (b) {
    this._id = b.id;
    this._itemIndexHierarchical = this._id.split("__")[1];
    this._tableView = $find(this._id.split("__")[0]);
    if (
      this._tableView &&
      this._tableView._owner._clientKeyValues &&
      this._tableView._owner._clientKeyValues[this._itemIndexHierarchical]
    ) {
      this._dataKeyValues = this._tableView._owner._clientKeyValues[
        this._itemIndexHierarchical
      ];
    }
  }
  this._domEvent = a;
};
Telerik.Web.UI.GridDataItemCancelEventArgs.prototype = {
  get_gridDataItem: function () {
    if (this._tableView && !this._gridDataItem) {
      this._tableView.get_dataItems();
      this._gridDataItem = $find(this._id);
    }
    return this._gridDataItem;
  },
  get_itemIndexHierarchical: function () {
    return this._itemIndexHierarchical;
  },
  get_id: function () {
    return this._id;
  },
  get_tableView: function () {
    return this._tableView;
  },
  get_domEvent: function () {
    return this._domEvent;
  },
  getDataKeyValue: function (a) {
    return this._dataKeyValues ? this._dataKeyValues[a] : null;
  },
};
Telerik.Web.UI.GridDataItemCancelEventArgs.registerClass(
  "Telerik.Web.UI.GridDataItemCancelEventArgs",
  Sys.CancelEventArgs
);
Telerik.Web.UI.GridClientDataBindingParameterType = function () {};
Telerik.Web.UI.GridClientDataBindingParameterType.prototype = {
  String: 0,
  List: 1,
  Linq: 2,
  Oql: 3,
};
Telerik.Web.UI.GridClientDataBindingParameterType.registerEnum(
  "Telerik.Web.UI.GridClientDataBindingParameterType",
  false
);
Telerik.Web.UI.GridClientDataResponseType = function () {};
Telerik.Web.UI.GridClientDataResponseType.prototype = { JSON: 0, JSONP: 1 };
Telerik.Web.UI.GridClientDataResponseType.registerEnum(
  "Telerik.Web.UI.GridClientDataResponseType"
);
Telerik.Web.UI.GridClientDataServiceType = function () {};
Telerik.Web.UI.GridClientDataServiceType.prototype = { ADONet: 0, OData: 1 };
Telerik.Web.UI.GridClientDataServiceType.registerEnum(
  "Telerik.Web.UI.GridClientDataServiceType"
);
Telerik.Web.UI.GridDataSourceResolvedEventArgs = function (a) {
  Telerik.Web.UI.GridDataSourceResolvedEventArgs.initializeBase(this);
  this._data = a;
};
Telerik.Web.UI.GridDataSourceResolvedEventArgs.prototype = {
  get_data: function () {
    return this._data;
  },
  set_data: function (a) {
    this._data = a;
  },
};
Telerik.Web.UI.GridDataSourceResolvedEventArgs.registerClass(
  "Telerik.Web.UI.GridDataSourceResolvedEventArgs",
  Sys.EventArgs
);
Telerik.Web.UI.GridCellSelectEventArgs = function (b, a) {
  Telerik.Web.UI.GridCellSelectEventArgs.initializeBase(this);
  this.row = a(b).parent("tr[id]");
  this.rowElement = this.row[0];
  this._id = "";
  this._tableView = null;
  this._col = null;
  if (this.rowElement) {
    this._itemIndexHierarchical = this.rowElement.id.split("__")[1];
    this._id = this.rowElement.id;
    this._tableView = $find(this._id.split("__")[0]);
  }
  var c = this._tableView.get_columns();
  for (var d = 0, e = 0; d < c.length; d++) {
    if (e == a(b).index()) {
      this._col = c[d];
    }
    e++;
  }
};
Telerik.Web.UI.GridCellSelectEventArgs.prototype = {
  get_row: function () {
    return this.rowElement;
  },
  get_column: function () {
    return this._col;
  },
  get_gridDataItem: function () {
    if (this._tableView && !this._gridDataItem) {
      this._tableView.get_dataItems();
      this._gridDataItem = $find(this._id);
    }
    return this._gridDataItem;
  },
  get_tableView: function () {
    return this._tableView;
  },
  get_cellIndexHierarchical: function () {
    return (
      this._itemIndexHierarchical + "&" + this.get_column().get_uniqueName()
    );
  },
};
Telerik.Web.UI.GridCellSelectEventArgs.registerClass(
  "Telerik.Web.UI.GridCellSelectEventArgs",
  Sys.EventArgs
);
Telerik.Web.UI.GridCellSelectCancelEventArgs = function (b, a) {
  Telerik.Web.UI.GridCellSelectCancelEventArgs.initializeBase(this);
  this.row = a(b).parent("tr[id]");
  this.rowElement = this.row[0];
  this._id = "";
  this._tableView = null;
  this._col = null;
  if (this.rowElement) {
    this._id = this.rowElement.id;
    this._tableView = $find(this._id.split("__")[0]);
  }
  var c = this._tableView.get_columns();
  for (var d = 0, e = 0; d < c.length; d++) {
    if (e == a(b).index()) {
      this._col = c[d];
    }
    e++;
  }
};
Telerik.Web.UI.GridCellSelectCancelEventArgs.prototype = {
  get_row: function () {
    return this.rowElement;
  },
  get_column: function () {
    return this._col;
  },
  get_gridDataItem: function () {
    if (this._tableView && !this._gridDataItem) {
      this._tableView.get_dataItems();
      this._gridDataItem = $find(this._id);
    }
    return this._gridDataItem;
  },
};
Telerik.Web.UI.GridCellSelectCancelEventArgs.registerClass(
  "Telerik.Web.UI.GridCellSelectCancelEventArgs",
  Sys.CancelEventArgs
);
Telerik.Web.UI.GridCellSelectionMode = function () {};
Telerik.Web.UI.GridCellSelectionMode.prototype = {
  None: 0,
  SingleCell: 1,
  MultiCell: 2,
  Column: 3,
  MultiColumn: 4,
};
Telerik.Web.UI.GridCellSelectionMode.registerEnum(
  "Telerik.Web.UI.GridCellSelectionMode",
  false
);
Type.registerNamespace("Telerik.Web.UI");
(function (a) {
  a.GridClientSideBinding = function (d) {
    this._grid = d;
    this._masterTableView = d.get_masterTableView();
    this._groupExpressions = this._masterTableView._data.GroupByExpressions;
    this._dataFieldHeaderTextMap = this._masterTableView._data.DataFieldHeaderText;
    this._supressChange = false;
    this._initialBinding = false;
    this._changeDelegate = null;
    this.initialize();
  };
  a.GridClientSideBinding.prototype = {
    initialize: function () {
      var e = this;
      e._clientDataSource = $find(e._grid._clientDataSourceID);
      var d = function () {
        e._clientDataSource = $find(e._grid._clientDataSourceID);
        e._initDataSource();
        Sys.Application.remove_load(d);
      };
      Sys.Application.add_load(d);
    },
    dispose: function () {
      if (this._changeDelegate && this._clientDataSource) {
        this._clientDataSource.remove_change(this._changeDelegate);
        this._clientDataSource.remove_sync(this._changeDelegate);
      }
      this._changeDelegate = null;
      this._clientDataSource = null;
    },
    get_clientDataSource: function () {
      return this._clientDataSource;
    },
    refresh: function () {
      this._change();
    },
    _initDataSource: function () {
      var d = this._grid.get_masterTableView();
      this._grid.add_command(Function.createDelegate(this, this._onCommand));
      this._changeDelegate = Function.createDelegate(this, this._change);
      this._clientDataSource.add_change(this._changeDelegate);
      this._clientDataSource.add_sync(this._changeDelegate);
      if (d._virtualization) {
        d._virtualization.select();
      } else {
        this._initialBinding = true;
        this._clientDataSource.fetch();
      }
    },
    _onCommand: function (r, d) {
      var f = d.get_commandName();
      var e = d.get_commandArgument();
      var u = e.toString().split(":");
      var i = parseInt(u[u.length - 1], 10);
      var m = false;
      switch (f) {
        case "UnGroupByExpression":
          this._updateGroupExpressions({ type: "remove", index: i });
          m = true;
          break;
        case "ReorderGroupByExpression":
          var n = e.toString().split(",");
          var s = parseInt(n[0].split(":")[1], 10);
          var w = parseInt(n[1].split(":")[1], 10);
          var q = Telerik.Web.UI.Grid.reorderArray(
            this._groupExpressions,
            s,
            w
          );
          if (this._grid._renderMode != Telerik.Web.UI.RenderMode.Mobile) {
            var p = this._groupExpressions.length;
            var k = this._grid._groupPanel;
            var l = this._grid._groupPanel._items;
            for (var o = 0; o < p; o++) {
              var h = l[0];
              k._ungroup(h.get_element().childNodes[0]);
            }
            this._grid._groupPanel._items = [];
            for (var v = 0; v < p; v++) {
              var g = q[v];
              this._updateGroupExpressions({ type: "add", field: g.field });
            }
          }
          this._groupExpressions = this._grid.get_masterTableView()._data.GroupByExpressions = q;
          m = true;
          break;
        case "GroupByColumn":
          this._updateGroupExpressions({ type: "add", field: e });
          m = true;
          break;
        case "UnGroupByColumn":
          this._updateGroupExpressions({ type: "remove", field: e });
          m = true;
          break;
        case "SortGroup":
          this._updateGroupExpressions({ type: "sort", field: e });
          m = true;
          break;
        case "Page":
        case "Delete":
        case "PageSize":
        case "Sort":
        case "ClearSort":
        case "Filter":
        case "HeaderSort":
        case "HeaderContextMenuFilter":
        case "RebindGrid":
          m = true;
          break;
      }
      if (m) {
        d.set_cancel(true);
        this._change();
      }
    },
    _updateGroupExpressions: function (r) {
      var s = r.type,
        g = this._groupExpressions,
        q = g.length,
        n,
        f,
        d = $telerik.$;
      var t;
      var m;
      var e;
      var h = this._grid._groupPanel;
      if (s == "add") {
        for (var o = 0; o < q; o++) {
          if (g[o].field == r.field) {
            return;
          }
        }
        g.push({
          field: r.field,
          dir: "asc",
          aggregates: this._masterTableView._data.Aggregates,
        });
        if (h) {
          if (this._grid._renderMode == Telerik.Web.UI.RenderMode.Mobile) {
            e = d(h.cells[0]);
            if (e.find("label").length == 0) {
              m = e.find("span")[0];
              m.innerHTML = "View Groups";
              m.className = "rgGroupPanelCollapse";
              this._masterTableView._initializeGroupPanelEvents();
            }
            t = this._masterTableView._getViewByType(
              a.Grid.MobileViewType.Group
            );
            t._groupFieldNames.push(r.field);
            t._createGroupItem(
              this._dataFieldHeaderTextMap[r.field] || r.field
            );
            t._$element
              .find(".rgUngroup")
              .offEvent(a.EventNamesMap.up)
              .onEvent(a.EventNamesMap.up, d.proxy(t._handleCloseUp, t))
              .on("click", $telerik.preventDefault);
            t._$element
              .find("[class *= 'rgSort']")
              .offEvent(a.EventNamesMap.up)
              .onEvent(a.EventNamesMap.up, d.proxy(t._handleSortUp, t))
              .on("click", $telerik.preventDefault);
          } else {
            if (this._grid._renderMode == Telerik.Web.UI.RenderMode.Lite) {
              h._createLightItems(
                this._dataFieldHeaderTextMap[r.field] || r.field,
                r.field
              );
            } else {
              h._create(
                this._dataFieldHeaderTextMap[r.field] || r.field,
                r.field
              );
            }
          }
        }
      }
      for (n = 0; n < q; n++) {
        f = g[n];
        if (s == "remove" && (f.field == r.field || n === r.index)) {
          this._masterTableView._removeGroupColumn();
          g.splice(n, 1);
          if (h) {
            if (this._grid._renderMode != Telerik.Web.UI.RenderMode.Mobile) {
              var l = h._items;
              l.splice(n, 1);
              for (var p = 0; p < l.length; p++) {
                l[p]._hierarchicalIndex = "0:" + p;
              }
            } else {
              e = d(h.cells[0]);
              if (e.find("label").length == 0) {
                m = e.find("span")[0];
                m.className = "rgGroupPanelCollapse";
                m.innerHTML = this._grid._groupPanelText;
                m.className = "";
                t = this._masterTableView._getViewByType(
                  a.Grid.MobileViewType.Group
                );
                t.hide();
              }
            }
          }
          break;
        } else {
          if (s == "sort" && f.field == r.field) {
            f.dir = f.dir == "asc" ? "desc" : "asc";
          }
        }
      }
    },
    _setAggregatesToClientDataSource: function (f, j) {
      var e = [
        "",
        "sum",
        "min",
        "max",
        "last",
        "first",
        "count",
        "average",
        "countDistinct",
        "custom",
      ];
      f.get_aggregates().clear();
      var g = j.get_columns();
      for (var h = 0; h < g.length; h++) {
        if (g[h]._data.Aggregate) {
          var d = new Telerik.Web.UI.ClientDataSource.Aggregate();
          d.set_field(g[h]._data.DataField);
          d.set_aggregate(e[g[h]._data.Aggregate]);
          f.get_aggregates().add(d);
        }
      }
    },
    _change: function () {
      if (this._supressChange) {
        return;
      }
      var e = this._clientDataSource,
        g = this._grid.get_masterTableView(),
        h = this._grid,
        d = h ? h.get_batchEditingManager() : null;
      var f = g._forceRebind || false;
      g._forceRebind = null;
      if (
        !g._virtualization ||
        (g._virtualization && g._virtualization._isDataBinding)
      ) {
        if (!f) {
          e.get_sortExpressions().clear();
          e.get_sortExpressions().add(
            g.get_sortExpressions().toClientDataSourceList()
          );
          e.get_filterExpressions().clear();
          e.get_filterExpressions().add(
            g.get_filterExpressions().toClientDataSourceList()
          );
          e.get_groupExpressions().clear();
          e.set__groupExpressions(this._groupExpressions);
          this._setAggregatesToClientDataSource(e, g);
          if (!g._virtualization) {
            e.set_allowPaging(g.get_allowPaging());
            if (g.get_allowPaging()) {
              if (g.get_pageSize() != e.get_pageSize()) {
                e.set_pageSize(g.get_pageSize());
              }
              if (g.get_currentPageIndex() != e.get_currentPageIndex()) {
                e.set_currentPageIndex(g.get_currentPageIndex());
              }
            }
          }
        }
        if (!this._databindingInProgress) {
          if (!this._initialBinding) {
            var i = this;
            this._databindingInProgress = true;
            e.fetch(function () {
              g.set_dataSource(f ? e.recreateView() : e.view());
              g.set_virtualItemCount(e.get_totalItemsCount());
              i._databindingInProgress = false;
              g.dataBind();
              g.updateAggregates(e._kendoDataSource.aggregates());
              if (d) {
                d._removeChanges();
              }
            });
          } else {
            this._initialBinding = false;
            this._databindingInProgress = true;
            g.set_dataSource(f ? e.recreateView() : e.view());
            g.set_virtualItemCount(e.get_totalItemsCount());
            this._databindingInProgress = false;
            g.dataBind();
            g.updateAggregates(e._kendoDataSource.aggregates());
            if (d) {
              d._removeChanges();
            }
          }
        }
      }
    },
  };
  a.GridClientSideBinding.registerClass(
    "Telerik.Web.UI.GridClientSideBinding",
    null
  );
  var b = {
      updateAggregates: function (d) {
        var e = null;
        if (this.get_element().tFoot) {
          e = this.get_element().tFoot.rows[0];
        }
        if (
          !e &&
          this._owner.GridFooterDiv &&
          this._owner.GridFooterDiv.children[0]
        ) {
          e = this._owner.GridFooterDiv.children[0].rows[1];
        }
        if (e && e.className == "rgFooter") {
          this._updateAggregates(e, d);
        }
      },
      dataBind: function () {
        if (
          this._virtualization &&
          !this._virtualization._isDataBinding &&
          ((this.get_allowPaging() &&
            this._dataSource.length > this.get_pageSize()) ||
            (!this.get_allowPaging() &&
              this._dataSource.length > this._virtualization._itemsPerView))
        ) {
          this._virtualization._startIndex = null;
          this._virtualization.set_bindingType("Client");
          this._virtualization.set_cachedData(this._dataSource);
          this._virtualization.set_virtualItemCount(this._dataSource.length);
          this._virtualization.select();
          return;
        }
        Array.forEach(
          $telerik.getElementsByClassName(
            this.get_element().tBodies[0],
            "rgGroupHeader"
          ),
          function (i) {
            i.parentNode.removeChild(i);
          }
        );
        Array.forEach(
          $telerik.getElementsByClassName(
            this.get_element().tBodies[0],
            "rgFooter"
          ),
          function (i) {
            i.parentNode.removeChild(i);
          }
        );
        var m = $telerik.getElementByClassName(
          this.get_element(),
          "rgNoRecords"
        );
        if (m) {
          if (this._dataSource.length > 0) {
            m.style.display = "none";
          } else {
            m.style.display = "";
            this._setPagerVisibility(this._data.PagerAlwaysVisible);
          }
        }
        var e = this.get_dataItems();
        var d = this.get_columns();
        var h, k, l;
        var o = $telerik.isOpera
          ? this.get_element()
          : this.get_element().tBodies[0];
        if (this._dataSource.length < e.length || o.rows.length == 1) {
          for (h = 0, k = e.length; h < k; h++) {
            e[h].set_visible(false);
            e[h].get_element().style.display = "none";
          }
          this._cacheDataItems();
        }
        this._dataBind(this._dataSource);
        var f = true;
        if (this._owner._keyboardNavigationProperties) {
          f = this._owner._keyboardNavigationProperties.firstSelection;
        }
        var n = $find(this._owner.get_id());
        if (n._getPositionedDataItems) {
          n._getPositionedDataItems(true);
        }
        if (this._owner._keyboardNavigationProperties) {
          this._owner._keyboardNavigationProperties.firstSelection = f;
        }
        this._fixRowsClassNames();
        this._owner.raise_dataBound(Sys.EventArgs.Empty);
        for (h = 0, l = d.length; h < l; h++) {
          var j = false;
          if (
            d[h].get_element().style.visibility != "hidden" &&
            (d[h].Display == null || d[h].Display == true) &&
            (d[h]._data.Display == null || d[h]._data.Display)
          ) {
            j = true;
          }
          if (!j) {
            this.hideColumn(h);
          }
        }
        if (this.get_id() == this._owner._masterClientID) {
          var g = $find(this._owner.get_id());
          if (g._scrolling) {
            this._owner._scrolling.setHeaderAndFooterDivsWidth();
            g._scrolling._initializeVirtualScrollPaging(true);
          }
        }
      },
      createItem: function (p, l, e) {
        var u = this;
        var k = u.get_dataItems();
        p = p == 0 ? 0 : p || k.length;
        var t = $telerik.isOpera
          ? this.get_element()
          : this.get_element().tBodies[0];
        var s;
        if (p < k.length && k.length > 0) {
          s = t.parentNode.insertRow(k[p].get_element().rowIndex);
        } else {
          if (p === k.length && k.length > 0) {
            s = t.insertRow(-1);
          } else {
            s = t.insertRow(p);
          }
        }
        var d = new Telerik.Web.UI.GridDataItemCancelEventArgs(s, null);
        this._owner.raise_rowCreating(d);
        if (d.get_cancel()) {
          return null;
        }
        var m = document.createDocumentFragment();
        var f;
        var j;
        var q;
        var h;
        var v;
        if (k.length > 0) {
          var o = p == 0 ? k[0].get_id() : k[p - 1].get_id();
          q = o.split("__")[1];
          if (q.indexOf("_") === -1) {
            q = parseInt(o.split("__")[1], 10) + (p == 0 ? -1 : 1);
          } else {
            q = "-1";
          }
          if (l && parseInt(l, 10) < 0 && parseInt(q, 10) > parseInt(l, 10)) {
            q = l;
          }
          s.id = String.format("{0}__{1}", o.split("__")[0], q);
        } else {
          q = typeof l === "undefined" ? "0" : l;
          s.id = String.format("{0}__{1}", this.get_id(), q);
          u._hideRgNoRecordsRow(t);
        }
        s.className = "rgRow";
        if (k[k.length - 2]) {
          var g = k[k.length - 2].get_element().className;
          g = g.replace(" rgActiveRow", "").replace(" rgSelectedRow", "");
          s.className = g;
        }
        j = $create(
          Telerik.Web.UI.GridDataItem,
          { _owner: u, _data: {}, _itemIndexHierarchical: "" + q },
          null,
          null,
          s
        );
        for (var n = 0, r = u.get_columns().length; n < r; n++) {
          h = u.get_columns()[n];
          f = u._createCell(h);
          m.appendChild(f);
          if (!h.Display) {
            f.style.display = "none";
          }
          if (u._data.EditMode == "Batch") {
            if (u._isColumnEditable(h, s)) {
              v = document.createElement("div");
              v.innerHTML = "&nbsp;";
              f.appendChild(v);
              f = v;
            }
          }
          h.initializeCell(f, j);
          if (f.childNodes.length == 0) {
            f.innerHTML = "&nbsp;";
          }
        }
        s.appendChild(m);
        u._clearRowClassStyles(j.get_element());
        if (e) {
          e(j);
        }
        u._owner.raise_rowCreated(
          new Telerik.Web.UI.GridDataItemEventArgs(s, null)
        );
        Array.insert(k, p, j);
        return j;
      },
      _createCell: function (g) {
        var h = this.get_dataItems()[0],
          e = document.createElement("td"),
          f = this._cellAttributes,
          d,
          i;
        if (f && h) {
          d = f[g.get_uniqueName()];
          for (i in d) {
            e.setAttribute(i, d[i]);
          }
        }
        return e;
      },
      _saveCellAttributes: function (h) {
        var f = (this._cellAttributes = {}),
          g = this.get_columns(),
          o = g.length,
          m,
          d,
          k,
          e;
        for (m = 0; m < o; m++) {
          d = f[g[m].get_uniqueName()] = {};
          e = h.get_cell(g[m].get_uniqueName());
          if (e) {
            var l = e.attributes;
            for (var n = 0; n < l.length; n++) {
              k = l[n];
              if (
                k.nodeName !== "style" &&
                ($telerik.isChrome ||
                  k.specified ||
                  (k.nodeName == "value" && k.nodeValue))
              ) {
                d[k.nodeName] = k.nodeValue;
              }
            }
            if (e.style.cssText) {
              d.style = e.style.cssText;
            }
          }
        }
      },
      _isGroup: function (d) {
        return !!(
          d &&
          d.hasOwnProperty("hasSubgroups") &&
          d.items &&
          typeof d.items.length == "number"
        );
      },
      _getGroupLevels: function (d) {
        var e = 0;
        while (this._isGroup(d[0])) {
          e++;
          d = d[0].items;
        }
        return e;
      },
      _dataBind: function (g, o) {
        o = o || {
          dataItemIndex: 0,
          groupLevel: 0,
          groupRowIndex: 0,
          groupLevels: this._getGroupLevels(g),
        };
        var e = this._isGroup(g[0]),
          f = this.get_dataItems(),
          n = g.length,
          l = 0;
        if (e) {
          var k = this._data.GroupByExpressions;
          if (k) {
            var d = {};
            for (var m = 0; m < k.length; m++) {
              var h = k[m];
              d[h.field] = h.alias;
            }
            o.aliasFieldMap = d;
          }
          if (
            this.get_columns()[o.groupLevel]._data.ColumnType !=
            "GridGroupSplitterColumn"
          ) {
            this._createGroupColumn();
          }
          o.groupLevel++;
        }
        this._dataItemsByGlobalIndex = {};
        for (; l < n; l++) {
          if (e) {
            this._createGroup(g[l], o);
          } else {
            if (!o.isEmptyDataGroup) {
              this._appendItem(f[o.dataItemIndex++], g[l], l);
            }
          }
        }
        if (e) {
          o.groupLevel--;
        }
      },
      _createGroup: function (d, f) {
        this._createGroupRow(d, f);
        this._dataBind(d.items, f);
        if (this._data.ShowGroupFooter) {
          for (var e in d.aggregates) {
            this._createAggregateRow(d, f, e);
            break;
          }
        }
      },
      _createGroupRow: function (f, k) {
        var n = this,
          l = document.createElement("tr"),
          h = k.groupLevel,
          j = 0,
          e,
          d;
        k.groupRowIndex += 2;
        l.className = "rgGroupHeader";
        for (; j < h; j++) {
          e = document.createElement("td");
          e.className = "rgGroupCol";
          l.appendChild(e);
        }
        if (
          this.get_owner()._renderMode == Telerik.Web.UI.RenderMode.Mobile ||
          this.get_owner()._renderMode == Telerik.Web.UI.RenderMode.Lite
        ) {
          d = document.createElement("button");
          d.className = "t-button rgActionButton ";
          d.title = "Collapse ";
          var m = document.createElement("span");
          m.className = "t-font-icon rgIcon rgCollapseIcon";
          d.appendChild(m);
        } else {
          d = document.createElement("input");
        }
        d.setAttribute("type", "submit");
        d.setAttribute("title", this._owner._groupingSettings.CollapseTooltip);
        d.id =
          this.get_id() + "__" + k.groupRowIndex + "__" + (k.groupLevel - 1);
        d.className += "rgCollapse";
        d.value = " ";
        d.onclick = function (i) {
          i = i ? i : window.event;
          n._toggleGroupsExpand(d, i);
          return false;
        };
        e.appendChild(d);
        e = document.createElement("td");
        if (this.get_owner()._renderMode == Telerik.Web.UI.RenderMode.Lite) {
          e.innerHTML =
            "<span class='rgGroupHeaderText'>" +
            (k.aliasFieldMap[f.field] ||
              this._data.DataFieldHeaderText[f.field] ||
              f.field) +
            ": " +
            f.value +
            "</span>";
        } else {
          e.innerHTML =
            "<p><span class='rgGroupHeaderText'>" +
            (k.aliasFieldMap[f.field] ||
              this._data.DataFieldHeaderText[f.field] ||
              f.field) +
            ": </span>" +
            f.value +
            "</p>";
        }
        e.setAttribute("colSpan", this._getVisibleColumns().length - h);
        l.appendChild(e);
        if (k.isEmptyDataGroup) {
          var g = $telerik.getElementsByClassName(
            this.get_element().tBodies[0],
            "rgGroupHeader"
          );
          if (g.length > 0) {
            this.get_element().tBodies[0].insertBefore(l, g[k.groupLevel - 1]);
          }
        } else {
          if (
            k.dataItemIndex <
            this.get_dataItems().concat(this._cachedItems).length
          ) {
            this.get_element().tBodies[0].insertBefore(
              l,
              this.get_dataItems()
                .concat(this._cachedItems)
                [k.dataItemIndex].get_element()
            );
          }
        }
      },
      _createAggregateRow: function (g, k) {
        var f = this.get_columns(),
          d = g.aggregates,
          l = document.createElement("tr"),
          h = k.groupLevels;
        l.className = "rgFooter";
        var e;
        var j;
        for (j = 0; j < h; j++) {
          e = document.createElement("td");
          e.className = "rgGroupCol";
          l.appendChild(e);
        }
        for (j = 0; j < f.length - h; j++) {
          e = document.createElement("td");
          l.appendChild(e);
        }
        this._updateAggregates(l, d);
        if (this.get_dataItems().concat(this._cachedItems)[k.dataItemIndex]) {
          this.get_element().tBodies[0].insertBefore(
            l,
            this.get_dataItems()
              .concat(this._cachedItems)
              [k.dataItemIndex].get_element()
          );
        }
      },
      _updateAggregates: function (j, i) {
        var d = [
          "",
          "sum",
          "min",
          "max",
          "last",
          "first",
          "count",
          "average",
          "countDistinct",
          "custom",
        ];
        var h = this.get_columns();
        for (var e = 0; e < h.length; e++) {
          var g = h[e];
          if (g._data.Aggregate && g._data.DataField) {
            var f = this._getCellByColumnUniqueNameFromTableRowElement(
              j,
              g._data.UniqueName
            );
            if (i[g._data.DataField]) {
              if (g._data.AggregateClientFormatString.indexOf("{0}")) {
                f.innerHTML = g._data.AggregateClientFormatString.replace(
                  "{0}",
                  i[g._data.DataField][d[g._data.Aggregate]]
                );
              } else {
                f.innerHTML = i[g._data.DataField][d[g._data.Aggregate]];
              }
            } else {
              f.innerHTML = "";
            }
          }
        }
      },
      _appendItem: function (l, m, o) {
        var i = this.get_columns();
        if (l == null) {
          l = this._getNextCachedItem();
          if (l) {
            Array.add(this._dataItems, l);
          }
        }
        if (this._virtualization) {
          this._dataItemsByGlobalIndex[
            this._virtualization.get_startIndex() + o
          ] = l;
          if (this._virtualization._shouldLoadState) {
            this._virtualization.loadState(l);
          } else {
            this._virtualization.hideEditFormItem(
              l.get_editFormItem(),
              l.get_element()
            );
            this._virtualization.updateItemState(l);
          }
        }
        if (l == null) {
          l = this.createItem();
          if (!l) {
            return;
          }
        }
        var p = l.get_element().className.indexOf("rgEditRow") !== -1;
        if (
          l.get_element().style.display == "none" ||
          l.get_element().style.visibility == "hidden"
        ) {
          l.set_visible(true);
          l.get_element().style.display = $telerik.isIE ? "" : "table-row";
        }
        if (
          this._owner._clientKeyValues &&
          this._data &&
          this._data.clientDataKeyNames
        ) {
          for (
            var r = 0, t = this._data.clientDataKeyNames.length;
            r < t;
            r++
          ) {
            var f = this._data.clientDataKeyNames[r];
            var g = m ? m[f] : null;
            if (this._owner._clientKeyValues[l._itemIndexHierarchical]) {
              this._owner._clientKeyValues[l._itemIndexHierarchical][f] = g;
            } else {
              var u = {};
              if (
                this._owner._clientKeyValues[l._itemIndexHierarchical] != null
              ) {
                u = this._owner._clientKeyValues[l._itemIndexHierarchical];
                u[f] = g;
                this._owner._clientKeyValues[l._itemIndexHierarchical] = u;
              } else {
                u = {};
                u[f] = g;
                this._owner._clientKeyValues[l._itemIndexHierarchical] = u;
              }
            }
          }
        }
        if (this._data._dataBindTemplates && p) {
          this._fillTemplateEditorsData(l, m);
        }
        for (var q = 0, s = i.length; q < s; q++) {
          var w = i[q].get_uniqueName();
          var e = this._getCellByColumnUniqueNameFromTableRowElement(
            l.get_element(),
            w
          );
          if (!e) {
            continue;
          }
          if (this._virtualization) {
            this._virtualization.loadCellSelection(l, e, w);
          }
          if (
            this._data.EditMode === "Batch" &&
            this._isColumnEditable(i[q], l.get_element())
          ) {
            e = e.children[0];
          }
          var n = i[q]._data.DataField;
          if (i[q]._data.ColumnType == "GridAttachmentColumn") {
            n = i[q]._data.DataTextField;
          }
          if (typeof n == "undefined") {
            n = w;
          }
          var x = m[n];
          if (x == null) {
            x = "";
          }
          if (typeof x != "undefined") {
            var h = i[q];
            if (p) {
              h.populateEditCell(e, m, x, l);
            } else {
              h.populateCell(e, m, x, l);
            }
          }
        }
        var d = {};
        var v = m;
        d.get_dataItem = function () {
          return v;
        };
        d.get_item = function () {
          return l;
        };
        l._dataItem = v;
        this._owner.raise_rowDataBound(d);
      },
      _getHeaderRow: function () {
        var d;
        if (this._hasMultiHeaders) {
          var f = this._owner.ClientSettings.Scrolling;
          var e = f && f.AllowScroll && f.UseStaticHeaders;
          var g = e
            ? this._owner.get_masterTableViewHeader().get_element()
            : this.get_element();
          d = $telerik.getElementByClassName(g.tHead, "rgMultiHeaderRow");
        } else {
          d =
            this.HeaderRow || this._owner.get_masterTableViewHeader().HeaderRow;
        }
        return d;
      },
      _createGroupColumn: function () {
        this._owner.raise_columnCreating(new Sys.EventArgs());
        var g = this._getHeaderRow(),
          e = document.createElement("th");
        if (g) {
          e.className = "rgHeader rgGroupCol";
          e.setAttribute("scope", "col");
          e.innerHTML = "&nbsp";
          if (this._hasMultiHeaders) {
            e.id =
              this.get_id() + "GroupColumn" + g.cells.length + "_MultiHeader-1";
            e.rowSpan = $telerik.getElementsByClassName(
              g.parentNode,
              "rgMultiHeaderRow"
            ).length;
          }
          g.insertBefore(e, g.cells[0]);
        }
        this._updateColGroups(true);
        var f = $create(
          Telerik.Web.UI.GridColumn,
          {
            _owner: this,
            _data: {
              UniqueName: "GroupColumnClient" + this._groupColumnIndex++,
              ColumnType: "GridGroupSplitterColumn",
            },
          },
          null,
          null,
          e
        );
        var d = new Sys.EventArgs();
        d.get_column = function () {
          return f;
        };
        f.Display = true;
        Array.forEach(this.get_dataItems().concat(this._cachedItems), function (
          h
        ) {
          h.get_element().insertBefore(
            document.createElement("td"),
            h.get_element().cells[0]
          );
        });
        this._updateRows(true);
        this._columnsInternal.unshift(f);
        this._createColumnsByUniqueNameHash();
        this._owner.raise_columnCreated(d);
      },
      _removeGroupColumn: function () {
        var d = this._getHeaderRow();
        d.removeChild(d.cells[0]);
        this._updateColGroups(false);
        this._updateRows(false);
        Array.forEach(this.get_dataItems().concat(this._cachedItems), function (
          e
        ) {
          e.get_element().removeChild(e.get_element().cells[0]);
        });
        this._columnsInternal.shift().dispose();
        this._createColumnsByUniqueNameHash();
      },
      _updateColGroups: function (d) {
        var e = this._owner;
        this._updateColGroup(this, d);
        if (e.get_masterTableViewHeader()) {
          this._updateColGroup(e.get_masterTableViewHeader(), d);
        }
        if (e.get_masterTableViewFooter()) {
          this._updateColGroup(e.get_masterTableViewFooter(), d);
        }
      },
      _updateColGroup: function (f, d) {
        if (d) {
          var e = document.createElement("col");
          e.style.width =
            this.get_owner()._renderMode == Telerik.Web.UI.RenderMode.Mobile
              ? "41px"
              : "20px";
          f.ColGroup.insertBefore(e, f.ColGroup.getElementsByTagName("col")[0]);
          f.ColGroup.Cols.unshift(e);
        } else {
          f.ColGroup.removeChild(f.ColGroup.getElementsByTagName("col")[0]);
          f.ColGroup.Cols.shift();
        }
      },
      _updateRows: function (d) {
        var g = this._owner.get_element(),
          f = $telerik.getElementByClassName(g, "rgCommandCell"),
          j = $telerik.getElementByClassName(g, "rgGroupPanelCell"),
          h = $telerik.getElementByClassName(g, "rgFilterRow"),
          i = $telerik.getElementByClassName(g, "rgFooter"),
          k = $telerik.getElementByClassName(g, "rgPager"),
          e = d ? 1 : -1;
        if (this._owner._renderMode == Telerik.Web.UI.RenderMode.Lite) {
          j = $telerik.getElementByClassName(g, "rgGroupPanel").parentNode;
        }
        if (f) {
          f.colSpan += e;
        }
        if (j) {
          j.colSpan += e;
        }
        if (k) {
          k.cells[0].colSpan += e;
        }
        if (h) {
          if (d) {
            this._prependCell(h);
          } else {
            h.removeChild(h.cells[0]);
          }
        }
        if (i) {
          if (d) {
            this._prependCell(i);
          } else {
            i.removeChild(i.cells[0]);
          }
        }
      },
      _prependCell: function (e) {
        if (e) {
          var d = document.createElement("td");
          d.innerHTML = "&nbsp;";
          e.insertBefore(d, e.cells[0]);
          return d;
        }
        return {};
      },
      _isColumnEditable: function (d, g) {
        if (!d) {
          return;
        }
        var e = d._data,
          f = g && g.id.split("__")[1].charAt(0) === "-";
        if (f && e.InsertVisiblityMode === "AlwaysHidden") {
          return false;
        }
        return e.Editable || (f && e.InsertVisiblityMode === "AlwaysVisible");
      },
      _hideRgNoRecordsRow: function (g) {
        var f = g.rows,
          e;
        for (var d = 0; d < f.length; d++) {
          e = f[f.length - d - 1];
          if (e.className && e.className.indexOf("rgNoRecords") !== -1) {
            e.style.display = "none";
            break;
          }
        }
      },
      _clearRowClassStyles: function (g) {
        var h = ["rgSelectedRow"];
        var d = ["rgSelectedCell"];
        var e;
        for (e = 0; e < h.length; e++) {
          Sys.UI.DomElement.removeCssClass(g, h[e]);
        }
        for (e = 0; e < d.length; e++) {
          var k = g.getElementsByTagName("td");
          for (var f = 0; k.length < e; e++) {
            Sys.UI.DomElement.removeCssClass(k[f], d[e]);
          }
        }
      },
      _getBindingContext: function (d, e) {
        return this._extend({}, d, {
          item: d,
          index: e,
          dataIndex:
            typeof e !== "undefined"
              ? this.get_currentPageIndex() * this.get_pageSize() + e
              : null,
          isSelected:
            typeof e !== "undefined" &&
            Array.contains(this._owner._selectedIndexes, e + ""),
          owner: this,
          format: this._formatValue,
        });
      },
      _formatValue: function (e, d) {
        if (typeof e === "undefined" || e === null) {
          return "";
        }
        if (e.toString().indexOf("/Date(") != -1) {
          e = new Date(parseInt(e.replace("/Date(", "").replace(")/", ""), 10));
        }
        if (d) {
          if (d.indexOf("{0:") < 0) {
            d = "{0:" + d + "}";
          }
        } else {
          d = "{0}";
        }
        return String.localeFormat(d, e);
      },
      _extend: function (g, e) {
        if (arguments.length > 2) {
          for (var d = 1; d < arguments.length; d++) {
            this._extend(g, arguments[d]);
          }
        } else {
          for (var f in e) {
            g[f] = e[f];
          }
        }
        return g;
      },
      _cacheDataItems: function () {
        var d = this.get_dataItems();
        if (this._cachedItems && this._cachedItems.length > 0) {
          var f = this._cachedItems;
          this._cachedItems = d.splice(
            this._dataSource.length,
            d.length - this._dataSource.length
          );
          for (var e = 0; e < f.length; e++) {
            this._cachedItems[this._cachedItems.length] = f[e];
          }
          f = null;
        } else {
          this._cachedItems = d.splice(
            this._dataSource.length,
            d.length - this._dataSource.length
          );
        }
      },
      _getNextCachedItem: function () {
        if (this._cachedItems && this._cachedItems.length > 0) {
          return this._cachedItems.splice(0, 1)[0];
        }
      },
      _fillTemplateEditorsData: function (h, f, d) {
        var n = null;
        if (
          this._owner._editIndexes.length > 0 &&
          Array.contains(this._owner._editIndexes, f._itemIndexHierarchical)
        ) {
          if (d == null) {
            if (h._owner._data.EditMode == "InPlace") {
              n = h.get_element();
            } else {
              n = h.get_element().nextSibling;
            }
          }
        } else {
          n = h.get_element();
        }
        if (!n && !d) {
          return;
        }
        if (!d) {
          if (!n.tagName) {
            return;
          }
          if (n.tagName.toLowerCase() != "tr") {
            return;
          }
        }
        for (var m in f) {
          var e = $telerik.findControl(d != null ? d : n, m);
          if (e != null) {
            var o = Object.getType(e).getName();
            if (
              o == "Telerik.Web.UI.RadTextBox" ||
              o == "Telerik.Web.UI.RadNumericTextBox" ||
              o == "Telerik.Web.UI.RadMaskedTextBox"
            ) {
              e.set_value(f[m]);
              continue;
            }
            if (o == "Telerik.Web.UI.RadDateInput") {
              e.set_selectedDate(f[m]);
              continue;
            }
            if (o == "Telerik.Web.UI.RadDatePicker") {
              e.set_selectedDate(f[m]);
              continue;
            }
            if (o == "Telerik.Web.UI.RadEditor") {
              e.set_html(f[m]);
              continue;
            }
            if (o == "Telerik.Web.UI.RadComboBox") {
              var i = e.findItemByValue(f[m]);
              if (i) {
                i.select();
              } else {
                e.set_value(f[m]);
              }
              continue;
            }
          }
          var g = $telerik.findElement(d != null ? d : n, m);
          if (g != null) {
            if (g.tagName.toLowerCase() == "input") {
              if (g.type != "checkbox" && g.type != "radio") {
                g.value = f[m];
                continue;
              } else {
                g.checked = f[m];
                continue;
              }
            } else {
              if (g.tagName.toLowerCase() == "span") {
                g.innerHTML = f[m];
                continue;
              } else {
                if (g.tagName.toLowerCase() == "textarea") {
                  g.innerHTML = f[m];
                  continue;
                } else {
                  if (g.tagName.toLowerCase() == "select") {
                    var l = g.options;
                    for (var j = 0; j < l.length; j++) {
                      if (l[j].value == f[m]) {
                        l[j].selected = true;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      _getEditFormCellByUniqueName: function (h, f) {
        var d = null;
        var j = h.get_element().nextSibling;
        if (j == null) {
          return;
        }
        if (!j.tagName) {
          return;
        }
        if (j.tagName.toLowerCase() != "tr") {
          return;
        }
        var e = j.getElementsByTagName("td");
        for (var k = 0, m = e.length; k < m; k++) {
          if (!e[k].id || e[k].id == "") {
            continue;
          }
          var g = e[k].id.split("__");
          if (g[g.length - 1] && g[g.length - 1] == f.get_uniqueName()) {
            d = e[k];
            break;
          }
        }
        return d;
      },
      _fillEditorsData: function (f, e, o) {
        var n = e._data.ColumnType;
        var d = null;
        if (e._owner._data.EditMode == "InPlace") {
          d = this.getCellByColumnUniqueName(f, e.get_uniqueName());
        } else {
          d = this._getEditFormCellByUniqueName(f, e);
        }
        if (d == null) {
          return;
        }
        var i, h, l;
        if (n == "GridBoundColumn") {
          i = d.getElementsByTagName("input");
          if (i.length > 0) {
            i[0].value = o;
          }
        }
        if (n == "GridDateTimeColumn") {
          i = d.getElementsByTagName("input");
          for (l = 0; l < i.length; l++) {
            var g = $find(i[l].id);
            if (g != null) {
              g.set_selectedDate(o);
            }
          }
        }
        if (n == "GridNumericColumn") {
          i = d.getElementsByTagName("input");
          for (l = 0; l < i.length; l++) {
            h = $find(i[l].id);
            if (h != null) {
              h.set_value(o);
            }
          }
        }
        if (n == "GridHTMLEditorColumn") {
          i = d.getElementsByTagName("textarea");
          for (l = 0; l < i.length; l++) {
            h = $find(i[l].id);
            if (h != null) {
              h.set_html(o);
            }
          }
        }
        if (n == "GridDropDownColumn") {
          i = d.getElementsByTagName("input");
          for (l = 0; l < i.length; l++) {
            h = $find(i[l].id.replace("_Input", ""));
            if (h != null) {
              var j = h.findItemByValue(o);
              if (j) {
                j.select();
              }
            }
          }
          var m = d.getElementsByTagName("option");
          for (l = 0; l < m.length; l++) {
            if (m[l].value == o) {
              m[l].selected = true;
            }
          }
        }
        if (n == "GridCheckBoxColumn") {
          i = d.getElementsByTagName("input");
          if (i.length == 1 && i[0].type == "checkbox") {
            i[0].checked = o;
          }
        }
      },
      extractValuesFromItem: function (w) {
        w = this._getRowByIndexOrItemIndexHierarchical(w);
        if (
          Telerik.Web.UI.Grid.GetFirstParentByTagName(w, "table") !==
          this.get_element()
        ) {
          return null;
        }
        this.get_dataItems();
        var g = this.get_columns();
        var v = {};
        for (var p = 0, u = g.length; p < u; p++) {
          var f = g[p];
          var A = f.get_uniqueName();
          var z = f._data.ColumnType;
          var m = f._data.DataField;
          var d;
          var r;
          var q;
          var s, t;
          if (this._data.EditMode != "InPlace") {
            var o = w.id.indexOf("__") > -1 ? w.nextSibling : w;
            var e = o.getElementsByTagName("td");
            for (s = 0, t = e.length; s < t; s++) {
              if (!e[s].id || e[s].id.indexOf("__") < 0) {
                continue;
              }
              var h = e[s].id.split("__");
              if (h[h.length - 1] == f.get_uniqueName()) {
                d = e[s];
                break;
              }
            }
          } else {
            d = this._getCellByColumnUniqueNameFromTableRowElement(w, A);
          }
          if (!d) {
            continue;
          }
          if (z == "GridBoundColumn") {
            r = d.getElementsByTagName("input");
            if (r.length == 1) {
              v[m] = r[0].value;
            }
          }
          if (z == "GridDateTimeColumn") {
            r = d.getElementsByTagName("input");
            for (t = 0; t < r.length; t++) {
              var n = $find(r[t].id);
              if (n != null) {
                v[m] = n.get_selectedDate();
              }
            }
          }
          if (z == "GridNumericColumn") {
            r = d.getElementsByTagName("input");
            for (t = 0; t < r.length; t++) {
              q = $find(r[t].id);
              if (q != null) {
                v[m] = q.get_value();
              }
            }
          }
          if (z == "GridHTMLEditorColumn") {
            r = d.getElementsByTagName("textarea");
            for (t = 0; t < r.length; t++) {
              q = $find(r[t].name.replace(/\$/gi, "_")) || $find(r[t].id);
              if (q && q.get_html) {
                v[m] = q.get_html();
              }
            }
          }
          if (z == "GridDropDownColumn") {
            r = d.getElementsByTagName("input");
            for (t = 0; t < r.length; t++) {
              q = $find(r[t].id.replace("_Input", ""));
              if (q != null) {
                v[m] = q.get_value();
              }
            }
            var y = d.getElementsByTagName("select");
            if (y.length > 0) {
              var x = y[0];
              v[m] = x.options[x.selectedIndex].value;
            }
          }
          if (z == "GridCheckBoxColumn") {
            r = d.getElementsByTagName("input");
            if (r.length == 1 && r[0].type == "checkbox") {
              v[m] = r[0].checked;
            }
          }
        }
        return v;
      },
      extractOldValuesFromItem: function (f) {
        f = this._getRowByIndexOrItemIndexHierarchical(f);
        this.get_dataItems();
        var d = $find(f.id);
        var e = {};
        if (d != null) {
          e = d.get_dataItem();
        }
        return e;
      },
      extractKeysFromItem: function (g) {
        var e = {};
        g = this._getRowByIndexOrItemIndexHierarchical(g);
        if (g && g.id && g.id.indexOf("__") > -1) {
          var d = g.id.split("__")[1];
          if (this._owner._clientKeyValues && this._owner._clientKeyValues[d]) {
            var h = this._owner._clientKeyValues[d];
            for (var f in h) {
              e[f] = h[f];
            }
          }
        }
        return e;
      },
      prepareSortQueryOption: function (g, j) {
        if (j != null && j != "" && g.get_count() > 0) {
          var h = j.split(",");
          var d = "";
          var l = true;
          for (var f = 0; f < h.length; f++) {
            for (var e = 0; e < g.get_count(); e++) {
              if (h[f].indexOf(g.getItem(e).get_fieldName()) > -1) {
                l = false;
                break;
              }
            }
            if (l) {
              d += h[f] + ", ";
            } else {
              l = true;
            }
          }
          return d.substring(0, d.lastIndexOf(","));
        } else {
          return j;
        }
      },
      getDataServiceQuery: function (n, g, m, d, h) {
        m = this.prepareSortQueryOption(this.get_sortExpressions(), m);
        var k = this.get_sortExpressions()
          .toString()
          .replace(/ ASC/gm, " asc")
          .replace(/ DESC/gm, " desc");
        var e = this.get_filterExpressions().toDataService();
        d = typeof d === "undefined" ? this.get_currentPageIndex() : d;
        h = typeof h === "undefined" ? this.get_pageSize() : h;
        var j = new Sys.StringBuilder();
        var l = "&$orderby={0}";
        if (m != null && m != "") {
          l = String.format(l, m);
          if (k != "") {
            l += ", {0}";
            j.append(String.format(l, k));
          } else {
            j.append(l);
          }
        } else {
          if (k != "") {
            j.append(String.format(l, k));
          }
        }
        var f = "&$filter={0}";
        if (g != null && g != "") {
          f = String.format(f, g);
          if (e != "") {
            f += " and {0}";
            j.append(String.format(f, e));
          } else {
            j.append(f);
          }
        } else {
          if (e != "") {
            j.append(String.format(f, e));
          }
        }
        if (
          this._owner._isBoundToServiceType(
            Telerik.Web.UI.GridClientDataServiceType.OData
          )
        ) {
          if (this.get_allowPaging() || this._virtualization) {
            j.append("&$inlinecount=allpages");
          }
          if (this._owner._getDataResponseType() === "jsonp") {
            j.append("&$format=json");
          }
        }
        if (this.get_allowPaging() || this._virtualization) {
          j.append(String.format("&$top={0}&$skip={1}", h, d * h));
        }
        var i = j.toString();
        if (n.indexOf("?") > -1) {
          return n + i;
        }
        return n + "?" + i.substr(1);
      },
    },
    c;
  for (c in b) {
    a.GridTableView.prototype[c] = b[c];
  }
})(Telerik.Web.UI);

/* END Telerik.Web.UI.Grid.RadGridScripts.js */
/* START Telerik.Web.UI.Scheduler.Helpers.DateTime.js */
Type.registerNamespace("Telerik.Web.UI.Scheduler");
(function () {
  var b = Telerik.Web.UI;
  var c = 60000;
  var a = (b.Scheduler.DateTime = function (d) {
    if (!d) {
      this._date = new Date();
      return;
    }
    if (d.getTime) {
      this._date = new Date(d.getTime());
    } else {
      this._date = new Date(d);
    }
  });
  a.add = function (d, f) {
    var e = f.get_ticks ? f.get_ticks() : f;
    return a._addTicks(d, e);
  };
  a.subtract = function (d, e) {
    e = new a(e).toDate();
    var f = d.getTime() - e;
    var g = d.getTimezoneOffset() - e.getTimezoneOffset();
    return f - g * c;
  };
  a.areEqual = function (d, e) {
    return !(d > e || e > d);
  };
  a.getDate = function (d) {
    return new Date(d.getFullYear(), d.getMonth(), d.getDate());
  };
  a.getTimeOfDay = function (d) {
    return a.subtract(d, a.getDate(d));
  };
  a._addTicks = function (d, f) {
    var g = d.getTimezoneOffset();
    var e = new Date(d.getTime() + f);
    var h = e.getTimezoneOffset() - g;
    return new Date(e.getTime() + h * c);
  };
  b.Scheduler.DateTime.prototype = {
    get_date: function () {
      return new a(a.getDate(this._date));
    },
    get_timeOfDay: function () {
      return a.getTimeOfDay(this._date);
    },
    add: function (d) {
      return new a(a.add(this._date, d));
    },
    subtract: function (d) {
      return a.subtract(this._date, d);
    },
    toDate: function () {
      return this._date;
    },
  };
  b.Scheduler.TimeSpan = function (d) {
    this._ticks = d || 0;
  };
  b.Scheduler.TimeSpan.prototype = {
    get_ticks: function () {
      return this._ticks;
    },
  };
})();

/* END Telerik.Web.UI.Scheduler.Helpers.DateTime.js */
/* START Telerik.Web.UI.Scheduler.RadSchedulerScripts.js */
Type.registerNamespace("Telerik.Web.UI");
(function (a, b, g) {
  var f = 60000;
  var e = f * 60;
  var d = e * 24;
  b.RecurrenceState = function () {};
  b.RecurrenceState.prototype = {
    NotRecurring: 0,
    Master: 1,
    Occurrence: 2,
    Exception: 3,
  };
  b.RecurrenceState.registerEnum("Telerik.Web.UI.RecurrenceState");
  b.SchedulerAppointment = function (l, k) {
    this._attributes = new b.SchedulerAttributeCollection(this);
    this._visible = true;
    this._domElement = null;
    this._domElements = [];
    this._recurrenceState = b.RecurrenceState.NotRecurring;
    this._recurrenceRule = "";
    this._backColor = null;
    this._borderStyle = "solid";
    this._borderColor = null;
    this._borderWidth = null;
    this._selected = false;
    if (!l) {
      return;
    }
    this._serverData = l;
    this._id = l.id;
    this._subject = l.subject;
    this._description = l.description;
    this._start = new Date(Date.parse(l.start));
    this._end = new Date(Date.parse(l.end));
    this._toolTip = l.toolTip;
    this._internalID = l.internalID;
    this._visible = l.visible;
    this._recurrenceState = l.recurrenceState;
    this._recurrenceParentID = l.recurrenceParentID;
    this._contextMenuID = l.contextMenuID;
    this._serializedResources = l.resources;
    this._resources = null;
    this._timeZoneID = l.timeZoneID || k._timeZoneId;
    if (l.domElements) {
      for (var h = 0, j = l.domElements.length; h < j; h++) {
        this._domElements[h] = $get(l.domElements[h]);
      }
    }
    this._column = null;
    this._allowEdit = null;
    if (typeof l.allowEdit != "undefined") {
      this._allowEdit = l.allowEdit;
    }
    this._allowDelete = null;
    if (typeof l.allowDelete != "undefined") {
      this._allowDelete = l.allowDelete;
    }
    this._owner = k;
    this._originalParent = null;
    this._originalLeftOffset = null;
    this._originalLeftMargin = null;
    if (typeof l.attributes != "undefined") {
      this._attributes._load(l.attributes);
    }
  };
  b.SchedulerAppointment.prototype = {
    get_id: function () {
      return this._id;
    },
    get_internalID: function () {
      return this._internalID;
    },
    get_subject: function () {
      return this._subject;
    },
    set_subject: function (h) {
      this._subject = h;
    },
    get_description: function () {
      return this._description;
    },
    set_description: function (h) {
      this._description = h;
    },
    get_start: function () {
      return this._start;
    },
    set_start: function (h) {
      this._start = h;
    },
    get_end: function () {
      return this._end;
    },
    set_end: function (h) {
      this._end = h;
    },
    get_timeZoneID: function () {
      return this._timeZoneID;
    },
    set_timeZoneID: function (h) {
      this._timeZoneID = h;
    },
    get_duration: function () {
      return this._end - this._start;
    },
    get_durationInMinutes: function () {
      return Math.round(this.get_duration() / f);
    },
    set_selected: function (i) {
      var h = this.get_element();
      this._selected = i;
      a(h).toggleClass("rsAptSelected", i);
    },
    get_selected: function () {
      return this._selected;
    },
    get_toolTip: function () {
      return this._toolTip;
    },
    set_toolTip: function (h) {
      this._toolTip = h;
      if (this._domElements && this._domElements.length) {
        a.each(this._domElements, function () {
          this.title = h;
        });
      }
    },
    get_cssClass: function () {
      return this._cssClass || "";
    },
    set_cssClass: function (h) {
      this._cssClass = h;
      if (this._domElements && this._domElements.length) {
        a.each(this._domElements, function () {
          this.className = "rsApt";
          a(this).addClass(h);
        });
      }
    },
    set_backColor: function (h) {
      this._backColor = h;
      var j = a(this.get_elements());
      var i = j;
      if (this._owner && this._owner.get_renderMode() === b.RenderMode.Lite) {
        i = a(".rsAptContent", j);
        j.addClass("rsAptColor");
      } else {
        if (this._getStyleMode() == b.AppointmentStyleMode.Default) {
          i = a(".rsAptMid, .rsAptContent, .rsAptIn", j);
          j.addClass("rsAptColor");
        } else {
          j.addClass("rsAptSimple");
        }
      }
      i.css("background-color", h);
    },
    get_backColor: function () {
      return this._backColor;
    },
    set_borderStyle: function (h) {
      this._borderStyle = h;
      this._renderBorder();
    },
    get_borderStyle: function () {
      return this._borderStyle;
    },
    set_borderColor: function (h) {
      this._borderColor = h;
      this._renderBorder();
    },
    get_borderColor: function () {
      return this._borderColor;
    },
    set_borderWidth: function (h) {
      if (typeof h == "number") {
        h += "px";
      }
      this._borderWidth = h;
      this._renderBorder();
    },
    get_borderWidth: function () {
      return this._borderWidth;
    },
    get_visible: function () {
      return this._visible;
    },
    get_radScheduler: function () {
      return this._owner;
    },
    get_owner: function () {
      return this._owner;
    },
    _setOwner: function (h) {
      this._owner = h;
    },
    get_allowEdit: function () {
      return this._allowEdit == null ? true : this._allowEdit;
    },
    set_allowEdit: function (h) {
      this._allowEdit = h;
    },
    get_allowDelete: function () {
      return this._allowDelete == null ? true : this._allowDelete;
    },
    set_allowDelete: function (h) {
      this._allowDelete = h;
    },
    get_element: function () {
      if (
        !this._domElement &&
        this._domElements &&
        this._domElements.length > 0
      ) {
        this._domElement = this._domElements[0];
      }
      return this._domElement;
    },
    get_elements: function () {
      return this._domElements;
    },
    get_timeSlot: function () {
      var h = this.get_owner();
      if (!h) {
        return null;
      }
      return h.get_activeModel().getTimeSlotForAppointment(this);
    },
    get_attributes: function () {
      return this._attributes;
    },
    get_recurrenceState: function () {
      return this._recurrenceState;
    },
    set_recurrenceState: function (h) {
      this._recurrenceState = h;
    },
    get_recurrenceRule: function () {
      return this._recurrenceRule;
    },
    set_recurrenceRule: function (h) {
      this._recurrenceRule = h;
    },
    get_recurrenceParentID: function () {
      return this._recurrenceParentID;
    },
    get_resources: function () {
      if (!this._resources) {
        this._resources = new b.SchedulerResourceCollection();
        for (var j in this._serializedResources) {
          var i = this._serializedResources[j];
          if (i.text) {
            this._resources.add(new b.SchedulerResource(i));
          } else {
            var k = this.get_owner().get_resources().getResourcesByType(i.type);
            var h = this._resources;
            k.forEach(function (l) {
              if (l.get_key() == i.key) {
                h.add(l);
              }
            });
          }
        }
      }
      return this._resources;
    },
    edit: function () {
      var h = this.get_owner();
      if (h) {
        h.editAppointment(this);
      }
    },
    remove: function () {
      var h = this.get_owner();
      if (h) {
        h.deleteAppointment(this);
      }
    },
    compare: function (h) {
      if (this.get_start().getTime() < h.get_start().getTime()) {
        return -1;
      }
      if (this.get_start().getTime() > h.get_start().getTime()) {
        return 1;
      }
      if (this.get_end().getTime() > h.get_end().getTime()) {
        return -1;
      }
      return 0;
    },
    _isAllDay: function () {
      return this.get_duration() % d == 0;
    },
    _isInRange: function (l, j) {
      var i = this.get_start();
      var h = this.get_end();
      var k = i < j && h > l;
      if (this.get_duration() == 0) {
        return k || i.getTime() == l.getTime();
      }
      return k;
    },
    _startsInRange: function (j, i) {
      var h = this.get_start();
      return h < i && h > j;
    },
    _rangeIsInsideAppointment: function (i, h) {
      return this.get_start() <= i && this.get_end() >= h;
    },
    _getTimeSlot: function () {
      if (!this._timeSlot) {
        if (!this.get_owner()) {
          return null;
        }
        this._timeSlot = this.get_owner()
          .get_activeModel()
          .getTimeSlotForAppointment(this);
      }
      return this._timeSlot;
    },
    _getColumn: function () {
      return this._column;
    },
    _setColumn: function (h) {
      this._column = h;
    },
    _setRowIndex: function (h) {
      this._rowIndex = h;
    },
    _getRowIndex: function () {
      return this._rowIndex;
    },
    _startDrag: function (k) {
      var l = this.get_owner(),
        j = l._initialDragAppointmentElement,
        m = l.get_element(),
        h = a(k);
      a(j).css("opacity", 0.6);
      if ($telerik.isIE && l.get_renderMode() !== b.RenderMode.Lite) {
        a(j).css("padding-bottom", "4px");
      }
      m.style.cursor = "move";
      j.style.zIndex = 999;
      this._originalParent = j.parentNode;
      if (l.get_selectedView() == b.SchedulerViewType.TimelineView) {
        var i = Math.floor(parseInt(j.style.left, 10) / 100);
        while (i--) {
          h = h.next();
        }
        this._removeTimelineSlotsOffset(j);
      }
      Sys.UI.DomElement.removeCssClass(j, "rsWAppointmentDelete");
    },
    _removeTimelineSlotsOffset: function (h) {
      var i = h.style,
        j = i.left,
        k;
      this._originalLeftOffset = i.left;
      this._originalLeftMargin = i.marginLeft;
      if (j) {
        k = parseFloat(j, 10) % 100;
        i.left = k + "%";
      }
      i.marginLeft = "";
    },
    _resetDragStyles: function (i) {
      var j = this.get_owner();
      var h = j._initialDragAppointmentElement;
      a(h).css("opacity", "");
      if ($telerik.isIE && j.get_renderMode() !== b.RenderMode.Lite) {
        a(h).css("padding-bottom", "0px");
      }
      if (i && j.get_selectedView() == b.SchedulerViewType.TimelineView) {
        h.style.left = this._originalLeftOffset;
        h.style.marginLeft = this._originalLeftMargin;
      }
      h.style.zIndex = "";
      var k = j.get_element();
      if (k && k.style) {
        k.style.cursor = "";
      }
    },
    _abortDrag: function () {
      this._resetDragStyles(true);
      var h = this.get_owner()._initialDragAppointmentElement;
      if (h.parentNode != this._originalParent) {
        this._originalParent.appendChild(h);
      }
    },
    _raiseMoveEnd: function (h) {
      var k = this.get_owner(),
        j = k._activeModel.getTimeSlotFromDomElement(k._initialDragCell),
        i = {
          appointment: this,
          newStartTime: this.get_start(),
          editingRecurringSeries: false,
          targetSlot: j,
          isAbortedByUser: h || false,
        };
      a.raiseCancellableControlEvent(k, "appointmentMoveEnd", i);
    },
    _finishDrag: function () {
      var k = this.get_owner(),
        i = k._activeModel,
        l = i.getTimeSlotFromDomElement(k._initialDragCell),
        m = i.getTimeSlotFromDomElement(k._draggingHoveredCell),
        j = i.get_startOfMovedAppointment(this, m, l);
      this._resetDragStyles(false);
      if (l.get_index() == m.get_index()) {
        this._abortDrag();
        this._raiseMoveEnd();
        return;
      }
      var h = {
        OnConfirm: this._onAppointmentMoveCallback,
        OnCancel: this._onAppointmentMoveAbortCallback,
        Scheduler: k,
        Appointment: this,
        SourceSlot: l,
        TargetSlot: m,
        NewStart: j,
        CallbackIsCalledFromDialog: true,
      };
      if (
        k.get_displayRecurrenceActionDialogOnMove() &&
        (this._recurrenceState == 1 || this._recurrenceState == 2)
      ) {
        this._showRecurrenceActionDialog(h);
      } else {
        h.CallbackIsCalledFromDialog = false;
        this._onAppointmentMoveCallback(false, h);
      }
    },
    _showRecurrenceActionDialog: function (h) {
      var j = this.get_owner();
      var k = new b.SchedulerRecurrenceActionDialogShowingEventArgs(
        h.Appointment,
        b.RecurrenceAction.Move
      );
      j._raiseRecurrenceActionDialogShowing(k);
      if (k.get_cancel()) {
        var i = k.get_editSeries();
        if (i !== null) {
          h.CallbackIsCalledFromDialog = false;
          this._onAppointmentMoveCallback(i, h);
        } else {
          this._onAppointmentMoveAbortCallback(h);
        }
      } else {
        b.RecurrenceActionDialog.Show(b.RecurrenceAction.Move, h);
      }
    },
    _onAppointmentMoveCallback: function (j, h) {
      h.Scheduler._raiseRecurrenceActionDialogClosedEvent(
        h,
        j,
        b.RecurrenceAction.Move
      );
      var k = {
        appointment: h.Appointment,
        newStartTime: h.NewStart,
        editingRecurringSeries: j,
        targetSlot: h.TargetSlot,
        isAbortedByUser: false,
      };
      var i = a.raiseCancellableControlEvent(
        h.Scheduler,
        "appointmentMoveEnd",
        k
      );
      if (
        this._owner &&
        this.get_owner()._webServiceSettings.get_isEmpty() &&
        this.get_owner().get_activeModel()._groupingResource !== g &&
        h.Appointment.get_resources().indexOf(h.SourceSlot.get_resource()) == -1
      ) {
        i = true;
      }
      if (!i) {
        h.Scheduler.moveAppointment(
          h.Appointment,
          j,
          h.SourceSlot,
          h.TargetSlot
        );
      } else {
        h.Appointment._abortDrag();
      }
    },
    _onAppointmentMoveAbortCallback: function (h) {
      h.Scheduler._raiseRecurrenceActionDialogClosedEvent(
        h,
        false,
        b.RecurrenceAction.Move
      );
      h.Appointment._abortDrag();
      h.Appointment._raiseMoveEnd(true);
    },
    get_contextMenuID: function () {
      return this._contextMenuID;
    },
    set_contextMenuID: function (h) {
      this._contextMenuID = h;
      this._contextMenu = null;
    },
    clone: function () {
      var h = new b.SchedulerAppointment();
      h._id = this._id;
      h._subject = this._subject;
      h._description = this._description;
      h._start = this._start;
      h._end = this._end;
      h._toolTip = this._toolTip;
      h._internalID = this._internalID;
      h._visible = this._visible;
      h._recurrenceState = this._recurrenceState;
      h._recurrenceParentID = this._recurrenceParentID;
      h._contextMenuID = this._contextMenuID;
      h._resources = this.get_resources().clone();
      h._attributes = this.get_attributes().clone();
      if (this.get_reminders) {
        h._reminders = this.get_reminders().clone();
      }
      for (var i in this) {
        if (h[i] === g && !i.startsWith("_")) {
          h[i] = c(this[i]);
        }
      }
      return h;
    },
    _getStyleMode: function () {
      var h = this.get_owner();
      if (!h) {
        return b.AppointmentStyleMode.Auto;
      }
      return h.get_appointmentStyleMode();
    },
    _renderBorder: function () {
      var h = this.get_borderColor();
      var j = this.get_borderWidth() || "";
      var i = this.get_borderStyle();
      var k = this.get_element();
      if (!k) {
        return;
      }
      if (this._owner && this._owner.get_renderMode() === b.RenderMode.Lite) {
        a(".rsAptContent", k).css({
          "border-color": h,
          "border-style": i,
          "border-width": j,
        });
      } else {
        if (this._getStyleMode() == b.AppointmentStyleMode.Default) {
          a(".rsAptMid, .rsAptContent, .rsAptIn", k).css({
            "border-color": h,
            "border-style": i,
            "border-width": j,
          });
        } else {
          a(k)
            .addClass("rsAptSimple")
            .css({
              "border-top-color": h,
              "border-top-style": i,
              "border-top-width": j,
              "border-bottom-color": h,
              "border-bottom-style": i,
              "border-bottom-width": j,
            })
            .find(".rsAptOut")
            .css({
              "border-left-color": h,
              "border-left-style": i,
              "border-left-width": j,
              "border-right-color": h,
              "border-right-style": i,
              "border-right-width": j,
            });
        }
      }
    },
  };
  function c(j) {
    var h = j,
      i;
    if (j && typeof j === "object") {
      h = Object.prototype.toString.call(j) === "[object Array]" ? [] : {};
      for (i in j) {
        h[i] = c(j[i]);
      }
    }
    return h;
  }
  b.SchedulerAppointment.registerClass("Telerik.Web.UI.SchedulerAppointment");
})($telerik.$, Telerik.Web.UI);
Type.registerNamespace("Telerik.Web.UI");
Telerik.Web.UI.SchedulerAppointmentCollection = function (a) {
  this._array = [];
  this._scheduler = a;
};
Telerik.Web.UI.SchedulerAppointmentCollection.prototype = {
  add: function (b) {
    var a = this._array.length;
    this.insert(a, b);
  },
  insert: function (a, b) {
    Array.insert(this._array, a, b);
    this._notify(function (c) {
      c._onAppointmentInserting(b);
    });
  },
  remove: function (b, a) {
    if (typeof a == "undefined") {
      a = true;
    }
    var c = Array.remove(this._array, b);
    this._notify(function (d) {
      d._onAppointmentRemove(b, a);
    });
    return c;
  },
  removeAt: function (b, a) {
    var c = this.getAppointment(b);
    if (c) {
      this.remove(c, a);
    }
  },
  _clear: function () {
    this._notify(function (a) {
      a._onAppointmentsClear();
    });
    this._array = [];
  },
  get_count: function () {
    return this._array.length;
  },
  getAppointment: function (a) {
    return this._array[a];
  },
  indexOf: function (a) {
    return Array.indexOf(this._array, a);
  },
  forEach: function (c) {
    for (var b = 0, a = this.get_count(); b < a; b++) {
      c(this.getAppointment(b));
    }
  },
  getAppointmentsInRange: function (b, a) {
    return this.findAll(function (c) {
      var e = c.get_start();
      var d = c.get_end();
      return e < a && d > b;
    });
  },
  getAppointmentsStartingInRange: function (b, a) {
    return this.findAll(function (c) {
      var d = c.get_start();
      return d >= b && d < a;
    });
  },
  findAll: function (a) {
    var b = new Telerik.Web.UI.SchedulerAppointmentCollection();
    this.forEach(function (c) {
      if (a(c)) {
        b.add(c);
      }
    });
    return b;
  },
  find: function (b) {
    var a = null;
    this.forEach(function (c) {
      if (!a && b(c)) {
        a = c;
      }
    });
    return a;
  },
  findByID: function (a) {
    var b = null;
    this.forEach(function (c) {
      if (c.get_id() == a) {
        b = c;
      }
    });
    return b;
  },
  findByResource: function (b) {
    var a = new Telerik.Web.UI.SchedulerResource();
    if (b) {
      a._type = b.type || b.get_type();
      a._key = b.key;
      if (b.get_key) {
        a._key = b.get_key();
      }
    }
    return this.findAll(function (c) {
      var d = c.get_resources().getResourcesByType(a.get_type());
      if (typeof a.get_key() === "undefined") {
        return d.get_count() > 0;
      }
      var e = false;
      d.forEach(function (f) {
        if (f.get_key() === a.get_key()) {
          e = true;
        }
      });
      return e;
    });
  },
  _notify: function (a) {
    if (this._scheduler) {
      a(this._scheduler);
    }
  },
};
Telerik.Web.UI.SchedulerAppointmentCollection.registerClass(
  "Telerik.Web.UI.SchedulerAppointmentCollection"
);
(function (a) {
  Type.registerNamespace("Telerik.Web.UI");
  var b = Telerik.Web.UI;
  b.AppointmentsTooltip = function (c) {
    a.observable(this);
    this._container = c;
    this._isVisible = false;
    this._element = null;
    this._scrollTimer = null;
    this._anchor = null;
  };
  b.AppointmentsTooltip.prototype = {
    dispose: function () {
      this.hide();
      this._container = null;
      this.disposeObservable();
    },
    show: function () {
      this._element = a(
        "<div class='rsTooltip'><div class='rsToolTipArrow rsToolTipArrowUp p-icon p-i-arrow-60-up' style='display:none'></div><div class='rsToolTipContent'></div><div class='rsToolTipArrow rsToolTipArrowDown p-icon p-i-arrow-60-down' style='display:none'></div><div class='rsToolTipCallOut'></div></div>"
      ).appendTo(this._container);
      this._bindEvents();
      return this;
    },
    hide: function () {
      a(this._element).remove();
      this._element = null;
      this._anchor = null;
      return this;
    },
    position: function () {
      var c = this._anchor;
      var f = this._container;
      var e = this._getElementPosition(c, f);
      var j = this._getElementPosition(a(c).parents("table")[0], f);
      var g = "rsTooltipRight";
      var d = e.top + e.height / 2;
      var l = a(this._element).outerWidth();
      var h = a(this._element).height();
      var i = e.right;
      var k;
      if (a(f).width() < i + l) {
        i = e.left - l;
        g = "rsTooltipLeft";
      }
      if (h > j.height) {
        a(this._element).height(j.height).find(".rsToolTipArrow").show();
        h = j.height;
      }
      k = d - h / 2;
      if (k + h > j.bottom) {
        k = j.bottom - h;
      }
      a(this._element)
        .addClass(g)
        .css({ left: i, top: k })
        .find(".rsToolTipCallOut")
        .css({ top: d - k });
      this._resolveScrollArrows();
      return this;
    },
    populate: function (c) {
      var e = this;
      var d = a("<ul>").appendTo(a(this._element).find(".rsToolTipContent"));
      a.each(c, function () {
        if (!this.get_visible()) {
          return;
        }
        var f = e._getAppointmentHtml(this);
        d.append(f);
      });
      return this;
    },
    get_isVisible: function () {
      return this._isVisible;
    },
    _bindEvents: function () {
      var f = this;
      var c = a(this._element);
      var d = function (h) {
        var g = c.find(".rsToolTipContent");
        f._scrollTimer = setInterval(function () {
          g.scrollTop(g.scrollTop() + h);
          f._resolveScrollArrows();
        }, 16);
      };
      var e = function () {
        clearInterval(f._scrollTimer);
      };
      c.on("mouseenter", function () {
        f.trigger("mouseenter");
      })
        .on("mouseleave", function () {
          f.trigger("mouseleave");
        })
        .on("mouseenter", ".rsToolTipArrowUp", function () {
          d(-3);
        })
        .on("mouseenter", ".rsToolTipArrowDown", function () {
          d(3);
        })
        .on("mouseleave", ".rsToolTipArrowUp", e)
        .on("mouseleave", ".rsToolTipArrowDown", e);
    },
    _resolveScrollArrows: function () {
      var c = a(this._element);
      var d = c.find(".rsToolTipContent")[0];
      c.find(".rsToolTipArrowUp, .rsToolTipArrowDown").show();
      if (d.scrollTop === 0) {
        c.find(".rsToolTipArrowUp").hide();
      }
      if (d.scrollTop + a(d).innerHeight() >= d.scrollHeight) {
        c.find(".rsToolTipArrowDown").hide();
      }
    },
    _getAppointmentHtml: function (c) {
      var e = this._getAppointmentClass(c);
      var d = "<li";
      if (e) {
        d += " class='" + e + "'";
      }
      d += ">";
      if (c.get_resources().get_count() > 0) {
        d += "<span class='rsResourceMarker rsMarkerBlock'></span>";
      }
      d += c.get_subject() + "</li>";
      return d;
    },
    _getAppointmentClass: function (c) {
      var e = c.get_owner();
      var d = [];
      var f = this;
      c.get_resources().forEach(function (g) {
        f._addUniqueClassName(d, g.get_cssClass());
        if (e && e.get_resourceStyles()) {
          a.each(e.get_resourceStyles().getMatchingClasses(g), function () {
            f._addUniqueClassName(d, this);
          });
          var h = e
            .get_resources()
            .getResourceByTypeAndKey(g.get_type(), g.get_key());
          if (h) {
            f._addUniqueClassName(d, h.get_cssClass());
          }
        }
      });
      return d.join(" ");
    },
    _addUniqueClassName: function (c, d) {
      if (d && Array.indexOf(c, d) == -1) {
        c.push(d);
      }
    },
    _getElementPosition: function (d, h) {
      var c = a(d);
      var g = c.offset();
      var k = c.width();
      var e = c.height();
      var f = g.left;
      var j = g.top;
      if (h) {
        var i = a(h).offset();
        f -= i.left;
        j -= i.top;
      }
      return {
        left: f,
        right: f + k,
        top: j,
        bottom: j + e,
        width: k,
        height: e,
      };
    },
  };
  b.AppointmentsTooltip.registerClass("Telerik.Web.UI.AppointmentsTooltip");
})($telerik.$);
Type.registerNamespace("Telerik.Web.UI.Scheduler.Rendering");
(function () {
  var a = Telerik.Web.UI.Scheduler.Rendering;
  a.Block = function () {
    this._columns = [];
    this._parts = [];
    this._start = null;
    this._end = null;
  };
  a.Block.prototype = {
    add: function (e) {
      if (this._columns.length < 1) {
        this._createColumn();
      }
      var b = false;
      for (var c = 0; c < this._columns.length; c++) {
        if (this._columns[c].tryAdd(e)) {
          b = true;
          break;
        }
      }
      if (!b) {
        var d = this._createColumn();
        d.tryAdd(e);
      }
      Array.add(this._parts, e);
      if (!this._start || this._start > e.start) {
        this._start = e.start;
      }
      if (!this._end || this._end < e.end) {
        this._end = e.end;
      }
    },
    remove: function (c) {
      var d = Array.remove(this._parts, c);
      if (!d) {
        return;
      }
      var b = c.column;
      b.remove(c);
      if (b.get_parts().length == 0) {
        Array.remove(this._columns, b);
      }
    },
    overlapsWith: function (b) {
      if (this._parts.length == 0) {
        return false;
      }
      return this._start < b.end && this._end > b.start;
    },
    _createColumn: function () {
      var b = new a.Column(this);
      var c = this._columns.length;
      Array.insert(this._columns, c, b);
      return b;
    },
    get_columns: function () {
      return this._columns;
    },
    forEach: function (d) {
      for (var c = 0, b = this._parts.length; c < b; c++) {
        d(this._parts[c]);
      }
    },
  };
  a.Block.registerClass("Telerik.Web.UI.Scheduler.Rendering.Block");
})();
Type.registerNamespace("Telerik.Web.UI");
Type.registerNamespace("Telerik.Web.UI.Scheduler");
(function () {
  var a = Telerik.Web.UI;
  var b = a.Scheduler;
  a.AppointmentEventArgs = function (c) {
    a.AppointmentEventArgs.initializeBase(this);
    this._appointment = c;
  };
  a.AppointmentEventArgs.prototype = {
    get_appointment: function () {
      return this._appointment;
    },
  };
  a.AppointmentEventArgs.registerClass(
    "Telerik.Web.UI.AppointmentEventArgs",
    Sys.EventArgs
  );
  a.SchedulerAppointmentCancelEventArgs = function (c) {
    a.SchedulerAppointmentCancelEventArgs.initializeBase(this);
    this._appointment = c;
  };
  a.SchedulerAppointmentCancelEventArgs.prototype = {
    get_appointment: function () {
      return this._appointment;
    },
  };
  a.SchedulerAppointmentCancelEventArgs.registerClass(
    "Telerik.Web.UI.SchedulerAppointmentCancelEventArgs",
    Sys.CancelEventArgs
  );
  a.SchedulerAppointmentClickEventArgs = function (c, d) {
    a.SchedulerAppointmentClickEventArgs.initializeBase(this, [c]);
    this._domEvent = d;
  };
  a.SchedulerAppointmentClickEventArgs.prototype = {
    get_domEvent: function () {
      return this._domEvent;
    },
  };
  a.SchedulerAppointmentClickEventArgs.registerClass(
    "Telerik.Web.UI.SchedulerAppointmentClickEventArgs",
    a.AppointmentEventArgs
  );
  a.SchedulerAppointmentInsertingEventArgs = function (d, c, e) {
    a.SchedulerAppointmentInsertingEventArgs.initializeBase(this);
    this._startTime = d;
    this._isAllDay = c;
    this._targetSlot = e;
  };
  a.SchedulerAppointmentInsertingEventArgs.prototype = {
    get_startTime: function () {
      return this._startTime;
    },
    get_isAllDay: function () {
      return this._isAllDay;
    },
    get_targetSlot: function () {
      return this._targetSlot;
    },
  };
  a.SchedulerAppointmentInsertingEventArgs.registerClass(
    "Telerik.Web.UI.SchedulerAppointmentInsertingEventArgs",
    Sys.CancelEventArgs
  );
  a.SchedulerAppointmentResizeStartEventArgs = function (c) {
    a.SchedulerAppointmentResizeStartEventArgs.initializeBase(this, [c]);
  };
  a.SchedulerAppointmentResizeStartEventArgs.registerClass(
    "Telerik.Web.UI.SchedulerAppointmentResizeStartEventArgs",
    a.SchedulerAppointmentCancelEventArgs
  );
  a.SchedulerAppointmentResizeEndEventArgs = function (c, g, f, e, d) {
    a.SchedulerAppointmentResizeEndEventArgs.initializeBase(this, [c]);
    this._targetSlot = g;
    this._newStartTime = f;
    this._newEndTime = e;
    this._editingRecurringSeries = d;
  };
  a.SchedulerAppointmentResizeEndEventArgs.prototype = {
    get_newTime: function () {
      return this._newEndTime;
    },
    get_newStartTime: function () {
      return this._newStartTime;
    },
    get_newEndTime: function () {
      return this._newEndTime;
    },
    get_editingRecurringSeries: function () {
      return this._editingRecurringSeries;
    },
    get_targetSlot: function () {
      return this._targetSlot;
    },
  };
  a.SchedulerAppointmentResizeEndEventArgs.registerClass(
    "Telerik.Web.UI.SchedulerAppointmentResizeEndEventArgs",
    a.SchedulerAppointmentCancelEventArgs
  );
  a.SchedulerAppointmentResizingEventArgs = function (c, d) {
    a.SchedulerAppointmentResizingEventArgs.initializeBase(this, [c]);
    this._targetSlot = d;
  };
  a.SchedulerAppointmentResizingEventArgs.prototype = {
    get_targetSlot: function () {
      return this._targetSlot;
    },
  };
  a.SchedulerAppointmentResizingEventArgs.registerClass(
    "Telerik.Web.UI.SchedulerAppointmentResizingEventArgs",
    a.SchedulerAppointmentCancelEventArgs
  );
  a.SchedulerAppointmentDeletingEventArgs = function (c, d) {
    a.SchedulerAppointmentDeletingEventArgs.initializeBase(this, [c]);
    this._editingRecurringSeries = d;
  };
  a.SchedulerAppointmentDeletingEventArgs.prototype = {
    get_editingRecurringSeries: function () {
      return this._editingRecurringSeries;
    },
  };
  a.SchedulerAppointmentDeletingEventArgs.registerClass(
    "Telerik.Web.UI.SchedulerAppointmentDeletingEventArgs",
    a.SchedulerAppointmentCancelEventArgs
  );
  a.SchedulerAppointmentDeletedEventArgs = function (c) {
    a.SchedulerAppointmentDeletedEventArgs.initializeBase(this, [c]);
  };
  a.SchedulerAppointmentDeletedEventArgs.registerClass(
    "Telerik.Web.UI.SchedulerAppointmentDeletedEventArgs",
    a.AppointmentEventArgs
  );
  a.SchedulerAppointmentEditingEventArgs = function (c, d) {
    a.SchedulerAppointmentEditingEventArgs.initializeBase(this, [c]);
    this._editingRecurringSeries = d;
  };
  a.SchedulerAppointmentEditingEventArgs.prototype = {
    get_editingRecurringSeries: function () {
      return this._editingRecurringSeries;
    },
  };
  a.SchedulerAppointmentEditingEventArgs.registerClass(
    "Telerik.Web.UI.SchedulerAppointmentEditingEventArgs",
    a.SchedulerAppointmentCancelEventArgs
  );
  a.SchedulerAppointmentMoveStartEventArgs = function (c) {
    a.SchedulerAppointmentMoveStartEventArgs.initializeBase(this, [c]);
  };
  a.SchedulerAppointmentMoveStartEventArgs.registerClass(
    "Telerik.Web.UI.SchedulerAppointmentMoveStartEventArgs",
    a.SchedulerAppointmentCancelEventArgs
  );
  a.SchedulerAppointmentMovingEventArgs = function (c, d) {
    a.SchedulerAppointmentMovingEventArgs.initializeBase(this, [c]);
    this._targetSlot = d;
  };
  a.SchedulerAppointmentMovingEventArgs.prototype = {
    get_targetSlot: function () {
      return this._targetSlot;
    },
  };
  a.SchedulerAppointmentMovingEventArgs.registerClass(
    "Telerik.Web.UI.SchedulerAppointmentMovingEventArgs",
    a.SchedulerAppointmentCancelEventArgs
  );
  a.SchedulerTimeSlotClickEventArgs = function (e, d, c) {
    a.SchedulerTimeSlotClickEventArgs.initializeBase(this);
    this._time = e;
    this._targetSlot = d;
    this._domEvent = c;
  };
  a.SchedulerTimeSlotClickEventArgs.prototype = {
    get_time: function () {
      return this._time;
    },
    get_domEvent: function () {
      return this._domEvent;
    },
    get_targetSlot: function () {
      return this._targetSlot;
    },
  };
  a.SchedulerTimeSlotClickEventArgs.registerClass(
    "Telerik.Web.UI.SchedulerTimeSlotClickEventArgs",
    Sys.EventArgs
  );
  a.SchedulerAppointmentDoubleClickEventArgs = function (c) {
    a.SchedulerAppointmentDoubleClickEventArgs.initializeBase(this, [c]);
  };
  a.SchedulerAppointmentDoubleClickEventArgs.registerClass(
    "Telerik.Web.UI.SchedulerAppointmentDoubleClickEventArgs",
    a.AppointmentEventArgs
  );
  a.SchedulerRecurrenceActionDialogShowingEventArgs = function (c, d) {
    a.SchedulerRecurrenceActionDialogShowingEventArgs.initializeBase(this, [c]);
    this._recurrenceAction = d;
    this._editSeries = null;
  };
  a.SchedulerRecurrenceActionDialogShowingEventArgs.prototype = {
    get_recurrenceAction: function () {
      return this._recurrenceAction;
    },
    get_editSeries: function () {
      return this._editSeries;
    },
    set_editSeries: function (c) {
      this._editSeries = c;
    },
  };
  a.SchedulerRecurrenceActionDialogShowingEventArgs.registerClass(
    "Telerik.Web.UI.SchedulerRecurrenceActionDialogShowingEventArgs",
    a.SchedulerAppointmentCancelEventArgs
  );
  a.SchedulerRecurrenceActionDialogClosedEventArgs = function (c, e, d) {
    a.SchedulerRecurrenceActionDialogClosedEventArgs.initializeBase(this, [c]);
    this._recurrenceAction = e;
    this._editSeries = d;
  };
  a.SchedulerRecurrenceActionDialogClosedEventArgs.prototype = {
    get_recurrenceAction: function () {
      return this._recurrenceAction;
    },
    get_editSeries: function () {
      return this._editSeries;
    },
  };
  a.SchedulerRecurrenceActionDialogClosedEventArgs.registerClass(
    "Telerik.Web.UI.SchedulerRecurrenceActionDialogClosedEventArgs",
    a.AppointmentEventArgs
  );
  a.SchedulerFormCreatedEventArgs = function (c, e, f, d) {
    a.SchedulerFormCreatedEventArgs.initializeBase(this, [c]);
    this._formElement = e;
    this._mode = f;
    this._editingRecurringSeries = d || false;
  };
  a.SchedulerFormCreatedEventArgs.prototype = {
    get_formElement: function () {
      return this._formElement;
    },
    get_mode: function () {
      return this._mode;
    },
    get_editingRecurringSeries: function () {
      return this._editingRecurringSeries;
    },
  };
  a.SchedulerFormCreatedEventArgs.registerClass(
    "Telerik.Web.UI.SchedulerFormCreatedEventArgs",
    a.AppointmentEventArgs
  );
  a.SchedulerAppointmentContextMenuEventArgs = function (c, d) {
    a.SchedulerAppointmentContextMenuEventArgs.initializeBase(this, [c]);
    this._domEvent = d;
  };
  a.SchedulerAppointmentContextMenuEventArgs.prototype = {
    get_domEvent: function () {
      return this._domEvent;
    },
  };
  a.SchedulerAppointmentContextMenuEventArgs.registerClass(
    "Telerik.Web.UI.SchedulerAppointmentContextMenuEventArgs",
    a.AppointmentEventArgs
  );
  a.SchedulerTimeSlotContextMenuEventArgs = function (h, e, c, g, f, d) {
    a.SchedulerTimeSlotContextMenuEventArgs.initializeBase(this);
    this._time = h;
    this._isAllDay = e;
    this._domEvent = c;
    this._targetSlot = g;
    this._startSlot = f;
    this._endSlot = d;
  };
  a.SchedulerTimeSlotContextMenuEventArgs.prototype = {
    get_time: function () {
      return this._time;
    },
    get_isAllDay: function () {
      return this._isAllDay;
    },
    get_domEvent: function () {
      return this._domEvent;
    },
    get_targetSlot: function () {
      return this._targetSlot;
    },
    get_startSlot: function () {
      return this._startSlot;
    },
    get_endSlot: function () {
      return this._endSlot;
    },
  };
  a.SchedulerTimeSlotContextMenuEventArgs.registerClass(
    "Telerik.Web.UI.SchedulerTimeSlotContextMenuEventArgs",
    Sys.EventArgs
  );
  a.SchedulerWebServiceEventArgs = function (c) {
    a.SchedulerWebServiceEventArgs.initializeBase(this);
    this._schedulerInfo = c;
  };
  a.SchedulerWebServiceEventArgs.prototype = {
    get_schedulerInfo: function () {
      return this._schedulerInfo;
    },
  };
  a.SchedulerWebServiceEventArgs.registerClass(
    "Telerik.Web.UI.SchedulerWebServiceEventArgs",
    Sys.CancelEventArgs
  );
  a.SchedulerRequestFailedEventArgs = function (c) {
    a.SchedulerRequestFailedEventArgs.initializeBase(this);
    this._errorMessage = c;
  };
  a.SchedulerRequestFailedEventArgs.prototype = {
    get_errorMessage: function () {
      return this._errorMessage;
    },
  };
  a.SchedulerRequestFailedEventArgs.registerClass(
    "Telerik.Web.UI.SchedulerRequestFailedEventArgs",
    Sys.CancelEventArgs
  );
  b.RequestSuccessEventArgs = function (c) {
    b.RequestSuccessEventArgs.initializeBase(this);
    this._result = c;
  };
  b.RequestSuccessEventArgs.prototype = {
    get_result: function () {
      return this._result;
    },
  };
  b.RequestSuccessEventArgs.registerClass(
    "Telerik.Web.UI.Scheduler.RequestSuccessEventArgs",
    Sys.EventArgs
  );
  b.NavigationCommandEventArgs = function (c, d) {
    b.NavigationCommandEventArgs.initializeBase(this);
    this._command = c;
    this._selectedDate = d;
  };
  b.NavigationCommandEventArgs.prototype = {
    get_command: function () {
      return this._command;
    },
    get_selectedDate: function () {
      return this._selectedDate;
    },
  };
  b.NavigationCommandEventArgs.registerClass(
    "Telerik.Web.UI.Scheduler.NavigationCommandEventArgs",
    Sys.CancelEventArgs
  );
  b.NavigationCompleteEventArgs = function (c) {
    b.NavigationCompleteEventArgs.initializeBase(this);
    this._command = c;
  };
  b.NavigationCompleteEventArgs.prototype = {
    get_command: function () {
      return this._command;
    },
  };
  b.NavigationCompleteEventArgs.registerClass(
    "Telerik.Web.UI.Scheduler.NavigationCompleteEventArgs",
    Sys.EventArgs
  );
  b.AppointmentDataBoundEventArgs = function (c, d) {
    b.AppointmentDataBoundEventArgs.initializeBase(this, [c]);
    this._data = d;
  };
  b.AppointmentDataBoundEventArgs.prototype = {
    get_data: function () {
      return this._data;
    },
  };
  b.AppointmentDataBoundEventArgs.registerClass(
    "Telerik.Web.UI.Scheduler.AppointmentDataBoundEventArgs",
    a.AppointmentEventArgs
  );
})();
Type.registerNamespace("Telerik.Web.UI.Scheduler.Rendering");
(function () {
  var a = $telerik.$;
  var b = Telerik.Web.UI.Scheduler.Rendering;
  b.Column = function (c) {
    this._parts = [];
    this._block = c;
  };
  b.Column.prototype = {
    tryAdd: function (d) {
      var c = this._getPartsInRange(d.start, d.end);
      if (c.length == 0) {
        Array.add(this._parts, d);
        d.column = this;
        return true;
      }
      return false;
    },
    remove: function (c) {
      var d = Array.remove(this._parts, c);
      if (d) {
        c.column = null;
      }
    },
    get_parts: function () {
      return this._parts;
    },
    get_block: function () {
      return this._block;
    },
    get_width: function (d) {
      var e = d ? 100 : 90,
        c = this.get_block().get_columns().length;
      return e / c;
    },
    get_left: function (d) {
      var c = this.get_block().get_columns(),
        e = Array.indexOf(c, this),
        f = d ? 100 : 90;
      return (f / c.length) * e;
    },
    _getPartsInRange: function (d, c) {
      return a.grep(this._parts, function (e) {
        return e.start < c && e.end > d;
      });
    },
  };
  b.Column.registerClass("Telerik.Web.UI.Scheduler.Rendering.Column");
})();
Type.registerNamespace("Telerik.Web.UI.Scheduler");
(function () {
  var a = Telerik.Web.UI.Scheduler;
  var d = 60000;
  var c = d * 60;
  var b = c * 24;
  a.DateHelper = {
    getStartOfWeek: function (f, h) {
      var g = f.getDay();
      var e = 0;
      while (g != h) {
        if (g == 0) {
          g = 6;
        } else {
          g--;
        }
        e++;
      }
      return new a.DateTime(f).add(-e * b).toDate();
    },
    getEndOfWeek: function (e, h, f) {
      var g = a.DateHelper.getStartOfWeek(e, h);
      return new a.DateTime(g).add(f * b).toDate();
    },
    getWeekLength: function (g, e, f) {
      var i = a.DateHelper.getStartOfWeek(g, e);
      var h = new Date(i.getTime());
      while (h.getDay() != f) {
        h = new a.DateTime(h).add(b).toDate();
      }
      return new a.DateTime(h).subtract(i) / b + 1;
    },
    getNthWeekDay: function (j, m, l) {
      var f = a.DateHelper.getDaysInMonth(j.getFullYear(), j.getMonth());
      var g = a.DateHelper.getFirstDayOfMonth(j);
      var h = l - g.getDay();
      var e = 1;
      var k;
      var i = new Date(j);
      if (h < 0) {
        h += 7;
      }
      h += 1;
      while (e <= m && h <= f) {
        k = h;
        h += 7;
        e += 1;
      }
      i.setDate(k);
      return i;
    },
    getDaysInMonth: function (f, e) {
      return 32 - new Date(f, e, 32).getDate();
    },
    getFirstDayOfMonth: function (e) {
      var f = new Date(e.getFullYear(), e.getMonth(), 1, 0, 0, 0);
      return f;
    },
    getLastDayOfMonth: function (e) {
      var f = new Date(0);
      f.setHours(0);
      f.setMinutes(0);
      var h = e.getFullYear();
      var g = e.getMonth();
      f.setFullYear(h, g, this.getDaysInMonth(h, g));
      return f;
    },
    getFirstDayOfYear: function (e) {
      var f = new Date(e.getFullYear(), 0, 1, 0, 0, 0);
      return f;
    },
  };
})();
Type.registerNamespace("Telerik.Web.UI.Scheduler");
Telerik.Web.UI.Scheduler.EventMap = function () {
  this._owner = null;
  this._element = null;
  this._eventMap = {};
  this._onDomEventDelegate = null;
  this._browserHandlers = {};
};
Telerik.Web.UI.Scheduler.EventMap.prototype = {
  initialize: function (b, a) {
    this._owner = b;
    if (!a) {
      a = this._owner.get_element();
    }
    this._element = a;
  },
  skipElement: function (b, c) {
    var f = $telerik.getTouchTarget(b);
    var d = f.tagName.toLowerCase();
    var a = f.className;
    if (d == "select") {
      return true;
    }
    if (d == "option") {
      return true;
    }
    if (d == "a" && (!c || a.indexOf(c) < 0)) {
      return true;
    }
    if (d == "input") {
      return true;
    }
    if (d == "textarea") {
      return true;
    }
    if (d == "button") {
      return true;
    }
    return false;
  },
  dispose: function () {
    if (this._onDomEventDelegate) {
      for (var d in this._eventMap) {
        if (this._shouldUseEventCapture(d)) {
          var a = this._browserHandlers[d];
          this._element.removeEventListener(d, a, true);
        } else {
          $telerik.removeHandler(this._element, d, this._onDomEventDelegate);
        }
      }
      this._onDomEventDelegate = null;
      var b = true;
      if (this._element._events) {
        for (var c in this._element._events) {
          if (this._element._events[c].length > 0) {
            b = false;
            break;
          }
        }
        if (b) {
          this._element._events = null;
        }
      }
    }
  },
  addHandlerForClassName: function (f, b, g) {
    if (typeof this._eventMap[f] == "undefined") {
      this._eventMap[f] = {};
      if (this._shouldUseEventCapture(f)) {
        var c = this._getDomEventDelegate();
        var d = this._element;
        var a = function (h) {
          return c.call(d, new Sys.UI.DomEvent(h));
        };
        this._browserHandlers[f] = a;
        d.addEventListener(f, a, true);
      } else {
        $telerik.addHandler(this._element, f, this._getDomEventDelegate());
      }
    }
    var e = this._eventMap[f];
    e[b] = g;
  },
  _onDomEvent: function (d) {
    var c = this._eventMap[d.type],
      h = $telerik.getTouchTarget(d);
    if (!c) {
      return;
    }
    if ($telerik.$.isEmptyObject(h)) {
      return;
    }
    while (h && h.nodeType !== 9 && h.nodeType !== 11) {
      var a = h.className;
      var g = typeof a == "string" ? a.split(" ") : [];
      var b = null;
      for (var f = 0; f < g.length; f++) {
        b = c[g[f]];
        if (b) {
          break;
        }
      }
      if (b) {
        this._fillEventFields(d, h);
        if (b.call(this._owner, d) != true) {
          return;
        }
      }
      if (h == this._element) {
        return;
      }
      h = h.parentNode;
    }
  },
  _fillEventFields: function (c, b) {
    c.eventMapTarget = b;
    if (c.rawEvent.relatedTarget) {
      c.eventMapRelatedTarget = c.rawEvent.relatedTarget;
    } else {
      if (c.type == "mouseover") {
        c.eventMapRelatedTarget = c.rawEvent.fromElement;
      } else {
        c.eventMapRelatedTarget = c.rawEvent.toElement;
      }
    }
    if (!c.eventMapRelatedTarget) {
      return;
    }
    try {
      var a = c.eventMapRelatedTarget.className;
    } catch (d) {
      c.eventMapRelatedTarget = this._element;
    }
  },
  _shouldUseEventCapture: function (a) {
    return (
      (a == "blur" || a == "focus") &&
      $telerik.isFirefox &&
      Sys.Browser.version >= 3
    );
  },
  _getDomEventDelegate: function () {
    if (!this._onDomEventDelegate) {
      this._onDomEventDelegate = Function.createDelegate(
        this,
        this._onDomEvent
      );
    }
    return this._onDomEventDelegate;
  },
};
Telerik.Web.UI.Scheduler.EventMap.registerClass(
  "Telerik.Web.UI.Scheduler.EventMap"
);
Type.registerNamespace("Telerik.Web.UI");
(function (a, b) {
  b.InlineTemplateBase = function (g, d, c, f, e) {
    this._schedulerElement = g;
    this._localization = d;
    this._textareaId = this._schedulerElement.id + "_SubjectTextBox";
    this._events = null;
  };
  b.InlineTemplateBase.prototype = {
    get_events: function () {
      if (!this._events) {
        this._events = new Sys.EventHandlerList();
      }
      return this._events;
    },
    get_text: function () {
      if (this._textArea) {
        return this._textArea.value;
      }
    },
    set_text: function (c) {
      if (this._textArea) {
        this._textArea.value = c;
      }
    },
    get_start: function () {
      return this._start;
    },
    set_start: function (c) {
      this._start = c;
    },
    get_end: function () {
      return this._end;
    },
    set_end: function (c) {
      this._end = c;
    },
    get_editSeries: function () {
      return this._editSeries;
    },
    set_editSeries: function (c) {
      this._editSeries = c;
    },
    get_isInsert: function () {
      return this._isInsert;
    },
    set_isInsert: function (c) {
      this._isInsert = c;
    },
    get_appointmentInternalID: function () {
      return this._appointmentInternalID;
    },
    set_appointmentInternalID: function (c) {
      this._appointmentInternalID = c;
    },
    get_element: function () {
      return this._element;
    },
    dispose: function () {
      this._events = null;
      this._cleanup(true);
    },
    save: function () {
      this._raiseEvent("saveClicked", null);
      this.hide();
    },
    advanced: function () {
      this._raiseEvent("moreClicked", null);
    },
    hide: function () {
      this._raiseEvent("hidden", null);
      this._cleanup();
    },
    add_saveClicked: function (c) {
      this.get_events().addHandler("saveClicked", c);
    },
    add_moreClicked: function (c) {
      this.get_events().addHandler("moreClicked", c);
    },
    add_deleteClicked: function (c) {
      this.get_events().addHandler("deleteClicked", c);
    },
    add_hidden: function (c) {
      this.get_events().addHandler("hidden", c);
    },
    add_keyDown: function (c) {
      this.get_events().addHandler("keyDown", c);
    },
    _raiseEvent: function (d, c) {
      var e = this.get_events().getHandler(d);
      if (e) {
        if (!c) {
          c = Sys.EventArgs.Empty;
        }
        e(this, c);
      }
    },
  };
  b.InlineTemplateBase.registerClass(
    "Telerik.Web.UI.InlineTemplateBase",
    null,
    Sys.IDisposable
  );
  b.InlineTemplateNative = function (i, e, d, g, f) {
    b.InlineTemplateNative.initializeBase(this, [i, e, d, g, f]);
    var h = e.ShowAdvancedForm,
      c = e.ContextMenuDelete;
    this._contentTemplate =
      '<textarea id="{0}" rows="5" cols="20"></textarea><hr />';
    if (d) {
      this._contentTemplate +=
        '<button type="button" class="rsButton rsAptEditMore">' +
        h +
        "</button>";
    }
    this._contentTemplateDelete =
      '<button type="button" class="rsButton rsAptEditDelete">' +
      c +
      "</button>";
  };
  b.InlineTemplateNative.prototype = {
    instantiateIn: function (c) {
      this._cleanup();
      var h = this,
        g = this._localization,
        f = this.get_isInsert(),
        d = f ? g.AdvancedNewAppointment : g.AdvancedEditAppointment,
        e = String.format(this._contentTemplate, this._textareaId);
      if (!f) {
        e += this._contentTemplateDelete;
      }
      this._dialog = a.modal(
        "#" + this._schedulerElement.id + ">.rsTopWrap",
        b.RenderMode.Mobile
      );
      this._dialog
        .initialize()
        .set_content({ title: d, content: e, ok: g.Save, cancel: g.Cancel })
        .set_onActionConfirm(function () {
          h.save();
        })
        .set_onActionCancel(function () {
          h.hide();
        })
        .show();
      this._element = this._dialog.get_element();
      this._element.originalParent = c;
      this._textArea = document.getElementById(this._textareaId);
      this._attachHandlers();
    },
    _delete: function () {
      this._raiseEvent("deleteClicked", null);
      this.hide();
    },
    attachTo: function (l) {
      var o = this,
        d = a(l),
        i = d.hasClass("rsAptEditSizingWrapperInsert"),
        j = this._localization,
        h = i ? j.AdvancedNewAppointment : j.AdvancedEditAppointment,
        c;
      d.remove();
      this._dialog = a.modal(
        "#" + this._schedulerElement.id + ">.rsTopWrap",
        b.RenderMode.Mobile
      );
      this._element = this._dialog.get_element();
      c = a(this._element);
      c.find(".rsModalTitle").text(h);
      var m = d.find("div.rsTemplateWrapper");
      if (m.length > 0) {
        c.find(".rsModalContent, .rsModalButtons").remove();
        c.find(".rsModalDialog").append(m);
        return;
      }
      var n = d.find("textarea");
      n.height("");
      c.find(".rsModalContent").append(n);
      var f = d.find(".rsAptEditConfirm").addClass("rsButton rsPrimary");
      c.find(".rsModalConfirm").replaceWith(f);
      var e = d.find(".rsAptEditCancel").addClass("rsButton");
      c.find(".rsModalClose").replaceWith(e);
      var k = d.find(".rsAptEditMore").addClass("rsButton");
      c.find(".rsModalContent").append("<hr />").append(k);
      var g = d.find(".rsAptEditDelete").addClass("rsButton");
      if (g.length > 0) {
        c.find(".rsModalContent").append(g);
        this._deleteLinkHref = g[0].href;
        g[0].href = "";
        g.on("click", function (p) {
          $telerik.cancelRawEvent(p);
          o._delete();
        });
      }
      this._dialog.show();
    },
    repaint: function () {
      this._dialog.set_dimensions(a(this._schedulerElement));
    },
    _attachHandlers: function () {
      var c = this;
      a(this._element)
        .on("click", ".rsAptEditDelete", function (d) {
          c._delete();
          $telerik.cancelRawEvent(d);
        })
        .on("click", ".rsAptEditMore", function (d) {
          c.advanced();
          c.hide();
          $telerik.cancelRawEvent(d);
        });
    },
    _cleanup: function (c) {
      if (!this._element) {
        return;
      }
      a(this._element).off();
      this._element = null;
      if (this._dialog) {
        this._dialog.hide();
      }
    },
  };
  b.InlineTemplateNative.registerClass(
    "Telerik.Web.UI.InlineTemplateNative",
    b.InlineTemplateBase
  );
  b.InlineTemplate = function (g, d, c, f, e) {
    b.InlineTemplate.initializeBase(this, [g, d, c, f, e]);
    this._schedulerContentElement = $telerik.getElementByClassName(
      g,
      "rsContent",
      "div"
    );
    this._minWidth = f;
    this._minHeight = e;
    this._wrapZIndexStep = 1000;
    this._addEmptySpace = true;
    this._formHTMLTemplate =
      '<div class="rsAptEditFormWrapper"><div class="rsAptEditFormOuter"><div class="rsAptEditFormMiddle"><div class="rsAptEditFormMiddle2"><div class="rsAptEditFormInner"><div style="{0}" class="rsAptEditTextareaWrapper"><textarea id="{1}" style="{2}"></textarea></div><div class="rsEditOptions"><a href="#" class="rsAptEditConfirm">' +
      d.Save +
      '</a><a href="#" class="rsAptEditCancel">' +
      d.Cancel +
      "</a>";
    if (c) {
      this._formHTMLTemplate +=
        '<a href="#" class="rsAptEditMore">' + d.ShowAdvancedForm + "</a>";
    }
    this._formHTMLTemplate +=
      '</div><div class="rsAptEditResizeHandle"></div></div></div></div></div></div>';
    this._onResizeHandleMouseMoveDelegate = Function.createDelegate(
      this,
      this._onResizeHandleMouseMove
    );
    this._onResizeHandleMouseUpDelegate = Function.createDelegate(
      this,
      this._onResizeHandleMouseUp
    );
    this._onKeyboardEventDelegate = Function.createDelegate(
      this,
      this._onKeyboardEvent
    );
  };
  b.InlineTemplate._positionForm = function (r) {
    var q = a("#" + r),
      l = q.find("div.rsTopWrap div.rsAptEditSizingWrapper");
    if (l.length == 0) {
      return;
    }
    if (l[0].detached) {
      b.InlineTemplate._positionDetachedForm(q);
      return;
    }
    l.css("top", "");
    l.css("left", "");
    var e = q.find("div.rsTopWrap div.rsContent"),
      g = l.parents(
        "table.rsContentTable, table.rsAllDayTable, table.rsAgendaTable"
      ),
      m = l.offset(),
      i = l.parents().is("table.rsAllDayTable") && !e.is(".rsTimelineView"),
      s = q.find("div.rsTopWrap div.rsContentScrollArea"),
      t = false,
      u = false;
    if (!i) {
      var j = m.top + l.height(),
        c = g,
        d;
      if (g.is(".rsAgendaTable")) {
        c = g.parent().find(".rsAgendaTable").last();
        if (c.offset().top + c.height() < e.offset().top + e.height()) {
          c = e;
        }
      }
      d = c.offset().top + c.height();
      if (j > d) {
        l.css("top", d - j + "px");
        t = true;
      }
      var k = m.left + l.width(),
        h = g.offset().left,
        f = h + g.width(),
        p = k - f;
      if (p > 0) {
        p *= -1;
        var n = h - (m.left + p);
        if (n > 0) {
          p += n;
        }
        l.css("left", p + "px");
        u = true;
      }
    } else {
      var o = l[0].parentNode;
      l[0].originalParent = o;
      l.width(a(o).width());
      l.appendTo(e);
      l[0].detached = true;
      b.InlineTemplate._positionDetachedForm(q);
    }
    var w = l.find("div.rsAptEditTextareaWrapper");
    if (w) {
      var v = w.find("textarea:first");
      if (v.length > 0) {
        if ($telerik.isIE && w[0].style.height != "auto") {
          v.css("height", w.css("height"));
          w.css("height", "auto");
        }
        if ($telerik.isFirefox) {
          v[0].scrollIntoView = function () {};
        }
      }
    }
    if (t) {
      s[0].scrollTop = s[0].scrollHeight;
    }
    if (u) {
      s[0].scrollLeft = s[0].scrollWidth;
    }
    l.css("visibility", "visible");
  };
  b.InlineTemplate._positionDetachedForm = function (n) {
    var c = n.find("div.rsTopWrap div.rsContent");
    var l = n.find("div.rsTopWrap div.rsAptEditSizingWrapper");
    var d = c.offset();
    var m = a(l[0].originalParent);
    var k = m.offset();
    var f = m.parents(
      "table.rsContentTable, table.rsAllDayTable, table.rsAgendaTable"
    );
    if (!f.length) {
      return;
    }
    var j = c.prev();
    if (j.is(".rsHeader, .rsToolbar")) {
      d.top -= j.height();
    }
    var h = k.top - d.top;
    var g = k.left - d.left;
    var i = k.left + l.width();
    var e = f.offset().left + f.width();
    if (i > e) {
      g += e - i;
    }
    l.css({ top: h + "px", left: g + "px", width: m.width() + "px" });
  };
  b.InlineTemplate.prototype = {
    instantiateIn: function (c) {
      this._cleanup();
      var e = document.createElement("div"),
        f = this._getTargetElement(c),
        h = "",
        g = "";
      e.className = "rsAptEditSizingWrapper";
      e.style.zIndex = 20000;
      e.style.visibility = "visible";
      e.style.minWidth = this._minWidth + "px";
      if (f.offsetHeight < this._minHeight) {
        var d = "height: " + this._minHeight + "px";
        if ($telerik.isIE) {
          g = d;
        } else {
          h = d;
        }
      }
      e.innerHTML = String.format(
        this._formHTMLTemplate,
        h,
        this._textareaId,
        g
      );
      f.appendChild(e);
      this._element = e;
      this._textArea = document.getElementById(this._textareaId);
      b.InlineTemplate._positionForm(this._schedulerElement.id);
      if (this._textArea) {
        this._textArea.focus();
      }
      this._attachHandlers(true);
    },
    attachTo: function (c) {
      this._element = c;
      this._textArea = a(c).find("textarea:first")[0];
      var d = a("div.rsTemplateWrapper", this._element);
      if (d.length > 0) {
        this._template = d[0];
      }
      this._attachHandlers(false);
    },
    _getTargetElement: function (e) {
      var d = a(e),
        c = d,
        g,
        f = c.parents("table.rsAgendaTable").length > 0;
      if (!c.is("td")) {
        c = c.parents("td:first");
      }
      g = c.find(".rsWrap:first");
      if (d.is(".rsApt")) {
        g = d.parent();
      }
      if (g.length > 0 && g.is(".rsWrap")) {
        g.data("originalCssText", g[0].style.cssText);
      } else {
        if (f) {
          d = c;
        } else {
          c.html("");
        }
        g = a('<div class="rsWrap"></div>').appendTo(d);
        if (f) {
          this._setWrapDimentions(g, c);
        }
        g.data("originalCssText", "");
      }
      var h = g.css("zIndex");
      if (h == "auto") {
        h = 0;
      }
      g.css({ zIndex: parseInt(h, 10) + this._wrapZIndexStep });
      return g[0];
    },
    _setWrapDimentions: function (d, c) {
      var e = c.offset();
      var f = d.offset();
      d.css({ top: e.top - f.top, left: e.left - f.left });
    },
    _cleanup: function (c) {
      if (!this._element) {
        return;
      }
      if (this._eventMap) {
        this._eventMap.dispose();
      }
      $telerik.removeHandler(
        document.documentElement,
        "keydown",
        this._onKeyboardEventDelegate
      );
      var d = this._element.originalParent || this._element.parentNode;
      d.style.cssText = a(d).data("originalCssText");
      if (!c) {
        a(this._element).remove();
        this._element = null;
      }
      if (d.childNodes.length == 0) {
        var e = d.parentNode;
        if (e) {
          e.removeChild(d);
          if (e.innerHTML == "" && this._addEmptySpace) {
            e.innerHTML = "&nbsp;";
          }
        }
      }
    },
    _attachHandlers: function (c) {
      if (!this._element) {
        return;
      }
      this._eventMap = new b.Scheduler.EventMap();
      this._eventMap.initialize(this);
      this._eventMap.addHandlerForClassName(
        "mousedown",
        "rsAptEditResizeHandle",
        this._onResizeHandleMouseDown
      );
      this._eventMap.addHandlerForClassName(
        "mouseover",
        "rsAptEditFormWrapper",
        this._onInlineTemplateMouseEvent
      );
      this._eventMap.addHandlerForClassName(
        "click",
        "rsAptEditFormWrapper",
        this._onInlineTemplateMouseEvent
      );
      this._eventMap.addHandlerForClassName(
        "dblclick",
        "rsAptEditFormWrapper",
        this._onInlineTemplateMouseEvent
      );
      this._eventMap.addHandlerForClassName(
        "contextmenu",
        "rsAptEditFormWrapper",
        this._onInlineTemplateMouseEvent
      );
      if (c) {
        this._eventMap.addHandlerForClassName(
          "click",
          "rsAptEditConfirm",
          this._saveClicked
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsAptEditCancel",
          this._cancelClicked
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsAptEditMore",
          this._moreClicked
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsAptEditSizingWrapper",
          this._clicked
        );
        this._eventMap.addHandlerForClassName(
          "dblclick",
          "rsAptEditSizingWrapper",
          this._clicked
        );
        this._eventMap.addHandlerForClassName(
          "keydown",
          "rsAptEditSizingWrapper",
          this._keyDown
        );
      }
      $telerik.addHandler(
        document.documentElement,
        "keydown",
        this._onKeyboardEventDelegate
      );
    },
    _onInlineTemplateMouseEvent: function (c) {
      c.stopPropagation();
    },
    _saveClicked: function (c) {
      this.save();
      $telerik.cancelRawEvent(c);
      return false;
    },
    _cancelClicked: function (c) {
      this.hide();
      $telerik.cancelRawEvent(c);
      return false;
    },
    _moreClicked: function (c) {
      this.advanced();
      $telerik.cancelRawEvent(c);
      return false;
    },
    _clicked: function (c) {
      $telerik.cancelRawEvent(c);
      return false;
    },
    _keyDown: function (c) {
      this._raiseEvent("keyDown", c);
      return false;
    },
    _onResizeHandleMouseDown: function (c) {
      this._resizeOrigin = {
        x: c.clientX,
        y: c.clientY,
        scrollTop: this._schedulerContentElement.scrollTop,
      };
      this._resizing = true;
      var d = this._textArea
        ? this._textArea.parentNode.offsetHeight
        : this._template.offsetHeight;
      this._initialSize = { width: this._element.offsetWidth, height: d };
      $telerik.addHandler(
        this._schedulerContentElement,
        "mousemove",
        this._onResizeHandleMouseMoveDelegate
      );
      $telerik.addHandler(
        document,
        "mouseup",
        this._onResizeHandleMouseUpDelegate
      );
      $telerik.addHandler(document, "selectstart", this._onSelectStart);
    },
    _onResizeHandleMouseMove: function (c) {
      if (!$telerik.isMouseOverElement(this._schedulerElement, c)) {
        return;
      }
      var f = c.clientX - this._resizeOrigin.x,
        d = c.clientY - this._resizeOrigin.y;
      f += this._initialSize.width + this._schedulerContentElement.scrollLeft;
      d +=
        this._initialSize.height +
        (this._schedulerContentElement.scrollTop -
          this._resizeOrigin.scrollTop);
      f = Math.max(f, this._minWidth);
      d = Math.max(d, this._minHeight);
      this._setSize(f, d);
      b.RadScheduler._clearSelection();
    },
    _onResizeHandleMouseUp: function () {
      this._cleanupResize();
    },
    _onSelectStart: function () {
      return false;
    },
    _cleanupResize: function () {
      if (!this._resizing) {
        return;
      }
      $telerik.removeHandler(
        this._schedulerContentElement,
        "mousemove",
        this._onResizeHandleMouseMoveDelegate
      );
      $telerik.removeHandler(
        document,
        "mouseup",
        this._onResizeHandleMouseUpDelegate
      );
      $telerik.removeHandler(document, "selectstart", this._onSelectStart);
      b.RadScheduler._clearSelection();
      this._resizing = false;
    },
    _onKeyboardEvent: function (c) {
      if (c.keyCode == 27) {
        this._cleanupResize();
      }
    },
    _setSize: function (e, c) {
      if (!this._element) {
        return;
      }
      this._element.style.width = e + "px";
      var d = this._textArea;
      if (d) {
        if ($telerik.isIE) {
          d.style.height = c - 6 + "px";
        } else {
          d.parentNode.style.height = c + "px";
        }
      } else {
        this._template.style.height = c + "px";
      }
    },
  };
  b.InlineTemplate.registerClass(
    "Telerik.Web.UI.InlineTemplate",
    b.InlineTemplateBase
  );
  b.InlineTemplateLite = function (g, d, c, f, e) {
    b.InlineTemplateLite.initializeBase(this, [g, d, c, f, e]);
    this._addEmptySpace = false;
    this._formHTMLTemplate =
      '<div class="rsDialog rsInlineForm rsAptEditFormWrapper"><div style="{0}" class="rsTextarea rsAptEditTextareaWrapper"><textarea id="{1}" style="{2}" rows="5" cols="20"></textarea></div><div class="rsButtons"><span class="rsButton rsPrimary rsAptEditConfirm">' +
      d.Save +
      '</span><span class="rsButton rsAptEditCancel">' +
      d.Cancel +
      "</span>";
    if (c) {
      this._formHTMLTemplate +=
        '<span class="rsButton rsAptEditMore">' +
        d.ShowAdvancedForm +
        "</span>";
    }
    this._formHTMLTemplate +=
      '</div><span class="rsResize rsAptEditResizeHandle"><span class="p-icon p-i-arrow-45-down-right"></span></span></div>';
  };
  b.InlineTemplateLite.prototype = {
    _attachHandlers: function (c) {
      b.InlineTemplateLite.callBaseMethod(this, "_attachHandlers", [c]);
      a(this._element)
        .find(".rsButton")
        .on("mouseenter", function () {
          a(this).addClass("rsHovered");
        })
        .on("mouseleave", function () {
          a(this).removeClass("rsHovered");
        });
    },
    _cleanup: function (c) {
      b.InlineTemplateLite.callBaseMethod(this, "_cleanup", [c]);
      a(this._element).find(".rsButton").off();
    },
  };
  b.InlineTemplateLite.registerClass(
    "Telerik.Web.UI.InlineTemplateLite",
    b.InlineTemplate
  );
})($telerik.$, Telerik.Web.UI);
(function (a) {
  var b = Telerik.Web.UI;
  var c =
    '<div class="rsModalWrapper"><div class="rsOverlay"></div><div class="rsDialog rsModalDialog"><div class="rsModalBgTopLeft"></div><div class="rsModalBgTopRight"></div><div class="rsModalBgBottomLeft"></div><div class="rsModalBgBottomRight"></div><div class="rsModalOuter"><div class="rsModalOuterTitle"><a class="rsModalWindowClose" href="#" title=""></a><div class="rsModalInner"><span class="rsModalTitle"></span><div class="rsModalContent"></div><div class="rsModalButtons"><a href="#" class="rsModalConfirm">OK</a><a href="#" class="rsModalClose">Cancel</a></div><div class="rsModalIcon"></div></div></div></div></div></div>';
  var e =
    '<div class="rsModalWrapper"><div class="rsOverlay"></div><div class="rsDialog rsModalDialog"><div class="rsModalTitle rsTitle"></div><div class="rsModalContent rsBody"></div><div class="rsModalButtons rsButtons"><button type="button" class="rsButton rsModalClose">Cancel</button><button type="button" class="rsButton rsPrimary rsModalConfirm">OK</button></div></div></div>';
  var d =
    '<div class="rsModalWrapper"><div class="rsOverlay"></div><div class="rsDialog rsModalDialog"><div class="rsModalTitle rsTitle"></div><div class="rsModalContent rsBody"></div><div class="rsModalButtons rsButtons"><button type="button" class="rsButton rsPrimary rsModalConfirm">OK</button><button type="button" class="rsButton rsModalClose">Cancel</button></div></div></div>';
  function f(g) {
    var h = c;
    if (g === b.RenderMode.Mobile) {
      h = e;
    } else {
      if (g === b.RenderMode.Lite) {
        h = d;
      }
    }
    return h;
  }
  a.bind = function (g, h) {
    return function (i) {
      if (i) {
        i.preventDefault();
      }
      return g[h].apply(g, arguments);
    };
  };
  a.modal = function (h, g) {
    if (!(this instanceof a.modal)) {
      return new a.modal(h, g);
    }
    var i = a(h);
    var j = f(g);
    this._isMobile = g === b.RenderMode.Mobile;
    this._dialog = a(j).appendTo(i).hide();
    this.set_dimensions(i);
    this._dialog.find(".rsOverlay, .rsModalDialog").css({ opacity: 0 });
    return this;
  };
  a.modal.prototype = {
    initialize: function () {
      this._dialog
        .find(".rsModalClose")
        .unbind("click")
        .bind("click", a.bind(this, "hide"))
        .end()
        .find(".rsModalWindowClose")
        .unbind("click")
        .bind("click", a.bind(this, "hide"))
        .end()
        .find(".rsModalConfirm")
        .unbind("click")
        .bind("click", a.bind(this, "hide"));
      return this;
    },
    set_dimensions: function (h) {
      var g = this._isMobile ? 280 : 380;
      this._dialog
        .css({
          height: h.height(),
          width: h.width(),
          left: "1px",
          top: "1px",
          background: "none",
        })
        .find(".rsOverlay")
        .css({ height: h.height(), width: h.width() })
        .end()
        .find(".rsModalDialog")
        .css({ width: g, left: (h.width() - g) / 2 });
    },
    set_content: function (h) {
      for (var g in h) {
        switch (g) {
          case "title":
            this._dialog.find(".rsModalTitle").text(h.title);
            break;
          case "content":
            this._dialog.find(".rsModalContent").html(h.content);
            break;
          case "ok":
            this._dialog.find(".rsModalConfirm").text(h.ok);
            break;
          case "cancel":
            this._dialog
              .find(".rsModalClose")
              .text(h.cancel)
              .end()
              .find(".rsModalWindowClose")
              .attr("title", h.cancel);
            break;
        }
      }
      return this;
    },
    set_onActionConfirm: function (g) {
      if (a.isFunction(g)) {
        this._dialog.find(".rsModalConfirm").unbind().bind("click", g);
      }
      return this;
    },
    set_onActionCancel: function (g) {
      if (a.isFunction(g)) {
        this._dialog
          .find(".rsModalClose, .rsModalWindowClose")
          .unbind()
          .bind("click", g);
      }
      return this;
    },
    get_element: function () {
      return this._dialog;
    },
    show: function () {
      if (this._isMobile) {
        this._dialog
          .show()
          .find(".rsOverlay")
          .css("opacity", "0.4")
          .end()
          .find(".rsModalDialog")
          .css("opacity", "1");
      } else {
        this._dialog
          .show()
          .find(".rsOverlay")
          .stop()
          .animate({ opacity: 0.4 }, "fast")
          .end()
          .find(".rsModalDialog")
          .stop()
          .animate({ opacity: 1 }, "fast");
      }
      var h = this._dialog.find(".rsModalDialog"),
        g = a(window),
        i = this._dialog.parent();
      var j = (i.height() - h.height()) / 2;
      if (i.height() > g.height()) {
        j = g.scrollTop() - i.position().top + (g.height() - h.height()) / 2;
      }
      if (j < 0) {
        j = 0;
      }
      if (j > i.height()) {
        j = i.height() - h.height();
      }
      h.css({ top: j });
      return this;
    },
    hide: function () {
      if (this._isMobile) {
        this._dialog
          .find(".rsOverlay")
          .css("opacity", "0")
          .end()
          .find(".rsModalDialog")
          .css("opacity", "0");
      } else {
        this._dialog
          .find(".rsOverlay")
          .stop()
          .animate({ opacity: 0 }, "fast")
          .end()
          .find(".rsModalDialog")
          .stop()
          .animate({ opacity: 0 }, "fast");
      }
      this.dispose();
    },
    dispose: function () {
      this._dialog
        .find(".rsModalConfirm")
        .unbind()
        .end()
        .find(".rsModalClose")
        .unbind();
      a(this._dialog).remove();
      this._dialog = null;
    },
  };
})($telerik.$);
(function () {
  var a = $telerik.$;
  var b = Telerik.Web.UI;
  a.popupDialog = function (e, c, d) {
    if (!(this instanceof a.popupDialog)) {
      return new a.popupDialog(e, c, d);
    }
    this._targetElement = e;
    this._handleElement = c;
    this.options = a.extend({}, a.popupDialog.defaults, d);
    this._eventsNamespace = "." + e.id;
    if (b.Calendar) {
      this._originalCalendarZIndex = b.Calendar.Popup.zIndex;
    }
    return this;
  };
  a.popupDialog.defaults = {
    zIndex: 4000,
    draggable: true,
    modal: true,
    minTop: 10,
    minBottom: 10,
    minLeft: 10,
    minRight: 10,
    maxHeight: 550,
    width: 700,
  };
  a.popupDialog.prototype = {
    show: function () {
      var d = this._targetElement;
      this._modalExtender = new Telerik.Web.UI.ModalExtender(d);
      var e = "fixed";
      d.style.position = e;
      if (this.options.modal) {
        a(this._modalExtender._getModalOverlay()).css({
          position: e,
          zIndex: this.options.zIndex,
        });
        this._modalExtender.show();
      }
      a(d).css({ display: "block", zIndex: this.options.zIndex + 1 });
      if (this.options.modal) {
        this._modalExtender.updateModalOverlayZIndex();
      }
      if (b.Calendar) {
        b.Calendar.Popup.zIndex = this.options.zIndex + 2;
      }
      var c = this;
      a(window).bind("resize" + this._eventsNamespace, function () {
        c._resizeForm.apply(c);
        c._positionForm.apply(c);
      });
      a(window).trigger("resize" + this._eventsNamespace);
      if (this.options.draggable && this._handleElement) {
        this._dragCue = this._createDragCue();
        this._makeDraggable();
      }
    },
    close: function () {
      if (this._modalExtender) {
        this._modalExtender.dispose();
      }
      a([window, document, this._handleElement || window]).unbind(
        this._eventsNamespace
      );
      if (b.Calendar) {
        b.Calendar.Popup.zIndex = this._originalCalendarZIndex;
      }
    },
    _positionForm: function () {
      var h = a(window),
        g = 0,
        f = 0,
        e = g,
        d = f,
        c = a(this._targetElement);
      f += (h.width() - c.outerWidth()) / 2;
      g += (h.height() - parseInt(this.options.maxHeight, 10)) / 2;
      f = Math.max(f, d);
      g = Math.max(g, e);
      c.css({ top: g, left: f });
    },
    _resizeForm: function () {
      var c = a(this._targetElement),
        d = c.find(".rsAdvOptionsScroll"),
        g = this.options,
        e = a(window).height() - (c.outerHeight(true) - d.outerHeight(true)),
        f = Math.min(e, g.maxHeight);
      c.css({ width: g.width });
      d.css({ "max-height": f });
    },
    _createDragCue: function () {
      var d = a(this._targetElement);
      var c = a(
        '<div class="rsAdvDragCue" style="display:none; top:0; left:0;"></div>'
      ).css({ position: d.css("position"), opacity: "0.5" });
      d.parent().append(c);
      return c;
    },
    _finishDrag: function () {
      var e = a(this._targetElement);
      var c = this._dragCue;
      var d = {
        top:
          parseInt(c.css("top"), 10) +
          (parseInt(c.css("border-top-width"), 10) ||
            parseInt(c.css("border-width"), 10)),
        left:
          parseInt(c.css("left"), 10) +
          (parseInt(c.css("border-left-width"), 10) ||
            parseInt(c.css("border-width"), 10)),
      };
      e.data("mouseMove", false).css({
        top: d.top,
        left: d.left,
        "-webkit-user-select": "",
        "-moz-user-select": "",
      });
      c.hide();
      e.trigger("formMoved");
    },
    _onMouseMove: function (h) {
      var g = a(this._targetElement);
      var e = this._dragCue;
      if (!g.data("mouseMove")) {
        return;
      }
      b.RadScheduler._clearSelection();
      var f = e.offset();
      if (h.clientX > 0) {
        var o = e.data("scrollLeft") - a(window).scrollLeft();
        var m = f.left + e.data("relOriginX");
        var c = h.clientX - m - o;
        var k = parseInt(e.css("left"), 10) + c;
        var i = a(window).width() - e.outerWidth(true) - this.options.minRight;
        k = Math.max(Math.min(i, k), this.options.minLeft);
        e.css("left", k);
      }
      if (h.clientY > 0) {
        var p = e.data("scrollTop") - a(window).scrollTop();
        var n = f.top + e.data("relOriginY");
        var d = h.clientY - n - p;
        var l = parseInt(e.css("top"), 10) + d;
        var j =
          a(window).height() - e.outerHeight(true) - this.options.minBottom;
        l = Math.max(Math.min(j, l), this.options.minTop);
        e.css("top", l);
      }
    },
    _makeDraggable: function () {
      var e = a(this._targetElement);
      var f = a(this._handleElement);
      var d = this._dragCue;
      f.bind("mousedown" + this._eventsNamespace, function (k) {
        if (k.which != 1) {
          return;
        }
        if (a(k.target).is("a")) {
          return;
        }
        e.trigger("formMoving");
        e.data("mouseMove", true).css({
          "-webkit-user-select": "none",
          "-moz-user-select": "none",
        });
        var h =
          parseInt(e.css("left"), 10) - parseInt(d.css("borderLeftWidth"), 10);
        var j =
          parseInt(e.css("top"), 10) - parseInt(d.css("borderTopWidth"), 10);
        var l = {
          horizontal: e.outerWidth(true) - e.outerWidth(),
          vertical: e.outerHeight(true) - e.outerHeight(),
        };
        d.css({
          width: e.outerWidth() - l.horizontal,
          height: e.outerHeight() - l.vertical,
          zIndex: parseInt(e.css("zIndex"), 10) + 1,
          top: j,
          left: h,
        }).show();
        var i = d.offset();
        d.data("relOriginY", Math.round(k.clientY - i.top))
          .data("relOriginX", Math.round(k.clientX - i.left))
          .data("scrollTop", a(window).scrollTop())
          .data("scrollLeft", a(window).scrollLeft());
      });
      var c = this;
      a(document).bind("mouseup" + this._eventsNamespace, function () {
        if (!e.data("mouseMove")) {
          return;
        }
        c._finishDrag.apply(c);
      });
      var g = function () {
        c._onMouseMove.apply(c, arguments);
      };
      a(document).bind("mouseout" + this._eventsNamespace, g);
      a(document).bind("mousemove" + this._eventsNamespace, g);
    },
  };
})();
Type.registerNamespace("Telerik.Web.UI");
Type.registerNamespace("Telerik.Web.UI.Scheduler");
$telerik.findScheduler = $find;
$telerik.toScheduler = function (a) {
  return a;
};
(function (i) {
  var a = $telerik.$,
    c = Telerik.Web.UI,
    d = c.Scheduler,
    b = d.DateTime,
    h = 60000,
    g = h * 60,
    f = g * 24,
    e = 160;
  a.registerEnum(c, "SchedulerViewType", {
    DayView: 0,
    WeekView: 1,
    MonthView: 2,
    ResourceView: 3,
    TimelineView: 4,
    MultiDayView: 5,
    AgendaView: 6,
    YearView: 7,
  });
  a.registerEnum(c, "SchedulerNavigationCommand", {
    SwitchToDayView: 0,
    SwitchToWeekView: 1,
    SwitchToMonthView: 2,
    SwitchToTimelineView: 3,
    SwitchToMultiDayView: 4,
    SwitchToAgendaView: 5,
    SwitchToYearView: 6,
    NavigateToNextPeriod: 7,
    NavigateToPreviousPeriod: 8,
    SwitchToSelectedDay: 9,
    SwitchToSelectedMonth: 10,
    SwitchFullTime: 11,
    DisplayNextAppointmentSegment: 12,
    DisplayPreviousAppointmentSegment: 13,
    NavigateToSelectedDate: 14,
  });
  a.registerEnum(c, "SchedulerFormMode", {
    Hidden: 0,
    Insert: 1,
    Edit: 2,
    AdvancedInsert: 3,
    AdvancedEdit: 4,
  });
  a.registerEnum(c, "AppointmentStyleMode", { Auto: 0, Simple: 1, Default: 2 });
  a.registerEnum(c, "ResourceMarkerType", { None: 0, Block: 1, Bar: 2 });
  a.registerEnum(c, "AppointmentUpdateMode", { Batch: 0, Single: 1 });
  c.RadScheduler = function (j) {
    c.RadScheduler.initializeBase(this, [j]);
    this._styles = {
      dragTarget: "rsDragTarget",
      inlineForm: { sizingWrapper: "rsAptEditSizingWrapper" },
    };
    this._postBackReference = null;
    this._uniqueId = null;
    this._minutesPerRow = 30;
    this._numberOfHoveredRows = 2;
    this._selectedView = 0;
    this._readOnly = false;
    this._overflowBehavior = 1;
    this._shouldPostbackOnClick = true;
    this._displayDeleteConfirmation = true;
    this._displayRecurrenceActionDialogOnMove = false;
    this._firstDayStart = null;
    this._appointments = null;
    this._currentAppointment = null;
    this._currentOperationAppointment = null;
    this._resources = new c.SchedulerResourceCollection();
    this._resourceTypes = new c.ResourceTypeCollection();
    this._scrollTop = 0;
    this._scrollLeft = 0;
    this._useHorizontalScrolling = false;
    this._localization = null;
    this._advancedTemplate = null;
    this._advancedInsertTemplate = null;
    this._advancedEditTemplate = null;
    this._attributes = new c.SchedulerAttributeCollection();
    this._datePickerCalendarExpanded = false;
    this._datePickerOriginalValue = "";
    this._customAttributeNames = [];
    this._timeLabelRowSpan = 2;
    this._appointmentStyleMode = c.AppointmentStyleMode.Auto;
    this._enableDescriptionField = false;
    this._navigating = false;
    this._allowEdit = true;
    this._allowDelete = true;
    this._allowInsert = true;
    this._defaultAdvancedFormRendered = false;
    this._useDefaultAdvancedInsert = true;
    this._useDefaultAdvancedEdit = true;
    this._startEditingInAdvancedForm = true;
    this._startInsertingInAdvancedForm = false;
    this._dragging = false;
    this._draggingAppointment = null;
    this._onKeyboardEventDelegate = null;
    this._onKeyboardEventNavigationDelegate = null;
    this._activeModel = null;
    this._modelTables = null;
    this._resizingState = {};
    this._resizeHelper = null;
    this._eventMap = new c.Scheduler.EventMap();
    this._rowHeight = "25px";
    this._minimumViewHeight = e;
    this._minimumInlineFormHeight = 50;
    this._minimumInlineFormWidth = 265;
    this._shouldUseClientInlineInsertForm = true;
    this._shouldUseClientInlineEditForm = true;
    this._validationGroup = null;
    this._remindersMaxAge = 60000 * 60 * 24 * 14;
    this._webServiceSettings = new c.SchedulerWebServiceSettings({});
    this._timeZoneOffset = 0;
    this._timeZoneId = "";
    this._adjustmentRules = [];
    this._formContainerMode = c.SchedulerFormMode.Hidden;
    this._editingRecurringSeries = false;
    this._showFullTime = false;
    this._showAllDayRow = true;
    this._firstDayOfWeek = c.DayOfWeek.Sunday;
    this._lastDayOfWeek = c.DayOfWeek.Saturday;
    this._advancedFormSettings = { enabled: true, modal: false, zIndex: 2500 };
    this._weekViewSettings = [];
    this._dayViewSettings = [];
    this._multiDayViewSettings = [];
    this._monthViewSettings = [];
    this._timelineViewSettings = [];
    this._agendaViewSettings = [];
    this._yearViewSettings = [];
    this._modelData = null;
    this._schedulerRendered = null;
    this._contentTouchScroll = null;
    this._repainting = false;
    this._isDirty = false;
    this._shouldPostbackOnReminderSnooze = false;
    this._rowSelectionState = {};
    this._rowSelectionState.isRowSelection = false;
    this._rowSelectionState.selectedSlots = [];
    this._rowSelectionState.rowSelectionStartSlot = null;
    this._rowSelectionState.rowSelectionEndSlot = null;
    this._appointmentsToolTipDelay = 500;
    this._navigator = null;
    this._lastSelectedApt = null;
    this._contextMenuInterval = {
      timeslot: null,
      appointment: null,
      reset: function () {
        clearTimeout(this.timeslot);
        (this.timeslot = null), clearTimeout(this.appointment);
        this.appointment = null;
      },
    };
  };
  c.RadScheduler._plugins = [];
  c.RadScheduler._incrementTime = function (j, k, l) {
    if (isNaN(l)) {
      l = 0;
    }
    var n = j.getTimezoneOffset();
    j.setTime(j.getTime() + k * 3600000 + l * 60000);
    var m = j.getTimezoneOffset();
    j.setTime(j.getTime() + (m - n) * 60000);
  };
  c.RadScheduler._preInitialize = function (m, o, n, j, p, k) {
    var l = a("#" + m);
    if (l[0]._preInitialized && !$telerik.isIE) {
      return;
    }
    if (k == c.RenderMode.Mobile) {
      e = 240;
    }
    c.RadScheduler._adjustContentDimensions(l, o, n, j, p, k);
    l[0].style.cssText = l[0].style.cssText;
    c.RadScheduler._recalcAppointmentWidth();
    l[0]._preInitialized = true;
  };
  c.RadScheduler._recalcAppointmentWidth = function (n) {
    var m = 0;
    var k = a(n).find(".rsTopWrap table.rsAllDayTable .rsAllDayRow").first();
    var j = k.find("td");
    var l = k.width() / j.length;
    var o = {};
    j.each(function () {
      var r = this.offsetWidth;
      var p = this.cellIndex;
      var q;
      if (p === 0 || a(this).hasClass("rsFirstCell")) {
        m = r;
        o[p] = 0;
      } else {
        q = r - m;
        o[p] = o[p - 1] + q;
      }
    });
    a(n)
      .find(".rsTopWrap table.rsAllDayTable div.rsApt")
      .each(function () {
        var p = this;
        var B = a(p).parents("table.rsAllDayTable").filter(":first");
        if (B.length == 0) {
          return;
        }
        var C = B[0].style.width,
          t = C.endsWith("px"),
          D = p.style.width,
          s = D.endsWith("px");
        if (t && s) {
          return;
        }
        if (!t) {
          if (s) {
            p.width = p.originalWidth;
            D = p.originalWidth;
          } else {
            p.originalWidth = D;
          }
        }
        var z = p.parentNode.parentNode;
        var v = a(p).parents(".rsTimelineView").length != 0;
        var y = 0;
        var x = 0;
        if (v) {
          y = p.style.left == "" ? 0 : parseFloat(p.style.left, 10);
          x = Math.floor(y / 100);
          for (var u = 0; u < x; u++) {
            z = a(z).next().get(0);
          }
        }
        if (!z || !z.tagName || z.tagName.toUpperCase() != "TD") {
          return;
        }
        var A = z.parentNode;
        var r = parseFloat(D, 10) / 100;
        var q = Math.floor(r);
        var w = z.cellIndex + q - 1;
        if (w > A.cells.length - 1) {
          return;
        }
        if (v && y > 0) {
          p.style.left = y + "%";
          if ($telerik.isIE7) {
            x = 0;
          }
          x += o[z.cellIndex];
          p.style.marginLeft = x + "px";
        }
        p.style.width = l * r + "px";
      });
  };
  c.RadScheduler._scrollVerticalArea = function (j, k) {
    if (j.length) {
      j.parent().scrollTop(k);
    }
  };
  c.RadScheduler._adjustContentDimensions = function (q, w, v, o, x, p) {
    var r = q.find("div.rsTopWrap");
    var j = {
      scheduler: q,
      schedulerTopWrap: r,
      contentWrapper: r.find("td.rsContentWrapper"),
      verticalHeaderWrapper: r.find("td.rsVerticalHeaderWrapper"),
    };
    var t = Telerik.Web.Browser.scrollBarWidth;
    if (
      r.find(".rsYearView").length &&
      r.find(".rsYearView").hasClass("rsVertical")
    ) {
      x = true;
    }
    if (x) {
      r.find("table.rsVerticalHeaderTable").css("margin-bottom", t + "px");
    }
    c.RadScheduler._adjustContentWidth(j);
    var s = r.find("div.rsContentScrollArea");
    if (o != 2 || s.parents(".rsTimelineView").length == 0) {
      c.RadScheduler._adjustContentHeight(j, x, o);
    }
    if (s.length) {
      var y = r.find(".rsVerticalHeaderTable");
      c.RadScheduler._scrollVerticalArea(y, w);
      s.scrollTop(w).scrollLeft(v);
      var k = r.find("td.rsHorizontalHeaderWrapper").children().children();
      var l = false;
      var n;
      if (o != 2) {
        l = q.attr("dir") == "rtl";
        var u = s[0].scrollHeight,
          m = l ? "margin-left" : "margin-right";
        if (x) {
          u += t;
        }
        n = o == 3 && s[0].offsetHeight == u ? 0 : t;
        k.css(m, n);
      }
      k.scrollLeft(v);
    }
    c.InlineTemplate._positionForm(q[0].id);
    c.RadScheduler._adjustTimelineViewHeight(q, p);
    c.RadScheduler._adjustAgendaViewHeight(j);
  };
  c.RadScheduler._adjustContentHeight = function (n, s, r) {
    a(n.contentWrapper).add(n.contentWrapper.children(":first")).height("");
    var j = n.schedulerTopWrap
        .find(
          "div.rsHeader, div.rsToolbar, div.rsFooter, td.rsHorizontalHeaderWrapper"
        )
        .filter(":visible"),
      m = n.scheduler.height(),
      q = 0,
      p = s ? Telerik.Web.Browser.scrollBarWidth : 0,
      l = n.scheduler.find(".rsContent"),
      k = l.outerHeight() - l.height(),
      o;
    a.each(j, function () {
      m -= a(this).outerHeight();
    });
    a(n.contentWrapper)
      .find(
        "table.rsContentTable, table.rsAllDayTable, div.rsYearMonthsWrap, table.rsAgendaTable, div.rsSubHeader:visible"
      )
      .each(function () {
        if (a(this).parents().is(".rsHorizontal")) {
          q = a(this).outerHeight();
        } else {
          q += a(this).outerHeight();
        }
      });
    q += p;
    m -= a(n.schedulerTopWrap).outerHeight() - a(n.schedulerTopWrap).height();
    if (q >= m && r != 2) {
      m -= k;
    } else {
      m = q;
    }
    a(n.contentWrapper).add(n.contentWrapper.children(":first")).height(m);
    o = m - p;
    a(n.verticalHeaderWrapper)
      .add(n.verticalHeaderWrapper.children(":first"))
      .height(o);
  };
  c.RadScheduler._adjustContentWidth = function (k) {
    var m = k.contentWrapper
      .add(
        k.schedulerTopWrap.find("td.rsHorizontalHeaderWrapper").children().get()
      )
      .add(k.contentWrapper.children()[0]);
    var n = k.schedulerTopWrap.outerWidth() - k.schedulerTopWrap.width();
    if ($telerik.isIE) {
      if (k.scheduler.width() - n != 0) {
        k.scheduler.css("overflow-x", "hidden");
        k.schedulerTopWrap.width(k.scheduler.width() - n);
        k.scheduler.css("overflow-x", "");
      }
    } else {
      k.schedulerTopWrap.width(k.scheduler.width() - n);
    }
    m.width("100%");
    var j = k.scheduler.width() - k.verticalHeaderWrapper.width();
    m.width(j - 2);
    var l = k.contentWrapper.find(".rsArrowContainer");
    if (l.length > 0) {
      l.width(k.contentWrapper.find(".rsContentTable").width());
    }
  };
  c.RadScheduler._adjustTimelineViewHeight = function (o, n) {
    var l = a(o),
      k = l.find(".rsTimelineView .rsAllDayRow"),
      j = l.find(".rsTimelineView .rsVerticalHeaderWrapper tr");
    if (k.length > 0) {
      var p = 0;
      var m;
      k.each(function () {
        p += a(this).height();
      });
      if (n === c.RenderMode.Lite) {
        m = l.height() - l.find(".rsTopWrap").outerHeight();
      } else {
        m = e - p;
      }
      if (m > 0) {
        k.each(function (s) {
          var q = a(this),
            r = a(j[s]),
            t = q.height() + m / k.length;
          q.outerHeight(t);
          r.outerHeight(t);
        });
      }
    }
  };
  c.RadScheduler._adjustAgendaViewHeight = function (l) {
    var k = l.contentWrapper,
      j = k.find("table.rsAgendaTable"),
      m = 0;
    j.add(k.find("div.rsSubHeader:visible")).each(function () {
      m += a(this).outerHeight();
    });
    if (l.contentWrapper.parents(".rsAgendaView").length > 0 && m < e) {
      k.add(k.children(":first")).height(e);
    }
  };
  c.RadScheduler._clearSelection = function () {
    if (document.selection && document.selection.empty) {
      try {
        document.selection.empty();
      } catch (j) {}
    } else {
      if (window.getSelection && window.getSelection().removeAllRanges) {
        window.getSelection().removeAllRanges();
      }
    }
  };
  c.RadScheduler.prototype = {
    initialize: function () {
      var l = this.get_element(),
        j = a(l);
      c.RadScheduler.callBaseMethod(this, "initialize");
      this._activeModel = this._getModelFactory(
        this._selectedView
      ).createModel();
      this._activeModel.initialize();
      this._eventMap.initialize(this);
      this.updateClientState();
      this._scrollTopOnInitialize = this.get_scrollTop();
      this._updateScrollAreas();
      this._minimumViewHeight = e;
      var o = !this._webServiceSettings.get_isEmpty();
      if (!o && j.find(".rsAdvancedEdit").length > 0) {
        var m = j.find(".rsAdvancedEdit")[0];
        if (
          c.Scheduling != i &&
          c.Scheduling.AdvancedTemplate != i &&
          this._defaultAdvancedFormRendered
        ) {
          var n = this._isSchedulerContentRendered();
          this._advancedTemplate = this._createAdvancedTemplate(l, m, n);
        }
        this._makeModal(m);
        this._initializeAdvancedTemplateCallback = Function.createDelegate(
          this,
          this._initializeAdvancedTemplate
        );
        Sys.Application.add_load(this._initializeAdvancedTemplateCallback);
      }
      if (this._isSchedulerContentRendered()) {
        if (!$telerik.isIE) {
          this._eventMap.addHandlerForClassName(
            "mousemove",
            "rsContent",
            this._onContentScroll
          );
        }
        var k = $telerik.isTouchDevice ? "touchend" : "click";
        this._eventMap.addHandlerForClassName(
          "dblclick",
          "rsAptEdit",
          this._stopEventPropagation
        );
        this._eventMap.addHandlerForClassName(
          "dblclick",
          "rsApt",
          this._onAppointmentDoubleClick
        );
        this._eventMap.addHandlerForClassName(
          "dblclick",
          "rsAgendaRow",
          this._onAppointmentDoubleClick
        );
        this._eventMap.addHandlerForClassName(
          "dblclick",
          "rsContentTable",
          this._onCellDoubleClick
        );
        this._eventMap.addHandlerForClassName(
          "dblclick",
          "rsAllDayTable",
          this._onCellDoubleClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsAptResize",
          this._onResizeGripMouseClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsApt",
          this._onAppointmentClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsAgendaRow",
          this._onAppointmentClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsAptDelete",
          this._onAppointmentDeleteClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsArrowTop",
          this._onPreviousDayClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsArrowBottom",
          this._onNextDayClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsArrowLeft",
          this._onPreviousDayClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsArrowRight",
          this._onNextDayClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsNextDay",
          this._onNextSchedulerDayClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsPrevDay",
          this._onPreviousSchedulerDayClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsToday",
          this._onTodayClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsFullTime",
          this._onFullTimeLinkClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsOvertimeArrow",
          this._onFullTimeLinkClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsAptEdit",
          this._onEditFormClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsShowMore",
          this._onShowMoreClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsDateHeader",
          this._onDateHeaderClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsMonthHeader",
          this._onMonthHeaderClick
        );
        this._eventMap.addHandlerForClassName(
          k,
          "rsAddAppointment",
          this._onAddAppointmentClick
        );
        this._eventMap.addHandlerForClassName(
          k,
          "rsViewToggle",
          this._onViewToggleClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsHeaderDay",
          this._onDayViewTabClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsHeaderWeek",
          this._onWeekViewTabClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsHeaderMonth",
          this._onMonthViewTabClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsHeaderTimeline",
          this._onTimelineViewTabClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsHeaderMultiDay",
          this._onMultiDayViewTabClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsHeaderAgenda",
          this._onAgendaViewTabClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsHeaderYear",
          this._onYearViewTabClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsContentTable",
          this._onCellClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsAllDayTable",
          this._onCellClick
        );
        this._eventMap.addHandlerForClassName(
          "click",
          "rsDatePickerActivator",
          this._onDatePickerToggle
        );
        if (!$telerik.isTouchDevice) {
          this._eventMap.addHandlerForClassName(
            "mousedown",
            "rsContentTable",
            this._onCellMouseDown
          );
          this._eventMap.addHandlerForClassName(
            "mousedown",
            "rsAllDayTable",
            this._onCellMouseDown
          );
          this._eventMap.addHandlerForClassName(
            "mouseover",
            "rsAllDayTable",
            this._onRowMouseOver
          );
          this._eventMap.addHandlerForClassName(
            "mouseover",
            "rsContentTable",
            this._onRowMouseOver
          );
          this._eventMap.addHandlerForClassName(
            "mouseover",
            "rsAllDayCell",
            this._onAllDayCellMouseOver
          );
          this._eventMap.addHandlerForClassName(
            "mouseover",
            "rsApt",
            this._onAppointmentMouseOver
          );
          this._eventMap.addHandlerForClassName(
            "mouseover",
            "rsAgendaRow",
            this._onAppointmentMouseOver
          );
          this._eventMap.addHandlerForClassName(
            "mouseover",
            "rsAptResize",
            this._onResizeGripMouseOver
          );
          this._eventMap.addHandlerForClassName(
            "mouseout",
            "rsContent",
            this._onRowMouseOut
          );
          this._eventMap.addHandlerForClassName(
            "mouseout",
            "rsAllDayCell",
            this._onRowMouseOut
          );
          this._eventMap.addHandlerForClassName(
            "mouseout",
            "rsApt",
            this._onAppointmentMouseOut
          );
          this._eventMap.addHandlerForClassName(
            "mouseout",
            "rsAgendaRow",
            this._onAppointmentMouseOut
          );
        }
        if (this._renderMode == c.RenderMode.Lite) {
          a(this._element)
            .find(".rsTopWrap .rsButton")
            .on("mouseenter", function () {
              a(this).addClass("rsHovered");
            })
            .on("mouseleave", function () {
              a(this).removeClass("rsHovered");
            });
        }
        this._initializeTouchEvents();
        this._initializeContextMenuEvents();
        this._updateContentScrollArea(j);
        this._onDocumentMouseOutDelegate = Function.createDelegate(
          this,
          this._onDocumentMouseOut
        );
        $telerik.addHandler(
          document.documentElement,
          "mouseout",
          this._onDocumentMouseOutDelegate
        );
        this._onDocumentClickDelegate = Function.createDelegate(
          this,
          this._onDocumentClick
        );
        $telerik.addHandler(
          document.documentElement,
          "click",
          this._onDocumentClickDelegate
        );
        this._onContentScroll();
        this._initializeIndicators();
        this._applicationLoadedCallback = Function.createDelegate(
          this,
          this._applicationLoaded
        );
        Sys.Application.add_load(this._applicationLoadedCallback);
      }
      this._onKeyboardEventDelegate = Function.createDelegate(
        this,
        this._onKeyboardEvent
      );
      $telerik.addHandler(
        document.documentElement,
        "keydown",
        this._onKeyboardEventDelegate
      );
      this._onRowSelectionMouseMoveDelegate = Function.createDelegate(
        this,
        this._onRowSelectionMouseMove
      );
      this._onRowSelectionMouseUpDelegate = Function.createDelegate(
        this,
        this._onRowSelectionMouseUp
      );
      this.add_navigationCommand(this._onNavigationCommand);
      this._onResizeGripMouseMoveDelegate = Function.createDelegate(
        this,
        this._onResizeGripMouseMove
      );
      this._onResizeGripMouseUpDelegate = Function.createDelegate(
        this,
        this._onResizeGripMouseUp
      );
      this._onSelectStartDelegate = Function.createDelegate(
        this,
        this._onSelectStart
      );
      this._onDocMouseUpDelegate = Function.createDelegate(
        this,
        this._onDocMouseUp
      );
      this._onDocumentMouseMoveDelegate = Function.createDelegate(
        this,
        this._onDocumentMouseMove
      );
      this._getInlineTemplate();
      this._initializeRenderingManager();
      this._initializeKeyboardNavigation();
      this._initializePlugins();
      this._initializeAppointmentsTooltip();
      this._resolveAddButtonVisibility();
      this._resizeHelper = new c.Scheduler.ResizeHelper(this);
      this._resizeHelper.initialize();
      this._onWindowResizeDelegate = Function.createDelegate(
        this,
        this.repaint
      );
      $telerik.addHandler(window, "resize", this._onWindowResizeDelegate);
    },
    _initializeTouchEvents: function () {
      var j = $telerik.isTouchDevice ? "touchstart" : "mousedown",
        k = $telerik.isTouchDevice ? "touchend" : "mouseup";
      this._eventMap.addHandlerForClassName(
        j,
        "rsAptDelete",
        this._onAppointmentDeleteMouseDown
      );
      this._eventMap.addHandlerForClassName(
        j,
        "rsApt",
        this._onAppointmentMouseDown
      );
      this._eventMap.addHandlerForClassName(
        j,
        "rsAgendaRow",
        this._onAppointmentMouseDown
      );
      this._eventMap.addHandlerForClassName(
        j,
        "rsAptResize",
        this._onResizeGripMouseDown
      );
      this._eventMap.addHandlerForClassName(k, "rsContent", this._endDrag);
    },
    _initializeContextMenuEvents: function () {
      var j = this,
        k = function (l) {
          j._addLongTouchHandler("timeslot", j._onTimeSlotTouchHold, l);
          j._preventCtxMenuClosing = false;
          j._timeSlotTapped = true;
          a(".rsContent", this._element).on("touchmove", function (m) {
            j._contextMenuInterval.reset();
            j._timeSlotTapped = false;
          });
        };
      if ($telerik.isTouchDevice) {
        this._eventMap.addHandlerForClassName(
          "touchstart",
          "rsContentTable",
          k
        );
        this._eventMap.addHandlerForClassName("touchstart", "rsAllDayTable", k);
        this._eventMap.addHandlerForClassName(
          "touchend",
          "rsContentTable",
          this._onTimeSlotTouchEnd
        );
        this._eventMap.addHandlerForClassName(
          "touchend",
          "rsAllDayTable",
          this._onTimeSlotTouchEnd
        );
      } else {
        this._eventMap.addHandlerForClassName(
          "contextmenu",
          "rsApt",
          this._onAppointmentContextMenu
        );
        this._eventMap.addHandlerForClassName(
          "contextmenu",
          "rsAgendaRow",
          this._onAppointmentContextMenu
        );
        this._eventMap.addHandlerForClassName(
          "contextmenu",
          "rsContentTable",
          this._onCellContextMenu
        );
        this._eventMap.addHandlerForClassName(
          "contextmenu",
          "rsAllDayTable",
          this._onCellContextMenu
        );
      }
    },
    _addLongTouchHandler: function (m, j, l) {
      var k = this._contextMenuInterval,
        n = this;
      clearTimeout(k[m]);
      k[m] = setTimeout(function () {
        $telerik.cancelRawEvent(l);
        j.apply(n, [l]);
      }, 500);
    },
    _onTimeSlotTouchHold: function (j) {
      this._preventCtxMenuClosing = true;
      this._onCellContextMenu(j);
    },
    _addPreventClosing: function (j) {
      var m = this;
      for (var k = 0, l = j.length; k < l; k++) {
        j[k].add_hiding(function (o, n) {
          m._onContextMenuHiding(o, n);
        });
      }
    },
    _onContextMenuHiding: function (k, j) {
      var l = j.get_domEvent() && j.get_domEvent().type == "click";
      if (l && this._preventCtxMenuClosing) {
        this._preventCtxMenuClosing = false;
        j.set_cancel(true);
      }
    },
    _onTimeSlotTouchEnd: function (j) {
      a(".rsContent", this._element).off("touchmove");
      this._onDocMouseUp(j);
      if (this._timeSlotTapped) {
        this._onCellMouseDown(j);
        if (
          this._renderMode == c.RenderMode.Mobile &&
          this.get_selectedView() == c.SchedulerViewType.MonthView
        ) {
          var k = this._activeModel.getTimeSlotFromDomElement(j.target);
          return this._switchToSelectedDay(k.get_startTime());
        }
      }
      this._timeSlotTapped = false;
    },
    _initializeKeyboardNavigation: function () {
      var j = a(this.get_element());
      if (j.attr("tabIndex") >= 0 || j.attr("accessKey") != i) {
        this._navigator = new c.Scheduler.KeyboardNavigation(this);
        this._onKeyboardEventNavigationDelegate = Function.createDelegate(
          this,
          this._onKeyboardEventNavigation
        );
        $telerik.addHandler(
          this.get_element(),
          "keydown",
          this._onKeyboardEventNavigationDelegate
        );
      }
    },
    _initializeIndicators: function () {
      if (!this._modelData) {
        return;
      }
      if (
        this.get_activeModel()._settings &&
        this.get_activeModel()._settings.hiddenAptsIndicator === false
      ) {
        return;
      }
      this._modelData = eval("(" + this._modelData + ")");
      this._setIndicatorState(this._modelData.aptIndicators);
    },
    _initializePlugins: function () {
      var j = this;
      a.each(c.RadScheduler._plugins, function () {
        this.onInitialize.call(j);
      });
    },
    _isSchedulerContentRendered: function () {
      if (this._schedulerRendered === null) {
        this._schedulerRendered =
          a(this.get_element()).find(".rsTopWrap").length > 0;
      }
      return this._schedulerRendered;
    },
    _updateContentScrollArea: function (j) {
      this._clearScrollAreaHandlers();
      this._contentScrollArea = j.find("div.rsContentScrollArea")[0];
      if (this._contentScrollArea) {
        this._onContentScrollDelegate = Function.createDelegate(
          this,
          this._onContentScroll
        );
        $telerik.addHandler(
          this._contentScrollArea,
          "scroll",
          this._onContentScrollDelegate
        );
        if (
          c.TouchScrollExtender._getNeedsScrollExtender() &&
          !this._contentTouchScroll
        ) {
          this._contentTouchScroll = new c.TouchScrollExtender(
            this._contentScrollArea
          );
          this._contentTouchScroll.initialize();
        }
      }
    },
    _updateScrollAreas: function () {
      var j = a(this.get_element());
      this._updateContentScrollArea(j);
      this._horizontalScrollAreas = j
        .find(".rsTopWrap td.rsHorizontalHeaderWrapper")
        .children()
        .children();
      this._verticalScrollAreas = j.find(".rsTopWrap .rsVerticalHeaderTable");
    },
    _applicationLoaded: function () {
      Sys.Application.remove_load(this._applicationLoadedCallback);
      if (!this.get_element()) {
        return;
      }
      this.set_scrollTop(this._scrollTopOnInitialize);
      this.repaint();
      this.initializeDatePicker();
    },
    initializeDatePicker: function () {
      var m = this,
        k = this.get_element().id + "_SelectedDateCalendar",
        j;
      j = $find(k);
      if (j) {
        this._initializeRadDatePicker(j);
        return;
      }
      j = $get(k);
      if (j) {
        var l =
          !$telerik.isTouchDevice || $telerik.isAndroid ? "change" : "blur";
        a(j)
          .on("focus", function (n) {
            m._nativeCalendarFocus(n);
          })
          .on(l, function (n) {
            m._nativeCalendarBlur(n);
          });
      }
    },
    _initializeRadDatePicker: function (j) {
      j.add_dateSelecting(
        Function.createDelegate(this, this._radCalendarDateChanging)
      );
      j.add_calendarViewChanged(
        Function.createDelegate(this, this._radCalendarViewChanged)
      );
      a(this.get_element()).find("div.rsDatePickerAnimationWrapper").hide();
      if (this._renderingManager) {
        j.set_autoPostBack(false);
        j.add_dateSelected(
          Function.createDelegate(this, this._radCalendarDateChanged)
        );
      } else {
        j.add_calendarViewChanging(function (k) {
          k.set_autoPostBack(false);
        });
        j.add_calendarViewChanged(function (k) {
          k.set_autoPostBack(true);
        });
      }
    },
    _radCalendarDateChanging: function (n, l) {
      var m = l.get_renderDay().get_date(),
        k = new Date(m[0], m[1] - 1, m[2]),
        j = new d.NavigationCommandEventArgs(
          c.SchedulerNavigationCommand.NavigateToSelectedDate,
          k
        );
      if (l.get_isSelecting()) {
        this.raiseEvent("navigationCommand", j);
        if (j.get_cancel()) {
          l.set_cancel(true);
          this._onDatePickerToggle();
        }
      }
    },
    _radCalendarDateChanged: function (m) {
      var l = m.get_selectedDates();
      if (l.length > 0) {
        var k = l[0],
          j = new Date(k[0], k[1] - 1, k[2]);
        if (this._preventCalendarNavigate) {
          return;
        }
        this.set_selectedDate(j);
        this._onDatePickerToggle();
        this.raiseEvent(
          "navigationComplete",
          new d.NavigationCompleteEventArgs(
            c.SchedulerNavigationCommand.NavigateToSelectedDate
          )
        );
      }
    },
    _radCalendarViewChanged: function (n) {
      var j = a(this.get_element()).find("div.rsDatePickerAnimationWrapper");
      var k = j.find("div").filter(":first");
      var m = this.get_renderMode() === c.RenderMode.Lite;
      var l = m ? k.height() : k.find("table").first().height();
      j.css({ height: l + "px" });
    },
    _nativeCalendarFocus: function (j) {
      this._datePickerOriginalValue = j.target.value;
    },
    _nativeCalendarBlur: function (l) {
      var k = new Date(l.target.value);
      k = new Date(k.getUTCFullYear(), k.getUTCMonth(), k.getUTCDate());
      var j = new d.NavigationCommandEventArgs(
        c.SchedulerNavigationCommand.NavigateToSelectedDate,
        k
      );
      this.raiseEvent("navigationCommand", j);
      if (j.get_cancel()) {
        l.target.value = this._datePickerOriginalValue;
        return;
      }
      if (this._renderingManager) {
        this.set_selectedDate(k);
        j = new d.NavigationCompleteEventArgs(
          c.SchedulerNavigationCommand.NavigateToSelectedDate
        );
        this.raiseEvent("navigationComplete", j);
      } else {
        var m = {
          Command: "NavigateToSelectedDate",
          StartDate: k.format("yyyyMMddHHmm"),
        };
        this.postback(m);
      }
    },
    _initializeAdvancedTemplate: function () {
      if (this._advancedTemplate) {
        this._advancedTemplate.initialize();
      }
      this._fireFormCreated(
        this.get_currentAppointment(),
        this._formContainerMode,
        this._editingRecurringSeries
      );
      try {
        if (this._defaultAdvancedFormRendered) {
          this._focusAdvancedFormSubjectTextBox();
        }
      } catch (j) {}
      Sys.Application.remove_load(this._initializeAdvancedTemplateCallback);
    },
    _initializeRenderingManager: function () {
      if (this._createRenderingManager(this._webServiceSettings)) {
        this._renderingManager.add_appointmentsReceived(
          Function.createDelegate(this, this._onWebServiceAppointmentsReceived)
        );
        this._renderingManager.add_appointmentsPopulated(
          Function.createDelegate(this, this._onWebServiceAppointmentsPopulated)
        );
        this._renderingManager.initialize();
      }
    },
    _createRenderingManager: function (j) {
      if (!j.get_isEmpty() && j.get_isWcf()) {
        this._renderingManager = new c.Scheduler.Rendering.WebServiceRenderingManager(
          this,
          this._webServiceSettings
        );
      } else {
        if (this._webServiceSettings.get_isOData()) {
          this._renderingManager = new c.Scheduler.Rendering.ODataRenderingManager(
            this,
            this._webServiceSettings
          );
        } else {
          return false;
        }
      }
      return true;
    },
    _onWebServiceAppointmentsPopulated: function () {
      this._raiseAppointmentsPopulated();
      if (!this._activeModel._getRenderer) {
        return;
      }
      var j = this._activeModel._getRenderer();
      if (j && j.refreshIndicatorState) {
        j.refreshIndicatorState();
      }
    },
    _onWebServiceAppointmentsReceived: function () {
      var j = this._isInBatchMode() || this._navigating;
      this._processUpdateMode(j);
      this._navigating = false;
      if (this._newActiveModel) {
        this._activeModel = this._newActiveModel;
        this._newActiveModel = null;
      }
      this.set_firstDayStart(this._activeModel.get_visibleRangeStart());
      this._resolveAddButtonVisibility();
      if (!this._activeModel._getRenderer) {
        return;
      }
      var k = this._activeModel._getRenderer();
      if (k) {
        k.refreshView();
        this._updateScrollAreas();
      }
    },
    _processUpdateMode: function (m) {
      var n = this;
      var j = this.get_appointments();
      if (m) {
        j._clear();
      } else {
        if (this._currentOperationAppointment) {
          var l = this._currentOperationAppointment.get_id();
          this._currentOperationAppointment.remove();
          var k = this.get_appointments().findAll(function (o) {
            return o.get_id() === l || o.get_recurrenceParentID() === l;
          });
          k.forEach(function (o) {
            Array.remove(j._array, o);
          });
          n._activeModel._getRenderer().clearAppointments(k);
        }
      }
      this._currentOperationAppointment = null;
    },
    _cacheCurrentOperationAppointment: function (j, k) {
      var l = j.get_recurrenceState();
      if (
        l === c.RecurrenceState.Occurrence ||
        (l === c.RecurrenceState.Exception && k)
      ) {
        this._currentOperationAppointment = this.get_appointments().findByID(
          j.get_recurrenceParentID()
        );
      } else {
        this._currentOperationAppointment = j;
      }
    },
    _resolveAddButtonVisibility: function () {
      if (this._renderMode == c.RenderMode.Mobile) {
        var k = this.get_selectedView(),
          l = c.SchedulerViewType,
          j =
            k == l.MonthView ||
            k == l.YearView ||
            k == l.AgendaView ||
            k == l.TimelineView;
        a(this._element).find(".rsAddAppointment").toggle(!j);
      }
    },
    dispose: function () {
      if (
        this._advancedInsertTemplate &&
        this._advancedInsertTemplate.dispose
      ) {
        this._advancedInsertTemplate.dispose();
      }
      if (this._advancedEditTemplate && this._advancedEditTemplate.dispose) {
        this._advancedEditTemplate.dispose();
      }
      if (this._onWindowResizeDelegate) {
        $telerik.removeHandler(window, "resize", this._onWindowResizeDelegate);
      }
      if (this._onKeyboardEventDelegate) {
        $telerik.removeHandler(
          document.documentElement,
          "keydown",
          this._onKeyboardEventDelegate
        );
      }
      if (this._onKeyboardEventNavigationDelegate) {
        $telerik.removeHandler(
          this.get_element(),
          "keydown",
          this._onKeyboardEventNavigationDelegate
        );
      }
      if (this._onDocumentMouseOutDelegate) {
        $telerik.removeHandler(
          document.documentElement,
          "mouseout",
          this._onDocumentMouseOutDelegate
        );
      }
      if (this._onDocumentClickDelegate) {
        $telerik.removeHandler(
          document.documentElement,
          $telerik.isTouchDevice ? "touchend" : "click",
          this._onDocumentClickDelegate
        );
      }
      var j = this.get_contentElement();
      if (j) {
        $telerik.clearHandlers(j);
      }
      if (
        c.TouchScrollExtender._getNeedsScrollExtender() &&
        this._contentTouchScroll
      ) {
        this._contentTouchScroll.dispose();
      }
      this._dropDownElement = null;
      this._clearScrollAreaHandlers();
      this._eventMap.dispose();
      if (this._renderMode == c.RenderMode.Lite) {
        a(this._element).find(".rsTopWrap .rsButton").off();
      }
      this._modelTables = null;
      this._resizingState = null;
      this._currentOperationAppointment = null;
      this._disposeAppointmentsTooltip();
      if (this._resizeHelper) {
        this._resizeHelper.dispose();
        this._resizeHelper = null;
      }
      if (this._inlineTemplate) {
        this._inlineTemplate.dispose();
      }
      if (this._popupDialog) {
        this._popupDialog.close();
      }
      this._disposePlugins();
      c.RadScheduler.callBaseMethod(this, "dispose");
    },
    _disposePlugins: function () {
      var j = this;
      a.each(c.RadScheduler._plugins, function () {
        this.onDispose.call(j);
      });
    },
    _clearScrollAreaHandlers: function () {
      if (this._contentScrollArea) {
        $telerik.clearHandlers(this._contentScrollArea);
      }
    },
    repaint: function (j) {
      if (this._repainting) {
        return;
      }
      this._repainting = true;
      c.RadScheduler._adjustContentDimensions(
        a(this.get_element()),
        this.get_scrollTop(),
        this.get_scrollLeft(),
        this.get_overflowBehavior(),
        this._useHorizontalScrolling,
        this.get_renderMode()
      );
      this._repaintAdvancedTemplate();
      this._repaintInlineTemplate();
      this._initializeModelTables();
      c.RadScheduler._recalcAppointmentWidth(this.get_element());
      this._repainting = false;
    },
    _repaintAdvancedTemplate: function () {
      if (
        this.get_overflowBehavior() == 1 &&
        !this._advancedFormSettings.modal
      ) {
        if (
          typeof c.Scheduling != "undefined" &&
          typeof c.Scheduling.AdvancedTemplate != "undefined"
        ) {
          c.Scheduling.AdvancedTemplate._adjustHeight(
            $get(this.get_id()),
            this.get_renderMode()
          );
        }
      }
    },
    _repaintInlineTemplate: function () {
      if (
        this._renderMode == c.RenderMode.Mobile &&
        this._inlineTemplate.get_element()
      ) {
        this._inlineTemplate.repaint();
      }
    },
    get_appointments: function () {
      return this._appointments;
    },
    set_appointments: function (m) {
      this._appointments = new c.SchedulerAppointmentCollection(this);
      var k = eval("(" + m + ")");
      for (var l = 0; l < k.length; l++) {
        var j = new c.SchedulerAppointment(k[l], this);
        this._appointments.add(j);
      }
    },
    get_resources: function () {
      return this._resources;
    },
    set_resources: function (m) {
      var j = Sys.Serialization.JavaScriptSerializer.deserialize(m);
      for (var k = 0; k < j.length; k++) {
        var l = new c.SchedulerResource(j[k]);
        this._resources.add(l);
      }
    },
    get_resourceTypes: function () {
      return this._resourceTypes;
    },
    set_resourceTypes: function (m) {
      var j = Sys.Serialization.JavaScriptSerializer.deserialize(m);
      for (var k = 0; k < j.length; k++) {
        var l = new c.ResourceType(j[k]);
        this._resourceTypes.add(l);
      }
    },
    get_adjustmentRules: function () {
      return this._adjustmentRules;
    },
    set_adjustmentRules: function (j) {
      this._adjustmentRules = Sys.Serialization.JavaScriptSerializer.deserialize(
        j
      );
    },
    get_resourceStyles: function () {
      if (!this._resourceStyles) {
        if (c.ResourceStyleMappingCollection) {
          this._resourceStyles = new c.ResourceStyleMappingCollection();
        } else {
          return null;
        }
      }
      return this._resourceStyles;
    },
    set_resourceStyles: function (n) {
      var m = eval("(" + n + ")");
      var l = this.get_resourceStyles();
      for (var j = 0; j < m.length; j++) {
        var k = new c.ResourceStyleMapping(m[j], this);
        l.add(k);
      }
    },
    get_firstDayStart: function () {
      return this._firstDayStart;
    },
    set_firstDayStart: function (j) {
      this._firstDayStart = new Date(Date.parse(j));
    },
    get_currentAppointment: function () {
      return this._currentAppointment;
    },
    set_currentAppointment: function (j) {
      var k = Sys.Serialization.JavaScriptSerializer.deserialize(j);
      this._currentAppointment = new c.SchedulerAppointment(k, this);
    },
    get_localization: function () {
      return this._localization;
    },
    set_localization: function (j) {
      this._localization = Sys.Serialization.JavaScriptSerializer.deserialize(
        j
      );
    },
    get_scrollTop: function () {
      return this._scrollTop;
    },
    set_scrollTop: function (j) {
      this._scrollTop = j;
    },
    get_scrollLeft: function () {
      return this._scrollLeft;
    },
    set_scrollLeft: function (j) {
      this._scrollLeft = j;
    },
    get_displayDeleteConfirmation: function () {
      return this._displayDeleteConfirmation;
    },
    set_displayDeleteConfirmation: function (j) {
      this._displayDeleteConfirmation = j;
    },
    get_displayRecurrenceActionDialogOnMove: function () {
      return this._displayRecurrenceActionDialogOnMove;
    },
    set_displayRecurrenceActionDialogOnMove: function (j) {
      this._displayRecurrenceActionDialogOnMove = j;
    },
    get_shouldPostbackOnClick: function () {
      return this._shouldPostbackOnClick;
    },
    set_shouldPostbackOnClick: function (j) {
      this._shouldPostbackOnClick = j;
    },
    get_shouldUseClientInlineInsertForm: function () {
      return this._shouldUseClientInlineInsertForm;
    },
    set_shouldUseClientInlineInsertForm: function (j) {
      this._shouldUseClientInlineInsertForm = j;
    },
    get_shouldUseClientInlineEditForm: function () {
      return this._shouldUseClientInlineEditForm;
    },
    set_shouldUseClientInlineEditForm: function (j) {
      this._shouldUseClientInlineEditForm = j;
    },
    get_overflowBehavior: function () {
      return this._overflowBehavior;
    },
    set_overflowBehavior: function (j) {
      this._overflowBehavior = j;
    },
    get_readOnly: function () {
      return this._readOnly;
    },
    get_readOnlyForActiveModel: function () {
      return !!this._activeModel._settings.readOnly;
    },
    get_readOnlyResolved: function () {
      return this.get_readOnly() || this.get_readOnlyForActiveModel();
    },
    set_readOnly: function (j) {
      this._readOnly = j;
    },
    get_selectedView: function () {
      return this._selectedView;
    },
    set_selectedView: function (l, m) {
      this._selectedView = l;
      if (this._renderingManager) {
        this._newActiveModel = this._getModelFactory(
          this._selectedView
        ).createModel();
        this._newActiveModel.initialize();
        if (!m) {
          var j = {};
          var n = c.SchedulerViewType;
          var k = c.SchedulerNavigationCommand;
          j[n.DayView] = k.SwitchToDayView;
          j[n.WeekView] = k.SwitchToWeekView;
          j[n.MonthView] = k.SwitchToMonthView;
          j[n.TimelineView] = k.SwitchToTimelineView;
          j[n.MultiDayView] = k.SwitchToMultiDayView;
          j[n.AgendaView] = k.SwitchToAgendaView;
          j[n.YearView] = k.SwitchToYearView;
          this.raiseEvent(
            "navigationComplete",
            new d.NavigationCompleteEventArgs(j[l])
          );
        }
      }
      this.raisePropertyChanged("selectedView");
    },
    get_minutesPerRow: function () {
      return this._minutesPerRow;
    },
    set_minutesPerRow: function (j) {
      this._minutesPerRow = j;
    },
    get_timeLabelRowSpan: function () {
      return this._timeLabelRowSpan;
    },
    set_timeLabelRowSpan: function (j) {
      this._timeLabelRowSpan = j;
      this.raisePropertyChanged("timeLabelRowSpan");
    },
    get_hoursPanelTimeFormat: function () {
      if (!this._hoursPanelTimeFormat) {
        if (
          this._activeModel.get_dayStartTime() % h !== 0 ||
          (this.get_timeLabelRowSpan() * this.get_minutesPerRow()) % 60 !== 0
        ) {
          this._hoursPanelTimeFormat = "h:mmtt";
        } else {
          this._hoursPanelTimeFormat = "htt";
        }
      }
      return this._hoursPanelTimeFormat;
    },
    set_hoursPanelTimeFormat: function (j) {
      this._hoursPanelTimeFormat = j;
    },
    get_postBackReference: function () {
      return this._postBackReference;
    },
    set_postBackReference: function (j) {
      this._postBackReference = j;
    },
    get_allowEdit: function () {
      return this._allowEdit;
    },
    set_allowEdit: function (j) {
      this._allowEdit = j;
    },
    get_allowDelete: function () {
      return this._allowDelete;
    },
    set_allowDelete: function (j) {
      this._allowDelete = j;
    },
    get_allowInsert: function () {
      return this._allowInsert;
    },
    set_allowInsert: function (j) {
      this._allowInsert = j;
    },
    get_attributes: function () {
      return this._attributes;
    },
    set_attributes: function (j) {
      this._attributes._load(j);
    },
    get_customAttributeNames: function () {
      return this._customAttributeNames;
    },
    set_customAttributeNames: function (j) {
      this._customAttributeNames = j;
    },
    get_activeModel: function () {
      return this._activeModel;
    },
    set_numberOfHoveredRows: function (j) {
      this._numberOfHoveredRows = j;
    },
    get_numberOfHoveredRows: function () {
      return this._numberOfHoveredRows;
    },
    set_groupBy: function (j) {
      this._groupBy = j;
    },
    get_groupBy: function () {
      return this._groupBy;
    },
    get_contentElement: function () {
      return $telerik.getElementByClassName(
        this.get_element(),
        "rsContent",
        "div"
      );
    },
    get_rowHeight: function () {
      return this._rowHeight;
    },
    set_rowHeight: function (j) {
      this._rowHeight = j;
    },
    get_height: function () {
      return a(this.get_element()).css("height");
    },
    set_height: function (j) {
      this.get_element().style.height = j;
      this.repaint();
    },
    get_minimumInlineFormWidth: function () {
      return this._minimumInlineFormWidth;
    },
    set_minimumInlineFormWidth: function (j) {
      this._minimumInlineFormWidth = j;
    },
    get_minimumInlineFormHeight: function () {
      return this._minimumInlineFormHeight;
    },
    set_minimumInlineFormHeight: function (j) {
      this._minimumInlineFormHeight = j;
    },
    get_validationGroup: function () {
      return this._validationGroup || this.get_id();
    },
    set_validationGroup: function (j) {
      this._validationGroup = j;
    },
    get_webServiceSettings: function () {
      return this._webServiceSettings;
    },
    set_webServiceSettings: function (k) {
      var j = Sys.Serialization.JavaScriptSerializer.deserialize(k);
      if (j.odataSettings) {
        this._webServiceSettings = new c.SchedulerODataSettings(j);
      } else {
        this._webServiceSettings = new c.SchedulerWebServiceSettings(j);
      }
    },
    get_selectedDate: function () {
      return this._selectedDate;
    },
    set_selectedDate: function (k) {
      var j;
      if (k instanceof Date) {
        j = k;
      } else {
        j = new Date(k);
      }
      if (j != null && !isNaN(j) && j != "Invalid Date") {
        this._selectedDate = j;
        this.raisePropertyChanged("selectedDate");
      }
    },
    get_showFullTime: function () {
      return this._showFullTime;
    },
    set_showFullTime: function (k) {
      if (k != this._showFullTime) {
        this._showFullTime = k;
        if (this._renderingManager) {
          var j = this.get_activeModel()._getRenderer();
          if (k) {
            j.showFullTime();
          } else {
            j.showBusinessTime();
          }
          this._renderingManager.loadAppointments(false);
          this.repaint();
        }
      }
    },
    get_showAllDayRow: function () {
      return this._showAllDayRow;
    },
    set_showAllDayRow: function (j) {
      this._showAllDayRow = j;
    },
    get_firstDayOfWeek: function () {
      return this._firstDayOfWeek;
    },
    set_firstDayOfWeek: function (j) {
      this._firstDayOfWeek = j;
    },
    get_lastDayOfWeek: function () {
      return this._lastDayOfWeek;
    },
    set_lastDayOfWeek: function (j) {
      this._lastDayOfWeek = j;
    },
    get_weekViewSettings: function () {
      return this._weekViewSettings;
    },
    set_weekViewSettings: function (j) {
      this._weekViewSettings = Sys.Serialization.JavaScriptSerializer.deserialize(
        j
      );
    },
    get_dayViewSettings: function () {
      return this._dayViewSettings;
    },
    set_dayViewSettings: function (j) {
      this._dayViewSettings = Sys.Serialization.JavaScriptSerializer.deserialize(
        j
      );
    },
    get_monthViewSettings: function () {
      return this._monthViewSettings;
    },
    set_monthViewSettings: function (j) {
      this._monthViewSettings = Sys.Serialization.JavaScriptSerializer.deserialize(
        j
      );
    },
    get_multiDayViewSettings: function () {
      return this._multiDayViewSettings;
    },
    set_multiDayViewSettings: function (j) {
      this._multiDayViewSettings = Sys.Serialization.JavaScriptSerializer.deserialize(
        j
      );
    },
    get_timelineViewSettings: function () {
      return this._timelineViewSettings;
    },
    set_timelineViewSettings: function (j) {
      this._timelineViewSettings = Sys.Serialization.JavaScriptSerializer.deserialize(
        j
      );
    },
    get_agendaViewSettings: function () {
      return this._agendaViewSettings;
    },
    set_agendaViewSettings: function (j) {
      this._agendaViewSettings = Sys.Serialization.JavaScriptSerializer.deserialize(
        j
      );
    },
    get_yearViewSettings: function () {
      return this._yearViewSettings;
    },
    set_yearViewSettings: function (j) {
      this._yearViewSettings = Sys.Serialization.JavaScriptSerializer.deserialize(
        j
      );
    },
    get_advancedFormSettings: function () {
      return this._advancedFormSettings;
    },
    set_advancedFormSettings: function (k) {
      for (var j in k) {
        this._advancedFormSettings[j] = k[j];
      }
    },
    get_appointmentStyleMode: function () {
      return this._appointmentStyleMode;
    },
    set_appointmentStyleMode: function (j) {
      this._appointmentStyleMode = j;
    },
    showInlineInsertForm: function (r, m) {
      var k,
        n = null;
      if (m) {
        n = m.get_index();
        k = this.get_durationBetweenTimeSlots(r, m);
      }
      var j = k
        ? this._createAppointmentFromTimeSlotAndDuration(r, k)
        : this._createAppointmentFromTimeSlot(r);
      if (this._renderingManager && this._startInsertingInAdvancedForm) {
        this._showAdvancedInsertForm(j);
        return;
      }
      if (
        this.get_shouldUseClientInlineInsertForm() ||
        this._renderingManager
      ) {
        if (this._datePickerCalendarExpanded) {
          this._onDatePickerToggle();
        }
        var l = this._getInlineTemplate();
        l.set_isInsert(true);
        l.instantiateIn(r.get_domElement());
        l.set_text("");
        l.set_start(j.get_start());
        l.set_end(j.get_end());
        if (this._getNavigator()) {
          this._getNavigator()
            ._getCommandsModule()
            .trigger("onEditFormShown", l);
        }
        this._fireFormCreated(j, c.SchedulerFormMode.Insert);
        return;
      }
      var q = r.get_domElement().offsetWidth;
      var p = r.get_domElement().offsetHeight;
      var o = {
        command: "Insert",
        appointmentID: -1,
        targetSlotIndex: r.get_index(),
        lastSlotIndex: n,
        slotWidth: q,
        slotHeight: p,
      };
      this.postback(o);
    },
    showInsertFormAt: function (k, j) {
      this.showInlineInsertForm(k, j);
    },
    showAllDayInlineInsertForm: function (l) {
      var n = new Date(l.getFullYear(), l.getMonth(), l.getDate()),
        m = new b(n).add(f).toDate(),
        k = this._createAppointment(n, m),
        j = this.get_activeModel().getTimeSlotForAppointment(k);
      this.showInlineInsertForm(j);
    },
    showInlineEditForm: function (l, n, m) {
      var k = m || l.get_element(),
        j =
          l._allowDelete != null ? l.get_allowDelete() : this.get_allowDelete(),
        p = this._renderMode == c.RenderMode.Mobile,
        s;
      if (this.get_selectedView() == c.SchedulerViewType.TimelineView) {
        s = this._activeModel.getTimeSlotForAppointment(l).get_domElement();
      } else {
        s = k.parentNode.parentNode;
      }
      if (this._renderingManager && this._startEditingInAdvancedForm) {
        this.showAdvancedEditForm(l, n);
        return;
      }
      if (this.get_shouldUseClientInlineEditForm() || this._renderingManager) {
        if (this._datePickerCalendarExpanded) {
          this._onDatePickerToggle();
        }
        var o = this._getInlineTemplate(),
          q;
        if (l.get_recurrenceParentID()) {
          q = this.get_appointments().findByID(l.get_recurrenceParentID());
        }
        o.set_isInsert(false);
        o.instantiateIn(k);
        o.set_appointmentInternalID(l._internalID);
        o.set_text(n && q ? q.get_subject() : l.get_subject());
        o.set_start(l.get_start());
        o.set_end(l.get_end());
        o.set_editSeries(n);
        if (p) {
          a(o.get_element()).find(".rsAptEditDelete").toggle(j);
        }
        if (this._getNavigator()) {
          this._getNavigator()
            ._getCommandsModule()
            .trigger("onEditFormShown", o);
        }
        this._fireFormCreated(l, c.SchedulerFormMode.Edit, n);
        return;
      }
      var u = s.offsetWidth;
      var t = s.offsetHeight;
      var r = {
        command: "Edit",
        appointmentID: l._internalID,
        editSeries: n,
        slotWidth: u,
        slotHeight: t,
      };
      this.postback(r);
    },
    showAdvancedInsertForm: function (k) {
      var l = b.add(k, this.get_minutesPerRow() * h),
        j = this._createAppointment(k, l);
      j.set_subject("");
      this._showAdvancedInsertForm(j);
    },
    showAllDayAdvancedInsertForm: function (k) {
      var m = new Date(k.getFullYear(), k.getMonth(), k.getDate()),
        l = b.add(m, f),
        j = this._createAppointment(m, l);
      j.set_subject("");
      this._showAdvancedInsertForm(j);
    },
    showAdvancedEditForm: function (k, m) {
      if (this._renderingManager) {
        var j =
            k._allowDelete != null
              ? k.get_allowDelete()
              : this.get_allowDelete(),
          n = this._renderMode == c.RenderMode.Mobile;
        this._showAdvancedFormWrapper(
          a(this.get_element()).find("div.rsAdvancedEditWrapper")
        );
        this._advancedTemplate = this._getAdvancedEditTemplate();
        var l = this.prepareToEdit(k, m),
          o = false;
        if (n) {
          var p = this._getAppointmentByInternalID(k.get_internalID());
          o =
            p.get_recurrenceState() != c.RecurrenceState.Exception &&
            l.get_recurrenceState() == c.RecurrenceState.Exception;
        }
        this._fireFormCreated(l, c.SchedulerFormMode.AdvancedEdit, m);
        if (this._advancedTemplate) {
          this._advancedTemplate.populate(l, false, o);
        }
        if (n) {
          a(this._advancedTemplate._formElement)
            .find(".rsAdvEditDelete")
            .toggle(j);
        }
        if (this._getNavigator()) {
          this._getNavigator()
            ._getCommandsModule()
            .trigger("onEditFormShown", this._advancedTemplate);
        }
        this._focusAdvancedFormSubjectTextBox();
        return;
      }
      var q = {
        command: "AdvancedEdit",
        appointmentID: k._internalID,
        appointment: this._getSerializableAppointment(k),
        startDate: k.get_start().format("yyyyMMddHHmm"),
        endDate: k.get_end().format("yyyyMMddHHmm"),
        editSeries: m,
      };
      this.postback(q);
    },
    hideAdvancedForm: function () {
      var j = a(this.get_element());
      if (this._renderingManager) {
        var k = j.find(
          "> div.rsAdvancedEditWrapper, > div.rsAdvancedInsertWrapper"
        );
        if (k.parent().is(".rsHiddenAdvancedForm")) {
          return;
        }
        this._advancedTemplate = null;
        j.find("div.rsHiddenAdvancedForm").append(k);
        j.find("div.rsTopWrap").show();
        if (this._getNavigator()) {
          this._getNavigator()._getCommandsModule().trigger("onEditFormHidden");
        }
        if (!this._advancedFormSettings.modal) {
          this.repaint();
        }
      } else {
        j.find("> .rsAdvFormWrap").hide();
      }
      if (this._popupDialog) {
        this._popupDialog.close();
      }
    },
    hideInlineForm: function () {
      var j = this._getInlineTemplate();
      if (j.get_element()) {
        j.hide();
      }
    },
    editAppointmentWithConfirmation: function (j, k) {
      this._editAppointmentInline(j, k);
    },
    editAppointment: function (j, k) {
      this.showInlineEditForm(j, k);
    },
    insertAppointment: function (j) {
      if (this._renderingManager) {
        this._cacheCurrentOperationAppointment(j);
        this.get_appointments().add(j);
        return;
      }
      new Date().format("yyyyMMddHHmm");
      var k = {
        command: "InsertAppointment",
        appointment: this._getSerializableAppointment(j),
        startDate: j.get_start().format("yyyyMMddHHmm"),
        endDate: j.get_end().format("yyyyMMddHHmm"),
      };
      this.postback(k);
    },
    prepareToEdit: function (j, k) {
      this._cacheCurrentOperationAppointment(j, k);
      if (j.get_recurrenceState() != c.RecurrenceState.NotRecurring) {
        var m = j;
        if (j.get_recurrenceParentID()) {
          m = this.get_appointments().findByID(j.get_recurrenceParentID());
        }
        if (k) {
          return m;
        }
        if (j.get_recurrenceState() != c.RecurrenceState.Exception) {
          var l = j.clone();
          l._recurrenceParentID = m.get_id();
          l._recurrenceRule = "";
          l._recurrenceState = c.RecurrenceState.Exception;
          l.__newRecurrenceException = true;
          return l;
        }
      }
      return j;
    },
    updateAppointment: function (j, k) {
      if (this._renderingManager) {
        if (this._currentOperationAppointment === null) {
          this._cacheCurrentOperationAppointment(j, k);
        }
        this._renderingManager.updateAppointment(j);
        return;
      }
      var l = {
        command: "UpdateAppointment",
        appointmentID: j._internalID,
        appointment: this._getSerializableAppointment(j),
        startDate: j.get_start().format("yyyyMMddHHmm"),
        endDate: j.get_end().format("yyyyMMddHHmm"),
        editSeries: k,
      };
      this.postback(l);
    },
    deleteAppointmentWithConfirmation: function (j) {
      this._deleteAppointment(j);
    },
    deleteAppointment: function (j, k) {
      if (this._renderingManager) {
        this._cacheCurrentOperationAppointment(j, k);
        this.get_appointments().remove(j, k);
        return;
      }
      var l = {
        command: "Delete",
        appointmentID: j._internalID,
        editSeries: k,
      };
      this.postback(l);
    },
    moveAppointment: function (j, m, v, w) {
      if (this._renderingManager) {
        var p = this.get_activeModel(),
          q = this.prepareToEdit(j, m),
          s = p.get_startOfMovedAppointment(j, w, v),
          l = p.getDurationOfMovedAppointment(j, v, w),
          r,
          o;
        if (q.get_recurrenceState() == c.RecurrenceState.Master) {
          o = b.subtract(s, j.get_start());
          s = b.add(q.get_start(), o);
        }
        r = c.Scheduler.DateTime.add(s, l);
        q.set_start(s);
        q.set_end(r);
        if (v.get_resource) {
          var k = q.get_resources(),
            t = v.get_resource(),
            n = k.getResourceByTypeAndKey(t.get_type(), t.get_key());
          if (n) {
            k.remove(n);
          }
          k.add(w.get_resource());
        }
        this._renderingManager.updateAppointment(q);
        return;
      }
      var u = {
        Command: "Move",
        AppointmentID: j._internalID,
        EditSeries: m,
        SourceSlotIndex: v.get_index(),
        TargetSlotIndex: w.get_index(),
      };
      this.postback(u);
    },
    resizeAppointment: function (j, l, p, q) {
      var o = this._resizingState.resizeFromStart;
      if (this._renderingManager) {
        var n = this.prepareToEdit(j, l),
          k;
        if (o) {
          j.set_start(q.get_startTime());
          k = b.subtract(j.get_end(), j.get_start());
          n.set_start(b.add(n.get_end(), k * -1));
        } else {
          k = b.subtract(q.get_endTime(), j.get_start());
          n.set_end(b.add(n.get_start(), k));
        }
        this._renderingManager.updateAppointment(n);
        return;
      }
      var m = {
        Command: "Resize",
        AppointmentID: j._internalID,
        EditSeries: l,
        SourceSlotIndex: p.get_index(),
        TargetSlotIndex: q.get_index(),
        StartDate: o
          ? q.get_startTime().format("yyyyMMddHHmm")
          : j.get_start().format("yyyyMMddHHmm"),
        EndDate: o
          ? j.get_end().format("yyyyMMddHHmm")
          : q.get_endTime().format("yyyyMMddHHmm"),
      };
      this.postback(m);
    },
    removeRecurrenceExceptions: function (j) {
      if (this._renderingManager) {
        this._renderingManager.removeRecurrenceExceptions(j);
      }
    },
    getAppointmentDomElement: function (k) {
      var j = a(k).parents(".rsAgendaRow");
      if (j.length > 0) {
        return j.find(".rsApt")[0];
      } else {
        if (a(k).is(".rsAgendaRow")) {
          return a(k).find(".rsApt")[0];
        }
      }
      while (k && !Sys.UI.DomElement.containsCssClass(k, "rsApt")) {
        k = k.parentNode;
      }
      return k;
    },
    getAppointmentFromDomElement: function (o) {
      if (!o) {
        return null;
      }
      var l = this.getAppointmentDomElement(o),
        j = this.get_appointments(),
        m,
        n;
      for (var q = 0, k = j.get_count(); q < k; q++) {
        m = j.getAppointment(q);
        if (!m.get_element()) {
          continue;
        }
        n = m._domElements;
        for (var r = 0, p = n.length; r < p; r++) {
          if (l.id == n[r].id) {
            return m;
          }
        }
      }
      return null;
    },
    displayToUtc: function (j) {
      return b.add(j, -this._timeZoneOffset);
    },
    utcToDisplay: function (j) {
      return b.add(j, this._timeZoneOffset);
    },
    saveClientState: function () {
      return (
        '{"scrollTop":' +
        Math.round(this._scrollTop) +
        ',"scrollLeft":' +
        Math.round(this._scrollLeft) +
        ',"isDirty":' +
        this._isDirty +
        "}"
      );
    },
    rebind: function () {
      if (!this._renderingManager) {
        return;
      }
      this.hideInlineForm();
      this.hideAdvancedForm();
      this._renderingManager.loadAppointments();
    },
    get_rippleZonesConfiguration: function () {
      var k = this._renderMode == c.RenderMode.Mobile;
      var j = k
        ? ".rsButton,.rsViewSwitcher .rsList li, .rsTabbedOptionList li"
        : ".rsButton";
      return [
        {
          element: this.get_element(),
          rippleConfigurations: [
            { containerSelector: j },
            {
              containerSelector: ".p-i-calendar, .p-i-close",
              rippleType: c.MaterialRippleType.Icon,
            },
          ],
        },
      ];
    },
    _createAppointment: function (l, k) {
      var j = new c.SchedulerAppointment();
      if (l && k) {
        j.set_start(l);
        j.set_end(k);
      }
      j.set_timeZoneID(this._timeZoneId);
      return j;
    },
    _createAppointmentFromTimeSlot: function (n) {
      if (!n) {
        return this._createAppointment();
      }
      var m = n.get_startTime();
      var k = n.get_endTime();
      var l = this.get_activeModel();
      if (l.getDurationOfInsertedAppointment) {
        k = b.add(m, l.getDurationOfInsertedAppointment(n));
      }
      var j = this._createAppointment(m, k);
      if (n.get_resource) {
        j.get_resources().add(n.get_resource());
      }
      return j;
    },
    _createAppointmentFromTimeSlotAndDuration: function (n, k) {
      var j = this._createAppointmentFromTimeSlot(n);
      if (k && k > 0) {
        var m = j.get_start(),
          l = b.add(m, k);
        j.set_end(l);
      }
      return j;
    },
    _getSerializableAppointment: function (j) {
      return {
        ID: j._internalID,
        Subject: this._encodeString(j.get_subject()),
        Description: this._encodeString(j.get_description()),
        Attributes: this._getSerializableAttributes(j.get_attributes()),
        Resources: this._getSerializableResources(j.get_resources()),
        RecurrenceState: j.get_recurrenceState(),
        RecurrenceParentID: j.get_recurrenceParentID(),
        TimeZoneID: j.get_timeZoneID(),
      };
    },
    _encodeString: function (j) {
      return encodeURIComponent((j || "").replace(/'/g, "&squote"));
    },
    _getSerializableAttributes: function (j) {
      var k = {};
      j.forEach(function (l, m) {
        k[l] = m;
      });
      return k;
    },
    _getSerializableResources: function (l) {
      var m = [];
      for (var j = 0; j < l.get_count(); j++) {
        var k = l.getResource(j);
        m[m.length] = {
          Key: k.get_key(),
          Text: this._encodeString(k.get_text()),
          Type: k.get_type(),
          Available: k.get_available(),
        };
      }
      return m;
    },
    _onAppointmentInserting: function (j) {
      if (!this._renderingManager) {
        return;
      }
      j._setOwner(this);
      if (!this.get_activeModel().isVisible(j)) {
        j._originallyVisible = j._visible;
        j._visible = false;
      }
      if (j.get_visible()) {
        this._activeModel._getRenderer().renderAppointment(j);
        if (j.get_visible()) {
          this._raiseAppointmentCreated(j);
        }
      }
      this._renderingManager.insertAppointment(j);
    },
    _onAppointmentRemove: function (j, k) {
      if (!this._renderingManager) {
        return;
      }
      this._activeModel._getRenderer().removeAppointment(j);
      this._renderingManager.deleteAppointment(j, k);
    },
    _onAppointmentsClear: function () {
      if (!this._renderingManager) {
        return;
      }
      this._activeModel
        ._getRenderer()
        .clearAppointments(this.get_appointments());
    },
    _getFormElement: function () {
      var j = a(this.get_element()),
        k = j.find("div.rsAptEditFormInner, div.rsInlineForm");
      if (!k.length) {
        k = j.find("div.rsAdvancedEdit").filter(":visible");
      }
      if (k.length) {
        return k[0];
      } else {
        return null;
      }
    },
    _fireFormCreated: function (j, n, l) {
      var m = this._getFormElement();
      if (m) {
        var k = new c.SchedulerFormCreatedEventArgs(j, m, n, l);
        this._raiseFormCreated(k);
      }
    },
    _onKeyboardEvent: function (k) {
      var m = this._rowSelectionState;
      if (k.keyCode == 27) {
        if (this._dragging) {
          this._abortDrag(k, true);
        }
        if (this._resizingState && this._resizingState.resizing) {
          this._restoreResizingAppointmentSize();
          this._cleanupResize();
        }
        if (!m.isRowSelection) {
          this._clearSlotSelection();
        }
      }
      if (k.keyCode == 13 && !a(".rsAdvancedInsertWrapper").is(":visible")) {
        if (m.isRowSelection) {
          this._abortRowSelection();
        }
        var l = false,
          n = k.target,
          j = a(n);
        if (!$telerik.isIE) {
          if (n.tagName.toLowerCase() == "body" || j.is(".RadScheduler")) {
            l = true;
          }
        } else {
          if (n.className) {
            if (j.is(".rsWrap") || j.is(".rsSelectedSlot")) {
              l = true;
            }
          }
        }
        if (
          m.selectedSlots.length > 0 &&
          !this.get_readOnlyResolved() &&
          this.get_allowInsert() &&
          l
        ) {
          if (!this._lastSelectedApt) {
            if (this._insertAppoinmentAtSelectedSlots()) {
              k.preventDefault();
            }
            return false;
          }
        }
      }
    },
    _insertAppoinmentAtSelectedSlots: function () {
      var n = this._rowSelectionState,
        m = n.selectedSlots,
        o,
        j,
        k;
      if (m.length == 0) {
        return;
      }
      o = m[0];
      j = this.get_durationOfSelectedArea();
      if (!j) {
        this._clearSlotSelection();
        return;
      }
      k = m[m.length - 1];
      var l = new c.SchedulerAppointmentInsertingEventArgs(
        o.get_startTime(),
        o.get_isAllDay(),
        o
      );
      this._raiseAppointmentInserting(l);
      if (!l.get_cancel()) {
        this.showInsertFormAt(o, k);
        return true;
      }
    },
    _onDocumentClick: function (j) {
      var k = a(this.get_element()).find(".rsToolbar .rsViewSwitcher>ul");
      if (k.length > 0) {
        if (a(j.target).is("span.rsViewToggle, span.rsViewToggle span")) {
          return;
        }
        k.addClass("rsHidden");
      }
    },
    _onKeyboardEventNavigation: function (j) {
      if (
        (this._getNavigator() &&
          (j.target === this._element || a(j.target).is("textarea"))) ||
        ($telerik.isIE &&
          !a(j.target).is("input") &&
          a(j.target).parents(".RadScheduler")[0] === this._element)
      ) {
        this._getNavigator().parse(j);
      }
    },
    _onDocumentMouseOut: function (j) {
      if (!this._dragging || this._finishDragExecuting) {
        return;
      }
      var k = j.rawEvent.relatedTarget
        ? j.rawEvent.relatedTarget
        : j.rawEvent.toElement;
      if (!k) {
        this._abortDrag(j, true);
      }
    },
    _getDatePickerHeight: function (j) {
      var k = 0;
      j.children().each(function () {
        k += a(this).outerHeight();
      });
      return k;
    },
    _onDatePickerToggle: function (p) {
      var q = this.get_element(),
        l = a(q),
        m = l.find("div.rsDatePickerWrapper"),
        k = m.find("div.rsDatePickerAnimationWrapper"),
        o = k.find("div").filter(":first"),
        n = o.find("table.rcMainTable"),
        j = l.find(".rsDatePickerActivator"),
        s = this.get_renderMode() === c.RenderMode.Lite;
      m.css({ position: "relative", display: "inline-block" });
      k.stop().css({ position: "absolute", overflow: "hidden" });
      m.css("overflow", "visible");
      if (!this._datePickerCalendarExpanded) {
        this.hideInlineForm();
        k.show();
        if (n.length) {
          var t = s ? n.outerWidth() : n.parent().outerWidth();
          k.add(o).width(t + "px");
        }
        var r = s ? o.height() : o.find("table").first().height();
        k.animate({ height: r + "px" }, 300, "easeInQuart");
        j.addClass("rsDatePickerActivatorDown");
      } else {
        k.animate({ height: "0px" }, 300, "easeOutQuart", function () {
          m.css("overflow", "hidden");
          k.hide();
        });
        j.removeClass("rsDatePickerActivatorDown");
      }
      this._datePickerCalendarExpanded = !this._datePickerCalendarExpanded;
      if (p) {
        p.preventDefault();
      }
      return false;
    },
    _onContentScroll: function () {
      var k = this._contentScrollArea;
      if (!k) {
        return;
      }
      if (this._horizontalScrollAreas.length) {
        this._horizontalScrollAreas.scrollLeft(k.scrollLeft);
      }
      c.RadScheduler._scrollVerticalArea(
        this._verticalScrollAreas,
        k.scrollTop
      );
      var j = this._getInlineTemplate().get_element();
      if (j && j.detached) {
        c.InlineTemplate._positionForm(this.get_element().id);
      }
      this._scrollLeft = k.scrollLeft;
      this._scrollTop = k.scrollTop;
      this.updateClientState();
    },
    _onAppointmentClick: function (m) {
      if (this._dragging) {
        return;
      }
      var n = new Date().getTime();
      var k = 100;
      if ($telerik.isIE && n - this._resizingState.resizeTimestamp < k) {
        return;
      }
      var j = this.getAppointmentFromDomElement(m.eventMapTarget);
      var l = new c.SchedulerAppointmentClickEventArgs(j, m);
      this._raiseAppointmentClick(l);
      if (
        (this.get_readOnlyResolved() || !this.get_allowEdit()) &&
        this.get_shouldPostbackOnClick()
      ) {
        var o = {
          Command: "Click",
          AppointmentID: j._internalID,
          EditSeries: false,
        };
        this.postback(o);
      }
    },
    _onAppointmentContextMenu: function (n) {
      if (this._dragging || this._draggingAppointment) {
        return;
      }
      var k = this.getAppointmentDomElement(n.eventMapTarget);
      var j = this.getAppointmentFromDomElement(k);
      if (j.get_contextMenu) {
        var l = j.get_contextMenu();
        if (l != null) {
          var o = l.findItemByValue("CommandEdit");
          var m = l.findItemByValue("CommandDelete");
          if (o != null) {
            o.set_enabled(true);
            if (this.get_readOnlyResolved() || !this.get_allowEdit()) {
              o.set_enabled(false);
            }
            if (j._allowEdit != null) {
              o.set_enabled(j.get_allowEdit());
            }
          }
          if (m != null) {
            m.set_enabled(true);
            if (this.get_readOnlyResolved() || !this.get_allowDelete()) {
              m.set_enabled(false);
            }
            if (j._allowDelete != null) {
              m.set_enabled(j.get_allowDelete());
            }
          }
        }
      }
      var p = new c.SchedulerAppointmentContextMenuEventArgs(j, n);
      this._raiseAppointmentContextMenu(p);
    },
    _onEditFormClick: function (j) {
      j.stopPropagation();
    },
    _getHourCellFromDomElement: function (j) {
      var k = j;
      while (k.tagName.toLowerCase() != "th") {
        k = k.parentNode;
      }
      return k;
    },
    _onAllDayCellMouseOver: function (j) {
      if (this._dragging && this._draggingAppointment) {
        j.eventMapTarget.lastChild.appendChild(
          this._draggingAppointment.get_element()
        );
      }
      this._onRowMouseOver(j);
    },
    _onRowMouseOver: function (j) {
      if (
        this._dragging ||
        this._resizingState.resizing ||
        this._getInlineTemplate()._resizing
      ) {
        return;
      }
      var n = this.get_numberOfHoveredRows();
      if (n == 0) {
        return;
      }
      this._removeRowHover();
      var p = a(j.target);
      while (
        !(
          p.is("td") &&
          p
            .parents("table")
            .filter(":first")
            .is(".rsContentTable, .rsAllDayTable")
        )
      ) {
        p = p.parent();
        if (p.length == 0) {
          return;
        }
      }
      if (
        p.parents("table").is(".rsAllDayTable") ||
        this.get_selectedView() == c.SchedulerViewType.MonthView
      ) {
        n = 1;
      }
      this._currentHoverCell = p[0];
      var k = [this._currentHoverCell];
      for (var l = 1; l < n; l++) {
        var m = this._getNextRowCell(k[l - 1]);
        if (m) {
          k[l] = m;
        } else {
          break;
        }
      }
      this._hoveredCells = k;
      var o = 1;
      a.each(this._hoveredCells, function () {
        a(this)
          .addClass("rsAptCreate")
          .addClass("rsAptCreateRow" + o++);
      });
      return true;
    },
    _onCellMouseDown: function (j) {
      if (this._lastSelectedApt && this._contentTouchScroll) {
        this._contentTouchScroll.enable();
      }
      this._clearAppointmentSelection();
      if (!this.get_activeModel().get_supportsSlotSelection()) {
        return;
      }
      var l = this._rowSelectionState,
        k;
      if (j.which) {
        k = j.which == 3;
      } else {
        if (j.button) {
          k = j.button == 2;
        }
      }
      if (k) {
        return;
      }
      if (this.get_readOnlyResolved()) {
        return;
      }
      var m = a(j.target);
      while (
        !(
          m.is("td") &&
          m
            .parents("table")
            .filter(":first")
            .is(".rsContentTable, .rsAllDayTable")
        )
      ) {
        m = m.parent();
        if (
          m.length == 0 ||
          m.parents("div").filter(":first").is(".rsAptEditSizingWrapper")
        ) {
          return;
        }
      }
      this._clearSlotSelection();
      var n = this._activeModel.getTimeSlotFromDomElement(m[0]);
      if (n && n.set_selected) {
        n.set_selected(true);
        l.rowSelectionStartSlot = n;
        l.isRowSelection = true;
        l.selectedSlots.push(n);
        if (!$telerik.isTouchDevice) {
          $telerik.addHandler(
            document,
            "mousemove",
            this._onRowSelectionMouseMoveDelegate
          );
          $telerik.addHandler(
            document,
            "mouseup",
            this._onRowSelectionMouseUpDelegate
          );
          $telerik.addHandler(
            document,
            "selectstart",
            this._onSelectStartDelegate
          );
        }
      }
    },
    _onRowSelectionMouseMove: function (j) {
      var k = this._rowSelectionState;
      if (
        this.get_readOnlyResolved() ||
        this._dragging ||
        this._draggingAppointment ||
        !k.isRowSelection
      ) {
        this._abortRowSelection();
        return;
      }
      this._processRowSelection(
        this._getCellFromCoordinates(j.clientX, j.clientY)
      );
    },
    _processRowSelection: function (j) {
      c.RadScheduler._clearSelection();
      if (!j || !j.tagName || j.tagName.toLowerCase() != "td") {
        return;
      }
      this.get_activeModel()._processRowSelection(j, this._updateRowSelection);
    },
    _updateRowSelection: function () {
      var n = this._rowSelectionState,
        o = n.rowSelectionStartSlot,
        j = n.rowSelectionEndSlot,
        m = this._activeModel.getTimeSlotsBetween(o, j),
        k,
        l;
      for (k = 0, l = n.selectedSlots.length; k < l; k++) {
        n.selectedSlots[k].set_selected(false);
      }
      n.selectedSlots = m;
      for (k = 0, l = m.length; k < l; k++) {
        m[k].set_selected(true);
      }
    },
    _onRowSelectionMouseUp: function (j) {
      this._abortRowSelection();
    },
    _onNavigationCommand: function (m, j) {
      var k = m;
      var l = k._rowSelectionState;
      if (l.selectedSlots.length > 0) {
        k._clearSlotSelection();
      }
      k._navigating = true;
    },
    _abortRowSelection: function () {
      var k = this._rowSelectionState;
      k.isRowSelection = false;
      if (k.selectedSlots.length > 0) {
        k.rowSelectionStartSlot = k.selectedSlots[0];
        k.rowSelectionEndSlot = k.selectedSlots[k.selectedSlots.length - 1];
      }
      if (!$telerik.isTouchDevice) {
        try {
          $telerik.removeHandler(
            document,
            "mousemove",
            this._onRowSelectionMouseMoveDelegate
          );
        } catch (j) {}
        try {
          $telerik.removeHandler(
            document,
            "mouseup",
            this._onRowSelectionMouseUpDelegate
          );
        } catch (j) {}
        try {
          $telerik.removeHandler(
            document,
            "selectstart",
            this._onSelectStartDelegate
          );
        } catch (j) {}
      }
    },
    _clearSlotSelection: function () {
      var j = this._rowSelectionState;
      a.each(j.selectedSlots, function () {
        this.set_selected(false);
      });
      j.selectedSlots = [];
      j.rowSelectionStartSlot = null;
      j.rowSelectionEndSlot = null;
    },
    get_selectedSlots: function () {
      return this._rowSelectionState.selectedSlots;
    },
    get_durationOfSelectedArea: function () {
      var k = this._rowSelectionState;
      if (k.selectedSlots.length < 1) {
        return 0;
      }
      var l = k.rowSelectionStartSlot;
      var j = k.rowSelectionEndSlot;
      return this.get_durationBetweenTimeSlots(l, j);
    },
    get_durationBetweenTimeSlots: function (l, k) {
      var j = null;
      l = !l ? k : l;
      k = !k ? l : k;
      if (l && k) {
        j = b.subtract(k.get_endTime(), l.get_startTime());
        if (!j) {
          j = b.add(l.get_endTime(), l.get_startTime());
        } else {
          if (j <= 0) {
            j = b.subtract(l.get_endTime(), k.get_startTime());
            if (j <= 0) {
              j = null;
            }
          }
        }
      }
      return j;
    },
    _getNavigator: function () {
      return this._navigator;
    },
    _getParentTable: function (j) {
      var k = j.parentNode;
      while (k.tagName.toLowerCase() != "table") {
        k = k.parentNode;
      }
      return k;
    },
    _getNextRowCell: function (j) {
      var o = j.parentNode;
      var p = this._getParentTable(j);
      var m = p.rows[o.rowIndex + 1];
      var k = null;
      if (m) {
        var n = m.cells.length;
        var l = o.cells.length;
        if (n == l) {
          k = m.cells[j.cellIndex];
        } else {
          if (n < l) {
            k = m.cells[j.cellIndex - 1];
          } else {
            k = m.cells[j.cellIndex + 1];
          }
        }
      }
      return k;
    },
    _onRowMouseOut: function (j) {
      if (!this._currentHoverCell) {
        return;
      }
      if (
        !j.eventMapRelatedTarget ||
        $telerik.isDescendant(this._currentHoverCell, j.eventMapRelatedTarget)
      ) {
        return;
      }
      this._removeRowHover();
    },
    _removeRowHover: function () {
      if (!this._hoveredCells) {
        return;
      }
      this._currentHoverCell = null;
      var j = 1;
      a.each(this._hoveredCells, function () {
        a(this)
          .removeClass("rsAptCreate")
          .removeClass("rsAptCreateRow" + j++);
      });
    },
    _stopEventPropagation: function (j) {
      j.stopPropagation();
    },
    _onAppointmentDeleteMouseDown: function (j) {
      var k = this._rowSelectionState;
      this._stopEventPropagation(j);
      if (k.selectedSlots.length > 0) {
        this._clearSlotSelection();
      }
    },
    _onResizeGripMouseDown: function (l) {
      if (this.get_readOnlyResolved()) {
        return;
      }
      var q = this._rowSelectionState;
      if (q.selectedSlots.length > 0) {
        this._clearSlotSelection();
      }
      var p = this.getAppointmentDomElement(l.eventMapTarget),
        o = this.getAppointmentFromDomElement(p),
        k = o._allowEdit != null ? o.get_allowEdit() : this.get_allowEdit();
      if (!k) {
        return;
      }
      var m = new c.SchedulerAppointmentResizeStartEventArgs(o);
      this._raiseAppointmentResizeStart(m);
      if (!m.get_cancel()) {
        var j = a(p),
          n = $telerik.isTouchDevice;
        this._initializeResizingState(l, p, o);
        if (this.get_selectedView() == c.SchedulerViewType.TimelineView) {
          j = j.parent();
        }
        j.css("zIndex", "999");
        $telerik.addHandler(
          document,
          n ? "touchmove" : "mousemove",
          this._onResizeGripMouseMoveDelegate
        );
        $telerik.addHandler(
          document,
          n ? "touchend" : "mouseup",
          this._onResizeGripMouseUpDelegate
        );
        $telerik.addHandler(
          document,
          "selectstart",
          this._onSelectStartDelegate
        );
        if (n) {
          if (this._contentTouchScroll) {
            this._contentTouchScroll.disable();
          }
          l.preventDefault();
        }
      }
    },
    _initializeResizingState: function (j, m, l) {
      var k = this._activeModel;
      var o = a(l.get_element()).parents("td").filter(":first").get(0);
      var n = this._resizingState;
      var p;
      n.resizing = true;
      n.resizingElement = m;
      n.resizingAppointment = l;
      n.resizeFromStart = a(j.target).hasClass("rsAptResizeStart");
      n.sourceSlot =
        this.get_selectedView() == c.SchedulerViewType.TimelineView
          ? k.getTimeSlotForAppointment(l)
          : k.getTimeSlotFromDomElement(o);
      p = this._getResizeTargetCell(j);
      n.targetSlot = k.getTimeSlotFromDomElement(p);
      n.originalSize = k._getResizingAppointmentOriginalSize(m, l);
    },
    _restoreResizingAppointmentSize: function () {
      var j = this._resizingState;
      if (!j.originalSize) {
        return;
      }
      this._activeModel.restoreResizingAppointmentSize(j);
    },
    _onResizeGripMouseMove: function (n) {
      var r = this._resizingState;
      var p = r.resizeFromStart;
      var j = r.resizingAppointment;
      var l = r.resizingElement;
      if (!l) {
        return;
      }
      c.RadScheduler._clearSelection();
      var k = l.parentNode.parentNode;
      var s = this._getResizeTargetCell(n);
      if (!s) {
        return;
      }
      var t = this._activeModel.getTimeSlotFromDomElement(s);
      if (!t || t.get_rawIndex().viewPartIndex === 0) {
        return;
      }
      if (
        t.get_rawIndex().modelIndex !== r.sourceSlot.get_rawIndex().modelIndex
      ) {
        return;
      }
      if (
        (p && t.get_startTime() >= j.get_end()) ||
        (!p && t.get_endTime() <= j.get_start())
      ) {
        return;
      }
      r.targetSlot = t;
      var o = new c.SchedulerAppointmentResizingEventArgs(j, t);
      this._raiseAppointmentResizing(o);
      if (o.get_cancel()) {
        return;
      }
      var m = this._getParentTable(k);
      var u = this._getParentTable(s);
      if (m != u) {
        return;
      }
      var q = this._activeModel._getResizingPlaneDelta(s, k);
      if (q != 0) {
        this._updateResizingAppointmentElements(r, s, q);
      }
      this._activeModel.updateResizingAppointmentSize(s, r);
      this._scrollView(r.resizingElement, !p, this._getMousePosition(n));
    },
    _getResizeTargetCell: function (k) {
      var j = this._resizingState.resizeFromStart ? 10 : -10;
      var l = $telerik.getTouchEventLocation(k, "client");
      if (
        this.get_selectedView() == c.SchedulerViewType.TimelineView ||
        this.get_selectedView() == c.SchedulerViewType.MonthView
      ) {
        l.x += j;
      } else {
        l.y += j;
      }
      var m = this._getCellFromCoordinates(l.x, l.y);
      return m;
    },
    _updateResizingAppointmentElements: function (p, q, o) {
      var m = p.resizeFromStart,
        n = p.resizingAppointment,
        k = m ? ".rsAptResizeStart" : ".rsAptResizeEnd",
        l = $telerik.isTouchDevice,
        j;
      if (l) {
        j = a(p.resizingElement).find(k).remove();
        a(p.resizingElement).find(".rsAptMid").append(j.clone());
      }
      this._clearAppointmentSelection();
      this._resizeHelper._updateResizingAppointmentElements(p, o, q);
      if (l) {
        a(p.resizingElement).find(k).replaceWith(j);
        this._selectAppointment(n, p.resizingElement);
      }
    },
    _repaintAppointment: function (j) {
      var k = this._activeModel._getRenderer();
      if (k) {
        k.removeAppointment(j);
        j._domElements = [];
        j._domElement = null;
        k.renderAppointment(j);
      }
    },
    _onSelectStart: function (j) {
      $telerik.cancelRawEvent(j);
      return false;
    },
    _onResizeGripMouseUp: function (l) {
      if (!this._resizingState.resizingElement) {
        return;
      }
      var p = this._resizingState,
        o = p.resizingElement,
        s = p.targetSlot,
        n = p.resizeFromStart,
        j = p.resizingAppointment,
        t = n ? j.get_end() : s.get_endTime(),
        u = n ? s.get_startTime() : j.get_start(),
        r = p.sourceSlot,
        v = o;
      if (
        this.get_selectedView() == c.SchedulerViewType.TimelineView ||
        this.get_selectedView() == c.SchedulerViewType.MonthView
      ) {
        v = v.parentNode;
      }
      this._clearElementZIndex(v);
      if (
        (!n && t.getTime() == j.get_end().getTime()) ||
        (n && u.getTime() == j.get_start().getTime())
      ) {
        this._restoreResizingAppointmentSize();
        this._cleanupResize();
        return;
      }
      var k = {
        OnConfirm: this._onAppointmentResizeCallback,
        OnCancel: this._onAppointmentResizeAbortCallback,
        Scheduler: this,
        Appointment: j,
        SourceSlot: r,
        TargetSlot: s,
        UpdatedEndDate: t,
        UpdatedStartDate: u,
        CallbackIsCalledFromDialog: true,
      };
      if (j._recurrenceState == 1 || j._recurrenceState == 2) {
        var q = new c.SchedulerRecurrenceActionDialogShowingEventArgs(
          k.Appointment,
          c.RecurrenceAction.Resize
        );
        this._raiseRecurrenceActionDialogShowing(q);
        if (q.get_cancel()) {
          var m = q.get_editSeries();
          if (m !== null) {
            k.CallbackIsCalledFromDialog = false;
            this._onAppointmentResizeCallback(m, k);
          } else {
            this._onAppointmentResizeAbortCallback(k);
          }
        } else {
          c.RecurrenceActionDialog.Show(c.RecurrenceAction.Resize, k);
        }
      } else {
        k.CallbackIsCalledFromDialog = false;
        this._onAppointmentResizeCallback(false, k);
      }
      l.stopPropagation();
      this._cleanupResize();
    },
    _setAppointmentElementPosition: function (j, k, l) {
      if (l !== i) {
        j.style.top = l + "px";
      }
      j.style.height = k + "px";
    },
    _cleanupResize: function () {
      this._resizingState.resizing = false;
      this._resizingState.sourceSlot = null;
      this._resizingState.targetSlot = null;
      this._resizingState.resizeTimestamp = new Date().getTime();
      $telerik.removeHandler(
        document,
        $telerik.isTouchDevice ? "touchmove" : "mousemove",
        this._onResizeGripMouseMoveDelegate
      );
      $telerik.removeHandler(
        document,
        $telerik.isTouchDevice ? "touchend" : "mouseup",
        this._onResizeGripMouseUpDelegate
      );
      $telerik.removeHandler(
        document,
        "selectstart",
        this._onSelectStartDelegate
      );
      if (this._contentTouchScroll) {
        this._contentTouchScroll.enable();
      }
      clearInterval(this._scrollInterval);
    },
    _onAppointmentResizeCallback: function (k, j) {
      j.Scheduler._raiseRecurrenceActionDialogClosedEvent(
        j,
        k,
        c.RecurrenceAction.Resize
      );
      var l = new c.SchedulerAppointmentResizeEndEventArgs(
        j.Appointment,
        j.TargetSlot,
        j.UpdatedStartDate,
        j.UpdatedEndDate,
        k
      );
      j.Scheduler._raiseAppointmentResizeEnd(l);
      if (!l.get_cancel()) {
        j.Scheduler.resizeAppointment(
          j.Appointment,
          k,
          j.SourceSlot,
          j.TargetSlot
        );
      } else {
        j.Scheduler._restoreResizingAppointmentSize();
      }
    },
    _onAppointmentResizeAbortCallback: function (j) {
      j.Scheduler._raiseRecurrenceActionDialogClosedEvent(
        j,
        false,
        c.RecurrenceAction.Resize
      );
      j.Scheduler._restoreResizingAppointmentSize();
    },
    _onResizeGripMouseClick: function (j) {
      j.stopPropagation();
    },
    _onResizeGripMouseOver: function (j) {
      j.stopPropagation();
    },
    _initializeModelTables: function () {
      this._modelTables = [];
      var j = this,
        k = j.get_element();
      a(
        ".rsTopWrap .rsAllDayTable, .rsTopWrap .rsContentTable, .rsTopWrap .rsAgendaTable",
        k
      ).each(function () {
        var m = this,
          n = j._getTotalOffset(k);
        m.targetRect = $telerik.getBounds(m);
        m.targetRect.x -= n.left;
        m.targetRect.y -= n.top;
        j._compensateScrollOffset(m);
        if (!a(m).is(".rsAgendaTable")) {
          if (m.rows[0]) {
            m.cellWidth = m.targetRect.width / m.rows[0].cells.length;
          }
          var l = [];
          a.each(m.rows, function () {
            if (this.cells[0]) {
              Array.add(l, this.cells[0].offsetHeight);
            }
          });
          m.cellHeights = l;
        }
        Array.add(j._modelTables, m);
      });
      return this._modelTables;
    },
    _compensateScrollOffset: function (l) {
      var m;
      if ($telerik.isSafari || $telerik.isChrome) {
        m =
          document.body.scrollTop <= document.scrollingElement.scrollTop
            ? document.scrollingElement
            : document.body;
      }
      var j = m ? m : document.documentElement,
        k = $telerik.getScrollOffset(j, false),
        n = $telerik.getScrollOffset(l, true);
      n.x -= k.x;
      n.y -= k.y;
      l.targetRect.x += n.x;
      l.targetRect.y += n.y;
    },
    _getTotalOffset: function (j) {
      var l = j.offsetTop,
        k = j.offsetLeft,
        m = j.offsetParent;
      while (m) {
        l += m.offsetTop;
        k += m.offsetLeft;
        m = m.offsetParent;
      }
      return { top: l, left: k };
    },
    _getCellFromCoordinates: function (l, m) {
      if (!this.get_element()) {
        return;
      }
      var q = this._modelTables;
      var n = a(
        "#" + this.get_element().id + " div.rsContentScrollArea"
      ).filter(":first")[0];
      var t = $telerik.getScrollOffset(n, true);
      var w = this._getTotalOffset(this.get_element());
      for (var o = 0, p = q.length; o < p; o++) {
        var z = l + t.x;
        var A = m + t.y;
        var u = q[o];
        var v = {
          x: u.targetRect.x + w.left,
          y: u.targetRect.y + w.top,
          width: u.targetRect.width,
          height: u.targetRect.height,
        };
        var j = v.y + v.height;
        var r = v.x + v.width;
        if (z >= v.x && z <= r && A >= v.y && A <= j) {
          var s = this._getRowIndex(A, u, v.y);
          s = Math.min(u.rows.length - 1, Math.max(0, s));
          var k = parseInt((z - v.x) / u.cellWidth, 10);
          k = Math.min(u.rows[s].cells.length - 1, Math.max(0, k));
          return u.rows[s].cells[k];
        }
      }
      return null;
    },
    _getRowIndex: function (k, l, p) {
      var n = 0;
      var o = l.cellHeights.length;
      var j = p;
      while (n < o) {
        var m = j + l.cellHeights[n];
        if (j <= k && k < m) {
          break;
        }
        j = m;
        n++;
      }
      return n;
    },
    _shouldStartDrag: function (j) {
      if (!this._initialDragAppointment || !this._initialDragMousePos) {
        return false;
      }
      if (
        Math.abs(this._initialDragMousePos.x - j.x) > 4 ||
        Math.abs(this._initialDragMousePos.y - j.y) > 4
      ) {
        return true;
      }
    },
    _onDocumentMouseMove: function (n) {
      var q = this._getMousePosition(n),
        p = $telerik.getTouchEventLocation(n, "client"),
        o = this._getCellFromCoordinates(p.x, p.y);
      if (!this._dragging && this._shouldStartDrag(q)) {
        this._startDrag(n);
      }
      if (!this._dragging || !this._draggingAppointment) {
        return;
      }
      if (this._scrollView(this._initialDragAppointmentElement, false, q)) {
        return;
      }
      c.RadScheduler._clearSelection();
      if (
        !o ||
        !o.tagName ||
        o.tagName.toLowerCase() != "td" ||
        o == this._draggingHoveredCell
      ) {
        return;
      }
      var l = this._initialDragAppointmentElement,
        r = this._getDraggingTargetCell(o),
        j = a(l.parentNode),
        k;
      this._draggingHoveredCell = o;
      if (a(r).children(".rsWrap").get(0) != l.parentNode) {
        j.removeClass(this._styles.dragTarget);
        this._clearElementZIndex(j[0]);
        k = this._getCellWrap(r, l);
        k.css("zIndex", 999);
        if (this.get_selectedView() != c.SchedulerViewType.MonthView) {
          k.append(l);
        } else {
          if (r.childNodes.length > 1) {
            r.childNodes[1].appendChild(l);
          } else {
            k.append(l);
          }
        }
        if (
          this._isInTimelineViewNotGroupedByDate() &&
          !j.parent().hasClass("rsFirstCell")
        ) {
          j.remove();
        }
        a(l.parentNode).addClass(this._styles.dragTarget).css("display", "");
      }
      this._activeModel.updateDraggingAppointmentSize(l, r, o);
      var s = this._activeModel.getTimeSlotFromDomElement(o),
        m = new c.SchedulerAppointmentMovingEventArgs(
          this._draggingAppointment,
          s
        );
      this.raiseEvent("appointmentMoving", m);
      if (m.get_cancel()) {
        this._abortDrag(n);
      }
      return true;
    },
    _getDraggingTargetCell: function (j) {
      var l = Math.max(
          0,
          j.parentNode.rowIndex - this._draggingSourceRowOffset
        ),
        k = Math.max(0, j.cellIndex - this._draggingSourceCellOffset);
      return j.parentNode.parentNode.rows[l].cells[k];
    },
    _getCellWrap: function (l, j) {
      var k = a(l),
        m = k.find("div.rsWrap").filter(":first");
      if (m.length == 0) {
        m = a(j.parentNode.cloneNode(false)).css({
          width: k.width(),
          height: "auto",
        });
        if (l.innerHTML == "&nbsp;") {
          l.innerHTML = "";
        } else {
          m.css({
            position: "absolute",
            top: k[0].offsetTop,
            left: k[0].offsetLeft,
          });
        }
        m.appendTo(k);
      }
      if (m.hasClass("rsDateWrap") && m.next().length) {
        m = m.next();
      }
      return m;
    },
    _isInTimelineViewNotGroupedByDate: function () {
      return (
        this.get_selectedView() == c.SchedulerViewType.TimelineView &&
        (!this.get_timelineViewSettings().groupBy ||
          this.get_timelineViewSettings().groupBy.indexOf("Date") == -1)
      );
    },
    _isInBatchMode: function () {
      return (
        this.get_webServiceSettings().get_updateMode() ==
        c.AppointmentUpdateMode.Batch
      );
    },
    _clearElementZIndex: function (j) {
      a(j).css("zIndex", "");
    },
    _scrollView: function (m, l, p) {
      var j = a(m).parents("div.rsContentScrollArea");
      if (!j.length) {
        return;
      }
      var r = j.offset();
      var q = p.x - (r.left + j.width());
      var o = p.x - r.left;
      var t = p.y - r.top;
      var k = p.y - (r.top + j.height());
      var n = 0;
      var u = 0;
      var s = function () {
        if (n !== 0) {
          j.scrollLeft(j.scrollLeft() + n / 10);
        }
        if (u !== 0) {
          j.scrollTop(j.scrollTop() + u / 10);
        }
      };
      if (q > 0) {
        n = q;
      } else {
        if (o < 0) {
          n = o;
        }
      }
      if (k > 0) {
        u = k;
      } else {
        if (t < 0) {
          u = t;
        }
      }
      clearInterval(this._scrollInterval);
      if (n !== 0 || u !== 0) {
        this._scrollInterval = setInterval(s, 15);
        s();
        return true;
      }
      return;
    },
    _getMousePosition: function (j) {
      var l = $telerik.getScrollOffset(document.body, true),
        k = $telerik.getTouchEventLocation(j, "client");
      return { x: k.x + l.x, y: k.y + l.y };
    },
    _onAppointmentMouseDown: function (m) {
      if (this.get_readOnlyResolved()) {
        return;
      }
      if (this._rowSelectionState.selectedSlots.length > 0) {
        this._clearSlotSelection();
      }
      var l = this.getAppointmentDomElement(m.eventMapTarget),
        k = this.getAppointmentFromDomElement(l),
        n = this.get_selectedView() == c.SchedulerViewType.AgendaView,
        p = k._selected,
        o = $telerik.isTouchDevice,
        j,
        q = this;
      if (o) {
        this._addLongTouchHandler(
          "appointment",
          this._onAppointmentTouchHold,
          m
        );
        this._preventCtxMenuClosing = false;
        if (!p) {
          this._clearAppointmentSelection();
        }
        if (!p || n) {
          this._appointmentTapped = true;
          a(".rsContent", this._element)
            .on("touchmove", function (r) {
              q._contextMenuInterval.reset();
              q._appointmentTapped = false;
            })
            .on("touchend", function (t) {
              q._contextMenuInterval.reset();
              a(".rsContent", q._element).off("touchend").off("touchmove");
              if (q._appointmentTapped) {
                q._appointmentTapped = false;
                var s = q.getAppointmentDomElement(t.target),
                  r = q.getAppointmentFromDomElement(s);
                q._selectAppointment(r, s);
              }
            });
          return;
        }
      } else {
        this._selectAppointment(k, l);
      }
      j = k._allowEdit != null ? k.get_allowEdit() : this.get_allowEdit();
      if (!j || n) {
        return;
      }
      if (this._contentTouchScroll) {
        this._contentTouchScroll.disable();
      }
      this._initialDragAppointmentElement = l;
      this._initialDragMousePos = this._getMousePosition(m);
      this._initialDragAppointment = k;
      $telerik.addHandler(document, "selectstart", this._onSelectStartDelegate);
      if (o) {
        a(".rsContent", this._element)
          .on("touchend", function (r) {
            q._onDocMouseUp(r);
          })
          .on("touchmove", function (r) {
            r.preventDefault();
            q._contextMenuInterval.reset();
            q._onDocumentMouseMove(r);
          });
      } else {
        $telerik.addHandler(document, "mouseup", this._onDocMouseUpDelegate);
        $telerik.addHandler(
          document,
          "mousemove",
          this._onDocumentMouseMoveDelegate
        );
      }
      this._dragHandlersAttached = true;
    },
    _onAppointmentTouchHold: function (l) {
      this._abortDrag(l, true);
      this._preventCtxMenuClosing = true;
      var k = this.getAppointmentDomElement(l.target),
        j = this.getAppointmentFromDomElement(k);
      this._selectAppointment(j, k);
      if (j.get_contextMenu && j.get_contextMenu() != null) {
        this._onAppointmentContextMenu(l);
      } else {
        this._editAppointmentInline(j, k);
      }
    },
    _selectAppointment: function (k, l) {
      var j = k._allowEdit != null ? k.get_allowEdit() : this.get_allowEdit();
      this._clearAppointmentSelection();
      if ($telerik.isTouchDevice && j) {
        a(l).find(".rsAptResize").css("visibility", "visible");
      }
      k._selected = true;
      this._toggleAppointmentElementSelectedClass(l, true);
      this._lastSelectedApt = k;
    },
    _clearAppointmentSelection: function () {
      if (this._lastSelectedApt) {
        var k = this._lastSelectedApt.get_elements(),
          j;
        this._lastSelectedApt._selected = false;
        for (var m = 0, n = k.length; m < n; m++) {
          j = k[m];
          this._toggleAppointmentElementSelectedClass(j, false);
          if ($telerik.isTouchDevice) {
            a(j).find(".rsAptResize").css("visibility", "");
          }
        }
        this._lastSelectedApt = null;
      }
    },
    _toggleAppointmentElementSelectedClass: function (j, k) {
      a(j).toggleClass("rsAptSelected", k);
      if (this.get_selectedView() == c.SchedulerViewType.AgendaView) {
        a(j)
          .parents("tr.rsAgendaRow")
          .first()
          .toggleClass("rsAgendaRowSelected", k);
      }
    },
    _startDrag: function (n) {
      var p = $telerik.getTouchEventLocation(n, "client"),
        q = this.get_activeModel(),
        j = this._initialDragAppointment,
        k = this._initialDragAppointmentElement,
        o = this._getCellFromCoordinates(p.x, p.y);
      if (!o) {
        return;
      }
      this._initialDragCell = o;
      var r = new c.SchedulerAppointmentMoveStartEventArgs(j);
      this.raiseEvent("appointmentMoveStart", r);
      if (r.get_cancel()) {
        return;
      }
      this._draggingAppointment = j;
      this._draggingAppointmentHeight = a(k).height();
      this._draggingAppointmentWidth = a(k).width();
      this._dragging = true;
      var l;
      if ($telerik.isTouchDevice) {
        l = a(k).offset();
        l = { x: l.left, y: l.top };
      } else {
        l = $telerik.getLocation(k);
      }
      if ($telerik.isFirefox || $telerik.isSafari) {
        var s = $telerik.getScrollOffset(k, true),
          m = $telerik.isFirefox ? document.body.parentNode : document.body;
        l.x -= s.x;
        l.y -= s.y;
        l.x += m.scrollLeft;
        l.y += m.scrollTop;
      }
      this._draggingSourceRowOffset = q._getSourceRowOffsetOfMovedAppointment(
        k,
        o
      );
      this._draggingSourceCellOffset = q._getSourceCellOffsetOfMovedAppointment(
        k,
        o
      );
      j._startDrag(o);
    },
    _endDrag: function (j) {
      this._finishDrag(j, false);
    },
    _onDocMouseUp: function (j) {
      this._finishDrag(j, false);
      this._contextMenuInterval.reset();
    },
    _abortDrag: function (k, j) {
      this._finishDrag(k, true, j);
    },
    _finishDrag: function (m, l, j) {
      clearInterval(this._scrollInterval);
      this._finishDragExecuting = true;
      if (this._dragHandlersAttached) {
        $telerik.removeHandler(
          document,
          "selectstart",
          this._onSelectStartDelegate
        );
        if ($telerik.isTouchDevice) {
          a(".rsContent", this._element).off("touchend").off("touchmove");
        } else {
          $telerik.removeHandler(
            document,
            "mouseup",
            this._onDocMouseUpDelegate
          );
          $telerik.removeHandler(
            document,
            "mousemove",
            this._onDocumentMouseMoveDelegate
          );
        }
        this._dragHandlersAttached = false;
      }
      if (this._contentTouchScroll) {
        this._contentTouchScroll.enable();
      }
      if (this._dragging) {
        var k = this._initialDragAppointmentElement;
        this._clearElementZIndex(k.parentNode);
        if (!l && k.parentNode && k.parentNode.parentNode) {
          this._draggingAppointment._finishDrag();
        } else {
          a(k)
            .height(this._draggingAppointmentHeight)
            .width(this._draggingAppointmentWidth);
          this._draggingAppointment._abortDrag();
          this._draggingAppointment._raiseMoveEnd(j);
        }
        var n = this;
        window.setTimeout(function () {
          n._draggingAppointment = null;
          n._dragging = false;
          n._draggingHoveredCell = null;
          n._draggingSourceCellOffset = 0;
          n._draggingSourceRowOffset = 0;
        }, 0);
        Sys.UI.DomElement.removeCssClass(k.parentNode, this._styles.dragTarget);
        if (
          this._isInTimelineViewNotGroupedByDate() &&
          !a(k.parentNode).parent().hasClass("rsFirstCell")
        ) {
          a(k.parentNode).remove();
        }
        m.preventDefault();
        m.stopPropagation();
      }
      this._finishDragExecuting = false;
    },
    _onAppointmentDoubleClick: function (m) {
      if (this._resizingState.resizing) {
        this._resizingState.resizing = false;
        m.stopPropagation();
        return;
      }
      c.RadScheduler._clearSelection();
      var k = this.getAppointmentDomElement(m.eventMapTarget),
        j = this.getAppointmentFromDomElement(k),
        l = new c.SchedulerAppointmentDoubleClickEventArgs(j);
      this._raiseAppointmentDoubleClick(l);
      this._editAppointmentInline(j, k);
      $telerik.cancelRawEvent(m);
      return false;
    },
    _editAppointmentInline: function (k, l) {
      if (this.get_readOnlyResolved() || !k) {
        return;
      }
      var j = k._allowEdit != null ? k.get_allowEdit() : this.get_allowEdit();
      if (!j) {
        return;
      }
      var m = {
        OnConfirm: this._onAppointmentEditCallback,
        OnCancel: this._onAppointmentEditAbortCallback,
        Scheduler: this,
        Appointment: k,
        AppointmentElement: l,
        CallbackIsCalledFromDialog: true,
      };
      this._showEditConfirmationDialog(m);
    },
    _showEditConfirmationDialog: function (k) {
      var j = k.Appointment._recurrenceState;
      if (j == 1 || j == 2 || j == 3) {
        var m = new c.SchedulerRecurrenceActionDialogShowingEventArgs(
          k.Appointment,
          c.RecurrenceAction.Edit
        );
        this._raiseRecurrenceActionDialogShowing(m);
        if (m.get_cancel()) {
          var l = m.get_editSeries();
          if (l !== null) {
            k.CallbackIsCalledFromDialog = false;
            k.OnConfirm(l, k);
          }
        } else {
          c.RecurrenceActionDialog.Show(c.RecurrenceAction.Edit, k);
        }
      } else {
        k.CallbackIsCalledFromDialog = false;
        k.OnConfirm(false, k);
      }
    },
    _onAppointmentEditCallback: function (m, l) {
      var o = l.Scheduler,
        j = l.Appointment,
        k = l.AppointmentElement,
        n;
      o._raiseRecurrenceActionDialogClosedEvent(l, m, c.RecurrenceAction.Edit);
      n = new c.SchedulerAppointmentEditingEventArgs(j, m);
      o._raiseAppointmentEditing(n);
      if (!n.get_cancel()) {
        o.showInlineEditForm(j, m, k);
      }
    },
    _onAppointmentEditAbortCallback: function (j) {
      j.Scheduler._raiseRecurrenceActionDialogClosedEvent(
        j,
        false,
        c.RecurrenceAction.Edit
      );
    },
    _raiseRecurrenceActionDialogClosedEvent: function (j, l, m) {
      if (j.CallbackIsCalledFromDialog) {
        var k = new c.SchedulerRecurrenceActionDialogClosedEventArgs(
          j.Appointment,
          m,
          l
        );
        j.Scheduler._raiseRecurrenceActionDialogClosed(k);
      }
    },
    _onDateHeaderClick: function (k) {
      $telerik.cancelRawEvent(k);
      if (
        this._renderMode == c.RenderMode.Mobile &&
        $telerik.isTouchDevice &&
        this.get_selectedView() == c.SchedulerViewType.MonthView
      ) {
        return;
      }
      var j = this._extractDateFromLink(k.eventMapTarget);
      return this._switchToSelectedDay(j);
    },
    _onMonthHeaderClick: function (k) {
      $telerik.cancelRawEvent(k);
      var j = this._extractDateFromLink(k.eventMapTarget);
      return this._switchToSelectedMonth(j);
    },
    _extractDateFromLink: function (l) {
      var j = new Date();
      var k = l.href.match(/#(\d{4}-\d{2}-\d{2})/);
      if (k && k.length == 2) {
        var m = a.map(k[1].split("-"), function (n) {
          return parseInt(n, 10);
        });
        j = new Date(m[0], m[1] - 1, m[2]);
      }
      return j;
    },
    _onShowMoreClick: function (j) {
      $telerik.cancelRawEvent(j);
      var k = this._activeModel.getTimeSlotFromDomElement(j.eventMapTarget);
      return this._switchToSelectedDay(k.get_startTime());
    },
    _switchToSelectedDay: function (m) {
      var k = b.getDate(m);
      var j = new d.NavigationCommandEventArgs(
        c.SchedulerNavigationCommand.SwitchToSelectedDay,
        k
      );
      this.raiseEvent("navigationCommand", j);
      if (j.get_cancel()) {
        return;
      }
      if (this._renderingManager) {
        this._renderingManager._suppressWebServiceCalls = true;
        this._selectDate(k);
        this._renderingManager._suppressWebServiceCalls = false;
        this.set_selectedView(c.SchedulerViewType.DayView, true);
        this.raiseEvent(
          "navigationComplete",
          new d.NavigationCompleteEventArgs(
            c.SchedulerNavigationCommand.SwitchToSelectedDay
          )
        );
        return;
      }
      var l = {
        Command: "SwitchToSelectedDay",
        StartDate: k.format("yyyyMMddHHmm"),
      };
      this.postback(l);
      return false;
    },
    _switchToSelectedMonth: function (m) {
      var k = b.getDate(m);
      var j = new d.NavigationCommandEventArgs(
        c.SchedulerNavigationCommand.SwitchToSelectedMonth,
        k
      );
      this.raiseEvent("navigationCommand", j);
      if (j.get_cancel()) {
        return;
      }
      if (this._renderingManager) {
        this._renderingManager._suppressWebServiceCalls = true;
        this._selectDate(k);
        this._renderingManager._suppressWebServiceCalls = false;
        this.set_selectedView(c.SchedulerViewType.MonthView, true);
        this.raiseEvent(
          "navigationComplete",
          new d.NavigationCompleteEventArgs(
            c.SchedulerNavigationCommand.SwitchToSelectedMonth
          )
        );
        return;
      }
      var l = {
        Command: "SwitchToSelectedMonth",
        StartDate: k.format("yyyyMMddHHmm"),
      };
      this.postback(l);
      return false;
    },
    _onAppointmentMouseOver: function (n) {
      if (
        this._resizingState.resizing ||
        this._dragging ||
        $telerik.isTouchDevice ||
        $telerik.isMobileIE10
      ) {
        n.stopPropagation();
        return;
      }
      var l = this.getAppointmentDomElement(n.eventMapTarget);
      var k = this.getAppointmentFromDomElement(l);
      var j =
        k._allowDelete != null ? k.get_allowDelete() : this.get_allowDelete();
      if (!j) {
        return;
      }
      this._hoveredAppointmentElement = l;
      var m = $telerik.getElementByClassName(l, "rsAptDelete", "a");
      if (m) {
        m.style.visibility = "visible";
      }
      if (this.get_selectedView() == c.SchedulerViewType.AgendaView) {
        a(l).parents("tr.rsAgendaRow").first().addClass("rsAgendaRowHovered");
      }
    },
    _onAppointmentMouseOut: function (l) {
      var m = l.rawEvent.relatedTarget
        ? l.rawEvent.relatedTarget
        : l.rawEvent.toElement;
      if (!m || $telerik.isTouchDevice || $telerik.isMobileIE10) {
        return;
      }
      if ($telerik.isDescendant(this._hoveredAppointmentElement, m)) {
        return;
      }
      var j = this.getAppointmentDomElement(l.eventMapTarget);
      var k = $telerik.getElementByClassName(j, "rsAptDelete", "a");
      if (k) {
        k.style.visibility = "hidden";
      }
      if (this.get_selectedView() == c.SchedulerViewType.AgendaView) {
        a(j)
          .parents("tr.rsAgendaRow")
          .first()
          .removeClass("rsAgendaRowHovered");
      }
    },
    _onCellClick: function (j) {
      if (j.target.tagName.toUpperCase() == "TBODY") {
        return;
      }
      var l = this._activeModel.getTimeSlotFromDomElement(j.target);
      if (!l) {
        return;
      }
      var k = new c.SchedulerTimeSlotClickEventArgs(l.get_startTime(), l, j);
      this._raiseTimeSlotClick(k);
    },
    _onCellContextMenu: function (m) {
      this._timeSlotTapped = false;
      var w = this._activeModel.getTimeSlotFromDomElement(m.target);
      var y = this._activeModel.get_supportsSlotSelection();
      var q = this._renderMode == c.RenderMode.Mobile && $telerik.isTouchDevice;
      if (!w) {
        return;
      }
      var v = this._rowSelectionState;
      if (y && !this.get_readOnlyResolved()) {
        var t = false;
        var p;
        for (p = 0; p < v.selectedSlots.length; p++) {
          if (
            b.areEqual(v.selectedSlots[p].get_startTime(), w.get_startTime())
          ) {
            t =
              v.selectedSlots[0].get_rawIndex().modelIndex ==
              w.get_rawIndex().modelIndex;
            break;
          }
        }
        if (!t) {
          this._clearSlotSelection();
          v.rowSelectionStartSlot = w;
          w.set_selected(true);
          var s =
            this.get_selectedView() == c.SchedulerViewType.WeekView &&
            this._activeModel._getNextTimeSlot(w) &&
            !b.areEqual(
              this._activeModel._getNextTimeSlot(w).get_startTime(),
              w.get_endTime()
            );
          var u = w.get_isAllDay() || s ? 1 : this._numberOfHoveredRows;
          var r = w;
          for (p = 0; p < u - 1; p++) {
            r = this._activeModel._getNextTimeSlot(r);
            if (r) {
              r.set_selected(true);
            }
          }
          v.rowSelectionEndSlot = r ? r : w;
          this._updateRowSelection();
        }
      }
      var x = v.rowSelectionStartSlot || w;
      var n = v.rowSelectionEndSlot || w;
      var o = new c.SchedulerTimeSlotContextMenuEventArgs(
        w.get_startTime(),
        w.get_isAllDay(),
        m,
        w,
        x,
        n
      );
      this._raiseTimeSlotContextMenu(o);
      var z = null;
      if (this.get_timeSlotContextMenus) {
        z = this.get_timeSlotContextMenus()[0];
      }
      if (z != null) {
        var j = z.findItemByValue("CommandAddAppointment");
        var k = z.findItemByValue("CommandAddRecurringAppointment");
        var l = !this.get_readOnlyResolved() && this.get_allowInsert();
        if (j != null) {
          j.set_enabled(l);
        }
        if (k != null) {
          k.set_enabled(l);
        }
      } else {
        if (q) {
          this._onCellDoubleClick(m);
        }
      }
    },
    _onCellDoubleClick: function (j) {
      if (!this.get_readOnlyResolved() && this.get_allowInsert()) {
        var l = this._activeModel.getTimeSlotFromDomElement(j.target);
        var k = new c.SchedulerAppointmentInsertingEventArgs(
          l.get_startTime(),
          l.get_isAllDay(),
          l
        );
        this._raiseAppointmentInserting(k);
        if (!k.get_cancel()) {
          this.showInsertFormAt(l);
        }
      }
      return false;
    },
    _onAppointmentDeleteClick: function (k) {
      if (!this.get_readOnlyResolved()) {
        var j = this.getAppointmentFromDomElement(k.eventMapTarget);
        this._deleteAppointment(j);
      }
      k.preventDefault();
    },
    _inlineFormDeleteClicked: function (l) {
      var k = l.get_appointmentInternalID(),
        j = this._getAppointmentByInternalID(k);
      if (this._renderingManager && l._editSeries && j._recurrenceState != 1) {
        j = this.get_appointments().findByID(j.get_recurrenceParentID());
      }
      this._showDeleteConfirmationForAppointment(j, l._editSeries);
    },
    _formDeleteLinkClicked: function (k) {
      var j = {
          OnConfirm: function (n, m) {
            setTimeout(function () {
              eval(m.deleteLinkHref.replace(/%20/g, " "));
            }, 10);
          },
          deleteLinkHref: k._deleteLinkHref,
        },
        l = k._confirmDialogTarget || "rsTopWrap";
      this._showDeleteAppointmentConfirmationDialog(j, false, l);
    },
    _getAppointmentByInternalID: function (k) {
      var j = this.get_appointments().find(function (l) {
        return l.get_internalID() == k;
      });
      return j;
    },
    _showDeleteConfirmationForAppointment: function (j, l) {
      var k = {
        OnConfirm: this._onAppointmentDeleteCallback,
        OnCancel: this._onAppointmentDeleteAbortCallback,
        Scheduler: this,
        Appointment: j,
        CallbackIsCalledFromDialog: true,
      };
      this._showDeleteAppointmentConfirmationDialog(k, l, "rsTopWrap");
    },
    _deleteAppointment: function (j) {
      if (!j) {
        return;
      }
      var k = {
        OnConfirm: this._onAppointmentDeleteCallback,
        OnCancel: this._onAppointmentDeleteAbortCallback,
        Scheduler: this,
        Appointment: j,
        CallbackIsCalledFromDialog: true,
      };
      this._showDeleteConfirmationDialog(k);
    },
    _showDeleteConfirmationDialog: function (k) {
      var j = k.Appointment._recurrenceState;
      if (j != 0) {
        this._showDeleteRecurringAppointmentConfirmationDialog(k);
      } else {
        this._showDeleteAppointmentConfirmationDialog(k, false, "rsTopWrap");
      }
    },
    _showDeleteRecurringAppointmentConfirmationDialog: function (j) {
      var l = new c.SchedulerRecurrenceActionDialogShowingEventArgs(
        j.Appointment,
        c.RecurrenceAction.Delete
      );
      this._raiseRecurrenceActionDialogShowing(l);
      if (l.get_cancel()) {
        var k = l.get_editSeries();
        if (k !== null) {
          j.CallbackIsCalledFromDialog = false;
          j.OnConfirm(k, j);
        }
      } else {
        c.RecurrenceActionDialog.Show(c.RecurrenceAction.Delete, j);
      }
    },
    _showDeleteAppointmentConfirmationDialog: function (j, l, n) {
      if (this.get_displayDeleteConfirmation()) {
        var m = this.get_localization(),
          k = $telerik.$.modal(
            "#" + this.get_element().id + ">." + n,
            this._renderMode
          );
        k.initialize()
          .set_content({
            title: m.ConfirmDeleteTitle,
            content: m.ConfirmDeleteText,
            ok: m.ConfirmOK,
            cancel: m.ConfirmCancel,
          })
          .set_onActionConfirm(function () {
            j.OnConfirm(l, j);
            k.hide();
          })
          .show();
      } else {
        j.CallbackIsCalledFromDialog = false;
        j.OnConfirm(l, j);
      }
    },
    _onAppointmentDeleteCallback: function (k, j) {
      j.Scheduler._raiseRecurrenceActionDialogClosedEvent(
        j,
        k,
        c.RecurrenceAction.Delete
      );
      var l = new c.SchedulerAppointmentDeletingEventArgs(j.Appointment, k);
      j.Scheduler._raiseAppointmentDeleting(l);
      if (!l.get_cancel()) {
        j.Scheduler.deleteAppointment(j.Appointment, k);
      }
    },
    _onAppointmentDeleteAbortCallback: function (j) {
      j.Scheduler._raiseRecurrenceActionDialogClosedEvent(
        j,
        false,
        c.RecurrenceAction.Delete
      );
    },
    _onPreviousDayClick: function (m) {
      m.stopPropagation();
      m.preventDefault();
      var l = new d.NavigationCommandEventArgs(
        c.SchedulerNavigationCommand.DisplayPreviousAppointmentSegment
      );
      this.raiseEvent("navigationCommand", l);
      if (l.get_cancel()) {
        return;
      }
      var k = this.getAppointmentFromDomElement(m.eventMapTarget),
        j = this.get_activeModel();
      if (this._renderingManager) {
        if (
          j.get_supportsFullTime() &&
          !this.get_showFullTime() &&
          !j._isVertical
        ) {
          this.set_showFullTime(true);
        } else {
          if (k.get_start() < j.get_visibleRangeStart()) {
            this._selectDate(j.get_previousPeriodDate());
          } else {
            this._navigating = false;
          }
        }
        return;
      }
      if (k) {
        var n = { Command: "GoToPrevious", AppointmentID: k._internalID };
        a(m.eventMapTarget).removeAttr("href");
        this.postback(n);
      }
    },
    _onNextDayClick: function (m) {
      m.stopPropagation();
      m.preventDefault();
      var l = new d.NavigationCommandEventArgs(
        c.SchedulerNavigationCommand.DisplayNextAppointmentSegment
      );
      this.raiseEvent("navigationCommand", l);
      if (l.get_cancel()) {
        return;
      }
      var k = this.getAppointmentFromDomElement(m.eventMapTarget),
        j = this.get_activeModel();
      if (this._renderingManager) {
        if (
          j.get_supportsFullTime() &&
          !this.get_showFullTime() &&
          !j._isVertical
        ) {
          this.set_showFullTime(true);
        } else {
          if (k.get_end() > j.get_visibleRangeEnd()) {
            this._selectDate(j.get_nextPeriodDate());
          } else {
            this._navigating = false;
          }
        }
        return;
      }
      if (k) {
        var n = { Command: "GoToNext", AppointmentID: k._internalID };
        a(m.eventMapTarget).removeAttr("href");
        this.postback(n);
      }
    },
    _onAddAppointmentClick: function (j) {
      var k = this._rowSelectionState,
        l;
      if (k.selectedSlots.length == 0) {
        l = this._activeModel._getFirstTimeSlot();
        if (l && l.set_selected) {
          l.set_selected(true);
          k.rowSelectionStartSlot = l;
          k.isRowSelection = true;
          k.selectedSlots.push(l);
        }
      }
      this._insertAppoinmentAtSelectedSlots();
    },
    _onViewToggleClick: function (k) {
      var j = a(this.get_element()).find(".rsToolbar .rsViewSwitcher>ul");
      if (j.length == 0) {
        return;
      }
      j.toggleClass("rsHidden", !j.hasClass("rsHidden"));
    },
    _onDayViewTabClick: function (k) {
      k.preventDefault();
      var j = new d.NavigationCommandEventArgs(
        c.SchedulerNavigationCommand.SwitchToDayView
      );
      this.raiseEvent("navigationCommand", j);
      if (j.get_cancel()) {
        return;
      }
      if (this._renderingManager) {
        this.set_selectedView(c.SchedulerViewType.DayView);
        return;
      }
      a(k.eventMapTarget).removeAttr("href");
      this.postback({ Command: "SwitchToDayView" });
    },
    _onWeekViewTabClick: function (k) {
      k.preventDefault();
      var j = new d.NavigationCommandEventArgs(
        c.SchedulerNavigationCommand.SwitchToWeekView
      );
      this.raiseEvent("navigationCommand", j);
      if (j.get_cancel()) {
        return;
      }
      if (this._renderingManager) {
        this.set_selectedView(c.SchedulerViewType.WeekView);
        return;
      }
      var l = { Command: "SwitchToWeekView" };
      a(k.eventMapTarget).removeAttr("href");
      this.postback(l);
    },
    _onMonthViewTabClick: function (k) {
      k.preventDefault();
      var j = new d.NavigationCommandEventArgs(
        c.SchedulerNavigationCommand.SwitchToMonthView
      );
      this.raiseEvent("navigationCommand", j);
      if (j.get_cancel()) {
        return;
      }
      if (this._renderingManager) {
        this.set_selectedView(c.SchedulerViewType.MonthView);
        return;
      }
      var l = { Command: "SwitchToMonthView" };
      a(k.eventMapTarget).removeAttr("href");
      this.postback(l);
    },
    _onTimelineViewTabClick: function (k) {
      k.preventDefault();
      var j = new d.NavigationCommandEventArgs(
        c.SchedulerNavigationCommand.SwitchToTimelineView
      );
      this.raiseEvent("navigationCommand", j);
      if (j.get_cancel()) {
        return;
      }
      if (this._renderingManager) {
        this.set_selectedView(c.SchedulerViewType.TimelineView);
        return;
      }
      var l = { Command: "SwitchToTimelineView" };
      a(k.eventMapTarget).removeAttr("href");
      this.postback(l);
    },
    _onMultiDayViewTabClick: function (k) {
      k.preventDefault();
      var j = new d.NavigationCommandEventArgs(
        c.SchedulerNavigationCommand.SwitchToMultiDayView
      );
      this.raiseEvent("navigationCommand", j);
      if (j.get_cancel()) {
        return;
      }
      if (this._renderingManager) {
        this.set_selectedView(c.SchedulerViewType.MultiDayView);
        return;
      }
      var l = { Command: "SwitchToMultiDayView" };
      a(k.eventMapTarget).removeAttr("href");
      this.postback(l);
    },
    _onAgendaViewTabClick: function (k) {
      k.preventDefault();
      var j = new d.NavigationCommandEventArgs(
        c.SchedulerNavigationCommand.SwitchToAgendaView
      );
      this.raiseEvent("navigationCommand", j);
      if (j.get_cancel()) {
        return;
      }
      if (this._renderingManager) {
        this.set_selectedView(c.SchedulerViewType.AgendaView);
        return;
      }
      var l = { Command: "SwitchToAgendaView" };
      a(k.eventMapTarget).removeAttr("href");
      this.postback(l);
    },
    _onYearViewTabClick: function (k) {
      k.preventDefault();
      var j = new d.NavigationCommandEventArgs(
        c.SchedulerNavigationCommand.SwitchToYearView
      );
      this.raiseEvent("navigationCommand", j);
      if (j.get_cancel()) {
        return;
      }
      if (this._renderingManager) {
        this.set_selectedView(c.SchedulerViewType.YearView);
        return;
      }
      var l = { Command: "SwitchToYearView" };
      a(k.eventMapTarget).removeAttr("href");
      this.postback(l);
    },
    _onPreviousSchedulerDayClick: function (k) {
      k.preventDefault();
      var j = new d.NavigationCommandEventArgs(
        c.SchedulerNavigationCommand.NavigateToPreviousPeriod
      );
      this.raiseEvent("navigationCommand", j);
      if (j.get_cancel()) {
        return;
      }
      if (this._renderingManager) {
        this._selectDate(this._activeModel.get_previousPeriodDate());
        this.raiseEvent(
          "navigationComplete",
          new d.NavigationCompleteEventArgs(
            c.SchedulerNavigationCommand.NavigateToPreviousPeriod
          )
        );
        return;
      }
      var l = { Command: "NavigateToPreviousPeriod" };
      a(k.eventMapTarget).removeAttr("href");
      this.postback(l);
    },
    _onNextSchedulerDayClick: function (k) {
      k.preventDefault();
      var j = new d.NavigationCommandEventArgs(
        c.SchedulerNavigationCommand.NavigateToNextPeriod
      );
      this.raiseEvent("navigationCommand", j);
      if (j.get_cancel()) {
        return;
      }
      if (this._renderingManager) {
        this._selectDate(this._activeModel.get_nextPeriodDate());
        this.raiseEvent(
          "navigationComplete",
          new d.NavigationCompleteEventArgs(
            c.SchedulerNavigationCommand.NavigateToNextPeriod
          )
        );
        return;
      }
      var l = { Command: "NavigateToNextPeriod" };
      a(k.eventMapTarget).removeAttr("href");
      this.postback(l);
    },
    _onTodayClick: function (k) {
      k.preventDefault();
      var m = b.getDate(new Date());
      var j = new d.NavigationCommandEventArgs(
        c.SchedulerNavigationCommand.SwitchToSelectedDay,
        m
      );
      this.raiseEvent("navigationCommand", j);
      if (j.get_cancel()) {
        return;
      }
      if (this._renderingManager) {
        this._selectDate(m);
        this.raiseEvent(
          "navigationComplete",
          new d.NavigationCompleteEventArgs(
            c.SchedulerNavigationCommand.SwitchToSelectedDay
          )
        );
        return;
      }
      var l = { Command: "GoToToday" };
      a(k.eventMapTarget).removeAttr("href");
      this.postback(l);
    },
    _onFullTimeLinkClick: function (k) {
      k.preventDefault();
      var j = new d.NavigationCommandEventArgs(
        c.SchedulerNavigationCommand.SwitchFullTime
      );
      this.raiseEvent("navigationCommand", j);
      if (j.get_cancel()) {
        return;
      }
      if (this._renderingManager) {
        if (!this.get_activeModel()._isVertical) {
          this.set_showFullTime(!this.get_showFullTime());
        }
        this.raiseEvent(
          "navigationComplete",
          new d.NavigationCompleteEventArgs(
            c.SchedulerNavigationCommand.SwitchFullTime
          )
        );
        return;
      }
      var l = { Command: "SwitchFullTime" };
      a(k.eventMapTarget).removeAttr("href");
      this.postback(l);
    },
    _selectDate: function (k) {
      var j = $find(this.get_element().id + "_SelectedDateCalendar");
      this.set_selectedDate(k);
      if (j) {
        this._preventCalendarNavigate = true;
        j.selectDate([k.getFullYear(), k.getMonth() + 1, k.getDate()], true);
        this._preventCalendarNavigate = false;
      }
    },
    postback: function (j) {
      this._onContentScroll();
      var k = this.get_postBackReference().replace(
        "arguments",
        Sys.Serialization.JavaScriptSerializer.serialize(j)
      );
      eval(k);
    },
    _getElementIndex: function (k, j) {
      if (!k) {
        return;
      }
      for (var l = 0; l < k.length; l++) {
        if (k[l] === j) {
          return l;
        }
      }
      return -1;
    },
    _getInlineTemplate: function () {
      if (!this._inlineTemplate) {
        this._inlineTemplate = this._createInlineTemplate();
        var p = a("#" + this.get_element().id + " .rsAptEditSizingWrapper");
        if (p.length) {
          this._inlineTemplate.attachTo(p[0]);
          if (
            this.get_selectedView() == c.SchedulerViewType.AgendaView &&
            this._inlineTemplate._setWrapDimentions
          ) {
            this._inlineTemplate._setWrapDimentions(
              p.parent(),
              p.parent().parent()
            );
          }
          var m = Function.createDelegate(this, this._formDeleteLinkClicked);
          this._inlineTemplate.add_deleteClicked(m);
        } else {
          var j = Function.createDelegate(this, this._inlineFormDeleteClicked);
          this._inlineTemplate.add_deleteClicked(j);
        }
        var o = Function.createDelegate(this, this._inlineFormSaveClicked);
        this._inlineTemplate.add_saveClicked(o);
        var n = Function.createDelegate(this, this._inlineFormMoreClicked);
        this._inlineTemplate.add_moreClicked(n);
        var k = Function.createDelegate(this, this._inlineFormHidden);
        this._inlineTemplate.add_hidden(k);
        var l = Function.createDelegate(this, this._inlineFormKeyDown);
        this._inlineTemplate.add_keyDown(l);
      }
      return this._inlineTemplate;
    },
    _createInlineTemplate: function () {
      var j = this.get_element(),
        l = this.get_localization(),
        k = this._advancedFormSettings.enabled,
        n = this.get_minimumInlineFormWidth(),
        m = this.get_minimumInlineFormHeight();
      if (this._renderMode === c.RenderMode.Mobile) {
        return new c.InlineTemplateNative(j, l, k, n, m);
      }
      if (this._renderMode === c.RenderMode.Lite) {
        return new c.InlineTemplateLite(j, l, k, n, m);
      }
      return new c.InlineTemplate(j, l, k, n, m);
    },
    _createAdvancedTemplate: function (l, j, k) {
      return new c.Scheduling.AdvancedTemplate(l, j, k);
    },
    _inlineFormSaveClicked: function (k) {
      var j = this._extractAppointmentFromInlineTemplate(k);
      if (k.get_isInsert()) {
        this.insertAppointment(j);
      } else {
        this.updateAppointment(j, k.get_editSeries());
      }
    },
    _inlineFormMoreClicked: function (k) {
      var j = this._extractAppointmentFromInlineTemplate(k);
      if (k.get_isInsert()) {
        this._showAdvancedInsertForm(j);
      } else {
        this.showAdvancedEditForm(j, k.get_editSeries());
      }
    },
    _inlineFormHidden: function (j) {
      if (this._getNavigator()) {
        this._getNavigator()._getCommandsModule().trigger("onEditFormHidden");
      }
    },
    _inlineFormKeyDown: function (k, j) {
      if (j.keyCode == 13 && this.get_selectedSlots().length > 0) {
        if (j.preventDefault) {
          j.preventDefault();
        }
        if (j.stopPropagation) {
          j.stopPropagation();
        }
      }
    },
    _extractAppointmentFromInlineTemplate: function (l) {
      var m = l.get_element();
      if (m.originalParent) {
        m = m.originalParent;
      }
      var j = new c.SchedulerAppointment();
      j._internalID = l.get_appointmentInternalID();
      if (l.get_isInsert()) {
        var n = this._activeModel.getTimeSlotFromDomElement(m);
        if (n.get_resource) {
          j.get_resources().add(n.get_resource());
        }
      } else {
        var k = this.get_appointments().find(function (o) {
          return o.get_internalID() == j.get_internalID();
        });
        if (this._renderingManager) {
          j = this.prepareToEdit(k, l.get_editSeries());
          j.set_subject(l.get_text());
          return j;
        } else {
          k.get_resources().forEach(function (o) {
            j.get_resources().add(o);
          });
        }
      }
      j.set_subject(l.get_text());
      j.set_start(l.get_start());
      j.set_end(l.get_end());
      j.set_timeZoneID(this._timeZoneId);
      return j;
    },
    _showAdvancedInsertForm: function (j, k, o) {
      if (this._renderingManager) {
        this._showAdvancedFormWrapper(
          a(this.get_element()).find("div.rsAdvancedInsertWrapper")
        );
        this._advancedTemplate = this._getAdvancedInsertTemplate();
        this._fireFormCreated(j, c.SchedulerFormMode.AdvancedInsert);
        if (this._advancedTemplate) {
          this._advancedTemplate.populate(j, true);
        }
        if (this._getNavigator()) {
          this._getNavigator()
            ._getCommandsModule()
            .trigger("onEditFormShown", this._advancedTemplate);
        }
        this._focusAdvancedFormSubjectTextBox();
        return;
      }
      var l = null;
      var n = this.get_selectedSlots().length;
      if (n > 0) {
        l = this.get_selectedSlots()[n - 1].get_index();
      }
      var m = {
        command: "AdvancedInsert",
        appointment: this._getSerializableAppointment(j),
        startDate: j.get_start().format("yyyyMMddHHmm"),
        endDate: j.get_end().format("yyyyMMddHHmm"),
        lastSlotIndex: l,
      };
      if (k) {
        m.command = "AdvancedInsertRecurring";
        m.targetSlotIndex = o.get_index();
      }
      this.postback(m);
    },
    _getAdvancedInsertTemplate: function () {
      if (!this._advancedInsertTemplate && this._useDefaultAdvancedInsert) {
        var l = this.get_element(),
          j = a(l),
          k = j.find("div.rsAdvancedInsertWrapper div.rsAdvancedEdit"),
          m = this.get_advancedFormSettings().modal;
        this._advancedInsertTemplate = this._createAdvancedTemplate(l, k, m);
        this._advancedInsertTemplate.initialize();
      }
      return this._advancedInsertTemplate;
    },
    _getAdvancedEditTemplate: function () {
      if (!this._advancedEditTemplate && this._useDefaultAdvancedEdit) {
        var l = this.get_element(),
          j = a(l),
          k = j.find("div.rsAdvancedEditWrapper div.rsAdvancedEdit"),
          m = this.get_advancedFormSettings().modal;
        this._advancedEditTemplate = this._createAdvancedTemplate(l, k, m);
        this._advancedEditTemplate.initialize();
      }
      return this._advancedEditTemplate;
    },
    _showAdvancedFormWrapper: function (k) {
      if (k.parent().is(".RadScheduler")) {
        return;
      }
      this.hideInlineForm();
      this.hideAdvancedForm();
      var l = this.get_element(),
        j = a(l);
      j.append(k);
      if (this._advancedFormSettings.modal) {
        this._makeModal(k.find("div.rsAdvancedEdit")[0]);
      } else {
        j.find("div.rsTopWrap").hide();
      }
    },
    _focusAdvancedFormSubjectTextBox: function () {
      var j = a(this.get_element())
        .find(".rsAdvancedEdit .riTextBox, .rsAdvancedInsert .riTextBox")
        .filter(":visible")
        .filter(":first")[0];
      if (j) {
        j.focus();
      }
    },
    _makeModal: function (m) {
      if (!this._advancedFormSettings.modal) {
        return;
      }
      var l = this.get_element(),
        j = a(l),
        k = a(m);
      m.id = l.id + "formElement";
      this._popupDialog = a.popupDialog(
        m,
        k.find(".rsAdvInnerTitle")[0],
        this._advancedFormSettings
      );
      if (
        this._advancedFormSettings &&
        k.hasClass("rsAdvancedEdit") &&
        !k.hasClass("rsAdvancedModal")
      ) {
        k.addClass("rsAdvancedModal");
      }
      j.find(".rsAdvFormWrap").css({ display: "block" });
      this._popupDialog.show();
    },
    _getModelFactory: function (j) {
      switch (j) {
        case c.SchedulerViewType.DayView:
          return new c.Scheduler.DayModelFactory(this);
        case c.SchedulerViewType.WeekView:
          return new c.Scheduler.WeekModelFactory(this);
        case c.SchedulerViewType.MonthView:
          return new c.Scheduler.MonthModelFactory(this);
        case c.SchedulerViewType.TimelineView:
          return new c.Scheduler.TimelineModelFactory(this);
        case c.SchedulerViewType.MultiDayView:
          return new c.Scheduler.MultiDayModelFactory(this);
        case c.SchedulerViewType.AgendaView:
          return new c.Scheduler.AgendaModelFactory(this);
        case c.SchedulerViewType.YearView:
          return new c.Scheduler.YearModelFactory(this);
      }
    },
    _setIndicatorState: function (k) {
      var l = [],
        j = [];
      a.each(k, function (m) {
        l[m] = this == 1 || this == 3 ? 1 : 0;
        j[m] = this == 2 || this == 3 ? 1 : 0;
      });
      this._aptTopIndicators = l;
      this._aptBottomIndicators = j;
      this._updateHiddenAppointmentsIndicator(this._aptTopIndicators, "top");
      this._updateHiddenAppointmentsIndicator(
        this._aptBottomIndicators,
        "bottom"
      );
    },
    _updateHiddenAppointmentsIndicator: function (l, m) {
      var j = m == "top" ? "rsTopIndicator" : "rsBottomIndicator";
      this._removeIndicatorsTable(j);
      for (var k = 0; k < l.length; k++) {
        if (l[k] > 0) {
          this._createIndicatorsTable(l, j);
          return;
        }
      }
    },
    _createIndicatorsTable: function (p, k) {
      var j = a(this.get_element()).find(".rsTopWrap .rsContentScrollArea"),
        l = new Telerik.Web.StringBuilder(),
        q;
      l.append("<table class='rsArrowContainer ").append(k).append("'><tr>");
      for (var m = 0; m < p.length; m++) {
        l.append("<td>");
        if (p[m] > 0) {
          l.append(
            "<div class='rsArrowWrap'><a class='rsOvertimeArrow' href='#' /></div>"
          );
        }
        l.append("</td>");
      }
      l.append("</tr></table>");
      q = a(l.toString()).width(j.find(".rsContentTable").width());
      if (
        this._renderMode == c.RenderMode.Lite ||
        this._renderMode == c.RenderMode.Mobile
      ) {
        var o = k === "rsTopIndicator" ? "up" : "down";
        var n = '<span class="p-icon p-i-arrow-60-' + o + '"></span>';
        q.find(".rsOvertimeArrow").append(n);
      }
      j.append(q);
    },
    _removeIndicatorsTable: function (j) {
      a(this.get_element())
        .find(".rsTopWrap .rsContentScrollArea table." + j)
        .remove();
    },
    _doCallback: function (j, k) {
      var l = Function.createDelegate(this, this._onCallbackResponse);
      var m = Function.createDelegate(this, this._onCallbackError);
      WebForm_DoCallback(this._uniqueId, j, l, k, m, true);
    },
    _extractErrorMessage: function (j) {
      if (j.get_message) {
        return j.get_message();
      } else {
        return j.replace(/(\d*\|.*)/, "");
      }
    },
    _onCallbackError: function (k, j) {
      var l = this._extractErrorMessage(k);
      throw new Error(l);
    },
    _onCallbackResponse: function (m, k) {
      if (m === "OK") {
        return;
      }
      var l = Sys.Serialization.JavaScriptSerializer.deserialize(m);
      var j = [];
      var n = this;
      a.each(l, function () {
        var o = new c.SchedulerAppointment(this, n);
        j.push(o);
      });
      this._populateAppointmentsTooltip(j);
    },
    _populateAppointmentsTooltip: function (j) {
      var l = this._tooltipSlotResource;
      var k;
      if (l) {
        k = a.grep(j, function (m, n) {
          return (
            m
              .get_resources()
              .getResourceByTypeAndKey(l.get_type(), l.get_key()) !== null
          );
        });
      } else {
        k = j;
      }
      this._appointmentsTooltip.show().populate(k).position();
    },
    _initializeAppointmentsTooltip: function () {
      var l = this;
      var j = this._appointmentsToolTipDelay;
      var m = (this._appointmentsTooltip = new c.AppointmentsTooltip(
        a(this.get_element()).find(".rsYearMonthsWrap")[0]
      ));
      var k = function () {
        l._hideAppointmentsTooltipTimer = setTimeout(function () {
          m.hide();
        }, j);
      };
      m.on(
        {
          mouseenter: function () {
            clearTimeout(l._hideAppointmentsTooltipTimer);
          },
          mouseleave: k,
        },
        m
      );
      a(this.get_element())
        .find(".rsYearView")
        .on("mouseenter", ".rsOccupiedSlot", function (o) {
          var n = this;
          l._appointmentsTooltipTimer = setTimeout(function () {
            var q = l.get_activeModel();
            var r = q.getTimeSlotFromDomElement(n);
            l._tooltipSlotResource = r.get_resource ? r.get_resource() : null;
            if (l._renderingManager) {
              l._renderingManager.loadAppointmentsInRange(
                r.get_startTime(),
                r.get_endTime()
              );
            } else {
              var p = {
                Command: "GetSlotAppointments",
                Start: r.get_startTime().format("yyyyMMddHHmm"),
                End: r.get_endTime().format("yyyyMMddHHmm"),
              };
              l._doCallback(
                Sys.Serialization.JavaScriptSerializer.serialize([p]),
                l
              );
            }
            m._anchor = n;
          }, j);
        })
        .on("mouseleave", ".rsOccupiedSlot", function (n) {
          clearTimeout(l._appointmentsTooltipTimer);
          k();
        });
    },
    _disposeAppointmentsTooltip: function () {
      if (this._appointmentsTooltip) {
        this._appointmentsTooltip.dispose();
        clearTimeout(this._appointmentsTooltipTimer);
      }
      this._appointmentsTooltip = null;
      a(this.get_element()).find(".rsYearView").off();
    },
    _raiseDataBound: function () {
      this.raiseEvent("dataBound", Sys.EventArgs.Empty);
    },
    _raiseAppointmentCreated: function (j) {
      this.raiseEvent("appointmentCreated", new c.AppointmentEventArgs(j));
    },
    _raiseAppointmentDataBound: function (j) {
      this.raiseEvent("appointmentDataBound", j);
    },
    _raiseAppointmentInserting: function (j) {
      this.raiseEvent("appointmentInserting", j);
    },
    _raiseAppointmentEditing: function (j) {
      this.raiseEvent("appointmentEditing", j);
    },
    _raiseAppointmentDeleting: function (j) {
      this.raiseEvent("appointmentDeleting", j);
    },
    _raiseAppointmentClick: function (j) {
      this.raiseEvent("appointmentClick", j);
    },
    _raiseAppointmentDoubleClick: function (j) {
      this.raiseEvent("appointmentDoubleClick", j);
    },
    _raiseAppointmentResizeStart: function (j) {
      this.raiseEvent("appointmentResizeStart", j);
    },
    _raiseAppointmentResizing: function (j) {
      this.raiseEvent("appointmentResizing", j);
    },
    _raiseAppointmentResizeEnd: function (j) {
      this.raiseEvent("appointmentResizeEnd", j);
    },
    _raiseAppointmentContextMenu: function (j) {
      this.raiseEvent("appointmentContextMenu", j);
    },
    _raiseAppointmentWebServiceInserting: function (j) {
      this.raiseEvent("appointmentWebServiceInserting", j);
    },
    _raiseAppointmentWebServiceUpdating: function (j) {
      this.raiseEvent("appointmentWebServiceUpdating", j);
    },
    _raiseAppointmentWebServiceDeleting: function (j) {
      this.raiseEvent("appointmentWebServiceDeleting", j);
    },
    _raiseAppointmentsPopulating: function (j) {
      this.raiseEvent("appointmentsPopulating", j);
    },
    _raiseAppointmentsPopulated: function () {
      this.raiseEvent("appointmentsPopulated", Sys.EventArgs.Empty);
    },
    _raiseTimeSlotClick: function (j) {
      this.raiseEvent("timeSlotClick", j);
    },
    _raiseTimeSlotContextMenu: function (j) {
      this.raiseEvent("timeSlotContextMenu", j);
    },
    _raiseFormCreated: function (j) {
      this.raiseEvent("formCreated", j);
    },
    _raiseRecurrenceExceptionCreating: function (j) {
      this.raiseEvent("recurrenceExceptionCreating", j);
    },
    _raiseRecurrenceExceptionsRemoving: function (j) {
      this.raiseEvent("recurrenceExceptionsRemoving", j);
    },
    _raiseRecurrenceActionDialogShowing: function (j) {
      this.raiseEvent("recurrenceActionDialogShowing", j);
    },
    _raiseRecurrenceActionDialogClosed: function (j) {
      this.raiseEvent("recurrenceActionDialogClosed", j);
    },
    _raiseResourcesPopulating: function (j) {
      this.raiseEvent("resourcesPopulating", j);
    },
    _raiseResourcesPopulated: function () {
      this.raiseEvent("resourcesPopulated", Sys.EventArgs.Empty);
    },
    _raiseRequestSuccess: function (j) {
      this.raiseEvent("requestSuccess", j);
    },
    _raiseRequestFailed: function (j) {
      this.raiseEvent("requestFailed", j);
    },
  };
  a.registerControlProperties(c.RadScheduler, {
    shouldPostbackOnAppointmentContextMenuItemClick: false,
    shouldPostbackOnTimeSlotContextMenuItemClick: false,
    appointmentContextMenuIDs: [],
    timeSlotContextMenuIDs: [],
  });
  a.registerControlEvents(c.RadScheduler, [
    "dataBound",
    "appointmentCreated",
    "appointmentDataBound",
    "appointmentInserting",
    "appointmentEditing",
    "appointmentDeleting",
    "appointmentClick",
    "appointmentDoubleClick",
    "appointmentResizeStart",
    "appointmentResizing",
    "appointmentResizeEnd",
    "appointmentMoveStart",
    "appointmentMoving",
    "appointmentMoveEnd",
    "appointmentSerialized",
    "appointmentContextMenu",
    "appointmentContextMenuItemClicking",
    "appointmentContextMenuItemClicked",
    "appointmentWebServiceInserting",
    "appointmentWebServiceUpdating",
    "appointmentWebServiceDeleting",
    "appointmentsPopulating",
    "appointmentsPopulated",
    "timeSlotClick",
    "timeSlotContextMenu",
    "timeSlotContextMenuItemClicking",
    "timeSlotContextMenuItemClicked",
    "formCreated",
    "recurrenceExceptionCreating",
    "recurrenceExceptionsRemoving",
    "recurrenceActionDialogShowing",
    "recurrenceActionDialogClosed",
    "reminderTriggering",
    "reminderSnoozing",
    "reminderDismissing",
    "resourcesPopulating",
    "resourcesPopulated",
    "requestSuccess",
    "requestFailed",
    "navigationCommand",
    "navigationComplete",
  ]);
  c.RadScheduler.registerClass("Telerik.Web.UI.RadScheduler", c.RadWebControl);
})();
Type.registerNamespace("Telerik.Web.UI");
Telerik.Web.UI.RecurrenceAction = function () {};
Telerik.Web.UI.RecurrenceAction.prototype = {
  Edit: 1,
  Delete: 2,
  Resize: 3,
  Move: 4,
};
Telerik.Web.UI.RecurrenceAction.registerEnum("Telerik.Web.UI.RecurrenceAction");
(function (a, b) {
  b.RecurrenceActionDialog = function () {};
  b.RecurrenceActionDialog.Show = function (f, c) {
    var g = c.Scheduler.get_localization(),
      h = "",
      i = "",
      j = "";
    switch (f) {
      case b.RecurrenceAction.Delete:
        h = g.ConfirmRecurrenceDeleteOccurrence;
        i = g.ConfirmRecurrenceDeleteSeries;
        j = g.ConfirmRecurrenceDeleteTitle;
        break;
      case b.RecurrenceAction.Edit:
        h = g.ConfirmRecurrenceEditOccurrence;
        i = g.ConfirmRecurrenceEditSeries;
        j = g.ConfirmRecurrenceEditTitle;
        break;
      case b.RecurrenceAction.Resize:
        h = g.ConfirmRecurrenceResizeOccurrence;
        i = g.ConfirmRecurrenceResizeSeries;
        j = g.ConfirmRecurrenceResizeTitle;
        break;
      case b.RecurrenceAction.Move:
        h = g.ConfirmRecurrenceMoveOccurrence;
        i = g.ConfirmRecurrenceMoveSeries;
        j = g.ConfirmRecurrenceMoveTitle;
        break;
    }
    var e = a.modal(
      "#" + c.Scheduler.get_element().id + ">.rsTopWrap",
      c.Scheduler._renderMode
    );
    var d = [
      '<label><input type="radio" id="choiceOccurrenceSpan_0" name="choiceOccurrenceSpan" value="occurrence" checked="checked" />',
      h,
      "</label>",
      '<label><input type="radio" id="choiceOccurrenceSpan_1" name="choiceOccurrenceSpan" value="series" />',
      i,
      "</label>",
    ];
    e.initialize()
      .set_content({
        title: j,
        content: d.join(""),
        ok: g.ConfirmOK,
        cancel: g.ConfirmCancel,
      })
      .set_onActionConfirm(function (l, k) {
        var m =
          a(e.get_element())
            .find("input[name=choiceOccurrenceSpan]:checked")
            .val() == "series";
        c.OnConfirm(m, c);
        e.dispose();
      })
      .set_onActionCancel(function () {
        if (c.OnCancel) {
          c.OnCancel(c);
        }
        e.dispose();
      })
      .show();
  };
})($telerik.$, Telerik.Web.UI);
Type.registerNamespace("Telerik.Web.UI");
Telerik.Web.UI.SchedulerResource = function (a) {
  this._attributes = new Telerik.Web.UI.SchedulerAttributeCollection(this);
  if (a) {
    this._key = a.key;
    this._type = a.type;
    this._text = a.text;
    this._internalKey = a.internalKey;
    this._available = a.available;
    this._cssClass = a.cssClass;
    if (typeof a.attributes != "undefined") {
      this._attributes._load(a.attributes);
    }
  }
};
Telerik.Web.UI.SchedulerResource.prototype = {
  get_key: function () {
    return this._key;
  },
  set_key: function (a) {
    this._key = a;
  },
  get_type: function () {
    return this._type;
  },
  set_type: function (a) {
    this._type = a;
  },
  get_text: function () {
    return this._text;
  },
  set_text: function (a) {
    this._text = a;
  },
  get_available: function () {
    return this._available;
  },
  set_available: function (a) {
    this._available = a;
  },
  get_cssClass: function () {
    return this._cssClass;
  },
  set_cssClass: function (a) {
    this._cssClass = a;
  },
  _getInternalKey: function () {
    return this._internalKey;
  },
  get_attributes: function () {
    return this._attributes;
  },
};
Telerik.Web.UI.SchedulerResource.registerClass(
  "Telerik.Web.UI.SchedulerResource"
);
Type.registerNamespace("Telerik.Web.UI");
(function () {
  var a = Telerik.Web.UI;
  a.SchedulerResourceCollection = function () {
    this._array = [];
  };
  a.SchedulerResourceCollection.prototype = {
    add: function (c) {
      var b = this._array.length;
      this.insert(b, c);
    },
    insert: function (b, c) {
      Array.insert(this._array, b, c);
    },
    remove: function (b) {
      Array.remove(this._array, b);
    },
    removeAt: function (b) {
      var c = this.getResource(b);
      if (c) {
        this.remove(c);
      }
    },
    indexOf: function (c) {
      for (var b = 0, d = this._array.length; b < d; b++) {
        if (this._array[b] === c) {
          return b;
        }
      }
      return -1;
    },
    removeResourcesByType: function (c) {
      var b = this;
      this.getResourcesByType(c).forEach(function (d) {
        b.remove(d);
      });
    },
    clear: function () {
      this._array = [];
    },
    get_count: function () {
      return this._array.length;
    },
    forEach: function (d) {
      for (var c = 0, b = this.get_count(); c < b; c++) {
        d(this.getResource(c));
      }
    },
    getResource: function (b) {
      return this._array[b];
    },
    getResourcesByType: function (b) {
      return this.findAll(function (c) {
        return c.get_type() == b;
      });
    },
    getResourceByType: function (e) {
      for (var c = 0, b = this.get_count(); c < b; c++) {
        var d = this.getResource(c);
        if (d.get_type() == e) {
          return d;
        }
      }
      return null;
    },
    findAll: function (b) {
      var c = new a.SchedulerResourceCollection();
      this.forEach(function (d) {
        if (b(d)) {
          c.add(d);
        }
      });
      return c;
    },
    getResourceByTypeAndKey: function (c, b) {
      return (
        this.findAll(function (d) {
          return d.get_type() == c && d.get_key() == b;
        }).getResource(0) || null
      );
    },
    clone: function () {
      var b = new a.SchedulerResourceCollection();
      this.forEach(function (c) {
        b.add(c);
      });
      return b;
    },
  };
  a.SchedulerResourceCollection.registerClass(
    "Telerik.Web.UI.SchedulerResourceCollection"
  );
})();
(function () {
  Type.registerNamespace("Telerik.Web.UI");
  var a = Telerik.Web.UI;
  a.ResourceType = function (b) {
    if (b) {
      this._name = b.name;
      this._allowMultipleValues = b.allowMultipleValues || false;
    }
  };
  a.ResourceType.prototype = {
    get_name: function () {
      return this._name;
    },
    set_name: function (b) {
      this._name = b;
    },
    get_allowMultipleValues: function () {
      return this._allowMultipleValues;
    },
    set_allowMultipleValues: function (b) {
      this._allowMultipleValues = b;
    },
  };
  a.ResourceType.registerClass("Telerik.Web.UI.ResourceType");
})();
(function () {
  Type.registerNamespace("Telerik.Web.UI");
  var a = Telerik.Web.UI;
  a.ResourceTypeCollection = function () {
    this._array = [];
  };
  a.ResourceTypeCollection.prototype = {
    add: function (c) {
      var b = this._array.length;
      this.insert(b, c);
    },
    insert: function (b, c) {
      Array.insert(this._array, b, c);
    },
    remove: function (b) {
      Array.remove(this._array, b);
    },
    removeAt: function (b) {
      var c = this.getResourceType(b);
      if (c) {
        this.remove(c);
      }
    },
    clear: function () {
      this._array = [];
    },
    get_count: function () {
      return this._array.length;
    },
    forEach: function (d) {
      for (var c = 0, b = this.get_count(); c < b; c++) {
        d(this.getResourceType(c));
      }
    },
    getResourceType: function (b) {
      return this._array[b];
    },
    getResourceTypeByName: function (b) {
      return (
        this.findAll(function (c) {
          return c.get_name() == b;
        }).getResourceType(0) || null
      );
    },
    findAll: function (b) {
      var c = new a.ResourceTypeCollection();
      this.forEach(function (d) {
        if (b(d)) {
          c.add(d);
        }
      });
      return c;
    },
  };
  a.ResourceTypeCollection.registerClass(
    "Telerik.Web.UI.ResourceTypeCollection"
  );
})();
Type.registerNamespace("Telerik.Web.UI");
(function () {
  var a = Telerik.Web.UI;
  a.SchedulerAttributeCollection = function () {
    this._data = {};
    this._keys = [];
  };
  a.SchedulerAttributeCollection.prototype = {
    getAttribute: function (b) {
      return this._data[b];
    },
    setAttribute: function (c, d) {
      this._add(c, d);
      var b = {};
      b[c] = d;
    },
    forEach: function (e) {
      for (var c = 0, b = this.get_count(); c < b; c++) {
        var d = this._keys[c];
        e(d, this.getAttribute(d));
      }
    },
    removeAttribute: function (b) {
      Array.remove(this._keys, b);
      delete this._data[b];
    },
    get_count: function () {
      return this._keys.length;
    },
    clear: function () {
      this._data = {};
      this._keys = [];
    },
    clone: function () {
      var b = new a.SchedulerAttributeCollection();
      this.forEach(function (c, d) {
        b.setAttribute(c, d);
      });
      return b;
    },
    _add: function (b, c) {
      if (Array.indexOf(this._keys, b) < 0) {
        Array.add(this._keys, b);
      }
      this._data[b] = c;
    },
    _load: function (b) {
      for (var c in b) {
        this._add(c, b[c]);
      }
    },
  };
  a.SchedulerAttributeCollection.registerClass(
    "Telerik.Web.UI.SchedulerAttributeCollection"
  );
})();
Type.registerNamespace("Telerik.Web.UI");
Type.registerNamespace("Telerik.Web.UI.Scheduler.Views");
(function (a, b) {
  a.ModelFactory = function (c) {
    this._owner = c;
  };
  a.ModelFactory.prototype = {
    createModel: function () {
      throw Error.notImplemented();
    },
    _getGroupBy: function () {
      throw Error.notImplemented();
    },
    _getGroupByDate: function () {
      return /^\s*date\s*,\s*/i.test(this._getGroupBy());
    },
    _getGroupingResourceName: function () {
      var c = this._getGroupBy();
      if (c.trim().toLowerCase() == "date") {
        throw Error.argument(
          "groupBy",
          "groupBy property should be in one of the following formats: <[Resource name]> or <Date,[Resource name]>. Using only <Date> is not allowed. "
        );
      }
      var d = c.split(",");
      if (d.length > 2) {
        throw Error.argument(
          "groupBy",
          "GroupBy property should be in one of the following formats: <[Resource name]> or <Date,[Resource name]> "
        );
      }
      if (this._getGroupByDate()) {
        if (d.length == 2) {
          return d[1].trim();
        }
        return "";
      }
      return d[0].trim();
    },
    _getEnableGrouping: function () {
      return this._getGroupBy() != "";
    },
  };
  a.ModelFactory.registerClass("Telerik.Web.UI.Scheduler.ModelFactory");
  a.DayModelFactory = function (c) {
    a.DayModelFactory.initializeBase(this, [c]);
  };
  a.DayModelFactory.prototype = {
    createModel: function () {
      if (this._getEnableGrouping()) {
        var c = this._owner.get_dayViewSettings().isVertical || false;
        if (this._getGroupByDate()) {
          c = false;
        }
        return new a.ResourceGroupedDayModel(
          this._owner,
          this._getGroupingResourceName(),
          c
        );
      }
      return new a.DayModel(this._owner);
    },
    _getGroupBy: function () {
      return this._owner.get_dayViewSettings().groupBy || "";
    },
  };
  a.DayModelFactory.registerClass(
    "Telerik.Web.UI.Scheduler.DayModelFactory",
    a.ModelFactory
  );
  a.WeekModelFactory = function (c) {
    a.WeekModelFactory.initializeBase(this, [c]);
  };
  a.WeekModelFactory.prototype = {
    createModel: function () {
      if (this._getEnableGrouping()) {
        var c = this._owner.get_weekViewSettings().isVertical || false;
        if (this._getGroupByDate()) {
          return new a.DateGroupedWeekModel(
            this._owner,
            this._getGroupingResourceName(),
            c
          );
        } else {
          return new a.ResourceGroupedWeekModel(
            this._owner,
            this._getGroupingResourceName(),
            c
          );
        }
      }
      return new a.WeekModel(this._owner);
    },
    _getGroupBy: function () {
      return this._owner.get_weekViewSettings().groupBy || "";
    },
  };
  a.WeekModelFactory.registerClass(
    "Telerik.Web.UI.Scheduler.WeekModelFactory",
    a.ModelFactory
  );
  a.MultiDayModelFactory = function (c) {
    a.MultiDayModelFactory.initializeBase(this, [c]);
  };
  a.MultiDayModelFactory.prototype = {
    createModel: function () {
      if (this._getEnableGrouping()) {
        var c = this._owner.get_multiDayViewSettings().isVertical || false;
        if (this._getGroupByDate()) {
          return new a.DateGroupedMultiDayModel(
            this._owner,
            this._getGroupingResourceName(),
            c
          );
        } else {
          return new a.ResourceGroupedMultiDayModel(
            this._owner,
            this._getGroupingResourceName(),
            c
          );
        }
      }
      return new a.MultiDayModel(this._owner);
    },
    _getGroupBy: function () {
      return this._owner.get_multiDayViewSettings().groupBy || "";
    },
  };
  a.MultiDayModelFactory.registerClass(
    "Telerik.Web.UI.Scheduler.MultiDayModelFactory",
    a.ModelFactory
  );
  a.MonthModelFactory = function (c) {
    a.MonthModelFactory.initializeBase(this, [c]);
  };
  a.MonthModelFactory.prototype = {
    createModel: function () {
      if (this._getEnableGrouping()) {
        var c = this._owner.get_monthViewSettings().isVertical || false;
        if (this._getGroupByDate()) {
          return new b.Month.GroupedByDate.Model(
            this._owner,
            this._getGroupingResourceName(),
            c
          );
        } else {
          return new b.Month.GroupedByResource.Model(
            this._owner,
            this._getGroupingResourceName(),
            c
          );
        }
      }
      return new b.Month.Model(this._owner);
    },
    _getGroupBy: function () {
      return this._owner.get_monthViewSettings().groupBy || "";
    },
  };
  a.MonthModelFactory.registerClass(
    "Telerik.Web.UI.Scheduler.MonthModelFactory",
    a.ModelFactory
  );
  a.TimelineModelFactory = function (c) {
    a.TimelineModelFactory.initializeBase(this, [c]);
  };
  a.TimelineModelFactory.prototype = {
    createModel: function () {
      if (this._getEnableGrouping()) {
        var c = this._owner.get_timelineViewSettings().isVertical || false;
        if (this._getGroupByDate()) {
          return new b.Timeline.GroupedByDate.Model(
            this._owner,
            this._getGroupingResourceName(),
            c
          );
        } else {
          return new b.Timeline.GroupedByResource.Model(
            this._owner,
            this._getGroupingResourceName(),
            c
          );
        }
      }
      return new b.Timeline.Model(this._owner);
    },
    _getGroupBy: function () {
      return this._owner.get_timelineViewSettings().groupBy || "";
    },
  };
  a.TimelineModelFactory.registerClass(
    "Telerik.Web.UI.Scheduler.TimelineModelFactory",
    a.ModelFactory
  );
  a.AgendaModelFactory = function (c) {
    a.AgendaModelFactory.initializeBase(this, [c]);
  };
  a.AgendaModelFactory.prototype = {
    createModel: function () {
      var c = this._owner.get_agendaViewSettings().isVertical || false;
      if (this._getEnableGrouping()) {
        if (this._getGroupByDate()) {
          return new b.Agenda.GroupedByDate.Model(
            this._owner,
            this._getGroupingResourceName(),
            c
          );
        } else {
          return new b.Agenda.GroupedByResource.Model(
            this._owner,
            this._getGroupingResourceName(),
            c
          );
        }
      }
      return new b.Agenda.Model(this._owner, c);
    },
    _getGroupBy: function () {
      return this._owner.get_agendaViewSettings().groupBy || "";
    },
  };
  a.AgendaModelFactory.registerClass(
    "Telerik.Web.UI.Scheduler.AgendaModelFactory",
    a.ModelFactory
  );
  a.YearModelFactory = function (c) {
    a.YearModelFactory.initializeBase(this, [c]);
  };
  a.YearModelFactory.prototype = {
    createModel: function () {
      var c = this._owner.get_yearViewSettings().isVertical || false;
      if (this._getEnableGrouping()) {
        if (this._getGroupByDate()) {
          throw new Error("Date grouped YearView is not supported");
        } else {
          return new b.Year.GroupedByResource.Model(
            this._owner,
            this._getGroupingResourceName(),
            c
          );
        }
      }
      return new b.Year.Model(this._owner);
    },
    _getGroupBy: function () {
      return this._owner.get_yearViewSettings().groupBy || "";
    },
  };
  a.YearModelFactory.registerClass(
    "Telerik.Web.UI.Scheduler.YearModelFactory",
    a.ModelFactory
  );
})(Telerik.Web.UI.Scheduler, Telerik.Web.UI.Scheduler.Views);
(function (b) {
  var a = Telerik.Web.UI;
  a.SchedulerWebServiceSettings = function (c) {
    a.SchedulerWebServiceSettings.initializeBase(this, [c]);
    if (!this._method) {
      this._method = "GetAppointments";
    }
    if (c.deleteAppointmentMethod != b) {
      this._deleteAppointmentMethod = c.deleteAppointmentMethod;
    } else {
      this._deleteAppointmentMethod = "DeleteAppointment";
    }
    if (c.insertAppointmentMethod != b) {
      this._insertAppointmentMethod = c.insertAppointmentMethod;
    } else {
      this._insertAppointmentMethod = "InsertAppointment";
    }
    if (c.updateAppointmentMethod != b) {
      this._updateAppointmentMethod = c.updateAppointmentMethod;
    } else {
      this._updateAppointmentMethod = "UpdateAppointment";
    }
    if (c.getResourcesMethod != b) {
      this._getResourcesMethod = c.getResourcesMethod;
    } else {
      this._getResourcesMethod = "GetResources";
    }
    if (c.createRecurrenceExceptionMethod != b) {
      this._createRecurrenceExceptionMethod = c.createRecurrenceExceptionMethod;
    } else {
      this._createRecurrenceExceptionMethod = "CreateRecurrenceException";
    }
    if (c.removeRecurrenceExceptionsMethod != b) {
      this._removeRecurrenceExceptionsMethod =
        c.removeRecurrenceExceptionsMethod;
    } else {
      this._removeRecurrenceExceptionsMethod = "RemoveRecurrenceExceptions";
    }
    if (c.updateMode != b) {
      this._updateMode = c.updateMode;
    } else {
      this._updateMode = a.AppointmentUpdateMode.Batch;
    }
    if (c.resourcesPopulated != b) {
      this._resourcesPopulated = c.resourcesPopulated;
    } else {
      this._resourcesPopulated = true;
    }
  };
  a.SchedulerWebServiceSettings.prototype = {
    get_getAppointmentsMethod: function () {
      return this._method;
    },
    set_getAppointmentsMethod: function (c) {
      this._method = c;
    },
    get_deleteAppointmentMethod: function () {
      return this._deleteAppointmentMethod;
    },
    set_deleteAppointmentMethod: function (c) {
      this._deleteAppointmentMethod = c;
    },
    get_insertAppointmentMethod: function () {
      return this._insertAppointmentMethod;
    },
    set_insertAppointmentMethod: function (c) {
      this._insertAppointmentMethod = c;
    },
    get_updateAppointmentMethod: function () {
      return this._updateAppointmentMethod;
    },
    set_updateAppointmentMethod: function (c) {
      this._updateAppointmentMethod = c;
    },
    get_getResourcesMethod: function () {
      return this._getResourcesMethod;
    },
    set_getResourcesMethod: function (c) {
      this._getResourcesMethod = c;
    },
    get_createRecurrenceExceptionMethod: function () {
      return this._createRecurrenceExceptionMethod;
    },
    set_createRecurrenceExceptionMethod: function (c) {
      this._createRecurrenceExceptionMethod = c;
    },
    get_removeRecurrenceExceptionsMethod: function () {
      return this._removeRecurrenceExceptionsMethod;
    },
    set_removeRecurrenceExceptionsMethod: function (c) {
      this._removeRecurrenceExceptionsMethod = c;
    },
    get_resourcesPopulated: function () {
      return this._resourcesPopulated;
    },
    set_resourcesPopulated: function (c) {
      this._resourcesPopulated = c;
    },
    get_isEmpty: function () {
      return a.SchedulerWebServiceSettings.callBaseMethod(this, "get_isEmpty");
    },
    get_isOData: function () {
      return false;
    },
    get_updateMode: function () {
      return this._updateMode;
    },
    get_isWcf: function () {
      return true;
    },
    get_isInBatchMode: function () {
      return this.get_updateMode() == a.AppointmentUpdateMode.Batch;
    },
  };
  a.SchedulerWebServiceSettings.registerClass(
    "Telerik.Web.UI.SchedulerWebServiceSettings",
    a.WebServiceSettings
  );
})();
Type.registerNamespace("Telerik.Web.UI");
(function (a) {
  a.ISchedulerModel = function () {};
  a.ISchedulerModel.prototype = {
    getTimeSlotFromDomElement: function (b) {
      throw Error.notImplemented();
    },
    getTimeSlotForAppointment: function (b) {
      throw Error.notImplemented();
    },
    get_isAllDayAppointment: function (b) {
      throw Error.notImplemented();
    },
    updateResizingAppointmentSize: function (b, c) {},
    updateDraggingAppointmentSize: function (b, d, c) {
      throw Error.notImplemented();
    },
    get_supportsSlotSelection: function () {
      return false;
    },
    get_visibleRangeStart: function () {
      throw Error.notImplemented();
    },
    get_visibleRangeEnd: function () {
      throw Error.notImplemented();
    },
    get_supportsFullTime: function () {
      return true;
    },
  };
  a.ISchedulerModel.registerInterface("Telerik.Web.UI.ISchedulerModel");
  a.ISchedulerTimeSlot = function () {};
  a.ISchedulerTimeSlot.prototype = {
    get_index: function () {
      throw Error.notImplemented();
    },
    get_isAllDay: function () {
      throw Error.notImplemented();
    },
    get_startTime: function () {
      throw Error.notImplemented();
    },
    get_endTime: function () {
      throw Error.notImplemented();
    },
    get_duration: function () {
      throw Error.notImplemented();
    },
    get_durationInMinutes: function () {
      throw Error.notImplemented();
    },
    get_domElement: function () {
      throw Error.notImplemented();
    },
  };
  a.ISchedulerTimeSlot.registerInterface("Telerik.Web.UI.ISchedulerTimeSlot");
})(Telerik.Web.UI);
Type.registerNamespace("Telerik.Web.UI.Scheduler");
Type.registerNamespace("Telerik.Web.UI.Scheduler.KeyboardNavigation");
(function () {
  var b = Telerik.Web.UI.Scheduler;
  var a = $telerik.$;
  var g = { next: 1, previous: 0 },
    e = { inline: 1, full: 0 },
    f = -1,
    d = { save: 0, cancel: 1, options: 2 },
    c = { del: 0, edit: 1 };
  b.KeyboardNavigation = function (l) {
    var n = this;
    var m = (this._scheduler = l);
    var h = !this._scheduler.get_webServiceSettings().get_isEmpty();
    this._tabNavigator = new b.KeyboardNavigation.Modules.TabNavigator(l);
    this._commandsModule = new b.KeyboardNavigation.Modules.Commands(l);
    this._commandsModule.bind(
      {
        onAppointmentCommand: function (o) {
          var q = this._tabNavigator.get_selectedAppointment();
          if (q) {
            var p = a.Event("click");
            p.eventMapTarget = q.get_element();
            switch (o) {
              case c.edit:
                m._onAppointmentDoubleClick(p);
                break;
              case c.del:
                m._onAppointmentDeleteClick(p);
                break;
            }
          }
        },
        onViewChange: function (o) {
          var p = Telerik.Web.UI.SchedulerViewType;
          switch (o) {
            case p.DayView:
              m._onDayViewTabClick(a.Event("click"));
              break;
            case p.WeekView:
              m._onWeekViewTabClick(a.Event("click"));
              break;
            case p.MonthView:
              m._onMonthViewTabClick(a.Event("click"));
              break;
            case p.AgendaView:
              m._onAgendaViewTabClick(a.Event("click"));
              break;
          }
        },
        onEditFormCommand: function (o) {
          if (!this._commandsModule.get_isEditing()) {
            return;
          }
          if (!this._commandsModule.get_editForm()) {
            this._commandsModule.set_editForm(m._getInlineTemplate());
            f = e.inline;
          }
          var p = this._commandsModule.get_editForm();
          switch (o) {
            case d.save:
              p._saveClicked();
              break;
            case d.cancel:
              p._cancelClicked();
              break;
            case d.options:
              if (f == e.inline) {
                p._moreClicked();
              }
              break;
          }
        },
        onEditFormShown: function (o, q) {
          var p = q != undefined ? q : e.inline;
          this._commandsModule.set_isEditing(true);
          this._commandsModule.set_editForm(o);
          this._commandsModule.set_editFormType(p);
        },
        onEditFormHidden: function () {
          this._commandsModule.set_isEditing(false);
          this._commandsModule.set_editFormType(-1);
          m.get_element().focus();
        },
        onTimeFrameChange: function (o) {
          if (o == 1) {
            m._onNextSchedulerDayClick(a.Event("click"));
          } else {
            m._onPreviousSchedulerDayClick(a.Event("click"));
          }
        },
        onNavigation: function () {
          this._tabNavigator.reset();
        },
      },
      this
    );
    this._navigator = new b.KeyboardNavigation.Modules.Navigator(
      this._commandsModule,
      l
    );
    if (a(".rsAdvancedEdit", this._scheduler.get_element()).is(":visible")) {
      var i = {
        _cancelClicked: function () {
          this._buttonClicked(".rsAdvEditCancel");
        },
        _saveClicked: function () {
          this._buttonClicked(".rsAdvEditSave");
        },
        _moreClicked: function () {},
        _buttonClicked: function (p) {
          var o = new Function(
            a(p, n._scheduler.get_element()).attr("href").split(":")[1]
          );
          o();
        },
      };
      this._commandsModule.trigger("onEditFormShown", i, e.full);
    } else {
      if (
        a(".rsAptEditSizingWrapper", this._scheduler.get_element()).is(
          ":visible"
        )
      ) {
        var j = {
          _cancelClicked: function () {
            this._buttonClicked(".rsAptEditCancel");
          },
          _saveClicked: function () {
            this._buttonClicked(".rsAptEditConfirm");
          },
          _moreClicked: function () {
            this._buttonClicked(".rsAptEditMore");
          },
          _buttonClicked: function (p) {
            var o = new Function(
              a(p, n._scheduler.get_element()).attr("href").split(":")[1]
            );
            o();
          },
        };
        this._commandsModule.trigger("onEditFormShown", j);
      } else {
        this._navigator.init();
      }
    }
    var k = this;
    if (h) {
      this._scheduler.add_navigationComplete(function (p, o) {
        k.reset(o);
      });
    }
  };
  b.KeyboardNavigation.prototype = {
    _getNavigator: function () {
      return this._navigator;
    },
    _getCommandsModule: function () {
      return this._commandsModule;
    },
    _getTabNavigator: function () {
      return this._tabNavigator;
    },
    dispose: function () {
      this._commandsModule = null;
      this._navigator = null;
    },
    reset: function (h) {
      setTimeout(function () {
        Telerik.Web.UI.Scheduler.KeyboardNavigation.Models.reset();
      }, 10);
      var i = this;
      if (h && h.get_command() <= 3) {
        setTimeout(function () {
          i._navigator.init();
        }, 600);
      }
      this._tabNavigator.reset();
    },
    parse: function (i) {
      var j = this._getNavigator(),
        h = this._getCommandsModule(),
        k = this._getTabNavigator();
      if (!j.isCommandKey(i)) {
        if (j.isNavigationCommand(i) && !h.get_isEditing() && j.get_model()) {
          h.trigger("onNavigation");
          j.get_model().handle(i);
        } else {
          if (k.isTabCommand(i) && !h.get_isEditing() && j.get_model()) {
            k.handle(i);
          } else {
            h.handle(i);
          }
        }
      }
    },
  };
  b.KeyboardNavigation.Modules = {};
  b.KeyboardNavigation.Models = {};
  (function () {
    var h = b.KeyboardNavigation.Modules;
    h.makeEventHandler = function (k) {
      var j = {};
      a.extend(k, {
        bind: function (m, l) {
          a.each(m, function (n, o) {
            i(n, o, l);
          });
        },
        trigger: function (m) {
          var n = j[m];
          for (var o = 0; o < n.length; o++) {
            var l = Array.prototype.slice.call(arguments);
            l.shift();
            n[o].upload.apply(n[o].context, l);
          }
        },
      });
      function i(m, n, l) {
        var o = j[m] || [];
        o.push({ upload: n, context: l });
        j[m] = o;
      }
    };
    h.Commands = function (j) {
      h.makeEventHandler(this);
      var k = Telerik.Web.UI.SchedulerViewType,
        i = false;
      this._scheduler = j;
      a.extend(this, {
        handle: function (l) {
          if (l.altKey) {
            this._handleAltKey(l);
          } else {
            if (l.ctrlKey) {
              this._handleCtrlKey(l);
            } else {
              switch (l.keyCode) {
                case Sys.UI.Key.enter:
                  if (!a(l.target).is("textarea")) {
                    this.trigger("onAppointmentCommand", c.edit);
                  }
                  break;
                case Sys.UI.Key.del:
                  if (!a(l.target).is("textarea")) {
                    this.trigger("onAppointmentCommand", c.del);
                  }
                  break;
                case 27:
                  if (i) {
                    this.get_editForm()._cancelClicked();
                    l.preventDefault();
                  }
                  break;
              }
            }
          }
        },
        set_editForm: function (l) {
          this._editForm = l;
          i = true;
        },
        get_editForm: function () {
          return this._editForm;
        },
        set_editFormType: function (l) {
          f = l;
        },
        get_isEditing: function () {
          return i;
        },
        set_isEditing: function (l) {
          i = l;
        },
        _handleAltKey: function (l) {
          switch (l.keyCode) {
            case 107:
            case 187:
              this.trigger("onViewChange", k.MonthView);
              break;
            case 109:
            case 189:
              this.trigger("onViewChange", k.WeekView);
              break;
            case 192:
              this.trigger("onViewChange", k.AgendaView);
              break;
            case 83:
              this.trigger("onEditFormCommand", d.save);
              break;
            case 67:
              this.trigger("onEditFormCommand", d.cancel);
              break;
            case 79:
              this.trigger("onEditFormCommand", d.options);
              break;
            default:
              if (l.keyCode >= 48 && l.keyCode <= 57) {
                this.trigger("onViewChange", k.DayView);
              }
              break;
          }
          switch (this._scheduler.get_selectedView()) {
            case k.WeekView:
              switch (l.keyCode) {
                case Sys.UI.Key.down:
                  this.trigger("onTimeFrameChange", g.next);
                  break;
                case Sys.UI.Key.up:
                  this.trigger("onTimeFrameChange", g.previous);
                  break;
              }
              break;
            case k.MonthView:
              switch (l.keyCode) {
                case Sys.UI.Key.pageDown:
                  this.trigger("onTimeFrameChange", g.next);
                  break;
                case Sys.UI.Key.pageUp:
                  this.trigger("onTimeFrameChange", g.previous);
                  break;
              }
              break;
          }
        },
        _handleCtrlKey: function (l) {
          switch (this._scheduler.get_selectedView()) {
            case k.DayView:
              switch (l.keyCode) {
                case Sys.UI.Key.left:
                  this.trigger("onTimeFrameChange", g.previous);
                  break;
                case Sys.UI.Key.right:
                  this.trigger("onTimeFrameChange", g.next);
                  break;
              }
              break;
          }
        },
      });
    };
    h.Navigator = function (i, j) {
      this._model = null;
      this._commandsModule = i;
      this._scheduler = j;
    };
    h.Navigator.prototype = {
      init: function () {
        this._model = b.KeyboardNavigation.Models.getModel(this._scheduler);
        if (this._model) {
          h.makeEventHandler(this._model);
          this._model.bind(
            {
              onRowSelection: function (i) {
                if (
                  this._scheduler._rowSelectionState.selectedSlots.length > 0
                ) {
                  this._scheduler._processRowSelection(i.get_domElement());
                }
              },
            },
            this
          );
          this._model._commandsModule = this._commandsModule;
        }
      },
      get_model: function () {
        return this._model;
      },
      isNavigationCommand: function (j) {
        var i = j.keyCode,
          l = j.altKey || j.ctrlKey,
          k = Sys.UI.Key;
        if (l) {
          j.preventDefault();
        }
        return !l && (i == k.down || i == k.up || i == k.left || i == k.right);
      },
      isCommandKey: function (i) {
        return i.keyCode == 16 || i.keyCode == 17 || i.keyCode == 18;
      },
    };
    h.TabNavigator = function (i) {
      var j = new h.TabNavigator.appointmentsWrapper(i);
      this._scheduler = i;
      a.extend(this, {
        isTabCommand: function (k) {
          return (
            k.keyCode == 9 &&
            (a(k.target).hasClass("RadScheduler") ||
              a(k.target).parents().hasClass("RadScheduler"))
          );
        },
        handle: function (l) {
          j.update(l);
          var k = j.get_nextAppointment();
          if (k) {
            l.preventDefault();
            this._scheduler._selectAppointment(k, k.get_element());
          } else {
            this.reset();
          }
        },
        reset: function () {
          this._scheduler._clearAppointmentSelection();
        },
        get_selectedAppointment: function () {
          return this._scheduler._lastSelectedApt;
        },
        get_wrapper: function () {
          return j;
        },
      });
    };
    h.TabNavigator.appointmentsWrapper = function (i) {
      var j = this;
      this._array = null;
      this._sorted = false;
      this._currentIndex = -1;
      this._scheduler = i;
      if (!this._scheduler.get_webServiceSettings().get_isEmpty()) {
        this._scheduler.add_appointmentsPopulated(function (l, k) {
          j.init();
        });
      }
      this.init();
    };
    h.TabNavigator.appointmentsWrapper.prototype = {
      init: function () {
        var n = this._scheduler.get_appointments()._array,
          m = n.length,
          l = 0;
        this._array = [];
        for (var k = 0; k < m; k++) {
          if (n[k].get_element()) {
            this._array[l++] = n[k];
          }
        }
      },
      update: function (j) {
        var i = this._array.length;
        if (this._currentIndex < 0 || this._currentIndex > i - 1) {
          this._currentIndex = j.shiftKey ? i - 1 : 0;
        } else {
          this._currentIndex += j.shiftKey ? -1 : 1;
        }
      },
      get_sortedAppointments: function () {
        if (!this._sorted) {
          this._array = this._sort(this._array);
          this._sorted = true;
        }
        return this._array;
      },
      get_nextAppointment: function () {
        return this.get_sortedAppointments()[this._currentIndex];
      },
      _sort: function (j) {
        if (j.length <= 1) {
          return j;
        }
        var m = [];
        var k = [];
        var n = j[Math.round(j.length / 2)];
        Array.remove(j, n);
        for (var l = 0; l < j.length; l++) {
          if (j[l].get_start() < n.get_start()) {
            m[m.length] = j[l];
          } else {
            k[k.length] = j[l];
          }
        }
        return this._concat(this._sort(m), n, this._sort(k));
      },
      _concat: function (k, l, i) {
        var m = [];
        var j = function (n) {
          for (var o = 0; o < n.length; o++) {
            m[m.length] = n[o];
          }
        };
        j(k);
        m[m.length] = l;
        j(i);
        return m;
      },
    };
  })();
  (function () {
    var i = false,
      h = true;
    b.KeyboardNavigation.Models.reset = function () {
      h = true;
    };
    b.KeyboardNavigation.Model = function (j) {
      this._scheduler = j;
      (this._nav = null),
        (this._scrollOptions = null),
        (this._shiftPressed = false),
        (this._firstMove = true);
    };
    b.KeyboardNavigation.Model.prototype = {
      initialize: function () {
        this.initializeNavigator();
        this.initScrollProperties();
      },
      initScrollProperties: function () {
        var j = a(".rsContentScrollArea", this._scheduler.get_element())[0];
        this._scrollOptions = {
          rowHeight: parseInt(this._scheduler.get_rowHeight(), 10),
          scrollElement: j,
          scrollAreaHeight: a(j).height(),
        };
      },
      initializeNavigator: function () {
        var l = (this._nav = {});
        h = true;
        var k = this._scheduler.get_activeModel();
        var j = this.createMap(k._getContentTable(), function (m) {
          h = false;
          var o = m.get_targetSlot().get_domElement(),
            n = o.cellIndex,
            p = o.parentNode.rowIndex;
          l.x = p;
          l.y = n;
        });
        l.map = j;
        l.model = k;
        l.slot = k.getTimeSlotFromDomElement(j[0][0]);
        l.x = 0;
        l.y = 0;
      },
      createMap: function (q, r) {
        var p = q.getElementsByTagName("tr"),
          o = p.length,
          n = new Array(o);
        this._scheduler.add_timeSlotClick(function (s, j) {
          r(j);
        });
        for (var l = 0; l < o; l++) {
          var k = p[l].getElementsByTagName("td");
          n[l] = new Array(k.length);
          for (var m = 0; m < k.length; m++) {
            n[l][m] = k[m];
          }
        }
        return n;
      },
      updateScroll: function () {
        var k = this._scrollOptions,
          j = (this._nav.x + 1) * k.rowHeight;
        if (j > k.scrollAreaHeight) {
          k.scrollElement.scrollTop += k.rowHeight;
        } else {
          if (k.scrollElement.scrollTop > 0) {
            k.scrollElement.scrollTop -= k.rowHeight;
          }
        }
      },
      select: function () {
        var k = this.get_nav();
        var j = k.model;
        if (!i) {
          this._scheduler._clearSlotSelection();
        }
        var l = j.getTimeSlotFromDomElement(k.map[k.x][k.y]);
        this.selectSlot(l);
        k.slot = l;
      },
      selectSlot: function (k) {
        var j = this._scheduler._rowSelectionState;
        if (k && k.set_selected) {
          k.set_selected(true);
          if (!i || !j.rowSelectionStartSlot) {
            j.rowSelectionStartSlot = k;
          }
          j.isRowSelection = true;
          j.selectedSlots.push(k);
        }
      },
    };
    b.KeyboardNavigation.Model.registerClass(
      "Telerik.Web.UI.Scheduler.KeyboardNavigation.Model"
    );
    b.KeyboardNavigation.DayModel = function (j) {
      b.KeyboardNavigation.DayModel.initializeBase(this, [j]);
    };
    b.KeyboardNavigation.DayModel.prototype = {
      get_nav: function () {
        return this._nav;
      },
      handle: function (j) {
        var k = false,
          l = Sys.UI.Key;
        var m = this.get_nav();
        i = j.shiftKey;
        switch (j.keyCode) {
          case l.down:
            if (m.x < m.map.length - 1) {
              m.x++;
              k = true;
              this.down();
            }
            break;
          case l.up:
            if (m.x > 0) {
              m.x--;
              k = true;
              this.up();
            }
            break;
          case l.left:
            if (!i) {
              this.left();
            }
            break;
          case l.right:
            if (!i) {
              this.right();
            }
            break;
        }
        if (i && k) {
          this.trigger("onRowSelection", m.slot);
        }
      },
      left: function () {
        this._commandsModule.trigger("onTimeFrameChange", g.previous);
      },
      right: function () {
        this._commandsModule.trigger("onTimeFrameChange", g.next);
      },
      up: function () {
        this.select();
        this.updateScroll(true);
      },
      down: function () {
        this.select();
        this.updateScroll(false);
      },
    };
    b.KeyboardNavigation.DayModel.registerClass(
      "Telerik.Web.UI.Scheduler.KeyboardNavigation.DayModel",
      b.KeyboardNavigation.Model
    );
    b.KeyboardNavigation.WeekModel = function (j) {
      b.KeyboardNavigation.WeekModel.initializeBase(this, [j]);
      this._move = { day: 0, week: 1 };
    };
    b.KeyboardNavigation.WeekModel.prototype = {
      get_nav: function () {
        return this._nav;
      },
      handle: function (j) {
        var k = Sys.UI.Key;
        var l = this._move;
        var m = this.get_nav();
        i = j.shiftKey;
        switch (j.keyCode) {
          case k.down:
            if (m.x < m.map.length - 1) {
              m.x++;
              this.down();
            }
            break;
          case k.up:
            if (m.x > 0) {
              m.x--;
              this.up();
            }
            break;
          case k.left:
            if (h) {
              m.y = m.map[0].length;
            }
            if (m.y > 0) {
              m.y--;
              this.left(l.day);
            } else {
              if (!i) {
                this.left(l.week);
              }
            }
            break;
          case k.right:
            if (h) {
              m.y = -1;
            }
            if (m.y < m.map[0].length - 1) {
              m.y++;
              this.right(l.day);
            } else {
              if (!i) {
                this.right(l.week);
              }
            }
            break;
        }
        h = false;
        if (i) {
          this.trigger("onRowSelection", m.slot);
        }
      },
      left: function (j) {
        if (j == this._move.day) {
          this.select();
        } else {
          this._commandsModule.trigger("onTimeFrameChange", g.previous);
        }
      },
      right: function (j) {
        if (j == this._move.day) {
          this.select();
        } else {
          this._commandsModule.trigger("onTimeFrameChange", g.next);
        }
      },
      up: function () {
        this.select();
        this.updateScroll(true);
      },
      down: function () {
        this.select();
        this.updateScroll(false);
      },
    };
    b.KeyboardNavigation.WeekModel.registerClass(
      "Telerik.Web.UI.Scheduler.KeyboardNavigation.WeekModel",
      b.KeyboardNavigation.Model
    );
    b.KeyboardNavigation.MonthModel = function (j) {
      b.KeyboardNavigation.MonthModel.initializeBase(this, [j]);
      this._move = { day: 0, month: 1 };
    };
    b.KeyboardNavigation.MonthModel.prototype = {
      get_nav: function () {
        return this._nav;
      },
      handle: function (j) {
        var k = Sys.UI.Key;
        var l = this._move;
        var m = this.get_nav();
        i = j.shiftKey;
        switch (j.keyCode) {
          case k.down:
            if (m.x < m.map.length - 1) {
              m.x++;
              this.down();
            }
            break;
          case k.up:
            if (m.x > 0) {
              m.x--;
              this.up();
            }
            break;
          case k.left:
            if (h) {
              m.y = m.map[0].length;
            }
            if (m.y > 0) {
              m.y--;
              this.left(l.day);
            } else {
              if (m.x > 0) {
                m.x--;
                m.y = m.map[0].length - 1;
                this.up();
              } else {
                if (!i) {
                  this.left(l.month);
                }
              }
            }
            break;
          case k.right:
            if (h) {
              m.y = -1;
            }
            if (m.y < m.map[0].length - 1) {
              m.y++;
              this.right(l.day);
            } else {
              if (m.x < m.map.length) {
                m.x++;
                m.y = 0;
                this.down();
              } else {
                if (!i) {
                  this.right(l.month);
                }
              }
            }
            break;
        }
        h = false;
        if (i) {
          this.trigger("onRowSelection", m.slot);
        }
      },
      left: function (j) {
        if (j == this._move.day) {
          this.select();
        } else {
          this._commandsModule.trigger("onTimeFrameChange", g.previous);
        }
      },
      right: function (j) {
        if (j == this._move.day) {
          this.select();
        } else {
          this._commandsModule.trigger("onTimeFrameChange", g.next);
        }
      },
      up: function () {
        this.select();
        this.updateScroll(true);
      },
      down: function () {
        this.select();
        this.updateScroll(false);
      },
    };
    b.KeyboardNavigation.MonthModel.registerClass(
      "Telerik.Web.UI.Scheduler.KeyboardNavigation.MonthModel",
      b.KeyboardNavigation.Model
    );
    b.KeyboardNavigation.AgendaModel = function (j) {
      b.KeyboardNavigation.AgendaModel.initializeBase(this, [j]);
    };
    b.KeyboardNavigation.AgendaModel.prototype = {
      initializeNavigator: function () {
        var m = this._scheduler;
        var k = m.get_activeModel(),
          j = k._getContentTable();
        var n = this;
        var l = (this._nav = {});
        h = true;
        this.createMap(j, function (p) {
          var o = p.get_appointment(),
            q = o.get_element(),
            r = a(q).parents("tr.rsAgendaRow")[0];
          l.x = r.rowIndex;
          m._lastSelectedApt = o;
        });
        if (!m.get_webServiceSettings().get_isEmpty()) {
          m.add_appointmentsPopulated(function (p, o) {
            n.updateMap(j);
          });
        }
        l.model = k;
        l.x = 0;
      },
      createMap: function (k, j) {
        this._scheduler.add_appointmentClick(function (m, l) {
          j(l);
        });
        this.updateMap(k);
      },
      updateMap: function (n) {
        var m = n.getElementsByTagName("tr"),
          l = m.length,
          k = new Array(l);
        h = true;
        for (var j = 0; j < l; j++) {
          k[j] = m[j];
        }
        this._nav.map = k;
        this._nav.x = 0;
      },
      get_nav: function () {
        return this._nav;
      },
      handle: function (j) {
        var k = Sys.UI.Key;
        var l = this.get_nav();
        switch (j.keyCode) {
          case k.down:
            if (h) {
              l.x = 0;
            } else {
              if (l.x < l.map.length - 1) {
                l.x++;
              }
            }
            this.down();
            break;
          case k.up:
            if (h) {
              l.x = l.map.length - 1;
            } else {
              if (l.x > 0) {
                l.x--;
              }
            }
            this.up();
            break;
          case k.left:
            this.left();
            break;
          case k.right:
            this.right();
            break;
        }
        h = false;
      },
      left: function () {
        this._commandsModule.trigger("onTimeFrameChange", g.previous);
      },
      right: function () {
        this._commandsModule.trigger("onTimeFrameChange", g.next);
      },
      up: function () {
        this.selectAppointment();
        this.updateScroll(true);
      },
      down: function () {
        this.selectAppointment();
        this.updateScroll(false);
      },
      selectAppointment: function () {
        var m = this.get_nav();
        var l = m.model,
          j = a(m.map[m.x]).find(".rsApt")[0],
          k = l.getAppointmentFromDomElement(j);
        if (k) {
          this._scheduler._selectAppointment(k, j);
        }
      },
    };
    b.KeyboardNavigation.AgendaModel.registerClass(
      "Telerik.Web.UI.Scheduler.KeyboardNavigation.AgendaModel",
      b.KeyboardNavigation.Model
    );
    b.KeyboardNavigation.Models.getModel = function (k) {
      var l = k.get_selectedView();
      var m = Telerik.Web.UI.SchedulerViewType;
      var j;
      switch (l) {
        case m.DayView:
          j = new b.KeyboardNavigation.DayModel(k);
          break;
        case m.WeekView:
          j = new b.KeyboardNavigation.WeekModel(k);
          break;
        case m.MonthView:
          j = new b.KeyboardNavigation.MonthModel(k);
          break;
        case m.AgendaView:
          j = new b.KeyboardNavigation.AgendaModel(k);
          break;
        default:
          j = null;
      }
      if (j) {
        j.initialize();
      }
      return j;
    };
  })();
})();

/* END Telerik.Web.UI.Scheduler.RadSchedulerScripts.js */
/* START Telerik.Web.UI.Scheduler.Views.Month.Model.js */
Type.registerNamespace("Telerik.Web.UI.Scheduler.Views.Month");
(function (a, c, d, e) {
  var h = 60000,
    g = h * 60,
    f = g * 24,
    i = f * 7,
    b = d.DateTime;
  e.ModelBase = function (j) {
    this._owner = j;
    this._settings = this._owner.get_monthViewSettings();
  };
  e.ModelBase.prototype = {
    get_visibleRangeStart: function () {
      var m = this._owner.get_selectedDate(),
        j = d.DateHelper.getFirstDayOfMonth(m),
        l = d.DateHelper.getStartOfWeek(j, this._owner.get_firstDayOfWeek()),
        k = d.DateHelper.getEndOfWeek(
          l,
          this._owner.get_firstDayOfWeek(),
          this.get_weekLength()
        ),
        n;
      if (k.getMonth() == m.getMonth()) {
        n = l;
      } else {
        n = d.DateTime.add(l, 7 * f);
      }
      return n;
    },
    get_visibleRangeEnd: function () {
      var j = d.DateHelper.getLastDayOfMonth(this._owner.get_selectedDate());
      return d.DateHelper.getEndOfWeek(
        j,
        this._owner.get_firstDayOfWeek(),
        this.get_weekLength()
      );
    },
    get_nextPeriodDate: function () {
      var j = this._owner.get_selectedDate();
      return new Date(j.getFullYear(), j.getMonth(), 32);
    },
    get_previousPeriodDate: function () {
      var j = this._owner.get_selectedDate();
      return new Date(j.getFullYear(), j.getMonth(), 0);
    },
    get_weekLength: function () {
      return d.DateHelper.getWeekLength(
        this._owner.get_selectedDate(),
        this._owner.get_firstDayOfWeek(),
        this._owner.get_lastDayOfWeek()
      );
    },
    get_headerDateFormat: function () {
      return this._settings.headerDateFormat || "MMM, yyyy";
    },
    get_dayHeaderDateFormat: function () {
      return this._settings.dayHeaderDateFormat || "dd";
    },
    get_firstDayHeaderDateFormat: function () {
      return this._settings.firstDayHeaderDateFormat || "d MMM";
    },
    get_visibleAppointmentsPerDay: function () {
      return this._settings.visibleAppointmentsPerDay || 2;
    },
    updateDraggingAppointmentSize: function (j, r, m) {
      var q = this._owner,
        s = r.parentNode,
        n = s.cells[s.cells.length - 1],
        k = j.offsetLeft,
        o = n.offsetLeft + n.offsetWidth,
        p = Math.min(o - r.offsetLeft - k, q._draggingAppointmentWidth),
        l = Math.max(0, q._draggingSourceCellOffset - m.cellIndex);
      if (l > 0) {
        p -= l * r.offsetWidth;
      }
      j.style.width = p + "px";
    },
    updateResizingAppointmentSize: function (s, q) {
      var j = q.resizingElement,
        o = j.parentNode.parentNode,
        p = o.offsetLeft,
        t = s.offsetLeft,
        u = t + s.offsetWidth,
        w;
      if (q.resizeFromStart) {
        var k = q.resizingAppointment._domElements,
          r = o.parentNode.cells,
          m = r[r.length - 1],
          n = m.offsetLeft + m.offsetWidth,
          l = p - t,
          v = l * -1;
        if (a.inArray(j, k) == k.length - 1) {
          w = q.originalSize.width + l;
        } else {
          w = n - t;
        }
        if (w <= 1) {
          return;
        }
        j.style.left = v + "px";
      } else {
        w = u - p;
      }
      if (w <= 1) {
        return;
      }
      j.style.width = w + "px";
    },
    _getResizingPlaneDelta: function (l, j) {
      var m = l.parentNode.rowIndex,
        k = j.parentNode.rowIndex;
      return m - k;
    },
    get_startOfMovedAppointment: function (j, m, l) {
      var k = b.subtract(j.get_start(), l.get_startTime());
      return b.add(m.get_startTime(), k);
    },
    getDurationOfMovedAppointment: function (j) {
      return b.subtract(j.get_end(), j.get_start());
    },
    _getSourceCellOffsetOfMovedAppointment: function (j, k) {
      return k.cellIndex - a(j).parents("td")[0].cellIndex;
    },
    _getSourceRowOffsetOfMovedAppointment: function (j, k) {
      return 0;
    },
    _getResizingAppointmentOriginalSize: function (l, k) {
      var j = k._domElements;
      var m = { width: j[j.length - 1].offsetWidth };
      if (!this._owner._renderingManager) {
        m.elements = this._owner._resizeHelper._getAppointmentOriginalElements(
          k
        );
      }
      return m;
    },
    restoreResizingAppointmentSize: function (j) {
      var k = this._owner;
      if (k._renderingManager) {
        k._repaintAppointment(j.resizingAppointment);
      } else {
        k._resizeHelper._restoreAppointmentOriginalElements(j);
      }
      j.resizingElement = null;
      j.resizingAppointment = null;
      j.originalSize = null;
    },
    _areTimeSlotsInAscendingOrder: function (j, k) {
      return j.get_rawIndex().dayIndex < k.get_rawIndex().dayIndex;
    },
    _getTimeSlotIndices: function (m) {
      var j = d.DateTime.subtract(m, this.get_visibleRangeStart()),
        l = Math.floor(j / i),
        n = j - l * i,
        k = Math.floor(n / f);
      return { dayIndex: this.get_weekLength() * l + k };
    },
    _getContentTable: function () {
      if (!this._contentTable) {
        this._contentTable = a(
          "div.rsTopWrap table.rsContentTable",
          this._owner.get_element()
        )[0];
      }
      return this._contentTable;
    },
    isVisible: function (j) {
      return j._isInRange(
        this.get_visibleRangeStart(),
        this.get_visibleRangeEnd()
      );
    },
    get_supportsSlotSelection: function () {
      return true;
    },
    getTimeSlotsBetween: function (j, m) {
      if (!(j && m)) {
        return [];
      }
      var k = j.get_rawIndex(),
        n = m.get_rawIndex();
      if (k.modelIndex != n.modelIndex) {
        return [];
      }
      if (k.dayIndex == n.dayIndex) {
        return [j];
      }
      if (!this._areTimeSlotsInAscendingOrder(j, m)) {
        var r = j;
        j = m;
        m = r;
        k = j.get_rawIndex();
        n = m.get_rawIndex();
      }
      var p = [j],
        q = n.dayIndex - k.dayIndex,
        o = j;
      for (var l = 0; l < q; l++) {
        o = this._getNextTimeSlot(o);
        if (o) {
          p.push(o);
        }
      }
      return p;
    },
    _getNextTimeSlot: function (m) {
      var k = m.get_rawIndex(),
        j = {
          dayIndex: m.get_rawIndex().dayIndex + 1,
          modelIndex: k.modelIndex,
        },
        n = this._getTimeSlotDomElement(j),
        l = this._getTimeFromIndex(j);
      return this._createTimeSlot(j, l, n);
    },
    _createTimeSlot: function (k, l, j) {
      return new e.TimeSlot(k, l, j);
    },
    _processRowSelection: function (r, s) {
      var q = this._owner._rowSelectionState,
        j = q.rowSelectionEndSlot,
        m = this.getTimeSlotFromDomElement(r),
        p = q.rowSelectionStartSlot.get_rawIndex(),
        n = m.get_rawIndex();
      if (n.viewPartIndex != p.viewPartIndex || n.modelIndex != p.modelIndex) {
        return;
      }
      var k = j ? true : false,
        o = true;
      if (k) {
        var l = j.get_rawIndex();
        o = n.dayIndex == l.dayIndex;
      }
      if (!(k && o)) {
        q.rowSelectionEndSlot = m;
        s.apply(this._owner);
      }
    },
    _getFirstTimeSlot: function () {
      var j = this._getContentTable().rows[0].cells[0];
      return this.getTimeSlotFromDomElement(j);
    },
    get_supportsFullTime: function () {
      return false;
    },
  };
  e.ModelBase.registerClass("Telerik.Web.UI.Scheduler.Views.Month.ModelBase");
  e.Model = function (j) {
    if (d.Rendering.HorizontalBlockCollection) {
      this._allDayBlocks = new d.Rendering.HorizontalBlockCollection();
    }
    e.Model.initializeBase(this, [j]);
  };
  e.Model.prototype = {
    initialize: function () {},
    addToBlocks: function (j) {
      this._allDayBlocks.add(j);
    },
    removeFromBlock: function (j) {
      this._allDayBlocks.remove(j);
    },
    resetBlocks: function () {
      if (d.Rendering.HorizontalBlockCollection) {
        this._allDayBlocks = new d.Rendering.HorizontalBlockCollection();
      }
    },
    getTimeSlotFromDomElement: function (j) {
      var k = this._getRawIndexFromDomElement(j),
        l = this._getTimeFromDomElement(j);
      return new e.TimeSlot(k, l, j);
    },
    _addTodayCellClass: function () {
      var j = d.DateTime.getDate(new Date()),
        k;
      if (j < this.get_visibleRangeStart() || j >= this.get_visibleRangeEnd()) {
        return;
      }
      k = this._getAllDayTimeSlotFromStartTime(j);
      if (k) {
        a(k.get_domElement()).addClass("rsTodayCell");
      }
    },
    _getTimeFromDomElement: function (j) {
      var k = this._getRawIndexFromDomElement(j);
      return this._getTimeFromIndex(k);
    },
    _getTimeFromIndex: function (k) {
      var j = this.get_visibleRangeStart(),
        n = this.get_weekLength(),
        o = Math.floor(k.dayIndex / n),
        m = k.dayIndex % n,
        l = o * 7 + m;
      c.RadScheduler._incrementTime(j, 24 * l, 0);
      return j;
    },
    _getRawIndexFromDomElement: function (l) {
      while (l && l.tagName.toUpperCase() != "TD") {
        l = l.parentNode;
      }
      if (l) {
        var m = l.parentNode,
          k = m.cells.length,
          j = l.cellIndex,
          n = m.rowIndex;
        return { dayIndex: k * n + j };
      }
      return null;
    },
    getTimeSlotForAppointment: function (j) {
      return this._getAllDayTimeSlotFromStartTime(j.get_start());
    },
    _getAllDayTimeSlotForAppointmentPart: function (j) {
      return this._getAllDayTimeSlotFromStartTime(j.start);
    },
    _getAllDayTimeSlotFromStartTime: function (l) {
      var k = this._getTimeSlotIndices(l),
        j = this._getTimeSlotDomElement(k);
      return this.getTimeSlotFromDomElement(j);
    },
    _getTimeSlotDomElement: function (k) {
      var l = Math.floor(k.dayIndex / this.get_weekLength()),
        j = Math.floor(k.dayIndex % this.get_weekLength());
      return this._getContentTable().tBodies[0].rows[l].cells[j];
    },
    _getRenderer: function () {
      if (!this._renderer) {
        this._renderer = new c.Scheduler.Rendering.MonthViewRenderer(this);
      }
      return this._renderer;
    },
  };
  e.Model.registerClass(
    "Telerik.Web.UI.Scheduler.Views.Month.Model",
    e.ModelBase
  );
  e.TimeSlot = function (k, l, j) {
    this._rawIndex = k;
    this._startTime = l;
    this._domElement = j;
  };
  e.TimeSlot.prototype = {
    set_selected: function (k) {
      var j = this.get_domElement();
      if (j) {
        a(j).toggleClass("rsSelectedSlot", k);
      }
      this._selected = k;
    },
    get_index: function () {
      var j = this.get_rawIndex();
      return String.format("{0}", j.dayIndex);
    },
    get_rawIndex: function () {
      return this._rawIndex;
    },
    get_startTime: function () {
      return this._startTime;
    },
    get_endTime: function () {
      return d.DateTime.add(this.get_startTime(), this.get_duration());
    },
    get_duration: function () {
      return this.get_durationInMinutes() * h;
    },
    get_durationInMinutes: function () {
      return 1440;
    },
    get_isAllDay: function () {
      return true;
    },
    get_domElement: function () {
      if (a(this._domElement).is("td")) {
        return this._domElement;
      }
      return a(this._domElement).parents("td:first")[0];
    },
  };
  e.TimeSlot.registerClass(
    "Telerik.Web.UI.Scheduler.Views.Month.TimeSlot",
    null,
    c.ISchedulerTimeSlot
  );
})(
  $telerik.$,
  Telerik.Web.UI,
  Telerik.Web.UI.Scheduler,
  Telerik.Web.UI.Scheduler.Views.Month
);

/* END Telerik.Web.UI.Scheduler.Views.Month.Model.js */
/* START Telerik.Web.UI.Scheduler.ClientRendering.ResourceStyleMappingCollection.js */
Type.registerNamespace("Telerik.Web.UI");
(function () {
  var b = Telerik.Web.UI,
    a = $telerik.$;
  b.ResourceStyleMappingCollection = function () {
    this._array = [];
  };
  b.ResourceStyleMappingCollection.prototype = {
    add: function (d) {
      var c = this._array.length;
      this._array[c] = d;
    },
    getStyleMapping: function (c) {
      return this._array[c];
    },
    getMatchingClasses: function (d) {
      var c = [];
      a.each(this._getMatchingStyleMappings(d), function () {
        var e = this.get_applyCssClass();
        if (!e) {
          return;
        }
        c[c.length] = e;
      });
      return c;
    },
    getMatchingBackColor: function (d) {
      var c = "";
      a.each(this._getMatchingStyleMappings(d), function () {
        var e = this.get_backColor();
        if (!e) {
          return;
        }
        c = e;
      });
      return c;
    },
    getMatchingBorderColor: function (d) {
      var c = "";
      a.each(this._getMatchingStyleMappings(d), function () {
        var e = this.get_borderColor();
        if (!e) {
          return;
        }
        c = e;
      });
      return c;
    },
    get_count: function () {
      return this._array.length;
    },
    forEach: function (e) {
      for (var d = 0, c = this.get_count(); d < c; d++) {
        e(this.getStyleMapping(d));
      }
    },
    _getMatchingStyleMappings: function (d) {
      var c = [];
      this.forEach(function (f) {
        var h = f.get_type();
        var e = f.get_key();
        var g = f.get_text();
        if (!h && !e && !g) {
          return;
        }
        if (h && h != d.get_type()) {
          return;
        }
        if (e && e != d.get_key()) {
          return;
        }
        if (g && g != d.get_text()) {
          return;
        }
        c[c.length] = f;
      });
      return c;
    },
  };
  b.ResourceStyleMappingCollection.registerClass(
    "Telerik.Web.UI.ResourceStyleMappingCollection"
  );
})();

/* END Telerik.Web.UI.Scheduler.ClientRendering.ResourceStyleMappingCollection.js */
/* START Telerik.Web.UI.Scheduler.ClientRendering.ResourceStyleMapping.js */
Type.registerNamespace("Telerik.Web.UI");
(function () {
  var a = Telerik.Web.UI;
  a.ResourceStyleMapping = function (b) {
    if (b) {
      this._key = b.key;
      this._text = b.text;
      this._type = b.type;
      this._applyCssClass = b.applyCssClass;
      this._backColor = b.backColor;
      this._borderColor = b.borderColor;
    }
  };
  a.ResourceStyleMapping.prototype = {
    get_key: function () {
      return this._key;
    },
    set_key: function (b) {
      this._key = b;
    },
    get_text: function () {
      return this._text;
    },
    set_text: function (b) {
      this._text = b;
    },
    get_type: function () {
      return this._type;
    },
    set_type: function (b) {
      this._type = b;
    },
    get_applyCssClass: function () {
      return this._applyCssClass;
    },
    set_applyCssClass: function (b) {
      this._applyCssClass = b;
    },
    get_backColor: function () {
      return this._backColor;
    },
    set_backColor: function (b) {
      this._backColor = b;
    },
    get_borderColor: function () {
      return this._borderColor;
    },
    set_borderColor: function (b) {
      this._borderColor = b;
    },
  };
  a.ResourceStyleMapping.registerClass("Telerik.Web.UI.ResourceStyleMapping");
})();

/* END Telerik.Web.UI.Scheduler.ClientRendering.ResourceStyleMapping.js */
/* START Telerik.Web.UI.Scheduler.Helpers.ResizeHelper.js */
Type.registerNamespace("Telerik.Web.UI.Scheduler");
(function (a, b) {
  b.Scheduler.ResizeHelper = function (c) {
    this._scheduler = c;
  };
  b.Scheduler.ResizeHelper.prototype = {
    initialize: function () {},
    dispose: function () {},
    _updateResizingAppointmentElements: function (f, e, g) {
      this._isHorizontal =
        this._scheduler.get_selectedView() == b.SchedulerViewType.MonthView;
      var d = f.resizeFromStart,
        c = d == e < 0;
      if (c) {
        this._addResizingElementPart(g, f);
        d = !d;
      } else {
        this._removeResizingElementPart(f);
      }
      this._updateResizingAppointmentPartIndicators(f.resizingElement, d, c);
    },
    _addResizingElementPart: function (r, m) {
      var l = m.resizeFromStart,
        e = m.resizingElement,
        o = this._scheduler,
        d = o._activeModel,
        q = o._getParentTable(r),
        f = a(e).clone()[0],
        c,
        j,
        i;
      this._updateResizingAppointmentPartIndicators(e, l, true);
      if (this._isHorizontal) {
        var g = 0;
        if (l) {
          g = r.parentNode.cells.length - 1;
        }
        j = q.rows[r.parentNode.rowIndex].cells[g];
      } else {
        var p = d.get_slotsPerDay(),
          k = a(e).parents("td").get(0),
          h = d._getFirstModelRowIndex(k),
          n = h * p;
        i = r.offsetHeight - 4;
        if (d._isVertical && o.get_showAllDayRow()) {
          n += h + 1;
        }
        if (l) {
          n += p - 1;
        }
        j = q.rows[n].cells[r.cellIndex];
      }
      c = o._getCellWrap(j, e);
      c.append(f);
      if (this._isHorizontal) {
        f.style.left = "";
        f.style.width = j.offsetWidth + "px";
      } else {
        o._setAppointmentElementPosition(f, i, 0);
      }
      this._updateElementParts(m, f);
    },
    _updateElementParts: function (j, d) {
      var e = j.resizingAppointment._domElements,
        i = j.resizeFromStart,
        c = this._getAppointmentAllDayElement(e),
        h = 0,
        g,
        f;
      if (i) {
        if (!this._isHorizontal && c) {
          h = 1;
        }
        Array.insert(e, h, d);
        j.resizingAppointment._domElement = d;
      } else {
        Array.add(e, d);
      }
      if (this._isHorizontal) {
        (g = i ? 1 : e.length - 2), (f = e[g]);
        this._expandElementHorizontally(f, i);
      } else {
        if (c) {
          this._expandAllDayElement(c, j);
        } else {
          if (this._scheduler.get_showAllDayRow() && e.length == 3) {
            this._createAllDayElement(c, j);
          } else {
            (g = i ? 1 : e.length - 2), (f = e[g]);
            this._expandElementVertically(f, i);
          }
        }
      }
      j.resizingElement = d;
    },
    _expandAllDayElement: function (c, f) {
      var d = c.parents("td").first(),
        e,
        g;
      g = d.width() + c.width() + 1;
      if (f.resizeFromStart) {
        e = this._scheduler._getCellWrap(d.prev().get(0), c.get(0));
        e.append(c.get(0));
      }
      a(f.resizingElement).remove();
      Array.remove(f.resizingAppointment._domElements, f.resizingElement);
      c.width(g);
    },
    _createAllDayElement: function (c, m) {
      var g = m.resizingAppointment._domElements;
      c = a(g[1]);
      var p = this._scheduler,
        e = p._activeModel,
        f = c.get(0),
        l = c.parents("td").get(0),
        i = e._getFirstModelRowIndex(l),
        j = p.get_renderMode() === b.RenderMode.Lite,
        k = p.get_renderMode() === b.RenderMode.Mobile,
        o,
        n,
        h,
        d,
        q;
      if (e._isVertical) {
        o = i * e.get_slotsPerDay();
        if (p.get_showAllDayRow()) {
          o += i;
        }
        n = a(l).parents("table").get(0).rows[o];
      } else {
        n = a(p.get_element()).find(".rsTopWrap .rsAllDayTable").get(0).rows[0];
      }
      h = n.cells[l.cellIndex];
      q = a(h).width();
      d = p._getCellWrap(h, f);
      d.append(f);
      p._setAppointmentElementPosition(f, d[0].offsetHeight - 4, 0);
      c.find(".rsArrowTop").removeClass("rsArrowTop").addClass("rsArrowLeft");
      c.find(".rsArrowBottom")
        .removeClass("rsArrowBottom")
        .addClass("rsArrowRight");
      if (j || k) {
        c.find(".p-i-arrow-60-up")
          .removeClass("p-i-arrow-60-up")
          .addClass("p-i-arrow-60-left");
        c.find(".p-i-arrow-60-down")
          .removeClass("p-i-arrow-60-down")
          .addClass("p-i-arrow-60-right");
      }
      Array.remove(g, f);
      Array.insert(g, 0, f);
      c.width(q);
    },
    _getAppointmentAllDayElement: function (d) {
      if (this._scheduler.get_showAllDayRow()) {
        for (var e = 0, f = d.length; e < f; e++) {
          var c = a(d[e]);
          if (
            c.parents("table.rsAllDayTable, .rsAllDayRow").filter(":first")
              .length > 0
          ) {
            return c;
          }
        }
      }
      return null;
    },
    _expandElementVertically: function (d, i) {
      var g = d.parentNode.parentNode,
        h = g.parentNode.rowIndex,
        c = this._scheduler._activeModel,
        l = c.get_slotsPerDay(),
        f = d.parentNode.parentNode.offsetHeight,
        e = c._getFirstModelRowIndex(g),
        k = e * l,
        j,
        m,
        n;
      if (c._isVertical && this._scheduler.get_showAllDayRow()) {
        k += e + 1;
      }
      j = i ? h - k : l - (h - k);
      m = f * j;
      if (i) {
        n = m * -1;
        m += parseFloat(d.style.top, 10);
        m += a(d).height();
        if (m < 0) {
          return;
        }
      } else {
        m -= 4;
      }
      this._scheduler._setAppointmentElementPosition(d, m, n);
    },
    _expandElementHorizontally: function (c, g) {
      var f = c.parentNode.parentNode,
        d = f.parentNode.cells.length,
        e,
        h;
      if (g) {
        h = c.offsetWidth;
        h += parseFloat(c.style.left);
        h += f.cellIndex * f.offsetWidth;
        c.style.left = -1 * f.cellIndex * f.offsetWidth + "px";
      } else {
        e = d - f.cellIndex;
        h = f.offsetWidth * e;
      }
      c.style.width = h + "px";
    },
    _removeResizingElementPart: function (m) {
      var l = m.resizingElement,
        k = m.resizeFromStart,
        g = a(l.parentNode),
        e = g.parents("td").first(),
        j = m.resizingAppointment._domElements,
        d = this._getAppointmentAllDayElement(j),
        i;
      if (j.length <= 1) {
        return;
      }
      if (!this._isHorizontal && d) {
        var c = d.parents("td").first(),
          f = k ? e.next() : e.prev(),
          h = this._scheduler._getCellWrap(f.get(0), l);
        h.append(l);
        if (k) {
          c = c.next();
          h = this._scheduler._getCellWrap(c.get(0), d.get(0));
          h.append(d.get(0));
        }
        var n = d.width() - c.width() - 1;
        if (n < 5) {
          d.remove();
          Array.remove(j, d.get(0));
        } else {
          d.width(n);
        }
      } else {
        a(l).remove();
        Array.remove(j, l);
        i = k ? 0 : j.length - 1;
        m.resizingElement = j[i];
      }
      if (!this._isHorizontal && g.children(".rsApt").length == 0) {
        g.remove();
      }
    },
    _updateResizingAppointmentPartIndicators: function (e, h, d) {
      var i = this._scheduler.get_renderMode() === b.RenderMode.Lite;
      var c = a(e);
      var f = h
        ? this._isHorizontal
          ? "Left"
          : "Top"
        : this._isHorizontal
        ? "Right"
        : "Bottom";
      var j = h ? "Start" : "End";
      if (d) {
        var g;
        c.find(".rsAptResize" + j + ", .rsArrow" + f).remove();
        if (i) {
          g =
            '<a style="z-index: 80;" href="#" class="rsArrow' +
            f +
            '" title="' +
            f.toLocaleLowerCase() +
            '"><span class="rsIcon rsIconArrow' +
            f +
            '"></span></a>';
          c.append(g);
        } else {
          g =
            '<a style="z-index: 80;" href="#" class="rsArrow' +
            f +
            '">' +
            f.toLocaleLowerCase() +
            "</a>";
          c.find("div.rsAptIn").append(g);
        }
      } else {
        var k;
        if (i) {
          k = "<span class='rsAptResize rsAptResize" + j + "'></span>";
        } else {
          k = "<div class='rsAptResize rsAptResize" + j + "'></div>";
        }
        c.find(".rsArrow" + f).remove();
        c.append(k);
      }
    },
    _getAppointmentOriginalElements: function (k) {
      var e = [],
        c = k.get_elements();
      for (var f = 0, g = c.length; f < g; f++) {
        var d = c[f],
          j = d.parentNode.cloneNode(false),
          h = d.cloneNode(true);
        j.appendChild(h);
        e[e.length] = {
          appointmentElement: h,
          parentCell: a(d).parents("td").get(0),
        };
      }
      return e;
    },
    _restoreAppointmentOriginalElements: function (k) {
      var j = k.resizingAppointment,
        h = k.originalSize.elements,
        f,
        g;
      for (f = 0, g = j._domElements.length; f < g; f++) {
        a(j._domElements[f]).remove();
      }
      j._domElements = [];
      j._domElement = null;
      for (f = 0, g = h.length; f < g; f++) {
        var e = h[f],
          d = e.appointmentElement,
          c = this._scheduler._getCellWrap(e.parentCell, d);
        c.append(d);
        j._domElements[f] = d;
      }
    },
  };
})($telerik.$, Telerik.Web.UI);

/* END Telerik.Web.UI.Scheduler.Helpers.ResizeHelper.js */
/* START Telerik.Web.UI.Calendar.RadCalendarScript.js */
Type.registerNamespace("Telerik.Web.UI");
$telerik.findCalendar = $find;
$telerik.toCalendar = function (a) {
  return a;
};
Telerik.Web.UI.RadCalendar = function (a) {
  Telerik.Web.UI.RadCalendar.initializeBase(this, [a]);
  this._formatInfoArray = null;
  this._specialDaysArray = null;
  this._viewsHash = null;
  this._monthYearNavigationSettings = null;
  this._stylesHash = null;
  this._dayRenderChangedDays = null;
  this._viewRepeatableDays = null;
  this._postBackCall = null;
  this._firstDayOfWeek = null;
  this._skin = null;
  this._calendarWeekRule = null;
  this._culture = null;
  this._zIndex = null;
  this._enableShadows = true;
  this._nextFocusedCell = null;
  this._hoveredDate = null;
  this._hoveredDateTriplet = null;
  this._documentKeyDownDelegate = null;
  this._enabled = true;
  this._useColumnHeadersAsSelectors = true;
  this._useRowHeadersAsSelectors = true;
  this._showOtherMonthsDays = true;
  this._enableMultiSelect = true;
  this._singleViewColumns = 7;
  this._singleViewRows = 6;
  this._multiViewColumns = 1;
  this._multiViewRows = 1;
  this._fastNavigationStep = 3;
  this._enableNavigationAnimation = false;
  this._cellDayFormat = "%d";
  this._presentationType = Telerik.Web.UI.Calendar.PresentationType.Interactive;
  this._orientation = Telerik.Web.UI.Calendar.Orientation.RenderInRows;
  this._titleFormat = "MMMM yyyy";
  this._dayCellToolTipFormat = "dddd, MMMM dd, yyyy";
  this._showDayCellToolTips = true;
  this._dateRangeSeparator = " - ";
  this._autoPostBack = false;
  this._calendarEnableNavigation = true;
  this._calendarEnableMonthYearFastNavigation = true;
  this._enableRepeatableDaysOnClient = true;
  this._enableViewSelector = false;
  this._enableKeyboardNavigation = false;
  this._enableAriaSupport = false;
  this._showRowHeaders = false;
  this._navigateFromLinksButtons = true;
  this._rangeSelectionStartDate = null;
  this._rangeSelectionEndDate = null;
  this._rangeSelectionMode = {};
  this._hideNavigationControls = false;
  this._overlay = false;
  this._onLoadDelegate = null;
  this._renderMode = Telerik.Web.UI.RenderMode.Classic;
};
Telerik.Web.UI.RadCalendar.prototype = {
  initialize: function () {
    Telerik.Web.UI.RadCalendar.callBaseMethod(this, "initialize");
    this.EnableTodayButtonSelection =
      this.get_monthYearNavigationSettings()[4] == "False" ? false : true;
    this.DateTimeFormatInfo = new Telerik.Web.UI.Calendar.DateTimeFormatInfo(
      this.get__FormatInfoArray()
    );
    this.DateTimeFormatInfo.Calendar =
      Telerik.Web.UI.Calendar.GregorianCalendar;
    this.DateTimeFormatInfo.CalendarWeekRule = this._calendarWeekRule;
    var c = this._auxDatesHidden();
    var a = eval(c.value);
    this.RangeMinDate = a[0];
    this.RangeMaxDate = a[1];
    this.FocusedDate = a[2];
    var e;
    this.SpecialDays = new Telerik.Web.UI.Calendar.DateCollection();
    for (e = 0; e < this.get_specialDaysArray().length; e++) {
      var k = new Telerik.Web.UI.Calendar.RenderDay(
        this.get_specialDaysArray()[e]
      );
      this.SpecialDays.Add(k.get_date(), k);
    }
    this.RecurringDays = new Telerik.Web.UI.Calendar.DateCollection();
    for (var l in this.get__ViewRepeatableDays()) {
      if (!this.get__ViewRepeatableDays().hasOwnProperty(l)) {
        continue;
      }
      var d = l.split("_");
      var n = this.get__ViewRepeatableDays()[l].split("_");
      var o = this.SpecialDays.Get(n);
      this.RecurringDays.Add(d, o);
    }
    this.RangeValidation = new Telerik.Web.UI.Calendar.RangeValidation(
      this.RangeMinDate,
      this.RangeMaxDate
    );
    this.Selection = new Telerik.Web.UI.Calendar.Selection(
      this.RangeValidation,
      this.SpecialDays,
      this.RecurringDays,
      this.get_enableMultiSelect()
    );
    var q = [];
    for (var p in this.get__ViewsHash()) {
      if (!this.get__ViewsHash().hasOwnProperty(p)) {
        continue;
      }
      q[q.length] = p;
    }
    this._topViewID = q[0];
    this._titleID = this.get_id() + "_Title";
    var m = this._selectedDatesHidden();
    var b = eval(m.value);
    for (e = 0; e < b.length; e++) {
      this.Selection.Add(b[e]);
    }
    this._lastSelectedDate = null;
    this._calendarDomObject = $get(this.get_id());
    this._viewIDs = q;
    this._initViews();
    this._enableNavigation(this._isNavigationEnabled());
    this._attachEventHandlers();
    window.$addHandlers(this.get_element(), {
      click: Function.createDelegate(this, this._click),
    });
    if ($telerik.isRightToLeft(this.get_element())) {
      if (this.get_multiViewColumns() > 1 || this.get_multiViewRows() > 1) {
        Sys.UI.DomElement.addCssClass(
          this.get_element(),
          String.format(
            "RadCalendarRTL_{0} RadCalendarMultiViewRTL_{0}",
            this.get_skin()
          )
        );
      } else {
        Sys.UI.DomElement.addCssClass(
          this.get_element(),
          String.format("RadCalendarRTL_{0}", this.get_skin())
        );
      }
    }
    this.raise_init(Sys.EventArgs.Empty);
    if (this._enableKeyboardNavigation && !this._enableMultiSelect) {
      this._documentKeyDownDelegate = Function.createDelegate(
        this,
        this._documentKeyDown
      );
      $telerik.addExternalHandler(
        document,
        "keydown",
        this._documentKeyDownDelegate
      );
    }
    if (this.get_enableAriaSupport()) {
      this._initializeAriaSupport();
    }
    var h = this._selectedRangeDatesHidden();
    if (h) {
      var f = eval(h.value);
      var j = f[0];
      var g = f[1];
      if (!(j[0] == "1980" && j[1] == "1" && j[2] == "1")) {
        this._rangeSelectionStartDate = new Date(j[0], j[1] - 1, j[2]);
      }
      if (!(g[0] == "2099" && g[1] == "12" && g[2] == "30")) {
        this._rangeSelectionEndDate = new Date(g[0], g[1] - 1, g[2]);
      }
    }
  },
  dispose: function () {
    if (this.get_element()) {
      window.$clearHandlers(this.get_element());
    }
    if (!this.disposed) {
      this.disposed = true;
      this._destroyViews();
      this._calendarDomObject = null;
      if (this.MonthYearFastNav) {
        this.MonthYearFastNav.dispose();
      }
      if (this.SpecialDays) {
        this.SpecialDays.Clear();
        this.SpecialDays = null;
      }
      if (this.RecurringDays) {
        this.RecurringDays.Clear();
        this.RecurringDays = null;
      }
      this.Selection = null;
      this.RangeValidation = null;
      this.DateTimeFormatInfo = null;
    }
    if (this._documentKeyDownDelegate) {
      $telerik.removeExternalHandler(
        document,
        "keydown",
        this._documentKeyDownDelegate
      );
      this._documentKeyDownDelegate = null;
    }
    if (this._onLoadDelegate) {
      Sys.Application.remove_load(this._onLoadDelegate);
      this._onLoadDelegate = null;
    }
    Telerik.Web.UI.RadCalendar.callBaseMethod(this, "dispose");
  },
  _click: function (b) {
    var a = b.srcElement ? b.srcElement : b.target;
    if (a.tagName && a.tagName.toLowerCase() == "a") {
      var c = a.getAttribute("href", 2);
      if (c == "#" || location.href + "#" == c) {
        if (b.preventDefault) {
          b.preventDefault();
        }
        return false;
      }
    }
  },
  _documentKeyDown: function (a) {
    if (this._enableKeyboardNavigation) {
      a = a || window.event;
      if (a.ctrlKey && a.keyCode == 89) {
        try {
          this.CurrentViews[0].DomTable.tabIndex = 100;
          this.CurrentViews[0].DomTable.focus();
          return false;
        } catch (b) {
          return false;
        }
      }
    }
  },
  get_enableAriaSupport: function () {
    return this._enableAriaSupport;
  },
  _initializeAriaSupport: function () {
    var m = this.get_element();
    var n = document.getElementById(m.id + "_Title");
    m.setAttribute("role", "grid");
    m.setAttribute("aria-atomic", "true");
    m.setAttribute("aria-labelledby", n.id);
    n.setAttribute("aria-live", "assertive");
    n.parentNode.parentNode.parentNode.setAttribute("role", "presentation");
    var c = document.getElementById(this.get_id() + "_Top");
    if (this.get_enableMultiSelect()) {
      c.setAttribute("aria-multiselectable", "true");
    }
    var l = c.rows;
    var f, g;
    var h;
    for (f = 0; f < l.length; f++) {
      var k = l[f];
      k.setAttribute("role", "row");
      var b = k.cells;
      for (g = 0; g < b.length; g++) {
        var a = b[g];
        a.setAttribute("role", "gridcell");
      }
    }
    var e = m.getElementsByTagName("th");
    for (f = 0, h = e.length; f < h; f++) {
      var d = e[f];
      if (d.scope === "col") {
        d.setAttribute("role", "columnheader");
      } else {
        if (d.scope === "row") {
          d.setAttribute("role", "rowheader");
        }
      }
    }
    this._initializeAriaForCalendarDays();
  },
  _initializeAriaForCalendarDays: function () {
    var k = this.get_element();
    var g = k.getElementsByTagName("a");
    var d, e;
    var f;
    for (d = 0, e = g.length; d < e; d++) {
      f = g[d];
      f.tabIndex = -1;
      f.setAttribute("role", "presentation");
    }
    var j = this.get_selectedDates();
    if (!j.length) {
      var b = this.get_focusedDate();
      if (b) {
        var a = this._hoveredDate;
        var c = new Date(b[0], b[1] - 1, b[2]);
        if (a && a - c !== 0) {
          b = [a.getFullYear(), a.getMonth() + 1, a.getDate()];
        }
        this._activateDate(b);
      }
    } else {
      for (d = 0, e = j.length; d < e; d++) {
        var h = this._findRenderDay(j[d]);
        if (h) {
          f = h.DomElement.getElementsByTagName("a")[0];
          h.DomElement.setAttribute("aria-selected", true);
          if (f) {
            f.tabIndex = 0;
          }
        }
      }
    }
  },
  _activateDate: function (a) {
    var c = this._findRenderDay(a);
    if (c && c.DomElement) {
      this._nextFocusedCell = c.DomElement;
      this._hoveredDateTriplet = a;
      this._hoveredDate = new Date(a[0], a[1] - 1, a[2]);
      c.RadCalendarView._addClassAndGetFocus(
        this._nextFocusedCell,
        c.RadCalendarView.DomTable
      );
      if (this.get_enableAriaSupport()) {
        var b = c.DomElement.getElementsByTagName("a")[0];
        if (b) {
          b.tabIndex = 0;
        }
      }
      return true;
    }
    return false;
  },
  selectDate: function (a, b) {
    if (this.EnableDateSelect == false) {
      return false;
    }
    this._performDateSelection(a, true, b);
  },
  selectDates: function (a, c) {
    if (false == this.EnableDateSelect) {
      return false;
    }
    for (var b = 0; b < a.length; b++) {
      this._performDateSelection(a[b], true, false, false);
    }
    if (c || c == null) {
      this.navigateToDate(a[a.length - 1]);
    }
  },
  unselectDate: function (a) {
    if (false == this.EnableDateSelect) {
      return false;
    }
    this._performDateSelection(a, false, false);
  },
  unselectDates: function (a) {
    if (false == this.EnableDateSelect || !a || a.length <= 0) {
      return false;
    }
    for (var b = 0; b < a.length; b++) {
      this._performDateSelection(a[b], false, false, true);
    }
    this._submit("d");
  },
  calculateDateFromStep: function (b) {
    var c = this.CurrentViews ? this.CurrentViews[0] : null;
    if (!c) {
      return;
    }
    var a = b < 0 ? c._MonthStartDate : c._MonthEndDate;
    a = this.DateTimeFormatInfo.Calendar.AddDays(a, b);
    return a;
  },
  navigateToDate: function (a) {
    if (this.RangeValidation && !this.RangeValidation.IsDateValid(a)) {
      a = this._getBoundaryDate(a);
      if (a == null) {
        if (
          this._getFastNavigation().DateIsOutOfRangeMessage != null &&
          this._getFastNavigation().DateIsOutOfRangeMessage != " "
        ) {
          alert(this._getFastNavigation().DateIsOutOfRangeMessage);
        }
        return;
      }
    }
    var b = this._getStepFromDate(a);
    this._navigate(b);
  },
  GetSelectedDates: function () {
    return this.get_selectedDates();
  },
  GetRangeMinDate: function () {
    return this.get_rangeMinDate();
  },
  SetRangeMinDate: function (a) {
    this.set_rangeMinDate(a);
  },
  GetRangeMaxDate: function () {
    return this.get_rangeMaxDate();
  },
  SetRangeMaxDate: function (a) {
    this.set_rangeMaxDate(a);
  },
  get_selectedDates: function () {
    return this.Selection._selectedDates.GetValues();
  },
  get_rangeMinDate: function () {
    return this.RangeMinDate;
  },
  set_rangeMinDate: function (a) {
    if (this.RangeValidation.CompareDates(a, this.RangeMaxDate) > 0) {
      alert("RangeMinDate should be less than the RangeMaxDate value!");
      return;
    }
    var c = this.RangeMinDate;
    this.RangeMinDate = a;
    this.RangeValidation._rangeMinDate = a;
    this.MonthYearFastNav = null;
    var b = [this.FocusedDate[0], this.FocusedDate[1], 1];
    if (
      this.RangeValidation.CompareDates(b, this.RangeMinDate) <= 0 ||
      this.RangeValidation.InSameMonth(b, c) ||
      this.RangeValidation.InSameMonth(b, this.RangeMinDate)
    ) {
      if (!this.RangeValidation.IsDateValid(this.FocusedDate)) {
        this.FocusedDate = a.slice();
      }
      this._moveToDate(this.FocusedDate, true);
    }
    this._serializeAuxDates();
    this._updateSelectedDates();
  },
  get_rangeMaxDate: function () {
    return this.RangeMaxDate;
  },
  set_rangeMaxDate: function (a) {
    if (this.RangeValidation.CompareDates(a, this.RangeMinDate) < 0) {
      alert("RangeMaxDate should be greater than the RangeMinDate value!");
      return;
    }
    var c = this.RangeMaxDate;
    this.RangeMaxDate = a;
    this.RangeValidation._rangeMaxDate = a;
    this.MonthYearFastNav = null;
    var b = [this.FocusedDate[0], this.FocusedDate[1], 1];
    if (
      this.RangeValidation.CompareDates(b, this.RangeMaxDate) > 0 ||
      this.RangeValidation.InSameMonth(b, c) ||
      this.RangeValidation.InSameMonth(b, this.RangeMaxDate)
    ) {
      if (!this.RangeValidation.IsDateValid(this.FocusedDate)) {
        this.FocusedDate = a.slice();
      }
      this._moveToDate(this.FocusedDate, true);
    }
    this._serializeAuxDates();
    this._updateSelectedDates();
  },
  get_focusedDate: function () {
    return this.FocusedDate;
  },
  set_focusedDate: function (a) {
    this.FocusedDate = a;
  },
  get_specialDaysArray: function () {
    return this._specialDaysArray;
  },
  set_specialDaysArray: function (a) {
    if (this._specialDaysArray !== a) {
      this._specialDaysArray = a;
      this.raisePropertyChanged("specialDaysArray");
    }
  },
  get_enabled: function () {
    return this._enabled;
  },
  set_enabled: function (a) {
    if (this._enabled !== a) {
      this._enabled = a;
      if (this.RangeValidation) {
        this._moveToDate(this.FocusedDate, true);
      }
      this.raisePropertyChanged("enabled");
    }
  },
  get_useColumnHeadersAsSelectors: function () {
    return this._useColumnHeadersAsSelectors;
  },
  set_useColumnHeadersAsSelectors: function (a) {
    if (this._useColumnHeadersAsSelectors !== a) {
      this._useColumnHeadersAsSelectors = a;
      this.raisePropertyChanged("useColumnHeadersAsSelectors");
    }
  },
  get_useRowHeadersAsSelectors: function () {
    return this._useRowHeadersAsSelectors;
  },
  set_useRowHeadersAsSelectors: function (a) {
    if (this._useRowHeadersAsSelectors !== a) {
      this._useRowHeadersAsSelectors = a;
      this.raisePropertyChanged("useRowHeadersAsSelectors");
    }
  },
  get_showOtherMonthsDays: function () {
    return this._showOtherMonthsDays;
  },
  set_showOtherMonthsDays: function (a) {
    if (this._showOtherMonthsDays !== a) {
      this._showOtherMonthsDays = a;
      this.raisePropertyChanged("showOtherMonthsDays");
    }
  },
  get_enableMultiSelect: function () {
    return this._enableMultiSelect;
  },
  set_enableMultiSelect: function (f) {
    if (this._enableMultiSelect !== f) {
      this._enableMultiSelect = f;
      var e = this.Selection;
      if (e) {
        e._enableMultiSelect = f;
        var c = e._selectedDates;
        if (c && c.Count() > 0) {
          this._removeAllSelectedDatesStyle();
          c = e._selectedDates;
          var a;
          if (c._lastInsertedKey) {
            a = c.Get(c._lastInsertedKey);
          } else {
            var d = c.Count();
            a = c.GetValues()[d - 1];
          }
          c.Clear();
          e.Add(a);
          var b = this._findRenderDay(a);
          if (b != null) {
            this._setStyleToRenderedDate(b, true);
          }
        }
      }
      this.raisePropertyChanged("enableMultiSelect");
    }
  },
  get_singleViewColumns: function () {
    return this._singleViewColumns;
  },
  set_singleViewColumns: function (a) {
    if (this._singleViewColumns !== a) {
      this._singleViewColumns = a;
      this.raisePropertyChanged("singleViewColumns");
    }
  },
  get_singleViewRows: function () {
    return this._singleViewRows;
  },
  set_singleViewRows: function (a) {
    if (this._singleViewRows !== a) {
      this._singleViewRows = a;
      this.raisePropertyChanged("singleViewRows");
    }
  },
  get_multiViewColumns: function () {
    return this._multiViewColumns;
  },
  set_multiViewColumns: function (a) {
    if (this._multiViewColumns !== a) {
      this._multiViewColumns = a;
      this.raisePropertyChanged("multiViewColumns");
    }
  },
  get_multiViewRows: function () {
    return this._multiViewRows;
  },
  set_multiViewRows: function (a) {
    if (this._multiViewRows !== a) {
      this._multiViewRows = a;
      this.raisePropertyChanged("multiViewRows");
    }
  },
  get_fastNavigationStep: function () {
    return this._fastNavigationStep;
  },
  set_fastNavigationStep: function (a) {
    if (this._fastNavigationStep !== a) {
      this._fastNavigationStep = a;
      this.raisePropertyChanged("fastNavigationStep");
    }
  },
  get_skin: function () {
    return this._skin;
  },
  set_skin: function (a) {
    if (this._skin !== a) {
      this._skin = a;
      this.raisePropertyChanged("skin");
    }
  },
  get_enableNavigationAnimation: function () {
    return this._enableNavigationAnimation;
  },
  set_enableNavigationAnimation: function (a) {
    if (this._enableNavigationAnimation !== a) {
      this._enableNavigationAnimation = a;
      this.raisePropertyChanged("enableNavigationAnimation");
    }
  },
  get_cellDayFormat: function () {
    return this._cellDayFormat;
  },
  set_cellDayFormat: function (a) {
    if (this._cellDayFormat !== a) {
      this._cellDayFormat = a;
      this.raisePropertyChanged("cellDayFormat");
    }
  },
  get_presentationType: function () {
    return this._presentationType;
  },
  set_presentationType: function (a) {
    if (this._presentationType !== a) {
      this._presentationType = a;
      if (this.RangeValidation) {
        if (a == Telerik.Web.UI.Calendar.PresentationType.Preview) {
          $telerik.$(".rcMain", this.get_element()).addClass("rcPreview");
        } else {
          $telerik.$(".rcMain", this.get_element()).removeClass("rcPreview");
        }
        this._moveToDate(this.FocusedDate, true);
      }
      this.raisePropertyChanged("presentationType");
    }
  },
  get_renderMode: function () {
    return this._renderMode;
  },
  set_renderMode: function (a) {
    this._renderMode = a;
  },
  get_orientation: function () {
    return this._orientation;
  },
  set_orientation: function (a) {
    if (this._orientation !== a) {
      this._orientation = a;
      this.raisePropertyChanged("orientation");
    }
  },
  get_titleFormat: function () {
    return this._titleFormat;
  },
  set_titleFormat: function (a) {
    if (this._titleFormat !== a) {
      this._titleFormat = a;
      this.raisePropertyChanged("titleFormat");
    }
  },
  get_showDayCellToolTips: function () {
    return this._showDayCellToolTips;
  },
  set_showDayCellToolTips: function (a) {
    if (this._showDayCellToolTips != a) {
      this._showDayCellToolTips = a;
      this.raisePropertyChanged("showDayCellToolTips");
    }
  },
  get_dayCellToolTipFormat: function () {
    return this._dayCellToolTipFormat;
  },
  expandPredefinedFormat: function (a) {
    if (a.Length > 1) {
      return a;
    }
    switch (a) {
      case "d":
        return this.DateTimeFormatInfo.ShortDatePattern;
      case "z":
        return this.DateTimeFormatInfo.YearMonthPattern;
      case "D":
        return this.DateTimeFormatInfo.LongDatePattern;
      case "f":
        return (
          this.DateTimeFormatInfo.LongDatePattern +
          " " +
          this.DateTimeFormatInfo.ShortTimePattern
        );
      case "F":
        return this.DateTimeFormatInfo.FullDateTimePattern;
      case "g":
        return (
          this.DateTimeFormatInfo.ShortDatePattern +
          " " +
          this.DateTimeFormatInfo.ShortTimePattern
        );
      case "G":
        return (
          this.DateTimeFormatInfo.ShortDatePattern +
          " " +
          this.DateTimeFormatInfo.LongTimePattern
        );
      case "m":
      case "M":
        return this.DateTimeFormatInfo.MonthDayPattern;
      case "r":
      case "R":
        return this.DateTimeFormatInfo.RFC1123Pattern;
      case "s":
        return this.DateTimeFormatInfo.SortableDateTimePattern;
      case "t":
        return this.DateTimeFormatInfo.ShortTimePattern;
      case "T":
        return this.DateTimeFormatInfo.LongTimePattern;
      case "y":
      case "Y":
        return this.DateTimeFormatInfo.YearMonthPattern;
      case "u":
        return this.DateTimeFormatInfo.UniversalSortableDateTimePattern;
      default:
        return a;
    }
  },
  set_dayCellToolTipFormat: function (a) {
    if (this._dayCellToolTipFormat !== a) {
      this._dayCellToolTipFormat = a;
      this.raisePropertyChanged("dayCellToolTipFormat");
    }
  },
  get_dateRangeSeparator: function () {
    return this._dateRangeSeparator;
  },
  set_dateRangeSeparator: function (a) {
    if (this._dateRangeSeparator !== a) {
      this._dateRangeSeparator = a;
      this.raisePropertyChanged("dateRangeSeparator");
    }
  },
  get_autoPostBack: function () {
    return this._autoPostBack;
  },
  set_autoPostBack: function (a) {
    if (this._autoPostBack !== a) {
      this._autoPostBack = a;
      this.raisePropertyChanged("autoPostBack");
    }
  },
  get_calendarEnableNavigation: function () {
    return this._calendarEnableNavigation;
  },
  set_calendarEnableNavigation: function (a) {
    if (this._calendarEnableNavigation !== a) {
      this._calendarEnableNavigation = a;
      this.raisePropertyChanged("calendarEnableNavigation");
    }
  },
  get_calendarEnableMonthYearFastNavigation: function () {
    return this._calendarEnableMonthYearFastNavigation;
  },
  set_calendarEnableMonthYearFastNavigation: function (a) {
    if (this._calendarEnableMonthYearFastNavigation !== a) {
      this._calendarEnableMonthYearFastNavigation = a;
      if (!a) {
        $telerik.$(".rcTitlebar", this.get_element()).addClass("rcNoNav");
      } else {
        $telerik.$(".rcTitlebar", this.get_element()).removeClass("rcNoNav");
      }
      this.raisePropertyChanged("calendarEnableMonthYearFastNavigation");
    }
  },
  get_enableRepeatableDaysOnClient: function () {
    return this._enableRepeatableDaysOnClient;
  },
  set_enableRepeatableDaysOnClient: function (a) {
    if (this._enableRepeatableDaysOnClient !== a) {
      this._enableRepeatableDaysOnClient = a;
      this.raisePropertyChanged("enableRepeatableDaysOnClient");
    }
  },
  get_monthYearNavigationSettings: function () {
    return this._monthYearNavigationSettings;
  },
  set_monthYearNavigationSettings: function (a) {
    if (this._monthYearNavigationSettings !== a) {
      this._monthYearNavigationSettings = a;
      this.raisePropertyChanged("monthYearNavigationSettings");
    }
  },
  get_stylesHash: function () {
    return this._stylesHash;
  },
  set_stylesHash: function (a) {
    if (this._stylesHash !== a) {
      this._stylesHash = a;
      this.raisePropertyChanged("stylesHash");
    }
  },
  get_culture: function () {
    return this._culture;
  },
  get_enableViewSelector: function () {
    return this._enableViewSelector;
  },
  set_datesInRange: function (b, a) {
    if (b && b) {
      if (b > a) {
        var c = b;
        b = a;
        a = c;
      }
      this._rangeSelectionStartDate = b;
      this._rangeSelectionEndDate = a;
      this.Selection._selectedDates.Clear();
      this._removeAllSelectedDatesStyle();
      this._initialRangeSelection(
        this._rangeSelectionStartDate,
        this._rangeSelectionEndDate
      );
    }
  },
  get_rangeSelectionStartDate: function () {
    return this._rangeSelectionStartDate;
  },
  get_rangeSelectionEndDate: function () {
    return this._rangeSelectionEndDate;
  },
  get_hideNavigationControls: function () {
    return this._hideNavigationControls;
  },
  set_hideNavigationControls: function (a) {
    if (this._hideNavigationControls !== a) {
      this._hideNavigationControls = a;
      this.raisePropertyChanged("hideNavigationControls");
    }
  },
  get_rippleZonesConfiguration: function () {
    var f = ".rcTitlebar a";
    var b = $telerik.$(f, this.get_element());
    var e = 70;
    var d = ".rcRow a";
    var a = $telerik.$(d, this.get_element());
    var c = 40;
    if (b.length) {
      e = b.first().outerWidth() / 0.6;
    }
    if (a.length) {
      c = a.first().outerWidth() / 0.6;
    }
    return [
      {
        element: this.get_element(),
        rippleConfigurations: [
          {
            containerSelector: d,
            rippleType: Telerik.Web.UI.MaterialRippleType.Icon,
            maxRippleSize: c,
          },
          {
            containerSelector: f,
            rippleType: Telerik.Web.UI.MaterialRippleType.Icon,
            maxRippleSize: e,
          },
        ],
      },
    ];
  },
  _destroyViews: function () {
    for (var a = this._viewIDs.length - 1; a >= 0; a--) {
      this._disposeView(this._viewIDs[a]);
    }
    this.CurrentViews = null;
    this._viewsHash = null;
  },
  _attachEventHandlers: function () {
    this._onLoadDelegate = Function.createDelegate(this, this._onLoadHandler);
    Sys.Application.add_load(this._onLoadDelegate);
  },
  _isRtl: function () {
    if (typeof this.Rtl == "undefined") {
      this.Rtl = this._getTextDirection() == "rtl";
    }
    return this.Rtl;
  },
  _getTextDirection: function () {
    var a = this._calendarDomObject;
    while (a != null) {
      if (a.dir.toLowerCase() == "rtl") {
        return "rtl";
      }
      a = a.parentNode;
    }
    return "ltr";
  },
  _getItemStyle: function (b, c, e, d, a, f) {
    var g;
    if (c) {
      g = this.get_stylesHash()["OutOfRangeDayStyle"];
    } else {
      if (b && !this.get_showOtherMonthsDays()) {
        g = this.get_stylesHash()["OtherMonthDayStyle"];
      } else {
        if (d) {
          g = this.get_stylesHash()["SelectedDayStyle"];
        } else {
          if (f && f.join("").length > 0) {
            g = f;
          } else {
            if (b) {
              g = this.get_stylesHash()["OtherMonthDayStyle"];
            } else {
              if (e) {
                g = this.get_stylesHash()["WeekendDayStyle"];
              } else {
                g = this.get_stylesHash()["DayStyle"];
              }
            }
          }
        }
      }
    }
    if (a) {
      if (g) {
        g = g.slice(0);
      } else {
        g = ["", ""];
      }
      g[1] =
        (g[1] ? g[1] + " " : "") + this.get_stylesHash()["DisabledDayStyle"][1];
    }
    return g;
  },
  _isNavigationEnabled: function () {
    if (!this.get_enabled() || !this.get_calendarEnableNavigation()) {
      return false;
    }
    return true;
  },
  _isMonthYearNavigationEnabled: function () {
    if (
      !this.get_enabled() ||
      !this.get_calendarEnableMonthYearFastNavigation()
    ) {
      return false;
    }
    return true;
  },
  _hideDisabledNavigation: function (a, g) {
    var f = this.DateTimeFormatInfo.Calendar.AddMonths(this.FocusedDate, g);
    var e = [
      this.get_rangeMinDate()[0],
      this.get_rangeMinDate()[1],
      this.get_rangeMinDate()[2],
    ];
    var d = [
      this.get_rangeMaxDate()[0],
      this.get_rangeMaxDate()[1],
      this.get_rangeMaxDate()[2],
    ];
    f[2] = e[2] = d[2] = 1;
    var c = this.RangeValidation.CompareDates(f, e);
    var b = this.RangeValidation.CompareDates(f, d);
    if (this.RangeValidation.IsDateValid(f) || c == 0 || b == 0) {
      a.style.visibility = "";
    } else {
      a.style.visibility = "hidden";
    }
  },
  _enableNavigation: function (b) {
    b = false != b;
    var a = $get(this.get_id() + "_FNP");
    if (a) {
      a.onclick = !b
        ? null
        : Telerik.Web.UI.Calendar.Utils.AttachMethod(
            this._fastNavigatePrev,
            this
          );
      if (this.get_hideNavigationControls()) {
        this._hideDisabledNavigation(a, -this.get_fastNavigationStep());
      }
    }
    a = $get(this.get_id() + "_NP");
    if (a) {
      a.onclick = !b
        ? null
        : Telerik.Web.UI.Calendar.Utils.AttachMethod(this._navigatePrev, this);
      if (this.get_hideNavigationControls()) {
        this._hideDisabledNavigation(a, -1);
      }
    }
    a = $get(this.get_id() + "_NN");
    if (a) {
      a.onclick = !b
        ? null
        : Telerik.Web.UI.Calendar.Utils.AttachMethod(this._navigateNext, this);
      if (this.get_hideNavigationControls()) {
        this._hideDisabledNavigation(a, 1);
      }
    }
    a = $get(this.get_id() + "_FNN");
    if (a) {
      a.onclick = !b
        ? null
        : Telerik.Web.UI.Calendar.Utils.AttachMethod(
            this._fastNavigateNext,
            this
          );
      if (this.get_hideNavigationControls()) {
        this._hideDisabledNavigation(a, this.get_fastNavigationStep());
      }
    }
    a = $get(this._titleID);
    if (a && this._isMonthYearNavigationEnabled()) {
      a.onclick = Telerik.Web.UI.Calendar.Utils.AttachMethod(
        this._showMonthYearFastNav,
        this
      );
      a.oncontextmenu = Telerik.Web.UI.Calendar.Utils.AttachMethod(
        this._showMonthYearFastNav,
        this
      );
    }
  },
  _findRenderDay: function (a) {
    var c = null;
    for (var b = 0; b < this.CurrentViews.length; b++) {
      var d = this.CurrentViews[b];
      if (d.RenderDays == null) {
        continue;
      }
      c = d.RenderDays.Get(a);
      if (c != null) {
        return c;
      }
    }
    return null;
  },
  _findRenderDays: function (a) {
    var d = [];
    for (var b = 0; b < this.CurrentViews.length; b++) {
      var e = this.CurrentViews[b];
      if (e.RenderDays == null) {
        continue;
      }
      var c = e.RenderDays.Get(a);
      if (c != null) {
        d[d.length] = c;
        continue;
      }
    }
    return d;
  },
  _performDateSelection: function (b, h, e, f) {
    if (this.Selection.CanSelect(b)) {
      if (e == true) {
        this.navigateToDate(b);
      }
      var g = [];
      var a;
      if (h) {
        g = this._findRenderDays(b);
        if (g.length > 0) {
          for (a = 0; a < g.length; a++) {
            g[a].Select(true, f);
          }
        } else {
          var c = this._findRenderDay(this._lastSelectedDate);
          if (c && !this.get_enableMultiSelect()) {
            c.PerformSelect(false);
          }
          this.Selection.Add(b);
          this._serializeSelectedDates();
          this._lastSelectedDate = b;
        }
      } else {
        g = this._findRenderDays(b);
        if (g.length > 0) {
          for (a = 0; a < g.length; a++) {
            g[a].Select(false, f);
          }
        } else {
          this.Selection.Remove(b);
          this._serializeSelectedDates();
        }
      }
    }
  },
  _disposeView: function (g) {
    for (var a = 0; a < this.CurrentViews.length; a++) {
      var f = this.CurrentViews[a];
      if (f.DomTable && f.DomTable.id == g) {
        var e = f.DomTable.getElementsByTagName("a");
        for (var b = 0, c = e.length; b < c; b++) {
          var d = e[b];
          window.$clearHandlers(d);
        }
        f.dispose();
        this.CurrentViews.splice(a, 1);
        return;
      }
    }
  },
  _findView: function (d) {
    var b = null;
    for (var a = 0; a < this.CurrentViews.length; a++) {
      var c = this.CurrentViews[a];
      if (c.DomTable.id == d) {
        b = c;
        break;
      }
    }
    return b;
  },
  _initViews: function (e) {
    if (!e) {
      e = this._viewIDs;
    }
    this.CurrentViews = [];
    var b;
    for (var a = 0; a < e.length; a++) {
      b = a == 0 && e.length > 1;
      var d = e[a];
      var c = new Telerik.Web.UI.Calendar.CalendarView(
        this,
        $get(e[a]),
        d,
        b ? this.get_multiViewColumns() : this.get_singleViewColumns(),
        b ? this.get_multiViewRows() : this.get_singleViewRows(),
        b,
        this.get_useRowHeadersAsSelectors(),
        this.get_useColumnHeadersAsSelectors(),
        this.get_orientation()
      );
      c.MonthsInView = this.get__ViewsHash()[d][1];
      this._disposeView(e[a]);
      this.CurrentViews[a] = c;
    }
    if (
      typeof this.CurrentViews != "undefined" &&
      typeof this.CurrentViews[0] != "undefined" &&
      this.CurrentViews[0].IsMultiView
    ) {
      this.CurrentViews[0]._ViewStartDate = this.CurrentViews[0]._MonthStartDate = this.CurrentViews[1]._MonthStartDate;
      this.CurrentViews[0]._ViewEndDate = this.CurrentViews[0]._MonthEndDate = this.CurrentViews[
        this.CurrentViews.length - 1
      ]._MonthEndDate;
    }
  },
  _serializeSelectedDates: function () {
    var d = "[";
    var b = this.Selection._selectedDates;
    var e = b.GetValues();
    var a = b.Get(b._lastInsertedKey);
    for (var c = 0; c < e.length; c++) {
      if (e[c] && e[c] !== a) {
        d += "[" + e[c][0] + "," + e[c][1] + "," + e[c][2] + "],";
      }
    }
    if (a) {
      d += "[" + a[0] + "," + a[1] + "," + a[2] + "],";
    }
    if (d.length > 1) {
      d = d.substring(0, d.length - 1);
    }
    d += "]";
    var f = this._selectedDatesHidden();
    if (f) {
      f.value = d;
    }
  },
  _selectedDatesHidden: function () {
    return $get(this.get_id() + "_SD");
  },
  _serializeAuxDates: function () {
    var a =
      "[[" +
      this.RangeMinDate +
      "],[" +
      this.RangeMaxDate +
      "],[" +
      this.FocusedDate +
      "]]";
    if (this._auxDatesHidden() != null) {
      this._auxDatesHidden().value = a;
    }
  },
  _auxDatesHidden: function () {
    return $get(this.get_id() + "_AD");
  },
  _submit: function (a, b) {
    if (!b && this._allowAutoPostBackOnNavigateOnly) {
      this._execClientAction(a);
    } else {
      if (this.get_autoPostBack()) {
        this._doPostBack(a);
      } else {
        this._execClientAction(a);
      }
    }
  },
  _deserializeNavigationArgument: function (b) {
    var a = b.split(":");
    return a;
  },
  _execClientAction: function (c) {
    var a = c.split(":");
    switch (a[0]) {
      case "d":
        break;
      case "n":
        if (this.CurrentViews && !this.CurrentViews[0].IsMultiView) {
          var d = parseInt(a[1], 0);
          var e = parseInt(a[2], 0);
          this._moveByStep(d, e);
        }
        break;
      case "nd":
        var b = [parseInt(a[1], 10), parseInt(a[2], 10), parseInt(a[3], 10)];
        this._moveToDate(b);
        break;
    }
  },
  _moveByStep: function (b, c) {
    var d = this.CurrentViews[0];
    if (!d) {
      return;
    }
    var a = b < 0 ? d._MonthStartDate : d._MonthEndDate;
    a = this.DateTimeFormatInfo.Calendar.AddMonths(a, b);
    if (!this.RangeValidation.IsDateValid(a)) {
      if (b > 0) {
        a = [this.RangeMaxDate[0], this.RangeMaxDate[1], this.RangeMaxDate[2]];
      } else {
        a = [this.RangeMinDate[0], this.RangeMinDate[1], this.RangeMinDate[2]];
      }
    }
    if (b != 0) {
      this._moveToDate(a);
    }
  },
  _moveToDate: function (a, b) {
    if (typeof b == "undefined") {
      b = false;
    }
    if (this.get_multiViewColumns() > 1 || this.get_multiViewRows() > 1) {
      return false;
    }
    if (!this.RangeValidation.IsDateValid(a)) {
      a = this._getBoundaryDate(a);
      if (a == null) {
        if (
          this._getFastNavigation().DateIsOutOfRangeMessage != null &&
          this._getFastNavigation().DateIsOutOfRangeMessage != " "
        ) {
          alert(this._getFastNavigation().DateIsOutOfRangeMessage);
        }
        return;
      }
    }
    var d = this.FocusedDate;
    this.FocusedDate = a;
    a[2] = d[2] = 1;
    var e = this.RangeValidation.CompareDates(a, d);
    if (e == 0 && !b) {
      return;
    }
    var f = this._viewIDs[0];
    var c = false;
    this._disposeView(f);
    var g = new Telerik.Web.UI.Calendar.CalendarView(
      this,
      $get(f),
      f,
      c ? this.get_multiViewColumns() : this.get_singleViewColumns(),
      c ? this.get_multiViewRows() : this.get_singleViewRows(),
      c,
      this.get_useRowHeadersAsSelectors(),
      this.get_useColumnHeadersAsSelectors(),
      this.get_orientation(),
      a
    );
    this.CurrentViews[this.CurrentViews.length] = g;
    g.ScrollDir = e;
    g.RenderDaysSingleView();
  },
  _checkRequestConditions: function (c) {
    var a = this._deserializeNavigationArgument(c);
    var d = 0;
    var b = null;
    if (a[0] != "d") {
      if (a[0] == "n") {
        d = parseInt(a[1], 0);
        b = this.calculateDateFromStep(d);
      } else {
        if (a[0] == "nd") {
          b = [parseInt(a[1], 10), parseInt(a[2], 10), parseInt(a[3], 10)];
        }
      }
      if (!b) {
        return false;
      }
      if (!this.RangeValidation.IsDateValid(b)) {
        b = this._getBoundaryDate(b);
        if (b == null) {
          if (
            this._getFastNavigation().DateIsOutOfRangeMessage != null &&
            this._getFastNavigation().DateIsOutOfRangeMessage != " "
          ) {
            alert(this._getFastNavigation().DateIsOutOfRangeMessage);
          }
          return false;
        }
      }
    }
    return true;
  },
  _doPostBack: function (a) {
    if (this._checkRequestConditions(a)) {
      eval(this._postBackCall.replace("@@", a));
    }
  },
  _getStepFromDate: function (a) {
    var d = a[0] - this.FocusedDate[0];
    var b = a[1] - this.FocusedDate[1];
    var c = d * 12 + b;
    return c;
  },
  _getBoundaryDate: function (a) {
    if (!this.RangeValidation.IsDateValid(a)) {
      if (this._isInSameMonth(a, this.RangeMinDate)) {
        return [
          this.RangeMinDate[0],
          this.RangeMinDate[1],
          this.RangeMinDate[2],
        ];
      }
      if (this._isInSameMonth(a, this.RangeMaxDate)) {
        return [
          this.RangeMaxDate[0],
          this.RangeMaxDate[1],
          this.RangeMaxDate[2],
        ];
      }
      return null;
    }
    return a;
  },
  _navigate: function (c) {
    if (!c) {
      return;
    }
    var a = new Telerik.Web.UI.CalendarViewChangingEventArgs(c);
    this.raise_calendarViewChanging(a);
    if (a.get_cancel()) {
      return;
    }
    this.navStep = c;
    this._submit("n:" + c, true);
    this._serializeAuxDates();
    var b = new Telerik.Web.UI.CalendarViewChangedEventArgs(c);
    if (this.get_enableAriaSupport()) {
      this._initializeAriaForCalendarDays();
    }
    this.raise_calendarViewChanged(b);
  },
  _clearKeyBoardNavigationProperties: function () {
    if (
      this._navigateFromLinksButtons &&
      this._enableKeyboardNavigation &&
      !this._enableMultiSelect
    ) {
      this.CurrentViews[0].RadCalendar._nextFocusedCell = null;
      this.CurrentViews[0].RadCalendar._hoveredDate = null;
      this.CurrentViews[0].RadCalendar._hoveredDateTriplet = null;
      this.CurrentViews[0]._removeHoverStyles(this.CurrentViews[0].DomTable);
    }
  },
  _fastNavigatePrev: function () {
    this._clearKeyBoardNavigationProperties();
    var b = this._findView(this._topViewID);
    var a = -this.get_fastNavigationStep() * b.MonthsInView;
    this._navigate(a);
    return false;
  },
  _navigatePrev: function () {
    this._clearKeyBoardNavigationProperties();
    var a = this._findView(this._topViewID);
    this._navigate(-a.MonthsInView);
    return false;
  },
  _navigateNext: function () {
    this._clearKeyBoardNavigationProperties();
    var a = this._findView(this._topViewID);
    this._navigate(a.MonthsInView);
    return false;
  },
  _fastNavigateNext: function () {
    this._clearKeyBoardNavigationProperties();
    var b = this._findView(this._topViewID);
    var a = this.get_fastNavigationStep() * b.MonthsInView;
    this._navigate(a);
    return false;
  },
  _getRenderDayID: function (a) {
    return this.get_id() + "_" + a.join("_");
  },
  _isInSameMonth: function (a, b) {
    if (!a || a.length != 3) {
      throw new Error("Date1 must be array: [y, m, d]");
    }
    if (!b || b.length != 3) {
      throw new Error("Date2 must be array: [y, m, d]");
    }
    var e = a[0];
    var f = b[0];
    if (e < f) {
      return false;
    }
    if (e > f) {
      return false;
    }
    var c = a[1];
    var d = b[1];
    if (c < d) {
      return false;
    }
    if (c > d) {
      return false;
    }
    return true;
  },
  _getFastNavigation: function () {
    var b = this.MonthYearFastNav;
    if (!b) {
      var a = this.DateTimeFormatInfo;
      if (!a) {
        a = new Telerik.Web.UI.Calendar.DateTimeFormatInfo(
          this.get__FormatInfoArray()
        );
      }
      b = new Telerik.Web.UI.Calendar.MonthYearFastNavigation(
        a.AbbreviatedMonthNames,
        this.RangeMinDate,
        this.RangeMaxDate,
        this.get_skin(),
        this.get_id(),
        this.get_monthYearNavigationSettings()
      );
      this.MonthYearFastNav = b;
    }
    return this.MonthYearFastNav;
  },
  _showMonthYearFastNav: function (a) {
    if (!a) {
      a = window.event;
    }
    this._enableNavigation(this._isNavigationEnabled());
    var c = $telerik.getDocumentRelativeCursorPosition(a);
    if (this._isMonthYearNavigationEnabled()) {
      var b = this.Popup ? false : true;
      this._getFastNavigation().Show(
        this._getPopup(),
        c.left,
        c.top,
        this.FocusedDate[1],
        this.FocusedDate[0],
        Telerik.Web.UI.Calendar.Utils.AttachMethod(
          this._monthYearFastNavExitFunc,
          this
        ),
        this.get_stylesHash()["FastNavigationStyle"]
      );
      if (b && this._enableRippleEffect) {
        Telerik.Web.UI.MaterialRippleManager.getInstance().initializeRippleZone(
          {
            element: this._getPopup().DomElement.children[0],
            rippleConfigurations: [{ containerSelector: "a" }],
          }
        );
      }
    }
    a.returnValue = false;
    a.cancelBubble = true;
    if (a.stopPropagation) {
      a.stopPropagation();
    }
    if (!document.all) {
      window.setTimeout(function () {
        try {
          document.getElementsByTagName("INPUT")[0].focus();
        } catch (d) {}
      }, 1);
    }
    return false;
  },
  _getPopup: function () {
    var a = this.Popup;
    if (!a) {
      a = new Telerik.Web.UI.Calendar.Popup();
      a._overlay = this._overlay;
      if (this._zIndex) {
        a.zIndex = this._zIndex;
      }
      if (!this._enableShadows) {
        a.EnableShadows = false;
      }
      a._renderMode = this._renderMode;
      this.Popup = a;
      a.Opener = this;
    }
    return a;
  },
  _monthYearFastNavExitFunc: function (d, c, b) {
    if (!b || !this.EnableTodayButtonSelection) {
      this.navigateToDate([d, c + 1, 1]);
    } else {
      var a = this.get_autoPostBack();
      if (false !== this.EnableDateSelect) {
        this._performDateSelection([d, c + 1, b], false, !a, a);
        this._performDateSelection([d, c + 1, b], true, !a, a);
      }
      if (a) {
        this._submit(["nd", d, c + 1, b].join(":"));
      }
    }
  },
  _updateSelectedDates: function () {
    var b = this.get_selectedDates();
    for (var a = 0; a < b.length; a++) {
      if (!this.RangeValidation.IsDateValid(b[a])) {
        this.Selection.Remove(b[a]);
      }
    }
  },
  _onLoadHandler: function (a) {
    this.raise_load(Sys.EventArgs.Empty);
  },
  get__FormatInfoArray: function () {
    return this._formatInfoArray;
  },
  set__FormatInfoArray: function (a) {
    if (this._formatInfoArray !== a) {
      this._formatInfoArray = a;
      this.raisePropertyChanged("formatInfoArray");
    }
  },
  get__ViewsHash: function () {
    return this._viewsHash;
  },
  set__ViewsHash: function (a) {
    if (this._viewsHash !== a) {
      this._viewsHash = a;
      this.raisePropertyChanged("viewsHash");
    }
  },
  get__DayRenderChangedDays: function () {
    return this._dayRenderChangedDays;
  },
  set__DayRenderChangedDays: function (a) {
    if (this._dayRenderChangedDays !== a) {
      this._dayRenderChangedDays = a;
      this.raisePropertyChanged("dayRenderChangedDays");
    }
  },
  get__ViewRepeatableDays: function () {
    return this._viewRepeatableDays;
  },
  set__ViewRepeatableDays: function (a) {
    if (this._viewRepeatableDays !== a) {
      this._viewRepeatableDays = a;
      this.raisePropertyChanged("viewRepeatableDays");
    }
  },
  add_init: function (a) {
    this.get_events().addHandler("init", a);
  },
  remove_init: function (a) {
    this.get_events().removeHandler("init", a);
  },
  raise_init: function (a) {
    this.raiseEvent("init", a);
  },
  add_load: function (a) {
    this.get_events().addHandler("load", a);
  },
  remove_load: function (a) {
    this.get_events().removeHandler("load", a);
  },
  raise_load: function (a) {
    this.raiseEvent("load", a);
  },
  add_dateSelecting: function (a) {
    this.get_events().addHandler("dateSelecting", a);
  },
  remove_dateSelecting: function (a) {
    this.get_events().removeHandler("dateSelecting", a);
  },
  raise_dateSelecting: function (a) {
    this.raiseEvent("dateSelecting", a);
  },
  add_dateSelected: function (a) {
    this.get_events().addHandler("dateSelected", a);
  },
  remove_dateSelected: function (a) {
    this.get_events().removeHandler("dateSelected", a);
  },
  raise_dateSelected: function (a) {
    this.raiseEvent("dateSelected", a);
  },
  add_dateClick: function (a) {
    this.get_events().addHandler("dateClick", a);
  },
  remove_dateClick: function (a) {
    this.get_events().removeHandler("dateClick", a);
  },
  raise_dateClick: function (a) {
    this.raiseEvent("dateClick", a);
  },
  add_calendarViewChanging: function (a) {
    this.get_events().addHandler("calendarViewChanging", a);
  },
  remove_calendarViewChanging: function (a) {
    this.get_events().removeHandler("calendarViewChanging", a);
  },
  raise_calendarViewChanging: function (a) {
    this.raiseEvent("calendarViewChanging", a);
  },
  add_calendarViewChanged: function (a) {
    this.get_events().addHandler("calendarViewChanged", a);
  },
  remove_calendarViewChanged: function (a) {
    this.get_events().removeHandler("calendarViewChanged", a);
  },
  raise_calendarViewChanged: function (a) {
    this.raiseEvent("calendarViewChanged", a);
  },
  add_dayRender: function (a) {
    this.get_events().addHandler("dayRender", a);
  },
  remove_dayRender: function (a) {
    this.get_events().removeHandler("dayRender", a);
  },
  raise_dayRender: function (a) {
    this.raiseEvent("dayRender", a);
  },
  add_rowHeaderClick: function (a) {
    this.get_events().addHandler("rowHeaderClick", a);
  },
  remove_rowHeaderClick: function (a) {
    this.get_events().removeHandler("rowHeaderClick", a);
  },
  raise_rowHeaderClick: function (a) {
    this.raiseEvent("rowHeaderClick", a);
  },
  add_columnHeaderClick: function (a) {
    this.get_events().addHandler("columnHeaderClick", a);
  },
  remove_columnHeaderClick: function (a) {
    this.get_events().removeHandler("columnHeaderClick", a);
  },
  raise_columnHeaderClick: function (a) {
    this.raiseEvent("columnHeaderClick", a);
  },
  add_viewSelectorClick: function (a) {
    this.get_events().addHandler("viewSelectorClick", a);
  },
  remove_viewSelectorClick: function (a) {
    this.get_events().removeHandler("viewSelectorClick", a);
  },
  raise_viewSelectorClick: function (a) {
    this.raiseEvent("viewSelectorClick", a);
  },
  _selectedRangeDatesHidden: function () {
    return $get(this.get_id() + "_RS");
  },
  _serializeRangeSelectionDates: function () {
    var c = null;
    var b = null;
    if (this._rangeSelectionStartDate) {
      c = [
        this._rangeSelectionStartDate.getFullYear(),
        this._rangeSelectionStartDate.getMonth() + 1,
        this._rangeSelectionStartDate.getDate(),
      ];
    } else {
      c = [1980, 1, 1];
    }
    if (this._rangeSelectionEndDate) {
      b = [
        this._rangeSelectionEndDate.getFullYear(),
        this._rangeSelectionEndDate.getMonth() + 1,
        this._rangeSelectionEndDate.getDate(),
      ];
    } else {
      b = [2099, 12, 30];
    }
    var a = "[[" + c + "],[" + b + "]]";
    if (this._selectedRangeDatesHidden() != null) {
      this._selectedRangeDatesHidden().value = a;
    }
  },
  _removeRangeSelection: function () {
    if (this._rangeSelectionEndDate && this._rangeSelectionStartDate) {
      this._removeAllSelectedDatesStyle();
      this.Selection._selectedDates.Clear();
      this._rangeSelectionEndDate = null;
      this._rangeSelectionStartDate = null;
    }
  },
  _dateClick: function (a) {
    var f = a._renderDay.RadCalendarView.ID;
    var c = a._renderDay._date;
    if (this._rangeSelectionStartDate && this._rangeSelectionEndDate) {
      this._removeAllSelectedDatesStyle();
      this.Selection._selectedDates.Clear();
      this._rangeSelectionEndDate = null;
      this._rangeSelectionStartDate = null;
    }
    if (
      (a._domEvent.shiftKey &&
        this._rangeSelectionStartDate &&
        Telerik.Web.UI.Calendar.RangeSelectionMode.OnKeyHold ==
          this._rangeSelectionMode) ||
      (this._rangeSelectionStartDate &&
        Telerik.Web.UI.Calendar.RangeSelectionMode.ConsecutiveClicks ==
          this._rangeSelectionMode)
    ) {
      this._removeAllSelectedDatesStyle();
      this.Selection._selectedDates.Clear();
      this._rangeSelectionEndDate = new Date(c[0], c[1] - 1, c[2]);
      var b = false;
      if (this._rangeSelectionStartDate > this._rangeSelectionEndDate) {
        var d = this._rangeSelectionStartDate;
        this._rangeSelectionStartDate = this._rangeSelectionEndDate;
        this._rangeSelectionEndDate = d;
        b = true;
      }
      this._performSelection(
        this._rangeSelectionStartDate,
        this._rangeSelectionEndDate,
        b,
        f
      );
    } else {
      this._rangeSelectionStartDate = new Date(c[0], c[1] - 1, c[2]);
      this._rangeSelectionEndDate = null;
    }
    this._serializeRangeSelectionDates();
  },
  _removeAllSelectedDatesStyle: function () {
    for (var c = 0; c < this.CurrentViews.length; c++) {
      var b = this.CurrentViews[c].RenderDays;
      if (b) {
        for (var d = 0; d < b.GetValues().length; d++) {
          var a = b.GetValues()[d];
          this._setStyleToRenderedDate(a, false);
        }
      }
    }
  },
  _getAllSelectedDates: function (d, g) {
    var a = [];
    var c = [d.getFullYear(), d.getMonth() + 1, d.getDate()];
    a.push(c);
    var b = new Date(d.getTime() + 86400000);
    var e = b.getHours();
    while (b < g) {
      c = [b.getFullYear(), b.getMonth() + 1, b.getDate()];
      a.push(c);
      b = new Date(b.getTime() + 86400000);
      if (e != b.getHours()) {
        var f = this._addDays(b, -1);
        c = [f.getFullYear(), f.getMonth() + 1, f.getDate()];
        a.push(c);
      }
      e = b.getHours();
    }
    c = [g.getFullYear(), g.getMonth() + 1, g.getDate()];
    a.push(c);
    return a;
  },
  _initialRangeSelection: function (b, e) {
    var a = this._getAllSelectedDates(b, e);
    for (var c = 0; c < a.length; c++) {
      this.Selection.Add(a[c]);
      var d = this._findRenderDay(a[c]);
      if (d) {
        this._setStyleToRenderedDate(d, true);
      }
    }
    this._serializeSelectedDates();
  },
  _performSelection: function (b, f, d, g) {
    var a = this._getAllSelectedDates(b, f);
    for (var c = 0; c < a.length; c++) {
      this.Selection.Add(a[c]);
    }
    this._serializeSelectedDates();
    var e;
    if (!d) {
      e = [f.getFullYear(), f.getMonth() + 1, f.getDate()];
    } else {
      e = [b.getFullYear(), b.getMonth() + 1, b.getDate()];
    }
    this._applyStyles(e, g);
  },
  _addDays: function (a, c) {
    var b = new Date(a.getFullYear(), a.getMonth(), a.getDate());
    return new Date(b.setDate(b.getDate() + c));
  },
  _setStyleToRenderedDate: function (c, b) {
    c.IsSelected = b;
    var a = c.GetDefaultItemStyle();
    if (a) {
      c.DomElement.className = a[1];
      c.DomElement.style.cssText = a[0];
    }
  },
  _applyStyles: function (f, g) {
    var c = this.CurrentViews;
    for (var d = 0; d < c.length; d++) {
      var b = c[d].RenderDays;
      if (b) {
        for (var e = 0; e < b.GetValues().length; e++) {
          if (this.Selection._selectedDates.Get(b.GetValues()[e]._date)) {
            var a = b.GetValues()[e];
            if (
              a._date.toString() == f.toString() &&
              g == this.CurrentViews[d].ID
            ) {
              continue;
            }
            this._setStyleToRenderedDate(a, true);
          }
        }
      }
    }
  },
};
Telerik.Web.UI.RadCalendar.registerClass(
  "Telerik.Web.UI.RadCalendar",
  Telerik.Web.UI.RadWebControl
);
Type.registerNamespace("Telerik.Web.UI.Calendar");
Telerik.Web.UI.Calendar.DateTimeFormatInfo = function (a) {
  this.DayNames = a[0];
  this.AbbreviatedDayNames = a[1];
  this.MonthNames = a[2];
  this.AbbreviatedMonthNames = a[3];
  this.FullDateTimePattern = a[4];
  this.LongDatePattern = a[5];
  this.LongTimePattern = a[6];
  this.MonthDayPattern = a[7];
  this.RFC1123Pattern = a[8];
  this.ShortDatePattern = a[9];
  this.ShortTimePattern = a[10];
  this.SortableDateTimePattern = a[11];
  this.UniversalSortableDateTimePattern = a[12];
  this.YearMonthPattern = a[13];
  this.AMDesignator = a[14];
  this.PMDesignator = a[15];
  this.DateSeparator = a[16];
  this.TimeSeparator = a[17];
  this.FirstDayOfWeek = a[18];
  this.CalendarWeekRule = 0;
  this.Calendar = null;
};
Telerik.Web.UI.Calendar.DateTimeFormatInfo.prototype = {
  LeadZero: function (a) {
    return (a < 0 || a > 9 ? "" : "0") + a;
  },
  FormatDate: function (e, g) {
    g = g + "";
    g = g.replace(/%/gi, "");
    var q = "";
    var k = 0;
    var a = "";
    var t = "";
    var w = "" + e[0];
    var o = e[1];
    var b = e[2];
    var f = this.Calendar.GetDayOfWeek(e);
    var h = 0;
    var n = 0;
    var r = 0;
    var u = {};
    if (w.length < 4) {
      var p = w.length;
      for (var j = 0; j < 4 - p; j++) {
        w = "0" + w;
      }
    }
    var v = w.substring(2, 4);
    var l = 0 + v;
    if (l < 10) {
      u.y = "" + v.substring(1, 2);
    } else {
      u.y = "" + v;
    }
    u.yyyy = w;
    u.yy = v;
    u.M = o;
    u.MM = this.LeadZero(o);
    u.MMM = this.AbbreviatedMonthNames[o - 1];
    u.MMMM = this.MonthNames[o - 1];
    u.d = b;
    u.dd = this.LeadZero(b);
    u.dddd = this.DayNames[f];
    u.ddd = this.AbbreviatedDayNames[f];
    u.H = h;
    u.HH = this.LeadZero(h);
    if (h == 0) {
      u.h = 12;
    } else {
      if (h > 12) {
        u.h = h - 12;
      } else {
        u.h = h;
      }
    }
    u.hh = this.LeadZero(u.h);
    if (h > 11) {
      u.tt = "PM";
      u.t = "P";
    } else {
      u.tt = "AM";
      u.t = "A";
    }
    u.m = n;
    u.mm = this.LeadZero(n);
    u.s = r;
    u.ss = this.LeadZero(r);
    while (k < g.length) {
      a = g.charAt(k);
      t = "";
      if (g.charAt(k) == "'") {
        k++;
        while (g.charAt(k) != "'") {
          t += g.charAt(k);
          k++;
        }
        k++;
        q += t;
        continue;
      }
      while (g.charAt(k) == a && k < g.length) {
        t += g.charAt(k++);
      }
      if (u[t] != null) {
        q += u[t];
      } else {
        q += t;
      }
    }
    return q;
  },
};
Telerik.Web.UI.Calendar.DateTimeFormatInfo.registerClass(
  "Telerik.Web.UI.Calendar.DateTimeFormatInfo"
);
Type.registerNamespace("Telerik.Web.UI.Calendar");
Telerik.Web.UI.Calendar.MonthYearFastNavigation = function (
  e,
  d,
  c,
  g,
  a,
  f,
  b
) {
  this.MonthNames = e;
  this.MinYear = d;
  this.MaxYear = c;
  this.Skin = g;
  this.CalendarID = a;
  this.TodayButtonCaption = f[0];
  this.OkButtonCaption = f[1];
  this.CancelButtonCaption = f[2];
  this.DateIsOutOfRangeMessage = f[3];
  this.EnableTodayButtonSelection = f[4];
  this.EnableScreenBoundaryDetection = f[5];
  this.ShowAnimationDuration = f[6];
  this.ShowAnimationType = f[7];
  this.HideAnimationDuration = f[8];
  this.HideAnimationType = f[9];
  this.DisableOutOfRangeMonths = f[10];
  this.enableKeyboardNavigation = b;
};
Telerik.Web.UI.Calendar.MonthYearFastNavigation.prototype = {
  CreateLayout: function (l) {
    var n = this;
    var m = document.createElement("table");
    m.id = this.CalendarID + "_FastNavPopup";
    m.cellSpacing = 0;
    m.className = l[1];
    m.style.cssText = l[0];
    if (this.enableKeyboardNavigation) {
      m.tabIndex = 0;
    }
    var f = this.MonthNames;
    var g = f.length;
    if (!f[12]) {
      g--;
    }
    var k = Math.ceil(g / 2);
    m.YearRowsCount = k - 1;
    var e = 0;
    var j, a;
    this.YearCells = [];
    this.MonthCells = [];
    for (var c = 0; c < k; c++) {
      j = m.insertRow(m.rows.length);
      a = this.AddMonthCell(j, e++);
      if (null != a.Month) {
        this.MonthCells[this.MonthCells.length] = a;
      }
      a = this.AddMonthCell(j, e++);
      if (null != a.Month) {
        this.MonthCells[this.MonthCells.length] = a;
      }
      a = j.insertCell(j.cells.length);
      a.unselectable = "on";
      var d;
      if (c < k - 1) {
        this.YearCells[this.YearCells.length] = a;
        d = document.createElement("a");
        a.appendChild(d);
        d.href = "#";
        d.innerHTML = "&nbsp;";
        d.onclick = function (i) {
          if (!i) {
            i = window.event;
          }
          n.SelectYear(this.Year);
          n._disableOutOfRangeMonths();
          if (i.preventDefault) {
            i.preventDefault();
          }
          return false;
        };
      } else {
        a.id = "rcMView_PrevY";
        d = document.createElement("a");
        a.appendChild(d);
        d.href = "#";
        d.innerHTML = "&lt;&lt;";
        this.FastNavPrevYearsLink = d;
        if (n.StartYear >= n.MinYear[0]) {
          d.onclick = function (i) {
            if (!i) {
              i = window.event;
            }
            n.ScrollYears(-10);
            if (i.preventDefault) {
              i.preventDefault();
            }
            return false;
          };
        }
      }
      a = j.insertCell(j.cells.length);
      a.unselectable = "on";
      if (c < k - 1) {
        this.YearCells[this.YearCells.length] = a;
        d = document.createElement("a");
        a.appendChild(d);
        d.href = "#";
        d.innerHTML = "&nbsp;";
        d.onclick = function (i) {
          if (!i) {
            i = window.event;
          }
          n.SelectYear(this.Year);
          n._disableOutOfRangeMonths();
          if (i.preventDefault) {
            i.preventDefault();
          }
          return false;
        };
      } else {
        a.id = "rcMView_NextY";
        d = document.createElement("a");
        a.appendChild(d);
        d.href = "#";
        d.innerHTML = "&gt;&gt;";
        this.FastNavNextYearsLink = d;
        var b = n.StartYear + 10;
        if (b <= n.MaxYear[0]) {
          d.onclick = function (i) {
            if (!i) {
              i = window.event;
            }
            n.ScrollYears(10);
            if (i.preventDefault) {
              i.preventDefault();
            }
            return false;
          };
        }
      }
    }
    j = m.insertRow(m.rows.length);
    a = j.insertCell(j.cells.length);
    a.className = "rcButtons";
    a.colSpan = 4;
    a.noWrap = true;
    var h = $find(this.CalendarID);
    this.CreateButton(
      "rcMView_Today",
      a,
      this.TodayButtonCaption,
      Telerik.Web.UI.Calendar.Utils.AttachMethod(this.OnToday, this),
      h.get_renderMode()
    );
    a.appendChild(document.createTextNode(" "));
    this.CreateButton(
      "rcMView_OK",
      a,
      this.OkButtonCaption,
      Telerik.Web.UI.Calendar.Utils.AttachMethod(this.OnOK, this),
      h.get_renderMode()
    );
    a.appendChild(document.createTextNode(" "));
    this.CreateButton(
      "rcMView_Cancel",
      a,
      this.CancelButtonCaption,
      Telerik.Web.UI.Calendar.Utils.AttachMethod(this.OnCancel, this),
      h.get_renderMode()
    );
    if (this.enableKeyboardNavigation) {
      this._keyDownDelegate = Function.createDelegate(this, this._keyDown);
      window.$addHandlers(m, { keydown: _keyDownDelegate });
    }
    return m;
  },
  _clearActive: function () {
    if (this.currentActive) {
      this.currentActive.removeClass("rcFocus");
      this.currentActive = null;
    }
  },
  _setActive: function (a) {
    if (!this.enableKeyboardNavigation) {
      return;
    }
    if (this.currentActive) {
      this.currentActive.removeClass("rcFocus");
    }
    this.currentActive = $telerik.$(a);
    this.currentActive.addClass("rcFocus");
  },
  _keyDown: function (a) {
    var m = a.shiftKey;
    var h = a.keyCode;
    var b;
    var l;
    var c;
    var g;
    var o = 9,
      f = 27,
      i = 37,
      p = 38,
      k = 39,
      d = 40,
      e = 13,
      n = 32;
    if (
      h == o ||
      h == f ||
      h == i ||
      h == p ||
      h == k ||
      h == d ||
      h == e ||
      h == n
    ) {
      a.preventDefault();
    }
    if ((!m && h == o) || h == k) {
      b = $telerik.$(this.DomElement).find("td:not(.rcDisabled) a");
      g = b.index(this.currentActive);
      if (g + 1 < b.length) {
        this._setActive(b.eq(g + 1));
      }
    } else {
      if ((m && h == o) || h == i) {
        b = $telerik.$(this.DomElement).find("td:not(.rcDisabled) a");
        g = b.index(this.currentActive);
        if (g > 0) {
          this._setActive(b.eq(g - 1));
        }
      } else {
        if (h == f) {
          this.OnCancel();
          if (this._getMonthYearPicker()) {
            this._getMonthYearPicker()._popupButton.focus();
          }
        } else {
          if (h == d) {
            g = this.currentActive
              .closest("tr")
              .find("a")
              .index(this.currentActive);
            b = $telerik.$(this.DomElement).find("td a:eq(" + g + ")");
            l = this.currentActive.closest("tr");
            l = l.next();
            c = l.find("td:eq(" + g + ")");
            if (l.next().length) {
              while (c.hasClass("rcDisabled")) {
                l = l.next();
                c = l.find("td:eq(" + g + ")");
              }
            } else {
              c = l.find(".rcButtons");
            }
            if (c.length) {
              var j = l.find("a");
              this._setActive(j.eq(g < j.length ? g : g - 1));
            }
          } else {
            if (h == p) {
              g = this.currentActive
                .closest("tr")
                .find("a")
                .index(this.currentActive);
              b = $telerik.$(this.DomElement).find("td a:eq(" + g + ")");
              l = this.currentActive.closest("tr");
              l = l.prev();
              c = l.find("td:eq(" + g + ")");
              while (c.hasClass("rcDisabled")) {
                l = l.prev();
                c = l.find("td:eq(" + g + ")");
              }
              if (c.length) {
                this._setActive(c.find("a"));
              }
            } else {
              if (h == e || h == n) {
                this.currentActive.click();
              }
            }
          }
        }
      }
    }
  },
  focus: function () {
    this.currentActive = $telerik
      .$(this.DomElement)
      .find("td:not(.rcDisabled) a")
      .first();
    this._setActive(this.currentActive);
    this.DomElement.focus();
  },
  _appendStylesAndPropertiesToMonthYearView: function (q, p) {
    var r = this;
    q.cellSpacing = 0;
    if (this.enableKeyboardNavigation) {
      q.tabIndex = 0;
    }
    q.style.cssText = p[0];
    var k = this.MonthNames;
    var l = k.length;
    if (!k[12]) {
      l--;
    }
    var o = Math.ceil(l / 2);
    q.YearRowsCount = o - 1;
    var m, b;
    var c;
    var n = q.getElementsByTagName("tbody")[0].getElementsByTagName("tr");
    this.YearCells = [];
    this.MonthCells = [];
    var g = 0;
    var j;
    for (var f = 0; f < o; f++) {
      m = n[f];
      c = m.cells.length;
      b = m.cells[c - 4];
      b = this._appendMonthCellProperties(b, g);
      if (null != b.Month) {
        this.MonthCells[this.MonthCells.length] = b;
      }
      b = m.cells[c - 3];
      b = this._appendMonthCellProperties(b, g + 1);
      if (null != b.Month) {
        this.MonthCells[this.MonthCells.length] = b;
      }
      b = m.cells[c - 2];
      this.FastNavPrevYears = b;
      b.unselectable = "on";
      if (f < o - 1) {
        this.YearCells[this.YearCells.length] = b;
        j = b.childNodes[0];
        j.onclick = function (i) {
          if (!i) {
            i = window.event;
          }
          var s = r.Year;
          r.SelectYear(this.Year);
          r._fireYearSelectedEvent(s, this.parentNode);
          r._disableOutOfRangeMonths();
          r._setActive(this);
          if (i.preventDefault) {
            i.preventDefault();
          }
          return false;
        };
      } else {
        if (!b.childNodes[0] && !b.childNodes[0].childNodes[0]) {
          b.id = "rcMView_PrevY";
        }
        j = b.childNodes[0];
        this.FastNavPrevYearsLink = j;
        if (r.StartYear >= r.MinYear[0]) {
          j.onclick = function (i) {
            if (!i) {
              i = window.event;
            }
            r.ScrollYears(-10);
            r._setActive(this);
            if (i.preventDefault) {
              i.preventDefault();
            }
            return false;
          };
        }
      }
      b = m.cells[c - 1];
      this.FastNavNextYears = b;
      b.unselectable = "on";
      if (f < o - 1) {
        this.YearCells[this.YearCells.length] = b;
        j = b.childNodes[0];
        j.onclick = function (i) {
          if (!i) {
            i = window.event;
          }
          var s = r.Year;
          r.SelectYear(this.Year);
          r._fireYearSelectedEvent(s, this.parentNode);
          r._disableOutOfRangeMonths();
          r._setActive(this);
          if (i.preventDefault) {
            i.preventDefault();
          }
          return false;
        };
      } else {
        if (!b.childNodes[0] && !b.childNodes[0].childNodes[0]) {
          b.id = "rcMView_NextY";
        }
        j = b.childNodes[0];
        this.FastNavNextYearsLink = j;
        var e = r.StartYear + 10;
        if (e <= r.MaxYear[0]) {
          j.onclick = function (i) {
            if (!i) {
              i = window.event;
            }
            r.ScrollYears(10);
            r._setActive(this);
            if (i.preventDefault) {
              i.preventDefault();
            }
            return false;
          };
        }
      }
      g += 2;
    }
    var h = q.rows.length;
    m = q.rows[h - 1];
    b = m.cells[0];
    b.colSpan = 4;
    b.noWrap = true;
    var d = this.EnableTodayButtonSelection == "False" ? false : true;
    if (d) {
      this._appendButtonProperties(
        b.childNodes[0],
        "rcMView_Today",
        Telerik.Web.UI.Calendar.Utils.AttachMethod(this.OnToday, this)
      );
    } else {
      var a = b.childNodes[0];
      a.id = "rcMView_Today";
      a.onclick = "return false;";
    }
    b.appendChild(document.createTextNode(" "));
    this._appendButtonProperties(
      b.childNodes[1],
      "rcMView_OK",
      Telerik.Web.UI.Calendar.Utils.AttachMethod(this.OnOK, this)
    );
    b.appendChild(document.createTextNode(" "));
    this._appendButtonProperties(
      b.childNodes[2],
      "rcMView_Cancel",
      Telerik.Web.UI.Calendar.Utils.AttachMethod(this.OnCancel, this)
    );
    if (this.enableKeyboardNavigation) {
      window.$addHandlers(q, {
        keydown: Function.createDelegate(this, this._keyDown),
      });
    }
    return q;
  },
  _appendButtonProperties: function (a, b, c) {
    a.id = b;
    if ("function" == typeof c) {
      a.onclick = c;
    }
  },
  _disableOutOfRangeMonths: function () {
    var b = this.DisableOutOfRangeMonths == "False" ? false : true;
    if (!b) {
      return;
    }
    var m = this;
    var a;
    var l = this.MonthCells.length;
    for (var d = 0; d < l; d++) {
      a = m.MonthCells[d];
      a.className = a.className.replace("rcDisabled", "");
      var g = a.childNodes[0];
      if (g.onclick == null) {
        g.onclick = function (i) {
          if (!i) {
            i = window.event;
          }
          var n = m.Month;
          m.SelectMonth(this.Month);
          var j = m._getMonthYearPicker();
          if (j) {
            m._fireMonthSelectedEvent(j, m, n, a);
          }
          if (i.preventDefault) {
            i.preventDefault();
          }
          return false;
        };
      }
    }
    var e;
    if (m.MinYear[0] == m.GetYear()) {
      var k = m.MinYear[1] - 1;
      for (var c = 0; c < k; c++) {
        a = m.MonthCells[c];
        if (a) {
          e = a.childNodes[0];
          e.onclick = null;
          a.className = "rcDisabled";
        }
      }
      if (m.Month < k) {
        m.SelectMonth(k);
      }
    }
    if (m.MaxYear[0] == this.GetYear()) {
      var h = this.MaxYear[1];
      if (m.Month > h) {
        m.SelectMonth(h);
      }
      for (var f = h; f < l; f++) {
        a = m.MonthCells[f];
        if (a) {
          e = a.childNodes[0];
          e.onclick = null;
          a.className = "rcDisabled";
        }
      }
    }
  },
  _isMonthYearPicker: function () {
    return this._getMonthYearPicker();
  },
  CreateButton: function (b, d, f, c, e) {
    var a;
    if (e !== Telerik.Web.UI.RenderMode.Classic) {
      a = document.createElement("a");
      a.href = "#";
      a.innerHTML = f;
    } else {
      a = document.createElement("input");
      a.type = "button";
      a.value = f;
    }
    a.id = b;
    if ("function" == typeof c) {
      a.onclick = c;
    }
    d.appendChild(a);
    return a;
  },
  FillYears: function () {
    var f = this.StartYear;
    var j = this.YearCells;
    var k = [];
    var g = this;
    var a;
    var e = j.length / 2;
    var h = this;
    var d = $find(this.CalendarID)._enableRippleEffect
      ? Telerik.Web.UI.MaterialRippleManager.getInstance()
      : null;
    if (d && this.DomElement.parentElement) {
      d.disposeRippleZone(this.DomElement);
    }
    for (var b = 0; b < e; b++) {
      a = j[b * 2];
      this.SelectCell(a, false);
      a.id = "rcMView_" + f.toString();
      var c = a.getElementsByTagName("a")[0];
      c.href = "#";
      c.innerHTML = f;
      c.Year = f;
      if (c.Year < this.MinYear[0] || c.Year > this.MaxYear[0]) {
        c.onclick = null;
        a.className = "rcDisabled";
      } else {
        a.className = "";
        if (c.onclick == null) {
          c.onclick = function (i) {
            if (!i) {
              i = window.event;
            }
            var l = h.Year;
            h.SelectYear(this.Year);
            h._fireYearSelectedEvent(l, this.parentNode);
            h._disableOutOfRangeMonths();
            if (i.preventDefault) {
              i.preventDefault();
            }
            return false;
          };
        }
      }
      k[f] = a;
      a = j[b * 2 + 1];
      this.SelectCell(a, false);
      a.id = "rcMView_" + (f + e).toString();
      c = a.getElementsByTagName("a")[0];
      c.href = "#";
      c.innerHTML = f + e;
      c.Year = f + e;
      if (c.Year < this.MinYear[0] || c.Year > this.MaxYear[0]) {
        c.onclick = null;
        a.className = "rcDisabled";
      } else {
        a.className = "";
        if (c.onclick == null) {
          c.onclick = function (i) {
            if (!i) {
              i = window.event;
            }
            var l = h.Year;
            h.SelectYear(this.Year);
            h._fireYearSelectedEvent(l, this.parentNode);
            h._disableOutOfRangeMonths();
            if (i.preventDefault) {
              i.preventDefault();
            }
            return false;
          };
        }
      }
      k[f + e] = a;
      f++;
    }
    this.YearsLookup = k;
    if (d && this.DomElement.parentElement) {
      d.initializeRippleZone({
        element: g.DomElement,
        rippleConfigurations: [
          { containerSelector: "a", disabledClass: "rcDisabled" },
        ],
      });
    }
  },
  _fireYearSelectedEvent: function (e, a) {
    var b = this._getMonthYearPicker();
    if (b) {
      var d = null;
      var c = null;
      if (e != undefined) {
        d = new Date(e, this.Month, 1);
        c = new Date(this.Year, this.Month, 1);
      } else {
        c = new Date(this.Year, 0, 1);
      }
      b._raiseYearSelected(d, c, a);
    }
  },
  SelectCell: function (a, c) {
    if (a) {
      var b = "rcSelected";
      if (false == c) {
        if (a.className.indexOf("rcDisabled") == -1) {
          b = "";
        } else {
          b = a.className.replace("rcSelected", "");
        }
      }
      a.className = b;
    }
  },
  SelectYear: function (a) {
    var b = this.YearsLookup[a];
    this.Year = a;
    this.SelectCell(this.SelectedYearCell, false);
    this.SelectCell(b, true);
    this.SelectedYearCell = b;
  },
  _getMonthYearPicker: function () {
    var a = $find(this.CalendarID);
    if (a && a.constructor.getName() == "Telerik.Web.UI.RadMonthYearPicker") {
      return a;
    }
    return null;
  },
  SelectMonth: function (a) {
    var b = this.MonthCells[a];
    this.Month = a;
    this.SelectCell(this.SelectedMonthCell, false);
    this.SelectCell(b, true);
    this.SelectedMonthCell = b;
  },
  ScrollYears: function (b) {
    this.StartYear += b;
    this.FillYears();
    this.SetNavCells();
    var a = this._getMonthYearPicker();
    if (a) {
      a._raiseViewChangedEvent();
    }
    this.SelectYear(this.Year);
  },
  SetNavCells: function () {
    var c = this.StartYear + 10;
    var b = this.FastNavPrevYearsLink;
    var a = this.FastNavNextYearsLink;
    var d = this;
    if (this.StartYear < this.MinYear[0]) {
      Sys.UI.DomElement.addCssClass(b, "rcDisabled");
      b.onclick = null;
    } else {
      Sys.UI.DomElement.removeCssClass(b, "rcDisabled");
      if (b.onclick == null) {
        b.onclick = function () {
          d.ScrollYears(-10);
        };
      }
    }
    if (c > this.MaxYear[0]) {
      Sys.UI.DomElement.addCssClass(a, "rcDisabled");
      a.onclick = null;
    } else {
      Sys.UI.DomElement.removeCssClass(a, "rcDisabled");
      if (a.onclick == null) {
        a.onclick = function () {
          d.ScrollYears(10);
        };
      }
    }
  },
  _appendMonthCellProperties: function (a, d) {
    var b = a.childNodes[0];
    a.unselectable = "on";
    var c = this.MonthNames[d];
    if (c) {
      a.id = "rcMView_" + c;
      a.Month = b.Month = d;
      var e = this;
      b.onclick = function (f) {
        if (!f) {
          f = window.event;
        }
        var h = e.Month;
        e.SelectMonth(this.Month);
        e._setActive(this);
        var g = e._getMonthYearPicker();
        if (g) {
          e._fireMonthSelectedEvent(g, e, h, a);
        }
        if (f.preventDefault) {
          f.preventDefault();
        }
        return false;
      };
    }
    return a;
  },
  _fireMonthSelectedEvent: function (b, f, e, a) {
    var d = null;
    var c = null;
    if (e != undefined) {
      d = new Date(f.Year, e, 1);
      c = new Date(f.Year, this.Month, 1);
    } else {
      c = new Date(f.Year, this.Month, 1);
    }
    b._raiseMonthSelected(d, c, a);
  },
  AddMonthCell: function (e, d) {
    var a = e.insertCell(e.cells.length);
    var b = document.createElement("a");
    a.appendChild(b);
    b.href = "#";
    b.innerHTML = "&nbsp;";
    a.unselectable = "on";
    var c = this.MonthNames[d];
    if (c) {
      a.id = "rcMView_" + c;
      b.innerHTML = c;
      a.Month = b.Month = d;
      var f = this;
      b.onclick = function (g) {
        if (!g) {
          g = window.event;
        }
        f.SelectMonth(this.Month);
        if (g.preventDefault) {
          g.preventDefault();
        }
        return false;
      };
    }
    return a;
  },
  GetYear: function () {
    return this.Year;
  },
  GetMonth: function () {
    return this.Month;
  },
  ShowMonthYearView: function (e, h, i, c, j, b, f, d) {
    if (!e) {
      return;
    }
    e.EnableScreenBoundaryDetection =
      this.EnableScreenBoundaryDetection.toUpperCase() == "FALSE"
        ? false
        : true;
    e.ShowAnimationDuration = parseInt(this.ShowAnimationDuration, 10);
    e.ShowAnimationType = parseInt(this.ShowAnimationType, 10);
    e.HideAnimationDuration = parseInt(this.HideAnimationDuration, 10);
    e.HideAnimationType = parseInt(this.HideAnimationType, 10);
    this.Popup = e;
    this.StartYear = j - 4;
    var g = this.DomElement;
    if (!g) {
      var a = $get(d + "_wrapperElement");
      g = this._appendStylesAndPropertiesToMonthYearView(a.childNodes[0], f);
      this.DomElement = g;
    } else {
      this.SetNavCells();
    }
    this.FillYears();
    this.SetNavCells();
    this.SelectYear(j);
    this.SelectMonth(c - 1);
    this._disableOutOfRangeMonths();
    this.ExitFunc = b;
    e.Show(
      h,
      i,
      g,
      Telerik.Web.UI.Calendar.Utils.AttachMethod(this.OnExit, this)
    );
  },
  Show: function (c, f, g, b, h, a, d) {
    if (!c) {
      return;
    }
    c.EnableScreenBoundaryDetection =
      this.EnableScreenBoundaryDetection.toUpperCase() == "FALSE"
        ? false
        : true;
    c.ShowAnimationDuration = parseInt(this.ShowAnimationDuration, 10);
    c.ShowAnimationType = parseInt(this.ShowAnimationType, 10);
    c.HideAnimationDuration = parseInt(this.HideAnimationDuration, 10);
    c.HideAnimationType = parseInt(this.HideAnimationType, 10);
    this.Popup = c;
    this.StartYear = h - 4;
    var e = this.DomElement;
    if (!e) {
      e = this.CreateLayout(d);
      this.DomElement = e;
    } else {
      this.SetNavCells();
    }
    this.FillYears();
    this.SelectYear(h);
    this._disableOutOfRangeMonths();
    this.SelectMonth(b - 1);
    this.ExitFunc = a;
    c.Show(
      f,
      g,
      e,
      Telerik.Web.UI.Calendar.Utils.AttachMethod(this.OnExit, this)
    );
  },
  OnExit: function () {
    if ("function" == typeof this.ExitFunc) {
      this.ExitFunc(this.Year, this.Month, this.Date);
      this.Date = null;
    }
  },
  OnToday: function (a) {
    var c = new Date();
    var b = this._getMonthYearPicker();
    this.Date = c.getDate();
    this.Month = c.getMonth();
    this.Year = c.getFullYear();
    this.Popup.Hide(true);
    this._clearActive();
    if (b) {
      b._popupButton.focus();
    }
  },
  OnOK: function (a) {
    var b = this._getMonthYearPicker();
    this.Popup.Hide(true);
    this._clearActive();
    if (b) {
      b._popupButton.focus();
    }
  },
  OnCancel: function (a) {
    var b = this._getMonthYearPicker();
    this.Popup.Hide();
    this._clearActive();
    if (b) {
      b._popupButton.focus();
    }
  },
  dispose: function () {
    if (this.DomElement) {
      var a = this.DomElement.getElementsByTagName("a");
      for (var b = 0; b < a.length; b++) {
        a[b].onclick = null;
      }
      window.$clearHandlers(this.DomElement);
      this._keyDownDelegate = null;
      this.DomElement = null;
    }
  },
};
Telerik.Web.UI.Calendar.MonthYearFastNavigation.registerClass(
  "Telerik.Web.UI.Calendar.MonthYearFastNavigation",
  null,
  Sys.IDisposable
);
Type.registerNamespace("Telerik.Web.UI.Calendar");
Telerik.Web.UI.Calendar.Selector = function (f, e, a, c, d, b) {
  this.SelectorType = f;
  this.RadCalendar = c;
  this.RadCalendarView = d;
  this.DomElement = b;
  this.IsSelected = false;
  this.RowIndex = e;
  this.ColIndex = a;
};
Telerik.Web.UI.Calendar.Selector.prototype = {
  Dispose: function () {
    this.disposed = true;
    this.DomElement = null;
    this.RadCalendar = null;
    this.RadCalendarView = null;
  },
  MouseOver: function () {
    var e = document.getElementById(this.RadCalendarView.ID);
    var b;
    var d;
    var c;
    var a;
    var f;
    switch (this.SelectorType) {
      case Telerik.Web.UI.Calendar.Utils.COLUMN_HEADER:
        for (b = 0; b < this.RadCalendarView.Rows; b++) {
          c = e.rows[this.RowIndex + b].cells[this.ColIndex].DayId;
          a = Telerik.Web.UI.Calendar.Utils.GetDateFromId(c);
          f = this.RadCalendarView.RenderDays.Get(a);
          if (f) {
            f.MouseOver();
          }
        }
        break;
      case Telerik.Web.UI.Calendar.Utils.VIEW_HEADER:
        for (b = 0; b < this.RadCalendarView.Rows; b++) {
          for (d = 0; d < this.RadCalendarView.Cols; d++) {
            c = e.rows[this.RowIndex + b].cells[this.ColIndex + d].DayId;
            a = Telerik.Web.UI.Calendar.Utils.GetDateFromId(c);
            f = this.RadCalendarView.RenderDays.Get(a);
            if (f) {
              f.MouseOver();
            }
          }
        }
        break;
      case Telerik.Web.UI.Calendar.Utils.ROW_HEADER:
        for (b = 0; b < this.RadCalendarView.Cols; b++) {
          c = e.rows[this.RowIndex].cells[this.ColIndex + b].DayId;
          a = Telerik.Web.UI.Calendar.Utils.GetDateFromId(c);
          f = this.RadCalendarView.RenderDays.Get(a);
          if (f) {
            f.MouseOver();
          }
        }
        break;
    }
  },
  MouseOut: function () {
    var e = document.getElementById(this.RadCalendarView.ID);
    var b;
    var d;
    var a;
    var f;
    var c;
    switch (this.SelectorType) {
      case Telerik.Web.UI.Calendar.Utils.COLUMN_HEADER:
        for (b = 0; b < this.RadCalendarView.Rows; b++) {
          c = e.rows[this.RowIndex + b].cells[this.ColIndex].DayId;
          a = Telerik.Web.UI.Calendar.Utils.GetDateFromId(c);
          f = this.RadCalendarView.RenderDays.Get(a);
          if (f) {
            f.MouseOut();
          }
        }
        break;
      case Telerik.Web.UI.Calendar.Utils.VIEW_HEADER:
        for (b = 0; b < this.RadCalendarView.Rows; b++) {
          for (d = 0; d < this.RadCalendarView.Cols; d++) {
            c = e.rows[this.RowIndex + b].cells[this.ColIndex + d].DayId;
            a = Telerik.Web.UI.Calendar.Utils.GetDateFromId(c);
            f = this.RadCalendarView.RenderDays.Get(a);
            if (f) {
              f.MouseOut();
            }
          }
        }
        break;
      case Telerik.Web.UI.Calendar.Utils.ROW_HEADER:
        for (b = 0; b < this.RadCalendarView.Cols; b++) {
          c = e.rows[this.RowIndex].cells[this.ColIndex + b].DayId;
          a = Telerik.Web.UI.Calendar.Utils.GetDateFromId(c);
          f = this.RadCalendarView.RenderDays.Get(a);
          if (f) {
            f.MouseOut();
          }
        }
        break;
    }
  },
  _removeRangeSelection: function () {
    var a = this.RadCalendar;
    if (
      a._rangeSelectionMode != Telerik.Web.UI.Calendar.RangeSelectionMode.None
    ) {
      a._removeRangeSelection();
      a._serializeRangeSelectionDates();
    }
  },
  Click: function () {
    var b;
    switch (this.SelectorType) {
      case Telerik.Web.UI.Calendar.Utils.COLUMN_HEADER:
        b = new Telerik.Web.UI.CalendarClickEventArgs(
          this.DomElement,
          this.ColIndex
        );
        this._removeRangeSelection();
        this.RadCalendar.raise_columnHeaderClick(b);
        if (b.get_cancel() == true) {
          return;
        }
        break;
      case Telerik.Web.UI.Calendar.Utils.ROW_HEADER:
        b = new Telerik.Web.UI.CalendarClickEventArgs(
          this.DomElement,
          this.RowIndex
        );
        this._removeRangeSelection();
        this.RadCalendar.raise_rowHeaderClick(b);
        if (b.get_cancel() == true) {
          return;
        }
        break;
      case Telerik.Web.UI.Calendar.Utils.VIEW_HEADER:
        b = new Telerik.Web.UI.CalendarClickEventArgs(this.DomElement, -1);
        this._removeRangeSelection();
        this.RadCalendar.raise_viewSelectorClick(b);
        if (b.get_cancel() == true) {
          return;
        }
        break;
    }
    if (this.RadCalendar.get_enableMultiSelect()) {
      var f = document.getElementById(this.RadCalendarView.ID);
      this.IsSelected = true;
      var c, e, d, a, g;
      switch (this.SelectorType) {
        case Telerik.Web.UI.Calendar.Utils.COLUMN_HEADER:
          for (e = 0; e < this.RadCalendarView.Rows; e++) {
            d = f.rows[this.RowIndex + e].cells[this.ColIndex].DayId;
            a = Telerik.Web.UI.Calendar.Utils.GetDateFromId(d);
            g = this.RadCalendarView.RenderDays.Get(a);
            if (!g) {
              continue;
            }
            if (
              g.IsSelected == false &&
              this.RadCalendar.Selection.CanSelect(a)
            ) {
              this.IsSelected = !this.IsSelected;
              break;
            }
          }
          for (c = 0; c < this.RadCalendarView.Rows; c++) {
            d = f.rows[this.RowIndex + c].cells[this.ColIndex].DayId;
            a = Telerik.Web.UI.Calendar.Utils.GetDateFromId(d);
            g = this.RadCalendarView.RenderDays.Get(a);
            if (!g) {
              continue;
            }
            if (this.IsSelected) {
              if (g.IsSelected) {
                g.Select(false, true);
              }
            } else {
              if (!g.IsSelected) {
                g.Select(true, true);
              }
            }
          }
          break;
        case Telerik.Web.UI.Calendar.Utils.VIEW_HEADER:
          for (c = 0; c < this.RadCalendarView.Rows; c++) {
            for (e = 0; e < this.RadCalendarView.Cols; e++) {
              d = f.rows[this.RowIndex + c].cells[this.ColIndex + e].DayId;
              a = Telerik.Web.UI.Calendar.Utils.GetDateFromId(d);
              g = this.RadCalendarView.RenderDays.Get(a);
              if (!g) {
                continue;
              }
              if (
                g.IsSelected == false &&
                this.RadCalendar.Selection.CanSelect(a)
              ) {
                this.IsSelected = !this.IsSelected;
                break;
              }
            }
            if (this.IsSelected == false) {
              break;
            }
          }
          for (c = 0; c < this.RadCalendarView.Rows; c++) {
            for (e = 0; e < this.RadCalendarView.Cols; e++) {
              d = f.rows[this.RowIndex + c].cells[this.ColIndex + e].DayId;
              a = Telerik.Web.UI.Calendar.Utils.GetDateFromId(d);
              g = this.RadCalendarView.RenderDays.Get(a);
              if (!g) {
                continue;
              }
              if (this.IsSelected) {
                if (g.IsSelected) {
                  g.Select(false, true);
                }
              } else {
                if (!g.IsSelected) {
                  g.Select(true, true);
                }
              }
            }
          }
          break;
        case Telerik.Web.UI.Calendar.Utils.ROW_HEADER:
          for (e = 0; e < this.RadCalendarView.Cols; e++) {
            d = f.rows[this.RowIndex].cells[this.ColIndex + e].DayId;
            a = Telerik.Web.UI.Calendar.Utils.GetDateFromId(d);
            g = this.RadCalendarView.RenderDays.Get(a);
            if (!g) {
              continue;
            }
            if (
              g.IsSelected == false &&
              this.RadCalendar.Selection.CanSelect(a)
            ) {
              this.IsSelected = !this.IsSelected;
              break;
            }
          }
          for (c = 0; c < this.RadCalendarView.Cols; c++) {
            d = f.rows[this.RowIndex].cells[this.ColIndex + c].DayId;
            a = Telerik.Web.UI.Calendar.Utils.GetDateFromId(d);
            g = this.RadCalendarView.RenderDays.Get(a);
            if (!g) {
              continue;
            }
            if (this.IsSelected) {
              if (g.IsSelected) {
                g.Select(false, true);
              }
            } else {
              if (!g.IsSelected) {
                g.Select(true, true);
              }
            }
          }
          break;
      }
      this.RadCalendar._serializeSelectedDates();
      this.RadCalendar._submit("d");
    }
  },
};
Telerik.Web.UI.Calendar.Selector.registerClass(
  "Telerik.Web.UI.Calendar.Selector"
);
Type.registerNamespace("Telerik.Web.UI.Calendar");
Telerik.Web.UI.Calendar.RangeValidation = function (b, a) {
  this._rangeMinDate = b;
  this._rangeMaxDate = a;
};
Telerik.Web.UI.Calendar.RangeValidation.prototype = {
  IsDateValid: function (a) {
    return (
      this.CompareDates(this._rangeMinDate, a) <= 0 &&
      this.CompareDates(a, this._rangeMaxDate) <= 0
    );
  },
  CompareDates: function (c, d) {
    if (!c || c.length != 3) {
      throw new Error("Date1 must be array: [y, m, d]");
    }
    if (!d || d.length != 3) {
      throw new Error("Date2 must be array: [y, m, d]");
    }
    var g = c[0];
    var h = d[0];
    if (g < h) {
      return -1;
    }
    if (g > h) {
      return 1;
    }
    var e = c[1];
    var f = d[1];
    if (e < f) {
      return -1;
    }
    if (e > f) {
      return 1;
    }
    var a = c[2];
    var b = d[2];
    if (a < b) {
      return -1;
    }
    if (a > b) {
      return 1;
    }
    return 0;
  },
  InSameMonth: function (a, b) {
    return a[0] == b[0] && a[1] == b[1];
  },
};
Telerik.Web.UI.Calendar.RangeValidation.registerClass(
  "Telerik.Web.UI.Calendar.RangeValidation"
);
Type.registerNamespace("Telerik.Web.UI.Calendar");
Telerik.Web.UI.Calendar.Selection = function (b, d, c, a) {
  this._specialDays = d;
  this._recurringDays = c;
  this._enableMultiSelect = a;
  this._selectedDates = new Telerik.Web.UI.Calendar.DateCollection();
  this._rangeValidation = b;
};
Telerik.Web.UI.Calendar.Selection.prototype = {
  CanSelect: function (a) {
    if (!this._rangeValidation.IsDateValid(a)) {
      return false;
    }
    var c = this._specialDays.Get(a);
    if (c != null) {
      return c.IsSelectable != 0;
    } else {
      var b = this._recurringDays.Get(a);
      if (b != null) {
        return b.IsSelectable != 0;
      } else {
        return true;
      }
    }
  },
  Add: function (a) {
    if (!this.CanSelect(a)) {
      return;
    }
    if (!this._enableMultiSelect) {
      this._selectedDates.Clear();
    }
    this._selectedDates.Add(a, a);
  },
  Remove: function (a) {
    this._selectedDates.Remove(a);
  },
};
Telerik.Web.UI.Calendar.Selection.registerClass(
  "Telerik.Web.UI.Calendar.Selection"
);
Type.registerNamespace("Telerik.Web.UI.Calendar");
Telerik.Web.UI.Calendar.GregorianCalendar = {
  DatePartDay: 3,
  DatePartDayOfYear: 1,
  DatePartMonth: 2,
  DatePartYear: 0,
  DaysPer100Years: 36524,
  DaysPer400Years: 146097,
  DaysPer4Years: 1461,
  DaysPerYear: 365,
  DaysTo10000: 3652059,
  DaysToMonth365: [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365],
  DaysToMonth366: [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366],
  MaxMillis: 315537897600000,
  MillisPerDay: 86400000,
  MillisPerHour: 3600000,
  MillisPerMinute: 60000,
  MillisPerSecond: 1000,
  MaxYear: 9999,
  GetDateFromArguments: function () {
    var c, b, a;
    switch (arguments.length) {
      case 1:
        a = arguments[0];
        if ("object" != typeof a) {
          throw new Error("Unsupported input format");
        }
        if (a.getDate) {
          c = a.getFullYear();
          b = a.getMonth() + 1;
          a = a.getDate();
        } else {
          if (3 == a.length) {
            c = a[0];
            b = a[1];
            a = a[2];
          } else {
            throw new Error("Unsupported input format");
          }
        }
        break;
      case 3:
        c = arguments[0];
        b = arguments[1];
        a = arguments[2];
        break;
      default:
        throw new Error("Unsupported input format");
    }
    c = parseInt(c, 10);
    if (isNaN(c)) {
      throw new Error("Invalid YEAR");
    }
    b = parseInt(b, 10);
    if (isNaN(b)) {
      throw new Error("Invalid MONTH");
    }
    a = parseInt(a, 10);
    if (isNaN(a)) {
      throw new Error("Invalid DATE");
    }
    return [c, b, a];
  },
  DateToTicks: function () {
    var a = this.GetDateFromArguments.apply(null, arguments);
    var d = a[0];
    var c = a[1];
    var b = a[2];
    return this.GetAbsoluteDate(d, c, b);
  },
  GetAbsoluteDate: function (h, f, b) {
    if (h < 1 || h > this.MaxYear + 1) {
      throw new Error("Year is out of range [1..9999].");
    }
    if (f < 1 || f > 12) {
      throw new Error("Month is out of range [1..12].");
    }
    var e = h % 4 == 0 && (h % 100 != 0 || h % 400 == 0);
    var a = e ? this.DaysToMonth366 : this.DaysToMonth365;
    var c = a[f] - a[f - 1];
    if (b < 1 || b > c) {
      throw new Error("Day is out of range for the current month.");
    }
    var d = h - 1;
    var g =
      d * this.DaysPerYear +
      this.GetInt(d / 4) -
      this.GetInt(d / 100) +
      this.GetInt(d / 400) +
      a[f - 1] +
      b -
      1;
    return g;
  },
  GetDatePartDay: function (f) {
    var a = this.GetInt(f);
    var b = this.GetInt(a / this.DaysPer400Years);
    a -= b * this.DaysPer400Years;
    var c = this.GetInt(a / this.DaysPer100Years);
    if (c == 4) {
      c = 3;
    }
    a -= c * this.DaysPer100Years;
    var d = this.GetInt(a / this.DaysPer4Years);
    a -= d * this.DaysPer4Years;
    var e = this.GetInt(a / this.DaysPerYear);
    if (e == 4) {
      e = 3;
    }
    a -= e * 365;
    return a + 1;
  },
  TicksToDate: function (j) {
    var i = [null, null, null];
    var b = this.GetInt(j);
    var c = this.GetInt(b / this.DaysPer400Years);
    b -= c * this.DaysPer400Years;
    var d = this.GetInt(b / this.DaysPer100Years);
    if (d == 4) {
      d = 3;
    }
    b -= d * this.DaysPer100Years;
    var e = this.GetInt(b / this.DaysPer4Years);
    b -= e * this.DaysPer4Years;
    var f = this.GetInt(b / this.DaysPerYear);
    if (f == 4) {
      f = 3;
    }
    i[0] = c * 400 + d * 100 + e * 4 + f + 1;
    b -= f * 365;
    var a = f == 3 && (e != 24 || d == 3);
    var h = a ? this.DaysToMonth366 : this.DaysToMonth365;
    var g = b >> 6;
    while (b >= h[g]) {
      g++;
    }
    i[1] = g;
    i[2] = b - h[g - 1] + 1;
    return i;
  },
  GetDayOfMonth: function (a) {
    return this.TicksToDate(this.DateToTicks(a))[2] + 1;
  },
  GetDayOfWeek: function (a) {
    var b = this.DateToTicks(a);
    var c = b + 1;
    return this.GetInt(c % 7);
  },
  AddMonths: function (a, d) {
    var b = this.DateToTicks(a);
    var c = this.TicksToDate(b);
    var e = c[0];
    var f = c[1];
    var g = c[2];
    var h = this.GetInt(f - 1 + d);
    if (h >= 0) {
      f = this.GetInt((h % 12) + 1);
      e += this.GetInt(h / 12);
    } else {
      f = this.GetInt(12 + ((h + 1) % 12));
      e += this.GetInt((h - 11) / 12);
    }
    var j =
      e % 4 == 0 && (e % 100 != 0 || e % 400 == 0)
        ? this.DaysToMonth366
        : this.DaysToMonth365;
    var i = j[f] - j[f - 1];
    if (g > i) {
      g = i;
    }
    return [e, f, g];
  },
  AddYears: function (a, b) {
    return this.AddMonths(a, b * 12);
  },
  AddDays: function (a, c) {
    var b = this.DateToTicks(a);
    var e = this.GetInt(c);
    var d = b + e;
    if (d < 0) {
      d = 0;
    }
    return this.TicksToDate(d);
  },
  GetWeekOfYear: function (a, c, b) {
    switch (c) {
      case Telerik.Web.UI.Calendar.Utils.FIRST_DAY:
        return this.GetInt(this.GetFirstDayWeekOfYear(a, b));
      case Telerik.Web.UI.Calendar.Utils.FIRST_FULL_WEEK:
        return this.GetInt(this.InternalGetWeekOfYearFullDays(a, b, 7, 365));
      case Telerik.Web.UI.Calendar.Utils.FIRST_FOUR_DAY_WEEK:
        return this.GetInt(this.InternalGetWeekOfYearFullDays(a, b, 4, 365));
    }
  },
  InternalGetWeekOfYearFullDays: function (i, b, c, a) {
    var g = this.GetDayOfYear(i) - 1;
    var d = this.GetDayOfWeek(i) - (g % 7);
    var e = (b - d + 14) % 7;
    if (e != 0 && e >= c) {
      e -= 7;
    }
    var f = g - e;
    if (f >= 0) {
      return f / 7 + 1;
    }
    var h = this.GetYear(i);
    g = this.GetDaysInYear(h - 1);
    d -= g % 7;
    e = (b - d + 14) % 7;
    if (e != 0 && e >= c) {
      e -= 7;
    }
    f = g - e;
    return f / 7 + 1;
  },
  GetFirstDayWeekOfYear: function (a, b) {
    var c = this.GetDayOfYear(a) - 1;
    var d = this.GetDayOfWeek(a) - (c % 7);
    var e = (d - b + 14) % 7;
    return (c + e) / 7 + 1;
  },
  GetLeapMonth: function (a) {
    return 0;
  },
  GetMonth: function (a) {
    return this.TicksToDate(this.DateToTicks(a))[1];
  },
  GetMonthsInYear: function (a) {
    return 12;
  },
  GetDaysInMonth: function (c, a) {
    c = this.GetGregorianYear(c);
    var b =
      c % 4 == 0 && (c % 100 != 0 || c % 400 == 0)
        ? this.DaysToMonth366
        : this.DaysToMonth365;
    return b[a] - b[a - 1];
  },
  GetDaysInYear: function (a) {
    a = this.GetGregorianYear(a);
    if (a % 4 == 0 && (a % 100 != 0 || a % 400 == 0)) {
      return 366;
    }
    return 365;
  },
  GetDayOfYear: function (a) {
    return this.GetInt(this.GetDatePartDay(this.DateToTicks(a)));
  },
  GetGregorianYear: function (a) {
    return a;
  },
  GetYear: function (a) {
    return this.TicksToDate(this.DateToTicks(a))[0];
  },
  IsLeapDay: function (a) {
    var c = a.getMonth();
    var b = a.getDate();
    if (this.IsLeapYear(a) && c == 2 && b == 29) {
      return true;
    }
    return false;
  },
  IsLeapMonth: function (a) {
    var b = a.getMonth();
    return this.IsLeapYear(a) && b === 2;
  },
  IsLeapYear: function (a) {
    var b = a.getFullYear();
    if (b % 4 != 0) {
      return false;
    }
    if (b % 100 == 0) {
      return b % 400 == 0;
    }
    return true;
  },
  GetInt: function (a) {
    return a | a;
  },
};
Type.registerNamespace("Telerik.Web.UI.Calendar");
Telerik.Web.UI.Calendar.DateCollection = function () {
  this.Initialize();
  this._lastInsertedKey = null;
};
Telerik.Web.UI.Calendar.DateCollection.prototype = {
  Initialize: function () {
    this.Container = {};
  },
  GetStringKey: function (a) {
    return a.join("-");
  },
  Add: function (b, a) {
    if (!b || !a) {
      return;
    }
    var c = this.GetStringKey(b);
    this.Container[c] = a;
    this._lastInsertedKey = b;
  },
  Remove: function (a) {
    if (!a) {
      return;
    }
    var b = this.GetStringKey(a);
    if (this.Container[b] != null) {
      this.Container[b] = null;
      delete this.Container[b];
    }
  },
  Clear: function () {
    this.Initialize();
  },
  Get: function (a) {
    if (a) {
      return this.Container[a.join("-")];
    }
  },
  GetValues: function () {
    var b = [];
    for (var a in this.Container) {
      if (a.indexOf("-") == -1) {
        continue;
      }
      b[b.length] = this.Container[a];
    }
    return b;
  },
  Count: function () {
    return this.GetValues().length;
  },
};
Telerik.Web.UI.Calendar.DateCollection.registerClass(
  "Telerik.Web.UI.Calendar.DateCollection"
);
Type.registerNamespace("Telerik.Web.UI.Calendar");
Telerik.Web.UI.Calendar.CalendarView = function (K, l, t, d, O, x, Y, X, I, m) {
  this._renderMode = K._renderMode;
  this._onClickDelegate = null;
  this._onMouseOverDelegate = null;
  this._onMouseOutDelegate = null;
  this._onKeyDownDelegate = null;
  this._SingleViewMatrix = l;
  this._ViewInMonthDate = m;
  this.MonthsInView = 1;
  this._MonthStartDate = null;
  this._MonthDays = null;
  this._MonthEndDate = null;
  this._ViewStartDate = null;
  this._ContentRows = O;
  this._ContentColumns = d;
  this._TitleContent = null;
  this.RadCalendar = K;
  this.DateTimeFormatInfo = K ? K.DateTimeFormatInfo : null;
  this.Calendar = this.DateTimeFormatInfo
    ? this.DateTimeFormatInfo.Calendar
    : null;
  if (!x) {
    this.SetViewDateRange();
  }
  this.DomTable = l;
  this.ID = t;
  this.Cols = d;
  this.Rows = O;
  this.IsMultiView = x;
  if (x) {
    return;
  }
  if (!this.RadCalendar.get_enabled()) {
    return;
  }
  var o = false;
  var n = false;
  var q = false;
  var p = false;
  this.UseRowHeadersAsSelectors = Y;
  this.UseColumnHeadersAsSelectors = X;
  var N = 0;
  var c = l.rows[N].cells[0].id;
  if (c.indexOf("_hd") > -1) {
    o = true;
    c = l.rows[++N].cells[0].id;
  }
  if (c.indexOf("_vs") > -1) {
    q = true;
  }
  var e = l.rows[N].cells.length - this.Cols;
  if (l.rows[N].cells[e] && l.rows[N].cells[e].id.indexOf("_cs") > -1) {
    n = true;
  }
  var M = l.rows.length - this.Rows;
  if (l.rows[N + M] && l.rows[N + M].cells[0].id.indexOf("_rs") > -1) {
    p = true;
  }
  var T = 0;
  var S = 0;
  if (o) {
    T++;
  }
  if (n || q) {
    T++;
  }
  if (p || q) {
    S++;
  }
  this.StartRowIndex = T;
  this.StartColumnIndex = S;
  var a = [];
  if (I == Telerik.Web.UI.Calendar.Utils.RENDERINROWS) {
    a = this.ComputeHeaders(O, d);
  }
  if (I == Telerik.Web.UI.Calendar.Utils.RENDERINCOLUMNS) {
    a = this.ComputeHeaders(d, O);
  }
  var s;
  var r;
  var b;
  if (!x) {
    this.RenderDays = new Telerik.Web.UI.Calendar.DateCollection();
    for (s = T; s < l.rows.length; s++) {
      var L = l.rows[s];
      for (var D = S; D < L.cells.length; D++) {
        var g = L.cells[D];
        if (typeof g.DayId == "undefined") {
          g.DayId = "";
        }
        var J = this.GetDate(s - T, D - S, d, O, this._ViewStartDate);
        var w = !this.RadCalendar.RangeValidation.IsDateValid(J);
        var v = !(
          this.RadCalendar.RangeValidation.CompareDates(
            J,
            this._MonthStartDate
          ) >= 0 &&
          this.RadCalendar.RangeValidation.CompareDates(
            this._MonthEndDate,
            J
          ) >= 0
        );
        if (w || (v && !this.RadCalendar.get_showOtherMonthsDays())) {
          continue;
        }
        if (isNaN(J[0]) || isNaN(J[1]) || isNaN(J[2])) {
          continue;
        }
        var h = g.DayId;
        if (!h) {
          g.DayId = this.RadCalendar.get_id() + "_" + J.join("_");
          h = g.DayId;
        }
        if (!h) {
          continue;
        }
        var P = this.RadCalendar.SpecialDays.Get(J);
        var k = this.Calendar.GetDayOfWeek(J);
        var C = 0 == k || 6 == k;
        var B =
          P && P.Repeatable == Telerik.Web.UI.Calendar.Utils.RECURRING_TODAY;
        var u = P ? Boolean(P.IsDisabled) : false;
        var z;
        if (u) {
          z = false;
        } else {
          z = P ? Boolean(P.IsSelectable) : true;
        }
        var A;
        if (!z) {
          A = false;
        } else {
          A =
            (P && Boolean(P.IsSelected)) ||
            null != this.RadCalendar.Selection._selectedDates.Get(J);
        }
        var y = P ? P.Repeatable : null;
        var W = P ? P.ToolTip : null;
        var V = J[1] == this._MonthStartDate[1];
        var R = null;
        if (P) {
          var Q = "SpecialDayStyle_" + P.get_date().join("_");
          R = P.ItemStyle[Q];
        }
        var U = P
          ? P.ItemStyle
          : this.RadCalendar._getItemStyle(!V, w, C, A, u, R);
        var f = [
          null,
          J,
          z,
          A,
          u,
          B,
          y,
          C,
          W,
          U,
          g,
          this.RadCalendar,
          h,
          this,
          s - T,
          D - S,
        ];
        var F = new Telerik.Web.UI.Calendar.RenderDay(f);
        this.RenderDays.Add(F.get_date(), F);
      }
    }
    r = Math.max(T - 1, 0);
    if (I == Telerik.Web.UI.Calendar.Utils.RENDERINCOLUMNS && n) {
      for (s = 0; s < this.Cols; s++) {
        b = l.rows[r].cells[S + s];
        if (this.isNumber(b.innerHTML)) {
          b.innerHTML = a[s];
        } else {
          break;
        }
      }
    }
    if (I == Telerik.Web.UI.Calendar.Utils.RENDERINROWS && p) {
      for (s = 0; s < this.Rows; s++) {
        b = l.rows[T + s].cells[0];
        if (this.isNumber(b.innerHTML)) {
          b.innerHTML = a[s];
        } else {
          break;
        }
      }
    }
    if (this.RadCalendar.get_presentationType() == 2) {
      return;
    }
    this._onClickDelegate = Function.createDelegate(this, this._onClickHandler);
    this._onMouseOverDelegate = Function.createDelegate(
      this,
      this._onMouseOverHandler
    );
    this._onMouseOutDelegate = Function.createDelegate(
      this,
      this._onMouseOutHandler
    );
    this._onKeyDownDelegate = Function.createDelegate(
      this,
      this._onKeyDownHandler
    );
    window.$addHandler(this.DomTable, "click", this._onClickDelegate);
    window.$addHandler(this.DomTable, "mouseover", this._onMouseOverDelegate);
    window.$addHandler(this.DomTable, "mouseout", this._onMouseOutDelegate);
    window.$addHandler(this.DomTable, "keydown", this._onKeyDownDelegate);
  }
  this.ColumnHeaders = [];
  if (n && this.UseColumnHeadersAsSelectors) {
    for (s = 0; s < this.Cols; s++) {
      b = l.rows[r].cells[S + s];
      var E = new Telerik.Web.UI.Calendar.Selector(
        Telerik.Web.UI.Calendar.Utils.COLUMN_HEADER,
        T,
        S + s,
        this.RadCalendar,
        this,
        b
      );
      this.ColumnHeaders[s] = E;
    }
  }
  this.RowHeaders = [];
  if (p && this.UseRowHeadersAsSelectors) {
    for (s = 0; s < this.Rows; s++) {
      b = l.rows[T + s].cells[0];
      var G = new Telerik.Web.UI.Calendar.Selector(
        Telerik.Web.UI.Calendar.Utils.ROW_HEADER,
        T + s,
        1,
        this.RadCalendar,
        this,
        b
      );
      this.RowHeaders[s] = G;
    }
  }
  this.ViewSelector = null;
  if (q) {
    var H = new Telerik.Web.UI.Calendar.Selector(
      Telerik.Web.UI.Calendar.Utils.VIEW_HEADER,
      r + 1,
      1,
      this.RadCalendar,
      this,
      l.rows[r].cells[0]
    );
    this.ViewSelector = H;
  }
};
Telerik.Web.UI.Calendar.CalendarView.prototype = {
  _onKeyDownHandler: function (a) {
    this._raiseKeyPressInternal(a);
  },
  _raiseKeyPressInternal: function (a) {
    if (
      this.RadCalendar._enableKeyboardNavigation &&
      !this.RadCalendar._enableMultiSelect
    ) {
      var c = a.keyCode ? a.keyCode : a.charCode;
      var b = false;
      var d = this._performSelectionOnFirstDateOfMonth(c);
      if (!d) {
        b = this._navigateToDate(c);
      }
      if (b || d || c == 13 || c == 32) {
        if (a.preventDefault) {
          a.preventDefault();
        }
        a.returnValue = false;
        return false;
      }
    }
  },
  _onMouseOverHandler: function (a) {
    this._onGenericHandler(a, "MouseOver");
  },
  _onMouseOutHandler: function (a) {
    this._onGenericHandler(a, "MouseOut");
  },
  _onClickHandler: function (a) {
    if (
      this.RadCalendar._enableKeyboardNavigation &&
      !this.RadCalendar._enableMultiSelect
    ) {
      this.DomTable.tabIndex = 100;
      this.DomTable.focus();
      this.RadCalendar._nextFocusedCell = null;
      this.RadCalendar._hoveredDate = null;
      if (this._renderMode === 2) {
        this._removeFocusStyles(this.DomTable);
      } else {
        this._removeHoverStyles(this.DomTable);
      }
    }
    this._onGenericHandler(a, "Click");
  },
  _onGenericHandler: function (b, c) {
    if (this.RadCalendar == null) {
      return;
    }
    var h = Telerik.Web.UI.Calendar.Utils.FindTarget(
      b,
      this.RadCalendar.get_id()
    );
    if (h == null) {
      return;
    }
    var d;
    if (h.DayId) {
      var f = Telerik.Web.UI.Calendar.Utils.GetRenderDay(this, h.DayId);
      if (f != null) {
        if (c == "Click") {
          f[c].apply(f, [b]);
        } else {
          f[c].apply(f);
        }
      }
    } else {
      if (h.id != null && h.id != "") {
        if (h.id.indexOf("_cs") > -1) {
          for (d = 0; d < this.ColumnHeaders.length; d++) {
            var a = this.ColumnHeaders[d];
            if (a.DomElement.id == h.id) {
              a[c].apply(a);
            }
          }
        } else {
          if (h.id.indexOf("_rs") > -1) {
            for (d = 0; d < this.RowHeaders.length; d++) {
              var g = this.RowHeaders[d];
              if (g.DomElement.id == h.id) {
                g[c].apply(g);
              }
            }
          } else {
            if (h.id.indexOf("_vs") > -1) {
              this.ViewSelector[c].apply(this.ViewSelector);
            }
          }
        }
      }
    }
  },
  isNumber: function (b) {
    return !isNaN(parseInt(b, 10));
  },
  ComputeHeaders: function (g, f) {
    var a = [];
    var b = this._ViewStartDate;
    var d;
    var e;
    var c;
    for (d = 0; d < g; d++) {
      if (f <= 7) {
        e = this.Calendar.AddDays(b, f - 1);
        if (e[2] < b[2]) {
          c = [e[0], e[1], 1];
          a[a.length] = this.GetWeekOfYear(c);
        } else {
          a[a.length] = this.GetWeekOfYear(b);
        }
        b = this.Calendar.AddDays(e, 1);
      } else {
        e = this.Calendar.AddDays(b, 6);
        if (e[2] < b[2]) {
          c = [e[0], e[1], 1];
          a[a.length] = this.GetWeekOfYear(c);
        } else {
          a[a.length] = this.GetWeekOfYear(b);
        }
        b = this.Calendar.AddDays(e, f - 6);
      }
    }
    return a;
  },
  GetDate: function (f, b, a, g, e) {
    var d;
    if (
      this.RadCalendar.get_orientation() ==
      Telerik.Web.UI.Calendar.Utils.RENDERINROWS
    ) {
      d = a * f + b;
    } else {
      if (
        this.RadCalendar.get_orientation() ==
        Telerik.Web.UI.Calendar.Utils.RENDERINCOLUMNS
      ) {
        d = g * b + f;
      }
    }
    var c = this.Calendar.AddDays(e, d);
    return c;
  },
  dispose: function () {
    if (this.disposed) {
      return;
    }
    this.disposed = true;
    var b;
    if (this.RenderDays != null) {
      var a = this.RenderDays.GetValues();
      for (b = 0; b < a.length; b++) {
        a[b].dispose();
      }
      this.RenderDays.Clear();
    }
    if (this.ColumnHeaders != null) {
      for (b = 0; b < this.ColumnHeaders.length; b++) {
        this.ColumnHeaders[b].Dispose();
      }
    }
    this.ColumnHeaders = null;
    if (this.RowHeaders != null) {
      for (b = 0; b < this.RowHeaders.length; b++) {
        this.RowHeaders[b].Dispose();
      }
    }
    window.$clearHandlers(this.DomTable);
    this.genericHandler = null;
    this.RowHeaders = null;
    if (this.ViewSelector != null) {
      this.ViewSelector.Dispose();
    }
    this.ViewSelector = null;
    this._SingleViewMatrix = null;
    this._ContentRows = null;
    this._ContentColumns = null;
    this.RadCalendar.RecurringDays.Clear();
    this.RadCalendar = null;
    this.Calendar = null;
    this.DomTable = null;
    this.Cols = null;
    this.Rows = null;
  },
  GetWeekOfYear: function (a) {
    return this.Calendar.GetWeekOfYear(
      a,
      this.DateTimeFormatInfo.CalendarWeekRule,
      this.NumericFirstDayOfWeek()
    );
  },
  NumericFirstDayOfWeek: function () {
    if (
      this.RadCalendar._firstDayOfWeek != Telerik.Web.UI.Calendar.Utils.DEFAULT
    ) {
      return this.RadCalendar._firstDayOfWeek;
    }
    return this.DateTimeFormatInfo.FirstDayOfWeek;
  },
  EffectiveVisibleDate: function () {
    var a = this._ViewInMonthDate || this.RadCalendar.FocusedDate;
    return [a[0], a[1], 1];
  },
  FirstCalendarDay: function (c) {
    var b = c;
    var a = this.Calendar.GetDayOfWeek(b) - this.NumericFirstDayOfWeek();
    if (a <= 0) {
      a += 7;
    }
    return this.Calendar.AddDays(b, -a);
  },
  SetViewDateRange: function () {
    var a = this.RadCalendar._viewIDs.length > 1;
    if (!a) {
      this._MonthStartDate = this.EffectiveVisibleDate();
    } else {
      this._MonthStartDate = this.RadCalendar.get__ViewsHash()[
        this._SingleViewMatrix.id
      ][0];
    }
    this._MonthDays = this.Calendar.GetDaysInMonth(
      this._MonthStartDate[0],
      this._MonthStartDate[1]
    );
    this._MonthEndDate = this.Calendar.AddDays(
      this._MonthStartDate,
      this._MonthDays - 1
    );
    this._ViewStartDate = this.FirstCalendarDay(this._MonthStartDate);
    this._ViewEndDate = this.Calendar.AddDays(
      this._ViewStartDate,
      this._ContentRows * this._ContentColumns - 1
    );
    this.GetTitleContentAsString();
  },
  GetTitleContentAsString: function () {
    if (!this.IsMultiView) {
      this._TitleContent = this.DateTimeFormatInfo.FormatDate(
        this.EffectiveVisibleDate(),
        this.RadCalendar.get_titleFormat()
      );
    } else {
      this._TitleContent =
        this.DateTimeFormatInfo.FormatDate(
          this._ViewStartDate,
          this.RadCalendar.get_titleFormat()
        ) +
        this.RadCalendar.get_dateRangeSeparator() +
        this.DateTimeFormatInfo.FormatDate(
          this._ViewEndDate,
          this.RadCalendar.get_titleFormat()
        );
    }
    return this._TitleContent;
  },
  RenderDaysSingleView: function () {
    this.SetViewDateRange();
    var a = this.EffectiveVisibleDate();
    var b = this.FirstCalendarDay(a);
    var d = this._SingleViewMatrix;
    this.RenderViewDays(
      d,
      b,
      a,
      this.RadCalendar.get_orientation(),
      this.StartRowIndex,
      this.StartColumnIndex
    );
    this.ApplyViewTable(d, this.ScrollDir || 0);
    var c = $get(this.RadCalendar._titleID);
    if (c) {
      c.innerHTML = this._TitleContent;
    }
    return d;
  },
  RenderViewDays: function (k, d, n, g, m, l) {
    var c = d;
    var h;
    var a;
    var e;
    var f;
    if (g == Telerik.Web.UI.Calendar.Utils.RENDERINROWS) {
      for (e = m; e < k.rows.length; e++) {
        h = k.rows[e];
        for (f = l; f < h.cells.length; f++) {
          a = h.cells[f];
          this.SetCalendarCell(a, c, e, f);
          c = this.Calendar.AddDays(c, 1);
        }
      }
    } else {
      if (g == Telerik.Web.UI.Calendar.Utils.RENDERINCOLUMNS) {
        var b = k.rows[0].cells.length;
        for (e = l; e < b; e++) {
          for (f = m; f < k.rows.length; f++) {
            a = k.rows[f].cells[e];
            this.SetCalendarCell(a, c, f, e);
            c = this.Calendar.AddDays(c, 1);
          }
        }
      }
    }
  },
  SetCalendarCell: function (a, f, x, d) {
    var m = !this.RadCalendar.RangeValidation.IsDateValid(f);
    var F = f[1] == this._MonthStartDate[1];
    var E = this.DateTimeFormatInfo.FormatDate(
      f,
      this.RadCalendar.get_cellDayFormat()
    );
    var y = this.RadCalendar.SpecialDays.Get(f);
    if (this.RadCalendar.get_enableRepeatableDaysOnClient() && y == null) {
      var w = Telerik.Web.UI.Calendar.Utils.RECURRING_NONE;
      var B = this.RadCalendar.SpecialDays.GetValues();
      for (var k = 0; k < B.length; k++) {
        w = B[k].IsRecurring(f, this);
        if (w != Telerik.Web.UI.Calendar.Utils.RECURRING_NONE) {
          y = B[k];
          this.RadCalendar.RecurringDays.Add(f, y);
          break;
        }
      }
    }
    var n = this.RadCalendar.Selection._selectedDates.Get(f) != null;
    if (F || (!F && this.RadCalendar.get_showOtherMonthsDays())) {
      if (!m && (!y || (y.IsSelectable && !y.IsDisabled))) {
        E = "<a href='#' onclick='return false;'>" + E + "</a>";
      } else {
        E = "<span>" + E + "</span>";
      }
    } else {
      E = "&#160;";
    }
    var h = this.Calendar.GetDayOfWeek(f);
    var p = 0 == h || 6 == h;
    var l = y ? y.IsDisabled : false;
    var o = y && y.Repeatable == Telerik.Web.UI.Calendar.Utils.RECURRING_TODAY;
    a.innerHTML = E;
    if ($telerik.isIE) {
      var q = a.getElementsByTagName("a");
      if (q.length > 0) {
        q[0].href = "#";
      }
    }
    var C = null;
    if (y) {
      var A = "SpecialDayStyle_" + y.get_date().join("_");
      C = y.ItemStyle[A];
    }
    var D = this.RadCalendar._getItemStyle(!F, m, p, n, l, C);
    if (D) {
      var c = this.RadCalendar.get__DayRenderChangedDays()[f.join("_")];
      if (
        c != null &&
        (F || (!F && this.RadCalendar.get_showOtherMonthsDays()))
      ) {
        a.style.cssText = Telerik.Web.UI.Calendar.Utils.MergeStyles(c[0], D[0]);
        a.className = Telerik.Web.UI.Calendar.Utils.MergeClassName(c[1], D[1]);
      } else {
        a.style.cssText = D[0];
        a.className = D[1];
      }
    }
    var g = this.RadCalendar._getRenderDayID(f);
    a.DayId = !F && !this.RadCalendar.get_showOtherMonthsDays() ? "" : g;
    var t = null;
    if (!m) {
      var e = [
        null,
        f,
        true,
        n,
        null,
        o,
        null,
        p,
        null,
        D,
        a,
        this.RadCalendar,
        g,
        this,
        x,
        d,
      ];
      t = new Telerik.Web.UI.Calendar.RenderDay(e);
      this.RenderDays.Add(t.get_date(), t);
    } else {
      if (a.RenderDay != null) {
        if (a.RenderDay.disposed == null) {
          a.RenderDay.Dispose();
        }
        a.RenderDay = null;
        this.RenderDays.Remove(f);
      }
    }
    var b = "";
    var z = this.RadCalendar.SpecialDays.Get(f);
    if (z != null && z.ToolTip != null) {
      b = z.ToolTip;
    } else {
      if (typeof this.RadCalendar.get_dayCellToolTipFormat() != "undefined") {
        b = this.DateTimeFormatInfo.FormatDate(
          f,
          this.RadCalendar.expandPredefinedFormat(
            this.RadCalendar.get_dayCellToolTipFormat()
          )
        );
      }
    }
    if (!this.RadCalendar.get_showOtherMonthsDays() && a.DayId == "") {
      a.title = "";
    } else {
      if (this.RadCalendar._showDayCellToolTips) {
        a.title = b;
      }
    }
    var v = a.style.cssText;
    var u = a.className;
    var j = new Telerik.Web.UI.CalendarDayRenderEventArgs(a, f, t);
    this.RadCalendar.raise_dayRender(j);
    var s = a.style.cssText;
    var r = a.className;
    if (v != s || u != r) {
      if (this.RadCalendar.get__DayRenderChangedDays()[f.join("_")] == null) {
        this.RadCalendar.get__DayRenderChangedDays()[f.join("_")] = [
          "",
          "",
          "",
          "",
        ];
      }
      this.RadCalendar.get__DayRenderChangedDays()[f.join("_")][2] = s;
      this.RadCalendar.get__DayRenderChangedDays()[f.join("_")][3] = r;
    }
  },
  ApplyViewTable: function (f, b) {
    this.RadCalendar._enableNavigation(false);
    this.RadCalendar.EnableDateSelect = false;
    var m = this._SingleViewMatrix;
    var h = m.parentNode;
    var n = h.scrollWidth;
    var d = h.scrollHeight;
    var g = document.createElement("div");
    g.style.overflow = "hidden";
    g.style.width = n + "px";
    g.style.height = d + "px";
    g.style.border = "0px solid red";
    var e = document.createElement("div");
    e.style.width = 2 * n + "px";
    e.style.height = d + "px";
    e.style.border = "0px solid blue";
    g.appendChild(e);
    if (m.parentNode) {
      m.parentNode.removeChild(m);
    }
    if (f.parentNode) {
      f.parentNode.removeChild(f);
    }
    if (!document.all) {
      m.style.setProperty("float", "left", "");
      f.style.setProperty("float", "left", "");
    }
    var a = 0;
    if (b > 0) {
      a = 1;
      e.appendChild(m);
      f.parentNode.removeChild(f);
      e.appendChild(f);
    } else {
      if (b < 0) {
        a = -1;
        e.appendChild(f);
        m.parentNode.removeChild(m);
        e.appendChild(m);
      }
    }
    h.appendChild(g);
    if (b < 0 && this.RadCalendar.get_enableNavigationAnimation() == true) {
      g.scrollLeft = h.offsetWidth + 10;
    }
    var l = this;
    var k = 10;
    var c = function () {
      if (g.parentNode) {
        g.parentNode.removeChild(g);
      }
      if (e.parentNode) {
        e.parentNode.removeChild(e);
      }
      if (m.parentNode) {
        m.parentNode.removeChild(m);
      }
      h.appendChild(f);
      l.RadCalendar._enableNavigation(true);
      l.RadCalendar.EnableDateSelect = true;
    };
    var i = function () {
      if (
        (a > 0 && g.scrollLeft + g.offsetWidth < g.scrollWidth) ||
        (a < 0 && g.scrollLeft > 0)
      ) {
        g.scrollLeft += a * k;
        window.setTimeout(i, 10);
      } else {
        c();
      }
    };
    var j = function () {
      window.setTimeout(i, 100);
    };
    if (
      !this.RadCalendar._isRtl() &&
      this.RadCalendar.get_enableNavigationAnimation() == true
    ) {
      j();
    } else {
      c();
    }
  },
  _performSelectionOnFirstDateOfMonth: function (d) {
    this._selectFocusedDate(d);
    var b = this.RadCalendar.get_selectedDates()[0];
    var a = this.RadCalendar._hoveredDateTriplet;
    if (d >= 37 && d <= 40) {
      if (b == null && this.RadCalendar._nextFocusedCell == null) {
        var c = this._selectFirstDateOfTheCalendarView();
        this.RadCalendar._hoveredDateTriplet = c;
        this.RadCalendar._hoveredDate = new Date(c[0], c[1] - 1, c[2]);
        return true;
      }
      if (b != null) {
        this.RadCalendar._hoveredDateTriplet = b;
        a = b;
      }
      if (!this.RadCalendar._hoveredDate) {
        if (a == null) {
          this.RadCalendar._hoveredDateTriplet = this._selectFirstDateOfTheCalendarView();
          return true;
        }
        this.RadCalendar._hoveredDate = new Date(a[0], a[1] - 1, a[2]);
      }
    }
    return false;
  },
  _selectFocusedDate: function (b) {
    if (b == 13 || b == 32) {
      if (this.RadCalendar._nextFocusedCell != null) {
        var c = [];
        var a = this.RadCalendar._hoveredDate;
        c.push(a.getFullYear());
        c.push(a.getMonth() + 1);
        c.push(a.getDate());
        this.RadCalendar.selectDate(c, false);
      }
    }
  },
  _navigateToDate: function (b) {
    var a = false;
    switch (b) {
      case 37:
        this._moveLeft(this.RadCalendar._hoveredDate, b);
        a = true;
        break;
      case 38:
        this._moveTop(this.RadCalendar._hoveredDate, b);
        a = true;
        break;
      case 39:
        this._moveRight(this.RadCalendar._hoveredDate, b);
        a = true;
        break;
      case 40:
        this._moveBottom(this.RadCalendar._hoveredDate, b);
        a = true;
        break;
      default:
        break;
    }
    return a;
  },
  _addClassAndGetFocus: function (b, a) {
    if (this._renderMode === 2) {
      if (b.className.indexOf("rcFocus") < 0) {
        b.className = "rcFocus " + b.className;
      }
    } else {
      if (b.className.indexOf("rcHover") < 0) {
        b.className = "rcHover " + b.className;
      }
    }
    if (this.RadCalendar && this.RadCalendar.get_enableAriaSupport()) {
      var c = b.getElementsByTagName("a")[0];
      if (c) {
        c.tabIndex = 0;
      }
    }
    a.tabIndex = 100;
    if (a.offsetWidth) {
      a.focus();
    }
  },
  _selectFirstDateOfTheCalendarView: function () {
    var b = this.RadCalendar.CurrentViews[0];
    var a = this._getAllCells(b.DomTable);
    var f = b._MonthStartDate[2].toString();
    var g = b._MonthStartDate;
    for (var e = 0; e < a.length; e++) {
      if (a[e].tagName.toUpperCase() == "TD" && a[e].DayId != "") {
        var c = Telerik.Web.UI.Calendar.Utils.GetDateFromId(a[e].DayId)[2];
        if (c == f) {
          this.RadCalendar._nextFocusedCell = a[e];
          var d = this.DomTable;
          this._addClassAndGetFocus(this.RadCalendar._nextFocusedCell, d);
          return g;
        }
      }
    }
  },
  _getNewSelectedDate: function (b, c, a) {
    c = this._addDays(this.RadCalendar._hoveredDate, a);
    this.RadCalendar._hoveredDate = c;
    if (b) {
      this._navigateToNextMonthView();
    } else {
      this._navigateToPreviousMonthView();
    }
    return c;
  },
  _getPreviousSibling: function (a) {
    var b = a.previousSibling;
    if (b && b.nodeType == 3) {
      return null;
    } else {
      return b;
    }
  },
  _getNextSibling: function (a) {
    var b = a.nextSibling;
    if (b && b.nodeType == 3) {
      return null;
    } else {
      return b;
    }
  },
  _getFirstChild: function (a) {
    var b = a.firstChild;
    if (a.nodeType == 3) {
      return null;
    }
    if (b && b.nodeType == 3) {
      return b.nextSibling;
    } else {
      return b;
    }
  },
  _getLastChild: function (a) {
    var b = a.lastChild;
    if (b && b.nodeType == 3) {
      return b.previousSibling;
    } else {
      return b;
    }
  },
  _moveLeft: function (d, f) {
    var i = null;
    var c = this.DomTable;
    var e = false;
    var a = this.RadCalendar;
    var h = a.RangeMinDate;
    var g = new Date(h[0], h[1] - 1, h[2]);
    var j = null;
    if (d <= g) {
      return;
    }
    if (!a._nextFocusedCell) {
      var k = $telerik.getElementByClassName(c, "rcSelected", "td");
      if (this._getPreviousSibling(k.parentNode) == null) {
        i = this._getNewSelectedDate(false, i, -1);
        e = true;
        f = 38;
        a._nextFocusedCell = this._hoverLastDateOfMonth(a, f, i);
      } else {
        if (
          k.previousSibling &&
          k.previousSibling.className &&
          k.previousSibling.className.indexOf("rcOtherMonth") > -1
        ) {
          i = this._getNewSelectedDate(true, i, -1);
          e = true;
          f = 40;
          a._nextFocusedCell = this._hoverFirstDateOfMonth(a, f, i);
        } else {
          j = k;
          a._nextFocusedCell = k.previousSibling;
        }
      }
    } else {
      if (this._renderMode === 2) {
        this._removeFocusStyles(c);
        this._removeHoverStyles(c);
      } else {
        this._removeHoverStyles(c);
      }
      j = a._nextFocusedCell;
      a._nextFocusedCell = a._nextFocusedCell.previousSibling;
    }
    var b = a._nextFocusedCell;
    if (!b) {
      a._nextFocusedCell = this._getLastChild(j.parentNode.previousSibling);
    }
    if (
      (b && b.tagName && b.tagName.toUpperCase() == "TH") ||
      (b && !b.tagName && !a._showRowHeaders)
    ) {
      a._nextFocusedCell = this._getLastChild(b.parentNode.previousSibling);
    }
    this._addClassAndGetFocus(a._nextFocusedCell, c);
    if (!e) {
      i = this._addDays(d, -1);
      a._hoveredDate = i;
      a._nextFocusedCell = this._moveCurentViewToNextPrev(d, i, f);
      this._addClassAndGetFocus(a._nextFocusedCell, c);
    }
  },
  _moveRight: function (c, e) {
    var h = null;
    var b = this.DomTable;
    var a = this.RadCalendar;
    var d = false;
    var g = a.RangeMaxDate;
    var f = new Date(g[0], g[1] - 1, g[2]);
    if (c >= f) {
      return;
    }
    if (!a._nextFocusedCell) {
      var j = $telerik.getElementByClassName(b, "rcSelected", "td");
      if (j.parentNode.nextSibling == null) {
        h = this._getNewSelectedDate(true, h, 1);
        e = 40;
        a._nextFocusedCell = this._hoverFirstDateOfMonth(a, e, h);
        d = true;
      } else {
        if (this._getNextSibling(j) == null) {
          a._nextFocusedCell = this._getFirstChild(j.parentNode.nextSibling);
          if (a._nextFocusedCell == null) {
            h = this._getNewSelectedDate(true, h, 1);
            e = 40;
            a._nextFocusedCell = this._hoverFirstDateOfMonth(a, e, h);
            d = true;
          }
        } else {
          if (
            j.nextSibling.className.indexOf("rcOtherMonth") > -1 &&
            this._getPreviousSibling(j.parentNode) != null
          ) {
            h = this._getNewSelectedDate(true, h, 1);
            e = 40;
            a._nextFocusedCell = this._hoverFirstDateOfMonth(a, e, h);
            d = true;
          } else {
            if (j.nextSibling.className.indexOf("rcOtherMonth") > -1) {
              h = this._getNewSelectedDate(false, h, 1);
              e = 38;
              a._nextFocusedCell = this._hoverLastDateOfMonth(a, e, h);
              d = true;
            } else {
              a._nextFocusedCell = j.nextSibling;
            }
          }
        }
      }
    } else {
      if (this._renderMode === 2) {
        this._removeFocusStyles(b);
        this._removeHoverStyles(b);
      } else {
        this._removeHoverStyles(b);
      }
      if (this._getNextSibling(a._nextFocusedCell) != null) {
        a._nextFocusedCell = a._nextFocusedCell.nextSibling;
      } else {
        a._nextFocusedCell = this._getFirstChild(
          a._nextFocusedCell.parentNode.nextSibling
        );
      }
    }
    var i = a._nextFocusedCell;
    if (i.tagName.toUpperCase() == "TH") {
      a._nextFocusedCell = i.nextSibling;
    }
    this._addClassAndGetFocus(a._nextFocusedCell, b);
    if (!d) {
      h = this._addDays(c, 1);
      a._hoveredDate = h;
      a._nextFocusedCell = this._moveCurentViewToNextPrev(c, h, e);
      this._addClassAndGetFocus(a._nextFocusedCell, b);
    }
  },
  _moveBottom: function (d, g) {
    var k = null;
    var c = this.DomTable;
    var a = this.RadCalendar;
    var f = false;
    var i = a.RangeMaxDate;
    var h = new Date(i[0], i[1] - 1, i[2]);
    var j = this._addDays(d, 6);
    if (j >= h) {
      return;
    }
    var e;
    var b;
    if (!a._nextFocusedCell) {
      var l = $telerik.getElementByClassName(c, "rcSelected", "td");
      e = l.cellIndex;
      if (l.parentNode.firstChild.nodeType == 3) {
        e = e + 1;
      }
      if (this._getNextSibling(l.parentNode) == null) {
        if (!this._getFirstChild(this._getLastChild(c)).cells[e]) {
          a._nextFocusedCell = this._getFirstChild(this._getLastChild(c)).cells[
            e - 1
          ].parentNode.nextSibling.childNodes[e];
        } else {
          a._nextFocusedCell = this._getFirstChild(this._getLastChild(c)).cells[
            e
          ].parentNode.nextSibling.childNodes[e];
        }
        k = this._getNewSelectedDate(true, k, 7);
        f = true;
        b = Telerik.Web.UI.Calendar.Utils.GetDateFromId(
          a._nextFocusedCell.DayId
        )[2];
        if (b.toString() != k.getDate().toString()) {
          a._nextFocusedCell =
            a._nextFocusedCell.parentNode.nextSibling.childNodes[e];
        }
      } else {
        a._nextFocusedCell = l.parentNode.nextSibling.childNodes[e];
        if (a._nextFocusedCell.className.indexOf("rcOtherMonth") > -1) {
          k = this._getNewSelectedDate(true, k, 7);
          f = true;
          if (!this._getFirstChild(this._getLastChild(c)).cells[e]) {
            a._nextFocusedCell = this._getFirstChild(
              this._getLastChild(c)
            ).cells[e - 1].parentNode.nextSibling.childNodes[e];
          } else {
            a._nextFocusedCell = this._getFirstChild(
              this._getLastChild(c)
            ).cells[e].parentNode.nextSibling.childNodes[e];
            b = Telerik.Web.UI.Calendar.Utils.GetDateFromId(
              a._nextFocusedCell.DayId
            )[2];
            if (b.toString() != k.getDate().toString()) {
              a._nextFocusedCell = this._getFirstChild(
                this._getLastChild(c)
              ).cells[e];
            }
          }
        }
      }
    } else {
      if (this._renderMode === 2) {
        this._removeFocusStyles(c);
        this._removeHoverStyles(c);
      } else {
        this._removeHoverStyles(c);
      }
      e = a._nextFocusedCell.cellIndex;
      if (a._nextFocusedCell.parentNode.firstChild.nodeType == 3) {
        e = e + 1;
      }
      if (this._getNextSibling(a._nextFocusedCell.parentNode) == null) {
        if (!this._getFirstChild(this._getLastChild(c)).cells[e]) {
          a._nextFocusedCell = this._getFirstChild(this._getLastChild(c)).cells[
            e - 1
          ].parentNode.nextSibling.childNodes[e];
        } else {
          a._nextFocusedCell = this._getFirstChild(this._getLastChild(c)).cells[
            e
          ].parentNode.nextSibling.childNodes[e];
        }
        f = true;
        k = this._getNewSelectedDate(true, k, 7);
        b = Telerik.Web.UI.Calendar.Utils.GetDateFromId(
          a._nextFocusedCell.DayId
        )[2];
        if (b.toString() != k.getDate().toString()) {
          a._nextFocusedCell =
            a._nextFocusedCell.parentNode.nextSibling.childNodes[e];
        }
      } else {
        a._nextFocusedCell =
          a._nextFocusedCell.parentNode.nextSibling.childNodes[e];
      }
    }
    this._addClassAndGetFocus(a._nextFocusedCell, c);
    if (!f) {
      k = this._addDays(d, 7);
      a._hoveredDate = k;
      if (
        (k.getMonth() + 1).toString() !=
        this.RadCalendar.CurrentViews[0]._MonthStartDate[1].toString()
      ) {
        a._nextFocusedCell = this._moveCurentViewToNextPrev(d, k, g);
        this._addClassAndGetFocus(a._nextFocusedCell, c);
      }
    }
  },
  _moveTop: function (d, g) {
    var k = null;
    var c = this.DomTable;
    var a = this.RadCalendar;
    var f = false;
    var i = a.RangeMinDate;
    var h = new Date(i[0], i[1] - 1, i[2]);
    var j = this._addDays(d, -6);
    var l = a._nextFocusedCell;
    var e;
    var b;
    if (j <= h) {
      return;
    }
    if (!l) {
      var m = $telerik.getElementByClassName(c, "rcSelected", "td");
      e = m.cellIndex;
      if (m.parentNode.firstChild.nodeType == 3) {
        e = e + 1;
      }
      if (this._getPreviousSibling(m.parentNode) == null) {
        if (!this._getLastChild(this._getLastChild(c)).cells[e]) {
          a._nextFocusedCell = this._getLastChild(this._getLastChild(c)).cells[
            e - 1
          ].parentNode.previousSibling.childNodes[e];
        } else {
          a._nextFocusedCell = this._getLastChild(this._getLastChild(c)).cells[
            e
          ].parentNode.previousSibling.childNodes[e];
        }
        f = true;
        k = this._getNewSelectedDate(false, k, -7);
        b = Telerik.Web.UI.Calendar.Utils.GetDateFromId(
          a._nextFocusedCell.DayId
        )[2];
        if (b.toString() != k.getDate().toString()) {
          a._nextFocusedCell =
            a._nextFocusedCell.parentNode.previousSibling.childNodes[e];
        }
      } else {
        if (
          m.parentNode.previousSibling.childNodes[e].className.indexOf(
            "rcOtherMonth"
          ) > -1
        ) {
          if (!this._getLastChild(this._getLastChild(c)).cells[e]) {
            a._nextFocusedCell = this._getLastChild(
              this._getLastChild(c)
            ).cells[e - 1].parentNode.previousSibling.childNodes[e];
          } else {
            a._nextFocusedCell = this._getLastChild(
              this._getLastChild(c)
            ).cells[e].parentNode.previousSibling.childNodes[e];
          }
          f = true;
          k = this._getNewSelectedDate(false, k, -7);
          g = 40;
          f = true;
        } else {
          a._nextFocusedCell = m.parentNode.previousSibling.childNodes[e];
        }
      }
    } else {
      if (this._renderMode === 2) {
        this._removeFocusStyles(c);
        this._removeHoverStyles(c);
      } else {
        this._removeHoverStyles(c);
      }
      e = a._nextFocusedCell.cellIndex;
      if (a._nextFocusedCell.parentNode.firstChild.nodeType == 3) {
        e = e + 1;
      }
      if (this._getPreviousSibling(a._nextFocusedCell.parentNode) == null) {
        if (!this._getLastChild(this._getLastChild(c)).cells[e]) {
          a._nextFocusedCell = this._getLastChild(this._getLastChild(c)).cells[
            e - 1
          ].parentNode.previousSibling.childNodes[e];
        } else {
          a._nextFocusedCell = this._getLastChild(this._getLastChild(c)).cells[
            e
          ].parentNode.previousSibling.childNodes[e];
        }
        f = true;
        k = this._getNewSelectedDate(false, k, -7);
        if (a._nextFocusedCell.DayId == "") {
          a._nextFocusedCell =
            a._nextFocusedCell.parentNode.previousSibling.childNodes[e];
        } else {
          b = Telerik.Web.UI.Calendar.Utils.GetDateFromId(
            a._nextFocusedCell.DayId
          )[2];
          if (b.toString() != k.getDate().toString()) {
            a._nextFocusedCell =
              a._nextFocusedCell.parentNode.previousSibling.childNodes[e];
          }
        }
      } else {
        a._nextFocusedCell =
          a._nextFocusedCell.parentNode.previousSibling.childNodes[e];
      }
    }
    this._addClassAndGetFocus(a._nextFocusedCell, c);
    if (!f) {
      k = this._addDays(d, -7);
      a._hoveredDate = k;
      if (l && a._nextFocusedCell.className.indexOf("rcOtherMonth") > -1) {
        a._nextFocusedCell = this._moveCurentViewToNextPrev(d, k, g);
      }
      this._addClassAndGetFocus(a._nextFocusedCell, c);
    }
  },
  _navigateToNextMonthView: function () {
    var a = this.RadCalendar;
    a._navigateFromLinksButtons = false;
    a._navigateNext();
    a._navigateFromLinksButtons = true;
  },
  _navigateToPreviousMonthView: function () {
    var a = this.RadCalendar;
    a._navigateFromLinksButtons = false;
    a._navigatePrev();
    a._navigateFromLinksButtons = true;
  },
  _moveCurentViewToNextPrev: function (d, c, b) {
    var a = this.RadCalendar;
    if (d.getFullYear() == c.getFullYear()) {
      if (d.getMonth() < c.getMonth()) {
        this._navigateToNextMonthView();
        a._nextFocusedCell = this._hoverFirstDateOfMonth(a, b, c);
      } else {
        if (d.getMonth() > c.getMonth()) {
          this._navigateToPreviousMonthView();
          a._nextFocusedCell = this._hoverLastDateOfMonth(a, b, c);
        }
      }
    } else {
      if (d.getMonth() < c.getMonth() && d.getFullYear() > c.getFullYear()) {
        this._navigateToPreviousMonthView();
        a._nextFocusedCell = this._hoverLastDateOfMonth(a, b, c);
      } else {
        if (d.getMonth() > c.getMonth() && d.getFullYear() < c.getFullYear()) {
          this._navigateToNextMonthView();
          a._nextFocusedCell = this._hoverFirstDateOfMonth(a, b, c);
        }
      }
    }
    return a._nextFocusedCell;
  },
  _getAllCells: function (b) {
    if (b.cells) {
      return b.cells;
    } else {
      var a = [];
      for (var c = 0; c < b.rows.length; c++) {
        for (var d = 0; d < b.rows[c].cells.length; d++) {
          a.push(b.rows[c].cells[d]);
        }
      }
      return a;
    }
  },
  _hoverLastDateOfMonth: function (b, f, h) {
    var a = this._getAllCells(b.CurrentViews[0].DomTable);
    var d;
    var g = b.CurrentViews[0]._MonthEndDate[2].toString();
    if (f == 38) {
      g = h.getDate().toString();
    }
    for (var e = 0; e < a.length; e++) {
      if (a[e].tagName.toUpperCase() == "TD" && a[e].DayId != "") {
        var c = Telerik.Web.UI.Calendar.Utils.GetDateFromId(a[e].DayId)[2];
        if (c == g) {
          d = a[e];
        }
      }
    }
    return d;
  },
  _hoverFirstDateOfMonth: function (b, e, g) {
    var a = this._getAllCells(b.CurrentViews[0].DomTable);
    var f = b.CurrentViews[0]._MonthStartDate[2].toString();
    if (e == 40) {
      f = g.getDate().toString();
    }
    for (var d = 0; d < a.length; d++) {
      if (a[d].tagName.toUpperCase() == "TD" && a[d].DayId != "") {
        var c = Telerik.Web.UI.Calendar.Utils.GetDateFromId(a[d].DayId)[2];
        if (c == f) {
          b._nextFocusedCell = a[d];
          break;
        }
      }
    }
    return b._nextFocusedCell;
  },
  _addDays: function (a, c) {
    var b = new Date(a.getFullYear(), a.getMonth(), a.getDate());
    return new Date(b.setDate(b.getDate() + c));
  },
  _removeHoverStyles: function (a) {
    var b = this._getElementsByClassName(a, "rcHover", "td");
    for (var c = 0; c < b.length; c++) {
      b[c].className = b[c].className
        .replace("rcHover", "")
        .replace(/^\s+/, "")
        .replace(/\s+$/, "");
      if (this.RadCalendar && this.RadCalendar.get_enableAriaSupport()) {
        var d = b[c].getElementsByTagName("a")[0];
        if (d) {
          d.tabIndex = -1;
        }
      }
    }
  },
  _removeFocusStyles: function (a) {
    var b = this._getElementsByClassName(a, "rcFocus", "td");
    for (var c = 0; c < b.length; c++) {
      b[c].className = b[c].className
        .replace("rcFocus", "")
        .replace(/^\s+/, "")
        .replace(/\s+$/, "");
      if (this.RadCalendar && this.RadCalendar.get_enableAriaSupport()) {
        var d = b[c].getElementsByTagName("a")[0];
        if (d) {
          d.tabIndex = -1;
        }
      }
    }
  },
  _getElementsByClassName: function (e, d, h) {
    var b = null;
    var c = [];
    if (h) {
      b = e.getElementsByTagName(h);
    }
    for (var f = 0, g = b.length; f < g; f++) {
      var a = b[f];
      if (Sys.UI.DomElement.containsCssClass(a, d)) {
        c.push(a);
      }
    }
    return c;
  },
};
Telerik.Web.UI.Calendar.CalendarView.registerClass(
  "Telerik.Web.UI.Calendar.CalendarView",
  null,
  Sys.IDisposable
);
Type.registerNamespace("Telerik.Web.UI.Calendar");
Telerik.Web.UI.Calendar.RenderDay = function (a) {
  if (typeof a != "undefined") {
    var b = 0;
    this.TemplateID = a[b++];
    this._date = a[b++];
    this.IsSelectable = a[b++];
    this.IsSelected = a[b++];
    this.IsDisabled = a[b++];
    this.IsToday = a[b++];
    this.Repeatable = a[b++];
    this.IsWeekend = a[b++];
    this.ToolTip = a[b++];
    this.ItemStyle = a[b++];
    this.DomElement = a[b++];
    this.RadCalendar = a[b++];
    this.ID = a[b++];
    this.RadCalendarView = a[b++];
    this.DayRow = a[b++];
    this.DayColumn = a[b++];
  }
};
Telerik.Web.UI.Calendar.RenderDay.prototype = {
  dispose: function () {
    this.disposed = true;
    if (this.DomElement) {
      this.DomElement.DayId = "";
      this.DomElement.RenderDay = null;
    }
    this.DomElement = null;
    this.RadCalendar = null;
    this.RadCalendarView = null;
    this.DayRow = null;
    this.DayColumn = null;
  },
  MouseOver: function () {
    if (!this.ApplyHoverBehavior()) {
      return;
    }
    var a = this.RadCalendar.get_stylesHash()["DayOverStyle"];
    var b = this.GetDefaultItemStyle();
    if (this.DomElement.className.indexOf("rcFocus") !== -1) {
      return;
    }
    this.DomElement.className = b[1].replace(/^\s+|\s+$/g, "") + " " + a[1];
    this.DomElement.style.cssText = a[0];
  },
  MouseOut: function () {
    if (!this.ApplyHoverBehavior()) {
      return;
    }
    var a = this.GetDefaultItemStyle();
    if (this.DomElement.className.indexOf("rcFocus") !== -1) {
      return;
    }
    if (
      this.RadCalendar &&
      this.RadCalendar._hoveredDate &&
      [
        this.RadCalendar._hoveredDate.getFullYear(),
        this.RadCalendar._hoveredDate.getMonth() + 1,
        this.RadCalendar._hoveredDate.getDate(),
      ] == this._date.toString()
    ) {
      this.DomElement.className = a[1].replace(/^\s+|\s+$/g, "") + " rcHover";
    } else {
      this.DomElement.className = a[1];
    }
    this.DomElement.style.cssText = a[0];
  },
  Click: function (b) {
    var c = new Telerik.Web.UI.CalendarDateClickEventArgs(b, this);
    var a = this.RadCalendar;
    if (
      a._rangeSelectionMode != Telerik.Web.UI.Calendar.RangeSelectionMode.None
    ) {
      a._dateClick(c);
    }
    this.RadCalendar.raise_dateClick(c);
    if (c.get_cancel()) {
      return;
    }
    this.Select(!this.IsSelected);
  },
  Select: function (e, c) {
    if (!this.RadCalendar.Selection.CanSelect(this.get_date())) {
      return;
    }
    if (null == e) {
      e = true;
    }
    var h = false;
    if (this.RadCalendar.get_enableMultiSelect()) {
      this.PerformSelect(e);
    } else {
      var g = false;
      if (e) {
        var a = this.RadCalendar._findRenderDay(
          this.RadCalendar._lastSelectedDate
        );
        if (a && a != this) {
          g = false == a.Select(false);
        }
        var f = this.RadCalendar.Selection._selectedDates.GetValues();
        for (var b = 0; b < f.length; b++) {
          if (f[b]) {
            a = this.RadCalendar._findRenderDay(f[b]);
            if (a && a != this) {
              g = false == a.Select(false, true);
            }
          }
        }
      }
      h = false;
      if (!g) {
        var d = this.PerformSelect(e);
        if (typeof d != "undefined") {
          h = !d;
        }
        if (this.RadCalendar) {
          this.RadCalendar._lastSelectedDate = this.IsSelected
            ? this.get_date()
            : null;
        } else {
          return;
        }
      }
    }
    if (this.RadCalendar) {
      this.RadCalendar._serializeSelectedDates();
      if (!c && !h) {
        this.RadCalendar._submit("d");
      }
    }
  },
  PerformSelect: function (c) {
    if (null == c) {
      c = true;
    }
    if (this.IsSelected != c) {
      var b = new Telerik.Web.UI.CalendarDateSelectingEventArgs(c, this);
      this.RadCalendar.raise_dateSelecting(b);
      if (b.get_cancel()) {
        return false;
      }
      this.IsSelected = c;
      var a = this.GetDefaultItemStyle();
      if (a) {
        this.DomElement.className = a[1];
        this.DomElement.style.cssText = a[0];
      }
      if (this.RadCalendar.get_enableAriaSupport()) {
        if (c) {
          this.DomElement.setAttribute("aria-selected", true);
        } else {
          this.DomElement.removeAttribute("aria-selected");
        }
      }
      if (c) {
        this.RadCalendar.Selection.Add(this.get_date());
      } else {
        this.RadCalendar.Selection.Remove(this.get_date());
      }
      this.RadCalendar.raise_dateSelected(
        new Telerik.Web.UI.CalendarDateSelectedEventArgs(this)
      );
    }
  },
  GetDefaultItemStyle: function () {
    var g = this.get_date()[1] == this.RadCalendarView._MonthStartDate[1];
    var d = this.RadCalendar.SpecialDays.Get(this.get_date());
    if (
      d == null &&
      this.RadCalendar.RecurringDays.Get(this.get_date()) != null
    ) {
      d = this.RadCalendar.RecurringDays.Get(this.get_date());
    }
    var f = null;
    if (this.IsSelected && (g || this.RadCalendar.get_showOtherMonthsDays())) {
      return this.RadCalendar.get_stylesHash()["SelectedDayStyle"];
    } else {
      if (d) {
        var e = "SpecialDayStyle_" + d.get_date().join("_");
        f = d.ItemStyle[e];
        var c = null;
        if (!g) {
          c = this.RadCalendar.get_stylesHash()["OtherMonthDayStyle"];
        } else {
          if (this.IsWeekend) {
            c = this.RadCalendar.get_stylesHash()["WeekendDayStyle"];
          } else {
            c = this.RadCalendar.get_stylesHash()["DayStyle"];
          }
        }
        f[0] = Telerik.Web.UI.Calendar.Utils.MergeStyles(c[0], f[0]);
        f[1] = Telerik.Web.UI.Calendar.Utils.MergeClassName(c[1], f[1]);
      } else {
        if (!g) {
          f = this.RadCalendar.get_stylesHash()["OtherMonthDayStyle"];
        } else {
          if (this.IsWeekend) {
            f = this.RadCalendar.get_stylesHash()["WeekendDayStyle"];
          } else {
            f = this.RadCalendar.get_stylesHash()["DayStyle"];
          }
        }
      }
    }
    var a = this.RadCalendar.get__DayRenderChangedDays()[
      this.get_date().join("_")
    ];
    var b = [];
    if (a != null) {
      b[0] = Telerik.Web.UI.Calendar.Utils.MergeStyles(a[0], f[0]);
      b[1] = Telerik.Web.UI.Calendar.Utils.MergeClassName(a[1], f[1]);
      b[0] = Telerik.Web.UI.Calendar.Utils.MergeStyles(a[2] || "", b[0]);
      b[1] = Telerik.Web.UI.Calendar.Utils.MergeClassName(a[3] || "", b[1]);
      return b;
    }
    return f;
  },
  ApplyHoverBehavior: function () {
    var c = this.RadCalendar.SpecialDays.Get(this.get_date());
    if (c && !c.IsSelectable) {
      return false;
    }
    if (this.RadCalendar.get_enableRepeatableDaysOnClient()) {
      var b = Telerik.Web.UI.Calendar.Utils.RECURRING_NONE;
      var d = this.RadCalendar.SpecialDays.GetValues();
      for (var a = 0; a < d.length; a++) {
        b = d[a].IsRecurring(this.get_date(), this.RadCalendarView);
        if (b != Telerik.Web.UI.Calendar.Utils.RECURRING_NONE) {
          c = d[a];
          if (!c.IsSelectable) {
            return false;
          }
        }
      }
    }
    return true;
  },
  IsRecurring: function (b, a) {
    var c;
    var e;
    if (this.Repeatable != Telerik.Web.UI.Calendar.Utils.RECURRING_NONE) {
      switch (this.Repeatable) {
        case Telerik.Web.UI.Calendar.Utils.RECURRING_DAYINMONTH:
          if (b[2] == this.get_date()[2]) {
            return this.Repeatable;
          }
          break;
        case Telerik.Web.UI.Calendar.Utils.RECURRING_TODAY:
          var g = new Date();
          if (
            b[0] == g.getFullYear() &&
            b[1] == g.getMonth() + 1 &&
            b[2] == g.getDate()
          ) {
            return this.Repeatable;
          }
          break;
        case Telerik.Web.UI.Calendar.Utils.RECURRING_DAYANDMONTH:
          if (b[1] == this.get_date()[1] && b[2] == this.get_date()[2]) {
            return this.Repeatable;
          }
          break;
        case Telerik.Web.UI.Calendar.Utils.RECURRING_WEEKANDMONTH:
          c = new Date();
          c.setFullYear(b[0], b[1] - 1, b[2]);
          e = new Date();
          e.setFullYear(
            this.get_date()[0],
            this.get_date()[1] - 1,
            this.get_date()[2]
          );
          if (c.getDay() == e.getDay() && b[1] == this.get_date()[1]) {
            return this.Repeatable;
          }
          break;
        case Telerik.Web.UI.Calendar.Utils.RECURRING_WEEK:
          c = new Date();
          c.setFullYear(b[0], b[1] - 1, b[2]);
          e = new Date();
          e.setFullYear(
            this.get_date()[0],
            this.get_date()[1] - 1,
            this.get_date()[2]
          );
          if (c.getDay() == e.getDay()) {
            return this.Repeatable;
          }
          break;
        case Telerik.Web.UI.Calendar.Utils.RECURRING_WEEKDAYWEEKNUMBERANDMONTH:
          c = new Date();
          c.setFullYear(b[0], b[1] - 1, b[2]);
          e = new Date();
          e.setFullYear(
            this.get_date()[0],
            this.get_date()[1] - 1,
            this.get_date()[2]
          );
          var d = this._getNumberOfWeekDayInMonth(c, a);
          var f = this._getNumberOfWeekDayInMonth(e, a);
          if (
            b[1] == this.get_date()[1] &&
            c.getDay() == e.getDay() &&
            d == f
          ) {
            return this.Repeatable;
          }
          break;
        default:
          break;
      }
    }
    return Telerik.Web.UI.Calendar.Utils.RECURRING_NONE;
  },
  _getNumberOfWeekDayInMonth: function (a, g) {
    var f = g.DateTimeFormatInfo.CalendarWeekRule;
    var c = g.RadCalendar._firstDayOfWeek;
    var h = g.Calendar.GetWeekOfYear(a, f, c);
    var d = new Date();
    d.setFullYear(a.getFullYear(), a.getMonth(), 1);
    var b = g.Calendar.GetDayOfWeek(a);
    while (b != g.Calendar.GetDayOfWeek(d)) {
      d.setDate(d.getDate() + 1);
    }
    var e = g.Calendar.GetWeekOfYear(d, f, c);
    return h - e;
  },
  get_date: function () {
    return this._date;
  },
  set_date: function (a) {
    if (this._date !== a) {
      this._date = a;
      this.raisePropertyChanged("date");
    }
  },
  get_isSelectable: function () {
    return this.IsSelectable;
  },
  get_isSelected: function () {
    return this.IsSelected;
  },
  get_isToday: function () {
    return this.IsToday;
  },
  get_isWeekend: function () {
    return this.IsWeekend;
  },
};
Telerik.Web.UI.Calendar.RenderDay.registerClass(
  "Telerik.Web.UI.Calendar.RenderDay",
  null,
  Sys.IDisposable
);

/* END Telerik.Web.UI.Calendar.RadCalendarScript.js */
/* START Telerik.Web.UI.Calendar.RadCalendarCommonScript.js */
Type.registerNamespace("Telerik.Web.UI");
Telerik.Web.UI.CalendarClickEventArgs = function (a, b) {
  Telerik.Web.UI.CalendarClickEventArgs.initializeBase(this);
  this._domElement = a;
  this._index = b;
};
Telerik.Web.UI.CalendarClickEventArgs.prototype = {
  get_domElement: function () {
    return this._domElement;
  },
  get_index: function () {
    return this._index;
  },
};
Telerik.Web.UI.CalendarClickEventArgs.registerClass(
  "Telerik.Web.UI.CalendarClickEventArgs",
  Sys.CancelEventArgs
);
Telerik.Web.UI.CalendarDayRenderEventArgs = function (a, b, c) {
  Telerik.Web.UI.CalendarDayRenderEventArgs.initializeBase(this);
  this._cell = a;
  this._date = b;
  this._renderDay = c;
};
Telerik.Web.UI.CalendarDayRenderEventArgs.prototype = {
  get_cell: function () {
    return this._cell;
  },
  get_date: function () {
    return this._date;
  },
  get_renderDay: function () {
    return this._renderDay;
  },
};
Telerik.Web.UI.CalendarDayRenderEventArgs.registerClass(
  "Telerik.Web.UI.CalendarDayRenderEventArgs",
  Sys.EventArgs
);
Telerik.Web.UI.CalendarDateClickEventArgs = function (a, b) {
  Telerik.Web.UI.CalendarDateClickEventArgs.initializeBase(this);
  this._domEvent = a;
  this._renderDay = b;
};
Telerik.Web.UI.CalendarDateClickEventArgs.prototype = {
  get_domEvent: function () {
    return this._domEvent;
  },
  get_renderDay: function () {
    return this._renderDay;
  },
};
Telerik.Web.UI.CalendarDateClickEventArgs.registerClass(
  "Telerik.Web.UI.CalendarDateClickEventArgs",
  Sys.CancelEventArgs
);
Telerik.Web.UI.CalendarDateSelectingEventArgs = function (a, b) {
  Telerik.Web.UI.CalendarDateSelectingEventArgs.initializeBase(this);
  this._isSelecting = a;
  this._renderDay = b;
};
Telerik.Web.UI.CalendarDateSelectingEventArgs.prototype = {
  get_isSelecting: function () {
    return this._isSelecting;
  },
  get_renderDay: function () {
    return this._renderDay;
  },
};
Telerik.Web.UI.CalendarDateSelectingEventArgs.registerClass(
  "Telerik.Web.UI.CalendarDateSelectingEventArgs",
  Sys.CancelEventArgs
);
Telerik.Web.UI.CalendarDateSelectedEventArgs = function (a) {
  Telerik.Web.UI.CalendarDateSelectedEventArgs.initializeBase(this);
  this._renderDay = a;
};
Telerik.Web.UI.CalendarDateSelectedEventArgs.prototype = {
  get_renderDay: function () {
    return this._renderDay;
  },
};
Telerik.Web.UI.CalendarDateSelectedEventArgs.registerClass(
  "Telerik.Web.UI.CalendarDateSelectedEventArgs",
  Sys.EventArgs
);
Telerik.Web.UI.CalendarViewChangingEventArgs = function (a) {
  Telerik.Web.UI.CalendarViewChangingEventArgs.initializeBase(this);
  this._step = a;
};
Telerik.Web.UI.CalendarViewChangingEventArgs.prototype = {
  get_step: function () {
    return this._step;
  },
};
Telerik.Web.UI.CalendarViewChangingEventArgs.registerClass(
  "Telerik.Web.UI.CalendarViewChangingEventArgs",
  Sys.CancelEventArgs
);
Telerik.Web.UI.CalendarViewChangedEventArgs = function (a) {
  Telerik.Web.UI.CalendarViewChangedEventArgs.initializeBase(this);
  this._step = a;
};
Telerik.Web.UI.CalendarViewChangedEventArgs.prototype = {
  get_step: function () {
    return this._step;
  },
};
Telerik.Web.UI.CalendarViewChangedEventArgs.registerClass(
  "Telerik.Web.UI.CalendarViewChangedEventArgs",
  Sys.EventArgs
);
Telerik.Web.UI.DatePickerPopupOpeningEventArgs = function (b, a) {
  Telerik.Web.UI.DatePickerPopupOpeningEventArgs.initializeBase(this);
  this._popupControl = b;
  this._cancelCalendarSynchronization = a;
};
Telerik.Web.UI.DatePickerPopupOpeningEventArgs.prototype = {
  get_popupControl: function () {
    return this._popupControl;
  },
  get_cancelCalendarSynchronization: function () {
    return this._cancelCalendarSynchronization;
  },
  set_cancelCalendarSynchronization: function (a) {
    if (this._cancelCalendarSynchronization !== a) {
      this._cancelCalendarSynchronization = a;
    }
  },
};
Telerik.Web.UI.DatePickerPopupOpeningEventArgs.registerClass(
  "Telerik.Web.UI.DatePickerPopupOpeningEventArgs",
  Sys.CancelEventArgs
);
Telerik.Web.UI.DatePickerPopupClosingEventArgs = function (a) {
  Telerik.Web.UI.DatePickerPopupClosingEventArgs.initializeBase(this);
  this._popupControl = a;
};
Telerik.Web.UI.DatePickerPopupClosingEventArgs.prototype = {
  get_popupControl: function () {
    return this._popupControl;
  },
};
Telerik.Web.UI.DatePickerPopupClosingEventArgs.registerClass(
  "Telerik.Web.UI.DatePickerPopupClosingEventArgs",
  Sys.CancelEventArgs
);
Telerik.Web.UI.TimeViewSelectedEventArgs = function (a, b) {
  Telerik.Web.UI.TimeViewSelectedEventArgs.initializeBase(this);
  this._newTime = a;
  this._oldTime = b;
};
Telerik.Web.UI.TimeViewSelectedEventArgs.prototype = {
  get_newTime: function () {
    return this._newTime;
  },
  get_oldTime: function () {
    return this._oldTime;
  },
};
Telerik.Web.UI.TimeViewSelectedEventArgs.registerClass(
  "Telerik.Web.UI.TimeViewSelectedEventArgs",
  Sys.EventArgs
);
Telerik.Web.UI.TimeViewSelectingEventArgs = function (a, b) {
  Telerik.Web.UI.TimeViewSelectingEventArgs.initializeBase(this);
  this._newTime = a;
  this._oldTime = b;
};
Telerik.Web.UI.TimeViewSelectingEventArgs.prototype = {
  get_newTime: function () {
    return this._newTime;
  },
  get_oldTime: function () {
    return this._oldTime;
  },
};
Telerik.Web.UI.TimeViewSelectingEventArgs.registerClass(
  "Telerik.Web.UI.TimeViewSelectingEventArgs",
  Sys.CancelEventArgs
);
Type.registerNamespace("Telerik.Web.UI.Calendar");
Telerik.Web.UI.Calendar.PresentationType = function () {};
Telerik.Web.UI.Calendar.PresentationType.prototype = {
  Interactive: 1,
  Preview: 2,
};
Telerik.Web.UI.Calendar.PresentationType.registerEnum(
  "Telerik.Web.UI.Calendar.PresentationType",
  false
);
Telerik.Web.UI.Calendar.FirstDayOfWeek = function () {};
Telerik.Web.UI.Calendar.FirstDayOfWeek.prototype = {
  Monday: 1,
  Tuesday: 2,
  Wednesday: 3,
  Thursday: 4,
  Friday: 5,
  Saturday: 6,
  Sunday: 7,
};
Telerik.Web.UI.Calendar.FirstDayOfWeek.registerEnum(
  "Telerik.Web.UI.Calendar.FirstDayOfWeek",
  false
);
Telerik.Web.UI.Calendar.Orientation = function () {};
Telerik.Web.UI.Calendar.Orientation.prototype = {
  RenderInRows: 1,
  RenderInColumns: 2,
};
Telerik.Web.UI.Calendar.Orientation.registerEnum(
  "Telerik.Web.UI.Calendar.Orientation",
  false
);
Telerik.Web.UI.Calendar.AutoPostBackControl = function () {};
Telerik.Web.UI.Calendar.AutoPostBackControl.prototype = {
  None: 0,
  Both: 1,
  TimeView: 2,
  Calendar: 3,
};
Telerik.Web.UI.Calendar.AutoPostBackControl.registerEnum(
  "Telerik.Web.UI.Calendar.AutoPostBackControl",
  false
);
Telerik.Web.UI.Calendar.RangeSelectionMode = function () {};
Telerik.Web.UI.Calendar.RangeSelectionMode.prototype = {
  None: 0,
  OnKeyHold: 1,
  ConsecutiveClicks: 2,
};
Telerik.Web.UI.Calendar.RangeSelectionMode.registerEnum(
  "Telerik.Web.UI.Calendar.RangeSelectionMode",
  false
);
if (typeof window.RadCalendarNamespace == "undefined") {
  window.RadCalendarNamespace = {};
}
Type.registerNamespace("Telerik.Web.UI.Calendar");
Telerik.Web.UI.CalendarAnimationType = function () {
  throw Error.invalidOperation();
};
Telerik.Web.UI.CalendarAnimationType.prototype = { Fade: 1, Slide: 2 };
Telerik.Web.UI.CalendarAnimationType.registerEnum(
  "Telerik.Web.UI.CalendarAnimationType"
);
Telerik.Web.UI.Calendar.Popup = function () {
  this.DomElement = null;
  this.ExcludeFromHiding = [];
  this.zIndex = null;
  this.ShowAnimationDuration = 300;
  this.ShowAnimationType = Telerik.Web.UI.CalendarAnimationType.Fade;
  this.HideAnimationDuration = 300;
  this.HideAnimationType = Telerik.Web.UI.CalendarAnimationType.Fade;
  this.EnableShadows = true;
  this._overlay = false;
  this._overlayIFrame = null;
};
Telerik.Web.UI.Calendar.Popup.zIndex = 5000;
Telerik.Web.UI.Calendar.Popup.cssClass = "RadCalendarPopup";
Telerik.Web.UI.Calendar.Popup.secondaryCssClass = "RadCalendarFastNavPopup";
Telerik.Web.UI.Calendar.Popup.shadowCssClass = "RadCalendarPopupShadows";
Telerik.Web.UI.Calendar.Popup.prototype = {
  CreateContainer: function (c) {
    var a = document.createElement("div");
    if (c == "table") {
      a.className = Telerik.Web.UI.Calendar.Popup.secondaryCssClass;
    } else {
      a.className = Telerik.Web.UI.Calendar.Popup.cssClass;
    }
    if (this.EnableShadows) {
      a.className += " " + Telerik.Web.UI.Calendar.Popup.shadowCssClass;
    }
    var b = window.RadHelperUtils.GetStyleObj(a);
    b.position = "absolute";
    b.display = "none";
    b.border = "0";
    if (this.zIndex) {
      b.zIndex = this.zIndex;
    } else {
      b.zIndex = Telerik.Web.UI.Calendar.Popup.zIndex;
      Telerik.Web.UI.Calendar.Popup.zIndex += 2;
    }
    if (
      !(
        this.Opener &&
        this.Opener._popupDirection &&
        !(
          this.Opener.MonthYearFastNav ||
          this.Opener.get_id().indexOf("_rghcMenu_") > 0
        )
      )
    ) {
      a.onclick = function (d) {
        if (!d) {
          d = window.event;
        }
        d.returnValue = false;
        d.cancelBubble = true;
        if (d.stopPropagation) {
          d.stopPropagation();
        }
        return false;
      };
    }
    if (this.EnableShadows && this._renderMode == 1) {
      a.innerHTML =
        '<div class="rcShadTR"></div><div class="rcShadBL"></div><div class="rcShadBR"></div>';
    }
    document.body.insertBefore(a, document.body.firstChild);
    return a;
  },
  RemoveScriptsOnOpera: function (b) {
    if (window.opera) {
      var d = b.getElementsByTagName("*");
      for (var a = 0; a < d.length; a++) {
        var c = d[a];
        if (c.tagName != null && c.tagName.toLowerCase() == "script") {
          c.parentNode.removeChild(c);
        }
      }
    }
  },
  Show: function (s, t, j, i) {
    if (this.IsVisible()) {
      this.Hide();
    }
    this.ExitFunc = "function" == typeof i ? i : null;
    var e = this.DomElement;
    if (!e) {
      e = this.CreateContainer(j.tagName.toLowerCase());
      this.DomElement = e;
    } else {
      $telerik.$(e).stop(true, true);
    }
    if (
      $telerik.isIE &&
      this.EnableShadows &&
      e.className.indexOf("rcIE") == -1
    ) {
      Sys.UI.DomElement.addCssClass(e, "rcIE");
    }
    if (j) {
      if (this.EnableShadows && this._renderMode == 1) {
        e.innerHTML =
          '<div class="rcShadTR"></div><div class="rcShadBL"></div><div class="rcShadBR"></div>';
      } else {
        e.innerHTML = "";
      }
      if (j.nextSibling) {
        this.Sibling = j.nextSibling;
      }
      this.Parent = j.parentNode;
      this.RemoveScriptsOnOpera(j);
      e.appendChild(j);
      if (j.style.display == "none") {
        j.style.display = "";
      }
    }
    var o = $telerik.getViewPortSize();
    var g = Telerik.Web.UI.Calendar.Utils.GetElementDimensions(e);
    if (this.EnableShadows && this._renderMode == 1) {
      var h = $telerik.getChildByClassName(e, "rcShadTR");
      var f = $telerik.getChildByClassName(e, "rcShadBL");
      if (h && f) {
        h.style.height =
          g.height -
          parseInt($telerik.getCurrentStyle(e, "paddingBottom"), 10) +
          "px";
        f.style.width =
          g.width -
          parseInt($telerik.getCurrentStyle(e, "paddingRight"), 10) +
          "px";
      }
    }
    var k;
    var m;
    if ((typeof s == "undefined" || typeof t == "undefined") && this.Opener) {
      var c = null;
      if (this.Opener.get_dateInput) {
        var d = this.Opener.get_dateInput();
        if (d && d.get_renderMode() != 1) {
          c = d.get_wrapperElement();
        }
      }
      if (!c) {
        c = this.Opener.get_textBox
          ? this.Opener.get_textBox()
          : this.Opener._latestInputID
          ? $get(this.Opener._latestInputID)
          : null;
      }
      var b;
      var a;
      if (c && c.offsetWidth > 0) {
        a = c;
      } else {
        if (j && j.id.indexOf("_timeView_wrapper") != -1) {
          b = this.Opener.get__timePopupImage();
        } else {
          b = this.Opener.get__popupImage();
        }
      }
      if (b && b.offsetWidth > 0) {
        a = b;
      } else {
        if (!c || c.offsetWidth == 0) {
          a = this.Opener.get_element();
        }
      }
      if (
        $telerik.isIE &&
        navigator.userAgent.search(/\bARM\b;|\bTouch\b/i) != -1
      ) {
        k = $telerik.getLocation(a);
        m = { x: k.x, y: k.y };
      } else {
        k = $telerik.$(a).offset();
        m = { x: k.left, y: k.top };
      }
      var l = parseInt(this.Opener.get_popupDirection(), 10);
      switch (l) {
        case Telerik.Web.RadDatePickerPopupDirection.BottomRight:
          s = m.x - (g.width - a.offsetWidth);
          t = m.y + a.offsetHeight;
          break;
        case Telerik.Web.RadDatePickerPopupDirection.TopLeft:
          s = m.x;
          t = m.y - g.height;
          break;
        case Telerik.Web.RadDatePickerPopupDirection.TopRight:
          s = m.x - (g.width - a.offsetWidth);
          t = m.y - g.height;
          break;
        default:
          s = m.x;
          t = m.y + a.offsetHeight;
          break;
      }
      if (this.Opener.get_enableScreenBoundaryDetection()) {
        if (s < 0 && !this.OverFlowsRight(o, g.width, m.x)) {
          s = m.x;
        }
        if (
          this.OverFlowsRight(o, g.width, m.x) &&
          m.x - (g.width - a.offsetWidth) >= 0
        ) {
          s = m.x - (g.width - a.offsetWidth);
        }
        if (t < 0 && !this.OverFlowsBottom(o, g.height, m.y + a.offsetHeight)) {
          t = m.y + a.offsetHeight;
        }
        if (
          this.OverFlowsBottom(o, g.height, m.y + a.offsetHeight) &&
          m.y - g.height >= 0
        ) {
          t = m.y - g.height;
        }
      }
    } else {
      if (
        (j.id.indexOf("FastNavPopup") != -1 ||
          j.id.indexOf("MonthYearTableViewID") != -1) &&
        this.EnableScreenBoundaryDetection
      ) {
        if (s + g.width > o.width && s - g.width >= 0) {
          s = s - g.width;
        }
      }
    }
    var p = window.RadHelperUtils.GetStyleObj(e);
    p.left = parseFloat(s) + "px";
    p.top = parseFloat(t) + "px";
    if (
      typeof this.ShowAnimationDuration == "number" &&
      this.ShowAnimationDuration > 0
    ) {
      var q = this;
      var n = function () {
        q.RemoveFilterStyle();
        q._raiseOpened();
      };
      this._animate(true, n);
    } else {
      p.display = "";
      this._raiseOpened();
    }
    if (this._overlay || (this.Opener && this.Opener._overlay)) {
      this._overlayIFrame = new Telerik.Web.UI.Overlay(e);
      this._overlayIFrame.initialize();
    }
    this.OnClickFunc = Telerik.Web.UI.Calendar.Utils.AttachMethod(
      this.OnClick,
      this
    );
    this.OnKeyPressFunc = Telerik.Web.UI.Calendar.Utils.AttachMethod(
      this.OnKeyPress,
      this
    );
    if ($telerik.isChrome) {
      this.OnKeyPressDown = Telerik.Web.UI.Calendar.Utils.AttachMethod(
        this.OnKeyPress,
        this
      );
    }
    var r = this;
    window.setTimeout(function () {
      window.RadHelperUtils.AttachEventListener(
        document,
        "click",
        r.OnClickFunc
      );
      window.RadHelperUtils.AttachEventListener(
        document,
        "keypress",
        r.OnKeyPressFunc
      );
      if ($telerik.isChrome) {
        window.RadHelperUtils.AttachEventListener(
          document,
          "keydown",
          r.OnKeyPressDown
        );
      }
    }, 300);
  },
  Hide: function (j) {
    var d = this.Opener;
    if (d) {
      var a;
      var e;
      var i = d.constructor.__typeName;
      var c = false;
      this._lastOpener = d;
      if (
        i == "Telerik.Web.UI.RadDateTimePicker" ||
        i == "Telerik.Web.UI.RadDatePicker"
      ) {
        c = true;
        if (d.get__TimePopup) {
          e = d.get__TimePopup();
          if (e && e.IsVisible()) {
            a = new Telerik.Web.UI.DatePickerPopupClosingEventArgs(
              d.get_timeView()
            );
          }
        }
        if (d.get_calendar && d.get_calendar() && d.get__popup) {
          e = d.get__popup();
          if (e && e.IsVisible()) {
            a = new Telerik.Web.UI.DatePickerPopupClosingEventArgs(d._calendar);
          }
        }
      }
      if (i == "Telerik.Web.UI.RadMonthYearPicker") {
        c = true;
        e = d.Popup;
        if (e && e.IsVisible()) {
          a = new Telerik.Web.UI.MonthYearPickerPopupClosingEventArgs(d);
        }
      }
      if (a) {
        d.raise_popupClosing(a);
        if (a.get_cancel()) {
          return false;
        }
      }
      if (c) {
        var k = d.get_element().parentNode;
        k.className = (k.className || "")
          .replace("rcCalPopupOpen", "")
          .replace("rcTimePopupOpen", "")
          .replace("rcMYPopupOpen", " ")
          .replace(/  /g, " ")
          .trim();
      }
      this.Opener = null;
    }
    var b = this.DomElement;
    var g = window.RadHelperUtils.GetStyleObj(b);
    if (b) {
      $telerik.$(b).stop(true, true);
      if (
        $telerik.isIE &&
        this.EnableShadows &&
        b.className.indexOf("rcIE") == -1
      ) {
        Sys.UI.DomElement.addCssClass(b, "rcIE");
      }
    }
    var h = this;
    var f = function () {
      if (b) {
        if (h.EnableShadows && h._renderMode == 1) {
          var n = $telerik.getChildByClassName(b, "rcShadTR");
          if (n) {
            b.removeChild(n);
          }
          var l = $telerik.getChildByClassName(b, "rcShadBL");
          if (l) {
            b.removeChild(l);
          }
          var m = $telerik.getChildByClassName(b, "rcShadBR");
          if (m) {
            b.removeChild(m);
          }
        }
        g.display = "none";
        g = null;
        if (b.childNodes.length != 0) {
          b.childNodes[0].style.display = "none";
        }
        var o = b.childNodes[0];
        if (o != null) {
          b.removeChild(o);
          if (h.Parent != null) {
            h.Parent.appendChild(o);
          } else {
            if (h.Sibling != null) {
              var p = h.Sibling.parentNode;
              if (p != null) {
                p.insertBefore(o, h.Sibling);
              }
            }
          }
          window.RadHelperUtils.GetStyleObj(o).display = "none";
        }
        if (h._overlayIFrame) {
          h._overlayIFrame.dispose();
          h._overlayIFrame = null;
        }
        if (h.DomElement) {
          h.DomElement.outerHTML = "";
          delete h.DomElement;
          h.DomElement = null;
        }
        h._raiseClosed();
      }
    };
    if (
      b &&
      typeof this.HideAnimationDuration == "number" &&
      this.HideAnimationDuration > 0
    ) {
      this._animate(false, f);
    } else {
      f();
    }
    if (this.OnClickFunc != null) {
      window.RadHelperUtils.DetachEventListener(
        document,
        "click",
        this.OnClickFunc
      );
      this.OnClickFunc = null;
    }
    if (this.OnKeyPressFunc != null) {
      window.RadHelperUtils.DetachEventListener(
        document,
        "keydown",
        this.OnKeyPressFunc
      );
      this.OnKeyPressFunc = null;
    }
    if (j && this.ExitFunc) {
      this.ExitFunc();
    }
    return true;
  },
  _raiseClosed: function () {
    var b = this._lastOpener;
    var a;
    var c;
    if (b) {
      var d = b.constructor.__typeName;
      if (d == "Telerik.Web.UI.RadMonthYearPicker") {
        c = b.Popup;
        if (!c || !c.IsVisible()) {
          a = new Telerik.Web.UI.MonthYearPickerPopupClosedEventArgs(b);
        }
      }
      if (a) {
        b.raise_popupOpened(a);
      }
      if (d == "Telerik.Web.UI.RadDateTimePicker") {
        c = this.DomElement;
        if (!c || !this.IsVisible()) {
          a = new Telerik.Web.UI.DateTimePickerPopupClosedEventArgs(b);
          if (this._isTimeView) {
            b._timeView.raise_popupClosed(a);
          } else {
            b._popupButton.focus();
          }
        }
      }
    }
    this._lastOpener = null;
  },
  _raiseOpened: function () {
    var b = this.Opener;
    var a;
    var c;
    if (b) {
      var d = b.constructor.__typeName;
      if (d == "Telerik.Web.UI.RadMonthYearPicker") {
        c = b.Popup;
        if (c && c.IsVisible()) {
          a = new Telerik.Web.UI.MonthYearPickerPopupOpenedEventArgs(b);
        }
      }
      if (a) {
        b.raise_popupOpened(a);
      }
      if (d == "Telerik.Web.UI.RadDateTimePicker") {
        c = this.DomElement;
        if (c && this.IsVisible()) {
          a = new Telerik.Web.UI.DateTimePickerPopupOpenedEventArgs(b);
          if (this._isTimeView) {
            b._timeView.raise_popupOpened(a);
          }
        }
      }
    }
  },
  _animate: function (b, a) {
    if (!this.DomElement) {
      return;
    }
    var c = Telerik.Web.UI.CalendarAnimationType;
    if (b) {
      switch (this.ShowAnimationType) {
        case c.Slide:
          $telerik.$(this.DomElement).slideDown(this.ShowAnimationDuration, a);
          return;
        default:
          $telerik.$(this.DomElement).fadeIn(this.ShowAnimationDuration, a);
          return;
      }
    } else {
      switch (this.HideAnimationType) {
        case c.Slide:
          $telerik.$(this.DomElement).slideUp(this.HideAnimationDuration, a);
          return;
        default:
          $telerik.$(this.DomElement).fadeOut(this.HideAnimationDuration, a);
          return;
      }
    }
  },
  RemoveFilterStyle: function () {
    if ($telerik.isIE && this.DomElement) {
      this.DomElement.style.removeAttribute("filter");
      if (this.EnableShadows) {
        Sys.UI.DomElement.removeCssClass(this.DomElement, "rcIE");
      }
    }
  },
  OverFlowsBottom: function (c, b, d) {
    var a = d + b;
    return a > c.height;
  },
  OverFlowsRight: function (c, a, d) {
    var b = d + a;
    return b > c.width;
  },
  IsVisible: function () {
    var a = this.DomElement;
    var b = window.RadHelperUtils.GetStyleObj(a);
    if (a) {
      return b.display != "none";
    }
    return false;
  },
  IsChildOf: function (a, b) {
    while (a.parentNode) {
      if (a.parentNode == b) {
        return true;
      }
      a = a.parentNode;
    }
    return false;
  },
  ShouldHide: function (a) {
    var c = a.target;
    if (c == null) {
      c = a.srcElement;
    }
    for (var b = 0; b < this.ExcludeFromHiding.length; b++) {
      if (this.ExcludeFromHiding[b] == c) {
        return false;
      }
      if (this.IsChildOf(c, this.ExcludeFromHiding[b])) {
        return false;
      }
    }
    return true;
  },
  OnKeyPress: function (a) {
    if (!a) {
      a = window.event;
    }
    if (a.keyCode == 27) {
      this.Hide();
    }
  },
  OnClick: function (a) {
    if (!a) {
      a = window.event;
    }
    if (this.ShouldHide(a)) {
      this.Hide();
    }
  },
};
Telerik.Web.UI.Calendar.Popup.registerClass("Telerik.Web.UI.Calendar.Popup");
if (typeof window.RadHelperUtils == "undefined") {
  window.RadHelperUtils = {
    IsDefined: function (a) {
      if (typeof a != "undefined" && a != null) {
        return true;
      }
      return false;
    },
    StringStartsWith: function (a, b) {
      if (typeof b != "string") {
        return false;
      }
      return 0 == a.indexOf(b);
    },
    AttachEventListener: function (b, d, c) {
      if (c == null) {
        return;
      }
      var a = window.RadHelperUtils.CompatibleEventName(d);
      if (typeof b.addEventListener != "undefined") {
        b.addEventListener(a, c, false);
      } else {
        if (b.attachEvent) {
          b.attachEvent(a, c);
        } else {
          b["on" + d] = c;
        }
      }
    },
    DetachEventListener: function (b, d, c) {
      var a = window.RadHelperUtils.CompatibleEventName(d);
      if (typeof b.removeEventListener != "undefined") {
        b.removeEventListener(a, c, false);
      } else {
        if (b.detachEvent) {
          b.detachEvent(a, c);
        } else {
          b["on" + d] = null;
        }
      }
    },
    CompatibleEventName: function (a) {
      a = a.toLowerCase();
      if (document.addEventListener) {
        if (window.RadHelperUtils.StringStartsWith(a, "on")) {
          return a.substr(2);
        } else {
          return a;
        }
      } else {
        if (
          document.attachEvent &&
          !window.RadHelperUtils.StringStartsWith(a, "on")
        ) {
          return "on" + a;
        } else {
          return a;
        }
      }
    },
    GetStyleObj: function (a) {
      if (!window.RadHelperUtils.IsDefined(a)) {
        return null;
      }
      if (a.style) {
        return a.style;
      } else {
        return a;
      }
    },
  };
}
Type.registerNamespace("Telerik.Web.UI.Calendar");
Telerik.Web.UI.Calendar.Utils = {
  COLUMN_HEADER: 1,
  VIEW_HEADER: 2,
  ROW_HEADER: 3,
  FIRST_DAY: 0,
  FIRST_FOUR_DAY_WEEK: 2,
  FIRST_FULL_WEEK: 1,
  DEFAULT: 7,
  FRIDAY: 5,
  MONDAY: 1,
  SATURDAY: 6,
  SUNDAY: 0,
  THURSDAY: 4,
  TUESDAY: 2,
  WEDNESDAY: 3,
  RENDERINROWS: 1,
  RENDERINCOLUMNS: 2,
  NONE: 4,
  RECURRING_DAYINMONTH: 1,
  RECURRING_DAYANDMONTH: 2,
  RECURRING_WEEK: 4,
  RECURRING_WEEKANDMONTH: 8,
  RECURRING_TODAY: 16,
  RECURRING_WEEKDAYWEEKNUMBERANDMONTH: 32,
  RECURRING_NONE: 64,
  AttachMethod: function (a, b) {
    return function () {
      return a.apply(b, arguments);
    };
  },
  GetDateFromId: function (c) {
    var a = c.split("_");
    if (a.length < 2) {
      return null;
    }
    var b = [
      parseInt(a[a.length - 3], 10),
      parseInt(a[a.length - 2], 10),
      parseInt(a[a.length - 1], 10),
    ];
    return b;
  },
  GetRenderDay: function (d, a) {
    var b = Telerik.Web.UI.Calendar.Utils.GetDateFromId(a);
    var c = d.RenderDays.Get(b);
    return c;
  },
  FindTarget: function (b, a) {
    var c;
    if (b && b.target) {
      c = b.target;
    } else {
      if (window.event && window.event.srcElement) {
        c = window.event.srcElement;
      }
    }
    if (!c) {
      return null;
    }
    if (
      c.tagName == null &&
      c.nodeType == 3 &&
      navigator.userAgent.match(/Safari/)
    ) {
      c = c.parentNode;
    }
    while (c != null && c.tagName.toLowerCase() != "body") {
      if (
        (c.tagName.toLowerCase() == "th" || c.tagName.toLowerCase() == "td") &&
        Telerik.Web.UI.Calendar.Utils.FindTableElement(c) != null &&
        Telerik.Web.UI.Calendar.Utils.FindTableElement(c).id.indexOf(a) != -1
      ) {
        break;
      }
      c = c.parentNode;
    }
    if (
      c.tagName == null ||
      (c.tagName.toLowerCase() != "td" && c.tagName.toLowerCase() != "th")
    ) {
      return null;
    }
    return c;
  },
  FindTableElement: function (a) {
    while (a != null && a.tagName.toLowerCase() != "table") {
      a = a.parentNode;
    }
    return a;
  },
  MergeStyles: function (a, b) {
    if (a.lastIndexOf(";", a.length) != a.length - 1) {
      a += ";";
    }
    var c = b.split(";");
    var e = a;
    for (var d = 0; d < c.length - 1; d++) {
      var f = c[d].split(":");
      if (a.indexOf(f[0]) == -1) {
        e += c[d] + ";";
      }
    }
    return e;
  },
  MergeClassName: function (d, a) {
    var e = d.split(" ");
    var f = a.split(" ");
    if (f.length == 1 && f[0] == "") {
      f = [];
    }
    for (var g = 0; g < e.length; g++) {
      if (e[g].length > 0) {
        var b = false;
        for (var c = 0; c < f.length; c++) {
          if (f[c] == e[g]) {
            b = true;
            break;
          }
        }
        if (!b) {
          f[f.length] = e[g];
        }
      }
    }
    return f.join(" ");
  },
  GetElementDimensions: function (c) {
    var d = c.style.left;
    var b = c.style.display;
    var e = c.style.position;
    c.style.left = "-6000px";
    c.style.display = "";
    c.style.position = "absolute";
    var a = $telerik.getBounds(c);
    c.style.left = d;
    c.style.display = b;
    c.style.position = e;
    return { width: a.width, height: a.height };
  },
};

/* END Telerik.Web.UI.Calendar.RadCalendarCommonScript.js */
if (typeof Sys !== "undefined") Sys.Application.notifyScriptLoaded();
(function () {
  function loadHandler() {
    var hf = window.__TsmHiddenField;
    if (!hf) return;
    if (!hf._RSM_init) {
      hf._RSM_init = true;
      hf.value = "";
    }
    hf.value +=
      ";;System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35:en-US:92dc34f5-462f-43bd-99ec-66234f705cd1:ea597d4b:b25378d2;Telerik.Web.UI, Version=2020.1.114.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en-US:40a36146-6362-49db-b4b5-57ab81f34dac:e330518b:16e4e7cd:f7645509:24ee1bba:33715776:88144a7a:1e771326:8e6f0d33:1f3a7489:ed16cbdc:f46195d3:b2e06756:92fe8ea0:fa31b949:4877f69a:c128760b:19620875:874f8ea2:490a9d4e:bd8f85e4:6a6d718d:2003d0b8:aa288e2d:258f1c72:c8618e41:1a73651d:333f8d94:58366029:4c8be21a:650fdad:ef9d9f4a:26c790aa:44e9d927:29e4ab07:59462f1:a51ee93e";
    Sys.Application.remove_load(loadHandler);
  }
  Sys.Application.add_load(loadHandler);
})();
